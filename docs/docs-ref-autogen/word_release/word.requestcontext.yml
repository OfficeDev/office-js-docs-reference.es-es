### YamlMime:UniversalReference
items:
  - uid: word_release.Word.RequestContext
    summary: '<span data-ttu-id="7b702-101">El objeto RequestContext facilita las solicitudes a la aplicación Word.</span><span class="sxs-lookup"><span data-stu-id="7b702-101">The RequestContext object facilitates requests to the Word application.</span></span> <span data-ttu-id="7b702-102">Dado que el complemento de Office y la aplicación Word se ejecutan en dos procesos diferentes, el contexto de la solicitud es necesario para obtener acceso al modelo de objetos de Word desde el complemento.</span><span class="sxs-lookup"><span data-stu-id="7b702-102">Since the Office add-in and the Word application run in two different processes, the request context is required to get access to the Word object model from the add-in.</span></span>'
    name: Word.RequestContext
    fullName: Word.RequestContext
    langs:
      - typeScript
    type: class
    extends:
      - office.OfficeExtension.ClientRequestContext
    package: word_release
    remarks: |-


      #### <a name="examples"></a><span data-ttu-id="7b702-103">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="7b702-103">Examples</span></span>

      ```javascript
      // The following example shows how the request context is used to load the text property on a paragraph collection.
      // Run a batch operation against the Word object model.
      Word.run(function (context) {

          // Create a proxy object for the paragraphs collection.
          var paragraphs = context.document.body.paragraphs;

          // Queue a commmand to load the text property for all of the paragraphs.
          context.load(paragraphs, 'text');

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          return context.sync().then(function () {

              // Queue a a set of commands to get the HTML of the first paragraph.
              var html = paragraphs.items[0].getHtml();

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log('Paragraph HTML: ' + html.value);
              });
          });
      })
      .catch(function (error) {
          console.log('Error: ' + JSON.stringify(error));
          if (error instanceof OfficeExtension.Error) {
              console.log('Debug info: ' + JSON.stringify(error.debugInfo));
          }
      });
      // Note: You must call load() after adding tracked objects.    
      ```
      ```javascript
      // The following example shows the sync method used twice: 
      //   1) load the content controls collection with the text property for each content control, and
      //   2) clearing the contents of the first content control in the collection.
      // Run a batch operation against the Word object model.
      Word.run(function (context) {

          // Create a proxy object for the content controls collection.
          var contentControls = context.document.contentControls;

          // Queue a command to load the content controls collection.
          contentControls.load('text');

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          return context.sync().then(function () {

              if (contentControls.items.length === 0) {
                  console.log("There isn't a content control in this document.");
              } else {

                  // Queue a command to clear the contents of the first content control.
                  contentControls.items[0].clear();
                  // Synchronize the document state by executing the queued commands,
                  // and return a promise to indicate task completion.
                  return context.sync().then(function () {
                      console.log('Content control cleared of contents.');
                  });
              }

          });
      })
      .catch(function (error) {
          console.log('Error: ' + JSON.stringify(error));
          if (error instanceof OfficeExtension.Error) {
              console.log('Debug info: ' + JSON.stringify(error.debugInfo));
          }
      });
      ```
    children:
      - word_release.Word.RequestContext.(constructor)
      - word_release.Word.RequestContext.application
      - word_release.Word.RequestContext.document
  - uid: word_release.Word.RequestContext.(constructor)
    summary: <span data-ttu-id="7b702-104">Construye una nueva instancia de la `RequestContext` clase.</span><span class="sxs-lookup"><span data-stu-id="7b702-104">Constructs a new instance of the `RequestContext` class</span></span>
    name: (constructor)(url)
    fullName: (constructor)(url)
    langs:
      - typeScript
    type: constructor
    syntax:
      content: 'constructor(url?: string);'
      parameters:
        - id: url
          description: ''
          type:
            - string
  - uid: word_release.Word.RequestContext.application
    name: application
    fullName: application
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly application: Application;'
      return:
        type:
          - Application
  - uid: word_release.Word.RequestContext.document
    name: document
    fullName: document
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly document: Document;'
      return:
        type:
          - Document