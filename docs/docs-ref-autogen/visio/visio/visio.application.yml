### YamlMime:UniversalReference
items:
  - uid: 'visio!Visio.Application:class'
    summary: |-
      Representa la aplicación.

      \[[Conjunto de API: 1,1](/office/dev/add-ins/reference/overview/visio-javascript-reference-overview)\]
    name: Visio.Application
    fullName: Visio.Application
    langs:
      - typeScript
    type: class
    extends:
      - 'office!OfficeExtension.ClientObject:class'
    package: visio!
    children:
      - 'visio!Visio.Application#context:member'
      - 'visio!Visio.Application#load:member(1)'
      - 'visio!Visio.Application#load:member(2)'
      - 'visio!Visio.Application#load:member(3)'
      - 'visio!Visio.Application#set:member(1)'
      - 'visio!Visio.Application#set:member(2)'
      - 'visio!Visio.Application#showBorders:member'
      - 'visio!Visio.Application#showToolbar:member(1)'
      - 'visio!Visio.Application#showToolbar:member(2)'
      - 'visio!Visio.Application#showToolbars:member'
      - 'visio!Visio.Application#toJSON:member(1)'
  - uid: 'visio!Visio.Application#context:member'
    summary: Contexto de la solicitud asociado al objeto. Esto conecta el proceso del complemento con el proceso de la aplicación host de Office.
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'visio!Visio.RequestContext:class'
  - uid: 'visio!Visio.Application#load:member(1)'
    summary: 'Pone en cola un comando para cargar las propiedades especificadas del objeto. Antes de leer las propiedades, debe llamar a "context.sync()".'
    remarks: |-
      Además de esta firma, este método tiene las siguientes firmas:

      `load(option?: string | string[]): Visio.Application`-Donde opción es una cadena delimitada por comas o una matriz de cadenas que especifican las propiedades que se van a cargar.

      `load(option?: { select?: string; expand?: string; }): Visio.Application`-Where opción. Select es una cadena delimitada por comas que especifica las propiedades que se van a cargar y Options. Expand es una cadena delimitada por comas que especifica las propiedades de navegación que se deben cargar.

      `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Visio.Application`-Solo disponible en tipos de colección. Es similar a la firma anterior. Option. Top especifica el número máximo de elementos de colección que se pueden incluir en el resultado. La opción. SKIP especifica el número de elementos que se deben omitir y que no se incluyen en el resultado. Si se especifica Option. Top, el conjunto de resultados se iniciará después de omitir el número especificado de elementos.
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: Visio.Interfaces.ApplicationLoadOptions): Visio.Application;'
      return:
        type:
          - 'visio!Visio.Application:class'
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - 'visio!Visio.Interfaces.ApplicationLoadOptions:interface'
  - uid: 'visio!Visio.Application#load:member(2)'
    summary: Pone en cola un comando para cargar las propiedades especificadas del objeto. Debe llamar a `context.sync()` antes de leer las propiedades.
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Visio.Application;'
      return:
        type:
          - 'visio!Visio.Application:class'
        description: ''
      parameters:
        - id: propertyNames
          description: Una cadena delimitada por comas o una matriz de cadenas que especifican las propiedades que se van a cargar.
          type:
            - 'string | string[]'
  - uid: 'visio!Visio.Application#load:member(3)'
    summary: Pone en cola un comando para cargar las propiedades especificadas del objeto. Debe llamar a `context.sync()` antes de leer las propiedades.
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): Visio.Application;'
      return:
        type:
          - 'visio!Visio.Application:class'
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: Donde propertyNamesAndPaths. Select es una cadena delimitada por comas que especifica las propiedades que se van a cargar y propertyNamesAndPaths. Expand es una cadena delimitada por comas que especifica las propiedades de navegación que se deben cargar.
          type:
            - '{ select?: string; expand?: string; }'
  - uid: 'visio!Visio.Application#set:member(1)'
    summary: Establece varias propiedades de un objeto al mismo tiempo. Puede pasar un objeto sin formato con las propiedades apropiadas o cualquier otro objeto de la API del mismo tipo.
    remarks: |-
      Este método tiene la siguiente firma adicional:

      `set(properties: Visio.Application): void`
    name: 'set(properties, options)'
    fullName: 'set(properties, options)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Interfaces.ApplicationUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: Objeto de JavaScript con propiedades que se estructuran de forma isomórfico a las propiedades del objeto en el que se llama al método.
          type:
            - 'visio!Visio.Interfaces.ApplicationUpdateData:interface'
        - id: options
          description: Proporciona una opción para suprimir errores si el objeto Properties intenta establecer propiedades de solo lectura.
          type:
            - 'office!OfficeExtension.UpdateOptions:interface'
  - uid: 'visio!Visio.Application#set:member(2)'
    summary: 'Establece varias propiedades en el objeto al mismo tiempo, basándose en un objeto cargado existente.'
    name: set(properties)
    fullName: set(properties)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Visio.Application): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - 'visio!Visio.Application:class'
  - uid: 'visio!Visio.Application#showBorders:member'
    summary: |-
      Mostrar u ocultar los bordes de la aplicación iFrame.

      \[[Conjunto de API: 1,1](/office/dev/add-ins/reference/overview/visio-javascript-reference-overview)\]
    name: showBorders
    fullName: showBorders
    langs:
      - typeScript
    type: property
    syntax:
      content: 'showBorders: boolean;'
      return:
        type:
          - boolean
        description: |-


          #### <a name="examples"></a>Ejemplos

          ```javascript
          Visio.run(session, function (ctx) {
              var application = ctx.document.application;
              application.showToolbars = false;
              application.showBorders = false;
              return ctx.sync();
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'visio!Visio.Application#showToolbar:member(1)'
    summary: |-
      Establece la visibilidad de una barra de herramientas específica de la aplicación.

      \[[Conjunto de API: 1,1](/office/dev/add-ins/reference/overview/visio-javascript-reference-overview)\]
    name: 'showToolbar(id, show)'
    fullName: 'showToolbar(id, show)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'showToolbar(id: Visio.ToolBarType, show: boolean): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: id
          description: El tipo de la barra de herramientas
          type:
            - 'visio!Visio.ToolBarType:enum'
        - id: show
          description: Si la barra de herramientas está visibile o no.
          type:
            - boolean
  - uid: 'visio!Visio.Application#showToolbar:member(2)'
    summary: |-
      Establece la visibilidad de una barra de herramientas específica de la aplicación.

      \[[Conjunto de API: 1,1](/office/dev/add-ins/reference/overview/visio-javascript-reference-overview)\]
    name: 'showToolbar(idString, show)'
    fullName: 'showToolbar(idString, show)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'showToolbar(idString: "CommandBar" | "PageNavigationBar" | "StatusBar", show: boolean): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: idString
          description: El tipo de la barra de herramientas
          type:
            - '"CommandBar" | "PageNavigationBar" | "StatusBar"'
        - id: show
          description: Si la barra de herramientas está visibile o no.
          type:
            - boolean
  - uid: 'visio!Visio.Application#showToolbars:member'
    summary: |-
      Mostrar u ocultar las barras de herramientas estándar.

      \[[Conjunto de API: 1,1](/office/dev/add-ins/reference/overview/visio-javascript-reference-overview)\]
    name: showToolbars
    fullName: showToolbars
    langs:
      - typeScript
    type: property
    syntax:
      content: 'showToolbars: boolean;'
      return:
        type:
          - boolean
  - uid: 'visio!Visio.Application#toJSON:member(1)'
    summary: 'Reemplaza el `toJSON()` método JavaScript para proporcionar un resultado más útil cuando se pasa un objeto API a`JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, a su vez, llama al `toJSON` método del objeto que se le pasa.) Mientras que el objeto Visio. Application original es un objeto API, el `toJSON` método devuelve un objeto JavaScript sin formato (escrito como`Visio.Interfaces.ApplicationData`<!-- -->) que contiene copias rasas de las propiedades secundarias cargadas del objeto original.'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Visio.Interfaces.ApplicationData;'
      return:
        type:
          - 'visio!Visio.Interfaces.ApplicationData:interface'
        description: ''
references:
  - uid: 'office!OfficeExtension.ClientObject:class'
    name: OfficeExtension.ClientObject
  - uid: 'visio!Visio.RequestContext:class'
    name: RequestContext
  - uid: 'visio!Visio.Application:class'
    name: Visio.Application
  - uid: 'visio!Visio.Interfaces.ApplicationLoadOptions:interface'
    name: Visio.Interfaces.ApplicationLoadOptions
  - uid: 'visio!Visio.Interfaces.ApplicationUpdateData:interface'
    name: Interfaces.ApplicationUpdateData
  - uid: 'office!OfficeExtension.UpdateOptions:interface'
    name: OfficeExtension.UpdateOptions
  - uid: 'visio!Visio.ToolBarType:enum'
    name: Visio.ToolBarType
  - uid: 'visio!Visio.Interfaces.ApplicationData:interface'
    name: Visio.Interfaces.ApplicationData