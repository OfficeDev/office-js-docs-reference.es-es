### YamlMime:UniversalReference
items:
  - uid: 'visio!Visio.CommentCollection:class'
    summary: |-
      Representa el elemento CommentCollection de una forma determinada.

      \[[Conjunto de API: 1,1](/office/dev/add-ins/reference/overview/visio-javascript-reference-overview)\]
    name: Visio.CommentCollection
    fullName: Visio.CommentCollection
    langs:
      - typeScript
    type: class
    extends:
      - 'office!OfficeExtension.ClientObject:class'
    package: visio!
    children:
      - 'visio!Visio.CommentCollection#context:member'
      - 'visio!Visio.CommentCollection#getCount:member(1)'
      - 'visio!Visio.CommentCollection#getItem:member(1)'
      - 'visio!Visio.CommentCollection#items:member'
      - 'visio!Visio.CommentCollection#load:member(1)'
      - 'visio!Visio.CommentCollection#load:member(2)'
      - 'visio!Visio.CommentCollection#load:member(3)'
      - 'visio!Visio.CommentCollection#toJSON:member(1)'
  - uid: 'visio!Visio.CommentCollection#context:member'
    summary: Contexto de la solicitud asociado al objeto. Esto conecta el proceso del complemento con el proceso de la aplicación host de Office.
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'visio!Visio.RequestContext:class'
  - uid: 'visio!Visio.CommentCollection#getCount:member(1)'
    summary: |-
      Obtiene el número de comentarios.

      \[[Conjunto de API: 1,1](/office/dev/add-ins/reference/overview/visio-javascript-reference-overview)\]
    name: getCount()
    fullName: getCount()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCount(): OfficeExtension.ClientResult<number>;'
      return:
        type:
          - 'visio!Visio.CommentCollection#getCount~0:complex'
        description: ''
  - uid: 'visio!Visio.CommentCollection#getItem:member(1)'
    summary: |-
      Obtiene el comentario por medio de su nombre.

      \[[Conjunto de API: 1,1](/office/dev/add-ins/reference/overview/visio-javascript-reference-overview)\]
    name: getItem(key)
    fullName: getItem(key)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItem(key: string): Visio.Comment;'
      return:
        type:
          - 'visio!Visio.Comment:class'
        description: ''
      parameters:
        - id: key
          description: '"Key" corresponde al nombre del comentario que se va a recuperar.'
          type:
            - string
  - uid: 'visio!Visio.CommentCollection#items:member'
    summary: Obtiene los elementos secundarios cargados en esta colección.
    name: items
    fullName: items
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly items: Visio.Comment[];'
      return:
        type:
          - 'visio!Visio.CommentCollection#items~0:complex'
  - uid: 'visio!Visio.CommentCollection#load:member(1)'
    summary: 'Pone en cola un comando para cargar las propiedades especificadas del objeto. Antes de leer las propiedades, debe llamar a "context.sync()".'
    remarks: |-
      Además de esta firma, este método tiene las siguientes firmas:

      `load(option?: string | string[]): Visio.CommentCollection`-Donde opción es una cadena delimitada por comas o una matriz de cadenas que especifican las propiedades que se van a cargar.

      `load(option?: { select?: string; expand?: string; }): Visio.CommentCollection`-Where opción. Select es una cadena delimitada por comas que especifica las propiedades que se van a cargar y Options. Expand es una cadena delimitada por comas que especifica las propiedades de navegación que se deben cargar.

      `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Visio.CommentCollection`-Solo disponible en tipos de colección. Es similar a la firma anterior. Option. Top especifica el número máximo de elementos de colección que se pueden incluir en el resultado. La opción. SKIP especifica el número de elementos que se deben omitir y que no se incluyen en el resultado. Si se especifica Option. Top, el conjunto de resultados se iniciará después de omitir el número especificado de elementos.

      #### <a name="examples"></a>Ejemplos

      ```javascript
      Visio.run(session, function (ctx) {
          var activePage = ctx.document.getActivePage();
          var shapeName = "Position Belt.41";
          var shape = activePage.shapes.getItem(shapeName);
          var shapeComments= shape.comments;
          shapeComments.load(["author", "text"]);
          return ctx.sync().then(function () {
              for(var i = 0; i < shapeComments.items.length; i++)
              {
                  var comment = shapeComments.items[i];
                  console.log("comment Author: " + comment.author);
                  console.log("Comment Text: " + comment.text);
                  console.log("Date " + comment.date);
              }
          });
      }).catch(function(error) {
          console.log("Error: " + error);
          if (error instanceof OfficeExtension.Error) {
              console.log("Debug info: " + JSON.stringify(error.debugInfo));
          }
      });
      ```
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: Visio.Interfaces.CommentCollectionLoadOptions & Visio.Interfaces.CollectionLoadOptions): Visio.CommentCollection;'
      return:
        type:
          - 'visio!Visio.CommentCollection:class'
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - 'visio!Visio.CommentCollection#load~0:complex'
  - uid: 'visio!Visio.CommentCollection#load:member(2)'
    summary: Pone en cola un comando para cargar las propiedades especificadas del objeto. Debe llamar a `context.sync()` antes de leer las propiedades.
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Visio.CommentCollection;'
      return:
        type:
          - 'visio!Visio.CommentCollection:class'
        description: ''
      parameters:
        - id: propertyNames
          description: Una cadena delimitada por comas o una matriz de cadenas que especifican las propiedades que se van a cargar.
          type:
            - 'string | string[]'
  - uid: 'visio!Visio.CommentCollection#load:member(3)'
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: OfficeExtension.LoadOption): Visio.CommentCollection;'
      return:
        type:
          - 'visio!Visio.CommentCollection:class'
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - 'office!OfficeExtension.LoadOption:interface'
  - uid: 'visio!Visio.CommentCollection#toJSON:member(1)'
    summary: 'Reemplaza el `toJSON()` método JavaScript para proporcionar un resultado más útil cuando se pasa un objeto API a`JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, a su vez, llama al `toJSON` método del objeto que se le pasa.) Mientras que el `Visio.CommentCollection` objeto original es un objeto API, el `toJSON` método devuelve un objeto JavaScript sin formato (escrito como`Visio.Interfaces.CommentCollectionData`<!-- -->) que contiene una matriz "items" con copias rasas de las propiedades cargadas de los elementos de la colección.'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Visio.Interfaces.CommentCollectionData;'
      return:
        type:
          - 'visio!Visio.Interfaces.CommentCollectionData:interface'
        description: ''
references:
  - uid: 'office!OfficeExtension.ClientObject:class'
    name: OfficeExtension.ClientObject
  - uid: 'visio!Visio.RequestContext:class'
    name: RequestContext
  - uid: 'visio!Visio.CommentCollection#getCount~0:complex'
    name: OfficeExtension.ClientResult<number>
    fullName: OfficeExtension.ClientResult<number>
    spec.typeScript:
      - uid: 'office!OfficeExtension.ClientResult:class'
        name: OfficeExtension.ClientResult
        fullName: OfficeExtension.ClientResult
      - name: <number>
        fullName: <number>
  - uid: 'visio!Visio.Comment:class'
    name: Visio.Comment
  - uid: 'visio!Visio.CommentCollection#items~0:complex'
    name: 'Visio.Comment[]'
    fullName: 'Visio.Comment[]'
    spec.typeScript:
      - uid: 'visio!Visio.Comment:class'
        name: Visio.Comment
        fullName: Visio.Comment
      - name: '[]'
        fullName: '[]'
  - uid: 'visio!Visio.CommentCollection:class'
    name: Visio.CommentCollection
  - uid: 'visio!Visio.CommentCollection#load~0:complex'
    name: Visio.Interfaces.CommentCollectionLoadOptions & Visio.Interfaces.CollectionLoadOptions
    fullName: Visio.Interfaces.CommentCollectionLoadOptions & Visio.Interfaces.CollectionLoadOptions
    spec.typeScript:
      - uid: 'visio!Visio.Interfaces.CommentCollectionLoadOptions:interface'
        name: Visio.Interfaces.CommentCollectionLoadOptions
        fullName: Visio.Interfaces.CommentCollectionLoadOptions
      - name: ' & '
        fullName: ' & '
      - uid: 'visio!Visio.Interfaces.CollectionLoadOptions:interface'
        name: Visio.Interfaces.CollectionLoadOptions
        fullName: Visio.Interfaces.CollectionLoadOptions
  - uid: 'office!OfficeExtension.LoadOption:interface'
    name: OfficeExtension.LoadOption
  - uid: 'visio!Visio.Interfaces.CommentCollectionData:interface'
    name: Visio.Interfaces.CommentCollectionData