### YamlMime:TSType
name: Visio.Comment
uid: visio!Visio.Comment:class
package: visio!
fullName: Visio.Comment
summary: >-
  Representa el comentario.


  \[[Conjunto de API: 1,1](/office/dev/add-ins/reference/overview/visio-javascript-reference-overview)\]
remarks: ''
isPreview: false
isDeprecated: false
type: class
properties:
- name: author
  uid: visio!Visio.Comment#author:member
  package: visio!
  fullName: author
  summary: >-
    Cadena que especifica el nombre del autor del comentario.


    \[[Conjunto de API: 1,1](/office/dev/add-ins/reference/overview/visio-javascript-reference-overview)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'author: string;'
    return:
      type: string
- name: context
  uid: visio!Visio.Comment#context:member
  package: visio!
  fullName: context
  summary: Contexto de la solicitud asociado al objeto. Esto conecta el proceso del complemento con el proceso de la aplicación host de Office.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'context: RequestContext;'
    return:
      type: <xref uid="visio!Visio.RequestContext:class" />
- name: date
  uid: visio!Visio.Comment#date:member
  package: visio!
  fullName: date
  summary: >-
    Cadena que especifica la fecha de creación del comentario.


    \[[Conjunto de API: 1,1](/office/dev/add-ins/reference/overview/visio-javascript-reference-overview)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'date: string;'
    return:
      type: string
- name: text
  uid: visio!Visio.Comment#text:member
  package: visio!
  fullName: text
  summary: >-
    Cadena que contiene el texto del comentario.


    \[[Conjunto de API: 1,1](/office/dev/add-ins/reference/overview/visio-javascript-reference-overview)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'text: string;'
    return:
      type: string
methods:
- name: load(option)
  uid: visio!Visio.Comment#load:member(1)
  package: visio!
  fullName: load(option)
  summary: Pone en cola un comando para cargar las propiedades especificadas del objeto. Antes de leer las propiedades, debe llamar a "context.sync()".
  remarks: >-
    Además de esta firma, este método tiene las siguientes firmas:


    `load(option?: string | string[]): Visio.Comment` -Donde opción es una cadena delimitada por comas o una matriz de cadenas que especifican las propiedades que se van a cargar.


    `load(option?: { select?: string; expand?: string; }): Visio.Comment` -Where opción. Select es una cadena delimitada por comas que especifica las propiedades que se van a cargar y Options. Expand es una cadena delimitada por comas que especifica las propiedades de navegación que se deben cargar.


    `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Visio.Comment` -Solo disponible en tipos de colección. Es similar a la firma anterior. Option. Top especifica el número máximo de elementos de colección que se pueden incluir en el resultado. La opción. SKIP especifica el número de elementos que se deben omitir y que no se incluyen en el resultado. Si se especifica Option. Top, el conjunto de resultados se iniciará después de omitir el número especificado de elementos.


    #### <a name="examples"></a>Ejemplos


    ```javascript

    Visio.run(session, function (ctx) {
        var activePage = ctx.document.getActivePage();
        var shapeName = "Position Belt.41";
        var shape = activePage.shapes.getItem(shapeName);
        var shapeComments= shape.comments;
        shapeComments.load(["author", "text"]);
        return ctx.sync().then(function () {
            for(var i = 0; i < shapeComments.items.length; i++)
            {
                var comment = shapeComments.items[i];
                console.log("comment Author: " + comment.author);
                console.log("Comment Text: " + comment.text);
                console.log("Date " + comment.date);
            }
        });
    }).catch(function(error) {
        console.log("Error: " + error);
        if (error instanceof OfficeExtension.Error) {
            console.log("Debug info: " + JSON.stringify(error.debugInfo));
        }
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(option?: Visio.Interfaces.CommentLoadOptions): Visio.Comment;'
    parameters:
    - id: option
      description: ''
      type: <xref uid="visio!Visio.Interfaces.CommentLoadOptions:interface" />
    return:
      type: <xref uid="visio!Visio.Comment:class" />
      description: ''
- name: load(propertyNames)
  uid: visio!Visio.Comment#load:member(2)
  package: visio!
  fullName: load(propertyNames)
  summary: Pone en cola un comando para cargar las propiedades especificadas del objeto. Debe llamar a `context.sync()` antes de leer las propiedades.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(propertyNames?: string | string[]): Visio.Comment;'
    parameters:
    - id: propertyNames
      description: Una cadena delimitada por comas o una matriz de cadenas que especifican las propiedades que se van a cargar.
      type: string | string[]
    return:
      type: <xref uid="visio!Visio.Comment:class" />
      description: ''
- name: load(propertyNamesAndPaths)
  uid: visio!Visio.Comment#load:member(3)
  package: visio!
  fullName: load(propertyNamesAndPaths)
  summary: Pone en cola un comando para cargar las propiedades especificadas del objeto. Debe llamar a `context.sync()` antes de leer las propiedades.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): Visio.Comment;'
    parameters:
    - id: propertyNamesAndPaths
      description: Donde propertyNamesAndPaths. Select es una cadena delimitada por comas que especifica las propiedades que se van a cargar y propertyNamesAndPaths. Expand es una cadena delimitada por comas que especifica las propiedades de navegación que se deben cargar.
      type: '{ select?: string; expand?: string; }'
    return:
      type: <xref uid="visio!Visio.Comment:class" />
      description: ''
- name: set(properties, options)
  uid: visio!Visio.Comment#set:member(1)
  package: visio!
  fullName: set(properties, options)
  summary: Establece varias propiedades de un objeto al mismo tiempo. Puede pasar un objeto sin formato con las propiedades apropiadas o cualquier otro objeto de la API del mismo tipo.
  remarks: >-
    Este método tiene la siguiente firma adicional:


    `set(properties: Visio.Comment): void`
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'set(properties: Interfaces.CommentUpdateData, options?: OfficeExtension.UpdateOptions): void;'
    parameters:
    - id: properties
      description: Objeto de JavaScript con propiedades que se estructuran de forma isomórfico a las propiedades del objeto en el que se llama al método.
      type: <xref uid="visio!Visio.Interfaces.CommentUpdateData:interface" />
    - id: options
      description: Proporciona una opción para suprimir errores si el objeto Properties intenta establecer propiedades de solo lectura.
      type: <xref uid="office!OfficeExtension.UpdateOptions:interface" />
    return:
      type: void
      description: ''
- name: set(properties)
  uid: visio!Visio.Comment#set:member(2)
  package: visio!
  fullName: set(properties)
  summary: Establece varias propiedades en el objeto al mismo tiempo, basándose en un objeto cargado existente.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'set(properties: Visio.Comment): void;'
    parameters:
    - id: properties
      description: ''
      type: <xref uid="visio!Visio.Comment:class" />
    return:
      type: void
      description: ''
- name: toJSON()
  uid: visio!Visio.Comment#toJSON:member(1)
  package: visio!
  fullName: toJSON()
  summary: Reemplaza el `toJSON()` método JavaScript para proporcionar un resultado más útil cuando se pasa un objeto API a `JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, a su vez, llama al `toJSON` método del objeto que se le pasa.) Mientras que el objeto Visio. Comment original es un objeto API, el `toJSON` método devuelve un objeto JavaScript sin formato (escrito como `Visio.Interfaces.CommentData`<!-- -->) que contiene copias rasas de las propiedades secundarias cargadas del objeto original.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'toJSON(): Visio.Interfaces.CommentData;'
    return:
      type: <xref uid="visio!Visio.Interfaces.CommentData:interface" />
      description: ''
extends: <xref uid="office!OfficeExtension.ClientObject:class" />
metadata:
  ms.openlocfilehash: 1f09da2904425924d8504372155914783a4142fd
  ms.sourcegitcommit: 3bab97ab3b91da7cca497f6fc895408a76bd8b46
  ms.translationtype: MT
  ms.contentlocale: es-ES
  ms.lasthandoff: 11/18/2020
  ms.locfileid: "49142788"
