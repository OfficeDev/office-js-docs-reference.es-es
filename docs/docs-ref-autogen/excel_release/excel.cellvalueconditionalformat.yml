### YamlMime:UniversalReference
items:
  - uid: excel_release.Excel.CellValueConditionalFormat
    summary: |-
      <span data-ttu-id="c93cc-101">Representa un formato condicional de valor de celda.</span><span class="sxs-lookup"><span data-stu-id="c93cc-101">Represents a cell value conditional format.</span></span>

      <span data-ttu-id="c93cc-102">\[[Conjunto de API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="c93cc-102">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: Excel.CellValueConditionalFormat
    fullName: Excel.CellValueConditionalFormat
    langs:
      - typeScript
    type: class
    extends:
      - office.OfficeExtension.ClientObject
    package: excel_release
    children:
      - excel_release.Excel.CellValueConditionalFormat.context
      - excel_release.Excel.CellValueConditionalFormat.format
      - excel_release.Excel.CellValueConditionalFormat.load
      - excel_release.Excel.CellValueConditionalFormat.load_1
      - excel_release.Excel.CellValueConditionalFormat.load_2
      - excel_release.Excel.CellValueConditionalFormat.rule
      - excel_release.Excel.CellValueConditionalFormat.set
      - excel_release.Excel.CellValueConditionalFormat.set_1
      - excel_release.Excel.CellValueConditionalFormat.toJSON
  - uid: excel_release.Excel.CellValueConditionalFormat.context
    summary: <span data-ttu-id="c93cc-103">Contexto de la solicitud asociado al objeto.</span><span class="sxs-lookup"><span data-stu-id="c93cc-103">The request context associated with the object.</span></span> <span data-ttu-id="c93cc-104">Esto conecta el proceso del complemento con el proceso de la aplicación host de Office.</span><span class="sxs-lookup"><span data-stu-id="c93cc-104">This connects the add-in's process to the Office host application's process.</span></span>
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - RequestContext
  - uid: excel_release.Excel.CellValueConditionalFormat.format
    summary: |-
      <span data-ttu-id="c93cc-105">Devuelve un objeto Format, encapsulando la fuente de los formatos condicionales, el relleno, los bordes y otras propiedades.</span><span class="sxs-lookup"><span data-stu-id="c93cc-105">Returns a format object, encapsulating the conditional formats font, fill, borders, and other properties.</span></span>

      <span data-ttu-id="c93cc-106">\[[Conjunto de API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="c93cc-106">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: format
    fullName: format
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly format: Excel.ConditionalRangeFormat;'
      return:
        type:
          - excel.Excel.ConditionalRangeFormat
        description: |-


          #### <a name="examples"></a><span data-ttu-id="c93cc-107">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="c93cc-107">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const range = sheet.getRange("B21:E23");
              const conditionalFormat = range.conditionalFormats
                  .add(Excel.ConditionalFormatType.cellValue);
              conditionalFormat.cellValue.format.font.color = "red";
              conditionalFormat.cellValue.rule = { formula1: "=0", operator: "LessThan" };

              await context.sync();
          });
          ```
  - uid: excel_release.Excel.CellValueConditionalFormat.load
    summary: '<span data-ttu-id="c93cc-108">Pone en cola un comando para cargar las propiedades especificadas del objeto.</span><span class="sxs-lookup"><span data-stu-id="c93cc-108">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="c93cc-109">Antes de leer las propiedades, debe llamar a "context.sync()".</span><span class="sxs-lookup"><span data-stu-id="c93cc-109">You must call "context.sync()" before reading the properties.</span></span>'
    remarks: |-
      <span data-ttu-id="c93cc-110">Además de esta firma, este método tiene las siguientes firmas:</span><span class="sxs-lookup"><span data-stu-id="c93cc-110">In addition to this signature, this method has the following signatures:</span></span>

      <span data-ttu-id="c93cc-111">`load(option?: string | string[]): Excel.CellValueConditionalFormat`-Donde opción es una cadena delimitada por comas o una matriz de cadenas que especifican las propiedades que se van a cargar.</span><span class="sxs-lookup"><span data-stu-id="c93cc-111">`load(option?: string | string[]): Excel.CellValueConditionalFormat` - Where option is a comma-delimited string or an array of strings that specify the properties to load.</span></span>

      <span data-ttu-id="c93cc-112">`load(option?: { select?: string; expand?: string; }): Excel.CellValueConditionalFormat`-Where opción. Select es una cadena delimitada por comas que especifica las propiedades que se van a cargar y Options. Expand es una cadena delimitada por comas que especifica las propiedades de navegación que se deben cargar.</span><span class="sxs-lookup"><span data-stu-id="c93cc-112">`load(option?: { select?: string; expand?: string; }): Excel.CellValueConditionalFormat` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>

      <span data-ttu-id="c93cc-113">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.CellValueConditionalFormat`-Solo disponible en tipos de colección.</span><span class="sxs-lookup"><span data-stu-id="c93cc-113">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.CellValueConditionalFormat` - Only available on collection types.</span></span> <span data-ttu-id="c93cc-114">Es similar a la firma anterior.</span><span class="sxs-lookup"><span data-stu-id="c93cc-114">It is similar to the preceding signature.</span></span> <span data-ttu-id="c93cc-115">Option. Top especifica el número máximo de elementos de colección que se pueden incluir en el resultado.</span><span class="sxs-lookup"><span data-stu-id="c93cc-115">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="c93cc-116">La opción. SKIP especifica el número de elementos que se deben omitir y que no se incluyen en el resultado.</span><span class="sxs-lookup"><span data-stu-id="c93cc-116">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="c93cc-117">Si se especifica Option. Top, el conjunto de resultados se iniciará después de omitir el número especificado de elementos.</span><span class="sxs-lookup"><span data-stu-id="c93cc-117">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: Excel.Interfaces.CellValueConditionalFormatLoadOptions): Excel.CellValueConditionalFormat;'
      return:
        type:
          - excel.Excel.CellValueConditionalFormat
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - excel.Excel.Interfaces.CellValueConditionalFormatLoadOptions
  - uid: excel_release.Excel.CellValueConditionalFormat.load_1
    summary: <span data-ttu-id="c93cc-118">Pone en cola un comando para cargar las propiedades especificadas del objeto.</span><span class="sxs-lookup"><span data-stu-id="c93cc-118">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="c93cc-119">Debe llamar `context.sync()` antes de leer las propiedades.</span><span class="sxs-lookup"><span data-stu-id="c93cc-119">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.CellValueConditionalFormat;'
      return:
        type:
          - excel.Excel.CellValueConditionalFormat
        description: ''
      parameters:
        - id: propertyNames
          description: <span data-ttu-id="c93cc-120">Una cadena delimitada por comas o una matriz de cadenas que especifican las propiedades que se van a cargar.</span><span class="sxs-lookup"><span data-stu-id="c93cc-120">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
          type:
            - 'string | string[]'
  - uid: excel_release.Excel.CellValueConditionalFormat.load_2
    summary: <span data-ttu-id="c93cc-121">Pone en cola un comando para cargar las propiedades especificadas del objeto.</span><span class="sxs-lookup"><span data-stu-id="c93cc-121">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="c93cc-122">Debe llamar `context.sync()` antes de leer las propiedades.</span><span class="sxs-lookup"><span data-stu-id="c93cc-122">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): Excel.CellValueConditionalFormat;'
      return:
        type:
          - excel.Excel.CellValueConditionalFormat
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '<span data-ttu-id="c93cc-123">Donde propertyNamesAndPaths. Select es una cadena delimitada por comas que especifica las propiedades que se van a cargar y propertyNamesAndPaths. Expand es una cadena delimitada por comas que especifica las propiedades de navegación que se deben cargar.</span><span class="sxs-lookup"><span data-stu-id="c93cc-123">Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>'
          type:
            - '{ select?: string; expand?: string; }'
  - uid: excel_release.Excel.CellValueConditionalFormat.rule
    summary: |-
      <span data-ttu-id="c93cc-124">Representa el objeto Rule en este formato condicional.</span><span class="sxs-lookup"><span data-stu-id="c93cc-124">Represents the Rule object on this conditional format.</span></span>

      <span data-ttu-id="c93cc-125">\[[Conjunto de API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="c93cc-125">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: rule
    fullName: rule
    langs:
      - typeScript
    type: property
    syntax:
      content: 'rule: Excel.ConditionalCellValueRule;'
      return:
        type:
          - excel.Excel.ConditionalCellValueRule
        description: |-


          #### <a name="examples"></a><span data-ttu-id="c93cc-126">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="c93cc-126">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const range = sheet.getRange("B21:E23");
              const conditionalFormat = range.conditionalFormats
                  .add(Excel.ConditionalFormatType.cellValue);
              conditionalFormat.cellValue.format.font.color = "red";
              conditionalFormat.cellValue.rule = { formula1: "=0", operator: "LessThan" };

              await context.sync();
          });
          ```
  - uid: excel_release.Excel.CellValueConditionalFormat.set
    summary: '<span data-ttu-id="c93cc-127">Establece varias propiedades de un objeto al mismo tiempo.</span><span class="sxs-lookup"><span data-stu-id="c93cc-127">Sets multiple properties of an object at the same time.</span></span> <span data-ttu-id="c93cc-128">Puede pasar un objeto sin formato con las propiedades apropiadas o cualquier otro objeto de la API del mismo tipo.</span><span class="sxs-lookup"><span data-stu-id="c93cc-128">You can pass either a plain object with the appropriate properties, or another API object of the same type.</span></span>'
    remarks: |-
      <span data-ttu-id="c93cc-129">Este método tiene la siguiente firma adicional:</span><span class="sxs-lookup"><span data-stu-id="c93cc-129">This method has the following additional signature:</span></span>

      `set(properties: Excel.CellValueConditionalFormat): void`
    name: 'set(properties, options)'
    fullName: 'set(properties, options)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Interfaces.CellValueConditionalFormatUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: <span data-ttu-id="c93cc-130">Objeto de JavaScript con propiedades que se estructuran de forma isomórfico a las propiedades del objeto en el que se llama al método.</span><span class="sxs-lookup"><span data-stu-id="c93cc-130">A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.</span></span>
          type:
            - Interfaces.CellValueConditionalFormatUpdateData
        - id: options
          description: <span data-ttu-id="c93cc-131">Proporciona una opción para suprimir errores si el objeto Properties intenta establecer propiedades de solo lectura.</span><span class="sxs-lookup"><span data-stu-id="c93cc-131">Provides an option to suppress errors if the properties object tries to set any read-only properties.</span></span>
          type:
            - office.OfficeExtension.UpdateOptions
  - uid: excel_release.Excel.CellValueConditionalFormat.set_1
    summary: '<span data-ttu-id="c93cc-132">Establece varias propiedades en el objeto al mismo tiempo, basándose en un objeto cargado existente.</span><span class="sxs-lookup"><span data-stu-id="c93cc-132">Sets multiple properties on the object at the same time, based on an existing loaded object.</span></span>'
    name: set(properties)
    fullName: set(properties)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Excel.CellValueConditionalFormat): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - excel.Excel.CellValueConditionalFormat
  - uid: excel_release.Excel.CellValueConditionalFormat.toJSON
    summary: '<span data-ttu-id="c93cc-133">Reemplaza el método JavaScript `toJSON()` para proporcionar un resultado más útil cuando se pasa un objeto API a`JSON.stringify()`</span><span class="sxs-lookup"><span data-stu-id="c93cc-133">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id="c93cc-134">.</span><span class="sxs-lookup"><span data-stu-id="c93cc-134"></span></span> <span data-ttu-id="c93cc-135">(`JSON.stringify`</span><span class="sxs-lookup"><span data-stu-id="c93cc-135"></span></span><!-- --><span data-ttu-id="c93cc-136">, a su vez, llama `toJSON` al método del objeto que se le pasa.) Mientras que el objeto Excel. CellValueConditionalFormat original es un objeto API, `toJSON` el método devuelve un objeto JavaScript sin formato (escrito como`Excel.Interfaces.CellValueConditionalFormatData`</span><span class="sxs-lookup"><span data-stu-id="c93cc-136">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original Excel.CellValueConditionalFormat object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.CellValueConditionalFormatData`</span></span><!-- --><span data-ttu-id="c93cc-137">) que contiene copias rasas de las propiedades secundarias cargadas del objeto original.</span><span class="sxs-lookup"><span data-stu-id="c93cc-137">) that contains shallow copies of any loaded child properties from the original object.</span></span>'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.CellValueConditionalFormatData;'
      return:
        type:
          - excel.Excel.Interfaces.CellValueConditionalFormatData
        description: ''