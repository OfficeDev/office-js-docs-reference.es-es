### YamlMime:UniversalReference
items:
  - uid: excel_release.Excel.Range
    summary: |-
      <span data-ttu-id="9d53c-101">Range representa un conjunto de una o más celdas contiguas, como una celda, una fila, una columna, un bloque de celdas, etc. Para obtener más información sobre cómo se usan los rangos en la API, vea [trabajar con rangos mediante la API de JavaScript de Excel](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-ranges) y [trabajar con rangos mediante la API de JavaScript de Excel (avanzado)](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-ranges-advanced) .</span><span class="sxs-lookup"><span data-stu-id="9d53c-101">Range represents a set of one or more contiguous cells such as a cell, a row, a column, block of cells, etc. To learn more about how ranges are used throughout the API, read [Work with ranges using the Excel JavaScript API](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-ranges) and [Work with ranges using the Excel JavaScript API (advanced)](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-ranges-advanced)</span></span><!-- --><span data-ttu-id="9d53c-102">.</span><span class="sxs-lookup"><span data-stu-id="9d53c-102"></span></span>

      <span data-ttu-id="9d53c-103">\[[Conjunto de API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="9d53c-103">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: Excel.Range
    fullName: Excel.Range
    langs:
      - typeScript
    type: class
    extends:
      - office.OfficeExtension.ClientObject
    package: excel_release
    children:
      - excel_release.Excel.Range.address
      - excel_release.Excel.Range.addressLocal
      - excel_release.Excel.Range.autoFill
      - excel_release.Excel.Range.autoFill_1
      - excel_release.Excel.Range.calculate
      - excel_release.Excel.Range.cellCount
      - excel_release.Excel.Range.clear
      - excel_release.Excel.Range.clear_1
      - excel_release.Excel.Range.columnCount
      - excel_release.Excel.Range.columnHidden
      - excel_release.Excel.Range.columnIndex
      - excel_release.Excel.Range.conditionalFormats
      - excel_release.Excel.Range.context
      - excel_release.Excel.Range.convertDataTypeToText
      - excel_release.Excel.Range.convertToLinkedDataType
      - excel_release.Excel.Range.copyFrom
      - excel_release.Excel.Range.copyFrom_1
      - excel_release.Excel.Range.dataValidation
      - excel_release.Excel.Range.delete
      - excel_release.Excel.Range.delete_1
      - excel_release.Excel.Range.find
      - excel_release.Excel.Range.findOrNullObject
      - excel_release.Excel.Range.flashFill
      - excel_release.Excel.Range.format
      - excel_release.Excel.Range.formulas
      - excel_release.Excel.Range.formulasLocal
      - excel_release.Excel.Range.formulasR1C1
      - excel_release.Excel.Range.getAbsoluteResizedRange
      - excel_release.Excel.Range.getBoundingRect
      - excel_release.Excel.Range.getCell
      - excel_release.Excel.Range.getCellProperties
      - excel_release.Excel.Range.getColumn
      - excel_release.Excel.Range.getColumnProperties
      - excel_release.Excel.Range.getColumnsAfter
      - excel_release.Excel.Range.getColumnsBefore
      - excel_release.Excel.Range.getEntireColumn
      - excel_release.Excel.Range.getEntireRow
      - excel_release.Excel.Range.getImage
      - excel_release.Excel.Range.getIntersection
      - excel_release.Excel.Range.getIntersectionOrNullObject
      - excel_release.Excel.Range.getLastCell
      - excel_release.Excel.Range.getLastColumn
      - excel_release.Excel.Range.getLastRow
      - excel_release.Excel.Range.getOffsetRange
      - excel_release.Excel.Range.getResizedRange
      - excel_release.Excel.Range.getRow
      - excel_release.Excel.Range.getRowProperties
      - excel_release.Excel.Range.getRowsAbove
      - excel_release.Excel.Range.getRowsBelow
      - excel_release.Excel.Range.getSpecialCells
      - excel_release.Excel.Range.getSpecialCells_1
      - excel_release.Excel.Range.getSpecialCellsOrNullObject
      - excel_release.Excel.Range.getSpecialCellsOrNullObject_1
      - excel_release.Excel.Range.getSurroundingRegion
      - excel_release.Excel.Range.getTables
      - excel_release.Excel.Range.getUsedRange
      - excel_release.Excel.Range.getUsedRangeOrNullObject
      - excel_release.Excel.Range.getVisibleView
      - excel_release.Excel.Range.hidden
      - excel_release.Excel.Range.hyperlink
      - excel_release.Excel.Range.insert
      - excel_release.Excel.Range.insert_1
      - excel_release.Excel.Range.isEntireColumn
      - excel_release.Excel.Range.isEntireRow
      - excel_release.Excel.Range.linkedDataTypeState
      - excel_release.Excel.Range.load
      - excel_release.Excel.Range.load_1
      - excel_release.Excel.Range.load_2
      - excel_release.Excel.Range.merge
      - excel_release.Excel.Range.numberFormat
      - excel_release.Excel.Range.numberFormatLocal
      - excel_release.Excel.Range.removeDuplicates
      - excel_release.Excel.Range.replaceAll
      - excel_release.Excel.Range.rowCount
      - excel_release.Excel.Range.rowHidden
      - excel_release.Excel.Range.rowIndex
      - excel_release.Excel.Range.select
      - excel_release.Excel.Range.set
      - excel_release.Excel.Range.set_1
      - excel_release.Excel.Range.setCellProperties
      - excel_release.Excel.Range.setColumnProperties
      - excel_release.Excel.Range.setDirty
      - excel_release.Excel.Range.setRowProperties
      - excel_release.Excel.Range.showCard
      - excel_release.Excel.Range.sort
      - excel_release.Excel.Range.style
      - excel_release.Excel.Range.text
      - excel_release.Excel.Range.toJSON
      - excel_release.Excel.Range.track
      - excel_release.Excel.Range.unmerge
      - excel_release.Excel.Range.untrack
      - excel_release.Excel.Range.values
      - excel_release.Excel.Range.valueTypes
      - excel_release.Excel.Range.worksheet
  - uid: excel_release.Excel.Range.address
    summary: |-
      <span data-ttu-id="9d53c-104">Representa la referencia de intervalo en estilo A1.</span><span class="sxs-lookup"><span data-stu-id="9d53c-104">Represents the range reference in A1-style.</span></span> <span data-ttu-id="9d53c-105">El valor de dirección contendrá la referencia de la hoja (por ejemplo, "Hoja1! A1: B4 ").</span><span class="sxs-lookup"><span data-stu-id="9d53c-105">Address value will contain the Sheet reference (e.g. "Sheet1!A1:B4").</span></span> <span data-ttu-id="9d53c-106">Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="9d53c-106">Read-only.</span></span>

      <span data-ttu-id="9d53c-107">\[[Conjunto de API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="9d53c-107">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: address
    fullName: address
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly address: string;'
      return:
        type:
          - string
  - uid: excel_release.Excel.Range.addressLocal
    summary: |-
      <span data-ttu-id="9d53c-108">Representa la referencia del intervalo especificado en el idioma del usuario.</span><span class="sxs-lookup"><span data-stu-id="9d53c-108">Represents range reference for the specified range in the language of the user.</span></span> <span data-ttu-id="9d53c-109">Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="9d53c-109">Read-only.</span></span>

      <span data-ttu-id="9d53c-110">\[[Conjunto de API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="9d53c-110">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: addressLocal
    fullName: addressLocal
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly addressLocal: string;'
      return:
        type:
          - string
  - uid: excel_release.Excel.Range.autoFill
    summary: |-
      <span data-ttu-id="9d53c-111">Rellena el rango desde el rango actual al rango de destino.</span><span class="sxs-lookup"><span data-stu-id="9d53c-111">Fills range from the current range to the destination range.</span></span> <span data-ttu-id="9d53c-112">El rango de destino debe extender el código fuente tanto horizontal como verticalmente.</span><span class="sxs-lookup"><span data-stu-id="9d53c-112">The destination range must extend the source either horizontally or vertically.</span></span> <span data-ttu-id="9d53c-113">No se admiten rangos discontinuos.</span><span class="sxs-lookup"><span data-stu-id="9d53c-113">Discontiguous ranges are not supported.</span></span>

      <span data-ttu-id="9d53c-114">\[[Conjunto de API: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="9d53c-114">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'autoFill(destinationRange, autoFillType)'
    fullName: 'autoFill(destinationRange, autoFillType)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'autoFill(destinationRange: Range | string, autoFillType?: Excel.AutoFillType): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: destinationRange
          description: <span data-ttu-id="9d53c-115">Intervalo de destino que se va a rellenar.</span><span class="sxs-lookup"><span data-stu-id="9d53c-115">The destination range to autofill.</span></span>
          type:
            - Range | string
        - id: autoFillType
          description: '<span data-ttu-id="9d53c-116">El tipo de Autorrellenar.</span><span class="sxs-lookup"><span data-stu-id="9d53c-116">The type of autofill.</span></span> <span data-ttu-id="9d53c-117">Especifica cómo se debe rellenar el rango de destino, en función del contenido del intervalo actual.</span><span class="sxs-lookup"><span data-stu-id="9d53c-117">Specifies how the destination range is to be filled, based on the contents of the current range.</span></span> <span data-ttu-id="9d53c-118">El valor predeterminado es "FillDefault".</span><span class="sxs-lookup"><span data-stu-id="9d53c-118">Default is "FillDefault".</span></span>'
          type:
            - excel.Excel.AutoFillType
  - uid: excel_release.Excel.Range.autoFill_1
    summary: |-
      <span data-ttu-id="9d53c-119">Rellena el rango desde el rango actual al rango de destino.</span><span class="sxs-lookup"><span data-stu-id="9d53c-119">Fills range from the current range to the destination range.</span></span> <span data-ttu-id="9d53c-120">El rango de destino debe extender el código fuente tanto horizontal como verticalmente.</span><span class="sxs-lookup"><span data-stu-id="9d53c-120">The destination range must extend the source either horizontally or vertically.</span></span> <span data-ttu-id="9d53c-121">No se admiten rangos discontinuos.</span><span class="sxs-lookup"><span data-stu-id="9d53c-121">Discontiguous ranges are not supported.</span></span>

      <span data-ttu-id="9d53c-122">\[[Conjunto de API: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="9d53c-122">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'autoFill(destinationRange, autoFillTypeString)'
    fullName: 'autoFill(destinationRange, autoFillTypeString)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'autoFill(destinationRange: Range | string, autoFillTypeString?: "FillDefault" | "FillCopy" | "FillSeries" | "FillFormats" | "FillValues" | "FillDays" | "FillWeekdays" | "FillMonths" | "FillYears" | "LinearTrend" | "GrowthTrend" | "FlashFill"): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: destinationRange
          description: <span data-ttu-id="9d53c-123">Intervalo de destino que se va a rellenar.</span><span class="sxs-lookup"><span data-stu-id="9d53c-123">The destination range to autofill.</span></span>
          type:
            - Range | string
        - id: autoFillTypeString
          description: '<span data-ttu-id="9d53c-124">El tipo de Autorrellenar.</span><span class="sxs-lookup"><span data-stu-id="9d53c-124">The type of autofill.</span></span> <span data-ttu-id="9d53c-125">Especifica cómo se debe rellenar el rango de destino, en función del contenido del intervalo actual.</span><span class="sxs-lookup"><span data-stu-id="9d53c-125">Specifies how the destination range is to be filled, based on the contents of the current range.</span></span> <span data-ttu-id="9d53c-126">El valor predeterminado es "FillDefault".</span><span class="sxs-lookup"><span data-stu-id="9d53c-126">Default is "FillDefault".</span></span>'
          type:
            - '"FillDefault" | "FillCopy" | "FillSeries" | "FillFormats" | "FillValues" | "FillDays" | "FillWeekdays" | "FillMonths" | "FillYears" | "LinearTrend" | "GrowthTrend" | "FlashFill"'
  - uid: excel_release.Excel.Range.calculate
    summary: |-
      <span data-ttu-id="9d53c-127">Calcula un rango de celdas en una hoja de cálculo.</span><span class="sxs-lookup"><span data-stu-id="9d53c-127">Calculates a range of cells on a worksheet.</span></span>

      <span data-ttu-id="9d53c-128">\[[Conjunto de API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="9d53c-128">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: calculate()
    fullName: calculate()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'calculate(): void;'
      return:
        type:
          - void
        description: ''
  - uid: excel_release.Excel.Range.cellCount
    summary: |-
      <span data-ttu-id="9d53c-129">Número de celdas del intervalo.</span><span class="sxs-lookup"><span data-stu-id="9d53c-129">Number of cells in the range.</span></span> <span data-ttu-id="9d53c-130">Esta API devolverá -1 si el recuento de celdas supera 2^31-1 (2 147 483 647).</span><span class="sxs-lookup"><span data-stu-id="9d53c-130">This API will return -1 if the cell count exceeds 2^31-1 (2,147,483,647).</span></span> <span data-ttu-id="9d53c-131">Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="9d53c-131">Read-only.</span></span>

      <span data-ttu-id="9d53c-132">\[[Conjunto de API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="9d53c-132">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: cellCount
    fullName: cellCount
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly cellCount: number;'
      return:
        type:
          - number
  - uid: excel_release.Excel.Range.clear
    summary: |-
      <span data-ttu-id="9d53c-133">Borra valores de rango, formato, relleno, borde, etc.</span><span class="sxs-lookup"><span data-stu-id="9d53c-133">Clear range values, format, fill, border, etc.</span></span>

      <span data-ttu-id="9d53c-134">\[[Conjunto de API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="9d53c-134">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: clear(applyTo)
    fullName: clear(applyTo)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clear(applyTo?: Excel.ClearApplyTo): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="9d53c-135">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="9d53c-135">Examples</span></span>

          ```javascript
          // Below example clears format and contents of the range. 
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "D:F";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              range.clear();
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: applyTo
          description: <span data-ttu-id="9d53c-136">Opcional.</span><span class="sxs-lookup"><span data-stu-id="9d53c-136">Optional.</span></span> <span data-ttu-id="9d53c-137">Determina el tipo de acción de borrado.</span><span class="sxs-lookup"><span data-stu-id="9d53c-137">Determines the type of clear action.</span></span> <span data-ttu-id="9d53c-138">Consulte Excel. ClearApplyTo para obtener información detallada.</span><span class="sxs-lookup"><span data-stu-id="9d53c-138">See Excel.ClearApplyTo for details.</span></span>
          type:
            - excel.Excel.ClearApplyTo
  - uid: excel_release.Excel.Range.clear_1
    summary: |-
      <span data-ttu-id="9d53c-139">Borra valores de rango, formato, relleno, borde, etc.</span><span class="sxs-lookup"><span data-stu-id="9d53c-139">Clear range values, format, fill, border, etc.</span></span>

      <span data-ttu-id="9d53c-140">\[[Conjunto de API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="9d53c-140">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: clear(applyToString)
    fullName: clear(applyToString)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clear(applyToString?: "All" | "Formats" | "Contents" | "Hyperlinks" | "RemoveHyperlinks"): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: applyToString
          description: <span data-ttu-id="9d53c-141">Opcional.</span><span class="sxs-lookup"><span data-stu-id="9d53c-141">Optional.</span></span> <span data-ttu-id="9d53c-142">Determina el tipo de acción de borrado.</span><span class="sxs-lookup"><span data-stu-id="9d53c-142">Determines the type of clear action.</span></span> <span data-ttu-id="9d53c-143">Consulte Excel. ClearApplyTo para obtener información detallada.</span><span class="sxs-lookup"><span data-stu-id="9d53c-143">See Excel.ClearApplyTo for details.</span></span>
          type:
            - '"All" | "Formats" | "Contents" | "Hyperlinks" | "RemoveHyperlinks"'
  - uid: excel_release.Excel.Range.columnCount
    summary: |-
      <span data-ttu-id="9d53c-144">Representa el número total de columnas del intervalo.</span><span class="sxs-lookup"><span data-stu-id="9d53c-144">Represents the total number of columns in the range.</span></span> <span data-ttu-id="9d53c-145">Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="9d53c-145">Read-only.</span></span>

      <span data-ttu-id="9d53c-146">\[[Conjunto de API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="9d53c-146">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: columnCount
    fullName: columnCount
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly columnCount: number;'
      return:
        type:
          - number
  - uid: excel_release.Excel.Range.columnHidden
    summary: |-
      <span data-ttu-id="9d53c-147">Representa si todas las columnas del intervalo actual están ocultas.</span><span class="sxs-lookup"><span data-stu-id="9d53c-147">Represents if all columns of the current range are hidden.</span></span>

      <span data-ttu-id="9d53c-148">\[[Conjunto de API: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="9d53c-148">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: columnHidden
    fullName: columnHidden
    langs:
      - typeScript
    type: property
    syntax:
      content: 'columnHidden: boolean;'
      return:
        type:
          - boolean
  - uid: excel_release.Excel.Range.columnIndex
    summary: |-
      <span data-ttu-id="9d53c-149">Representa el número de columna de la primera celda del intervalo.</span><span class="sxs-lookup"><span data-stu-id="9d53c-149">Represents the column number of the first cell in the range.</span></span> <span data-ttu-id="9d53c-150">Indizado con cero.</span><span class="sxs-lookup"><span data-stu-id="9d53c-150">Zero-indexed.</span></span> <span data-ttu-id="9d53c-151">Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="9d53c-151">Read-only.</span></span>

      <span data-ttu-id="9d53c-152">\[[Conjunto de API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="9d53c-152">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: columnIndex
    fullName: columnIndex
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly columnIndex: number;'
      return:
        type:
          - number
  - uid: excel_release.Excel.Range.conditionalFormats
    summary: |-
      <span data-ttu-id="9d53c-153">Colección de ConditionalFormats que forman una intersección con el intervalo.</span><span class="sxs-lookup"><span data-stu-id="9d53c-153">Collection of ConditionalFormats that intersect the range.</span></span> <span data-ttu-id="9d53c-154">Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="9d53c-154">Read-only.</span></span>

      <span data-ttu-id="9d53c-155">\[[Conjunto de API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="9d53c-155">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: conditionalFormats
    fullName: conditionalFormats
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly conditionalFormats: Excel.ConditionalFormatCollection;'
      return:
        type:
          - excel.Excel.ConditionalFormatCollection
  - uid: excel_release.Excel.Range.context
    summary: <span data-ttu-id="9d53c-156">Contexto de la solicitud asociado al objeto.</span><span class="sxs-lookup"><span data-stu-id="9d53c-156">The request context associated with the object.</span></span> <span data-ttu-id="9d53c-157">Esto conecta el proceso del complemento con el proceso de la aplicación host de Office.</span><span class="sxs-lookup"><span data-stu-id="9d53c-157">This connects the add-in's process to the Office host application's process.</span></span>
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - RequestContext
  - uid: excel_release.Excel.Range.convertDataTypeToText
    summary: |-
      <span data-ttu-id="9d53c-158">Convierte el intervalo de celdas con tipos de datos en texto.</span><span class="sxs-lookup"><span data-stu-id="9d53c-158">Converts the range cells with datatypes into text.</span></span>

      <span data-ttu-id="9d53c-159">\[[Conjunto de API: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="9d53c-159">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: convertDataTypeToText()
    fullName: convertDataTypeToText()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'convertDataTypeToText(): void;'
      return:
        type:
          - void
        description: ''
  - uid: excel_release.Excel.Range.convertToLinkedDataType
    summary: |-
      <span data-ttu-id="9d53c-160">Convierte el intervalo de celdas en un tipo de datos vinculado en la hoja de cálculo.</span><span class="sxs-lookup"><span data-stu-id="9d53c-160">Converts the range cells into linked datatype in the worksheet.</span></span>

      <span data-ttu-id="9d53c-161">\[[Conjunto de API: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="9d53c-161">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'convertToLinkedDataType(serviceID, languageCulture)'
    fullName: 'convertToLinkedDataType(serviceID, languageCulture)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'convertToLinkedDataType(serviceID: number, languageCulture: string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: serviceID
          description: <span data-ttu-id="9d53c-162">IDENTIFICADOR del servicio que se usará para consultar los datos.</span><span class="sxs-lookup"><span data-stu-id="9d53c-162">The Service ID which will be used to query the data.</span></span>
          type:
            - number
        - id: languageCulture
          description: <span data-ttu-id="9d53c-163">Referencia cultural del idioma en el que se va a consultar el servicio.</span><span class="sxs-lookup"><span data-stu-id="9d53c-163">Language Culture to query the service for.</span></span>
          type:
            - string
  - uid: excel_release.Excel.Range.copyFrom
    summary: |-
      <span data-ttu-id="9d53c-164">Copia el formato o los datos de la celda del intervalo de origen o RangeAreas al intervalo actual.</span><span class="sxs-lookup"><span data-stu-id="9d53c-164">Copies cell data or formatting from the source range or RangeAreas to the current range.</span></span> <span data-ttu-id="9d53c-165">El rango de destino puede tener un tamaño diferente al del rango de origen o RangeAreas.</span><span class="sxs-lookup"><span data-stu-id="9d53c-165">The destination range can be of different size than the source range or RangeAreas.</span></span> <span data-ttu-id="9d53c-166">El destino se expandirá automáticamente si es menor que el origen.</span><span class="sxs-lookup"><span data-stu-id="9d53c-166">The destination will be expanded automatically if it is smaller than the source.</span></span>

      <span data-ttu-id="9d53c-167">\[[Conjunto de API: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="9d53c-167">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'copyFrom(sourceRange, copyType, skipBlanks, transpose)'
    fullName: 'copyFrom(sourceRange, copyType, skipBlanks, transpose)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'copyFrom(sourceRange: Range | RangeAreas | string, copyType?: Excel.RangeCopyType, skipBlanks?: boolean, transpose?: boolean): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="9d53c-168">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="9d53c-168">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              sheet.getRange("F2").values = [["Copied Formula"]];
              sheet.getRange("F2").format.autofitColumns();

              // copy a range preserving the formulas
              // note: non-formula values are copied over as is
              sheet.getRange("G2").copyFrom("A1:E1", Excel.RangeCopyType.formulas);
              await context.sync();
          });
          ```
      parameters:
        - id: sourceRange
          description: '<span data-ttu-id="9d53c-169">El rango de origen o RangeAreas desde el que se va a copiar.</span><span class="sxs-lookup"><span data-stu-id="9d53c-169">The source range or RangeAreas to copy from.</span></span> <span data-ttu-id="9d53c-170">Cuando la RangeAreas de origen tiene varios rangos, debe estar en el formulario de esquema que se puede crear quitando filas o columnas completas de un rango rectangular.</span><span class="sxs-lookup"><span data-stu-id="9d53c-170">When the source RangeAreas has multiple ranges, it must in the outline form which can be created by removing full rows or columns from a rectangular range.</span></span>'
          type:
            - Range | RangeAreas | string
        - id: copyType
          description: <span data-ttu-id="9d53c-171">Tipo de datos de celda o formato que se va a copiar.</span><span class="sxs-lookup"><span data-stu-id="9d53c-171">The type of cell data or formatting to copy over.</span></span> <span data-ttu-id="9d53c-172">El valor predeterminado es "All".</span><span class="sxs-lookup"><span data-stu-id="9d53c-172">Default is "All".</span></span>
          type:
            - excel.Excel.RangeCopyType
        - id: skipBlanks
          description: <span data-ttu-id="9d53c-173">True si se omiten las celdas en blanco en el rango de origen.</span><span class="sxs-lookup"><span data-stu-id="9d53c-173">True if to skip blank cells in the source range.</span></span> <span data-ttu-id="9d53c-174">El valor predeterminado es falso.</span><span class="sxs-lookup"><span data-stu-id="9d53c-174">Default is false.</span></span>
          type:
            - boolean
        - id: transpose
          description: <span data-ttu-id="9d53c-175">True si se van a transponer las celdas en el rango de destino.</span><span class="sxs-lookup"><span data-stu-id="9d53c-175">True if to transpose the cells in the destination range.</span></span> <span data-ttu-id="9d53c-176">El valor predeterminado es falso.</span><span class="sxs-lookup"><span data-stu-id="9d53c-176">Default is false.</span></span>
          type:
            - boolean
  - uid: excel_release.Excel.Range.copyFrom_1
    summary: |-
      <span data-ttu-id="9d53c-177">Copia el formato o los datos de la celda del intervalo de origen o RangeAreas al intervalo actual.</span><span class="sxs-lookup"><span data-stu-id="9d53c-177">Copies cell data or formatting from the source range or RangeAreas to the current range.</span></span> <span data-ttu-id="9d53c-178">El rango de destino puede tener un tamaño diferente al del rango de origen o RangeAreas.</span><span class="sxs-lookup"><span data-stu-id="9d53c-178">The destination range can be of different size than the source range or RangeAreas.</span></span> <span data-ttu-id="9d53c-179">El destino se expandirá automáticamente si es menor que el origen.</span><span class="sxs-lookup"><span data-stu-id="9d53c-179">The destination will be expanded automatically if it is smaller than the source.</span></span>

      <span data-ttu-id="9d53c-180">\[[Conjunto de API: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="9d53c-180">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'copyFrom(sourceRange, copyTypeString, skipBlanks, transpose)'
    fullName: 'copyFrom(sourceRange, copyTypeString, skipBlanks, transpose)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'copyFrom(sourceRange: Range | RangeAreas | string, copyTypeString?: "All" | "Formulas" | "Values" | "Formats", skipBlanks?: boolean, transpose?: boolean): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: sourceRange
          description: '<span data-ttu-id="9d53c-181">El rango de origen o RangeAreas desde el que se va a copiar.</span><span class="sxs-lookup"><span data-stu-id="9d53c-181">The source range or RangeAreas to copy from.</span></span> <span data-ttu-id="9d53c-182">Cuando la RangeAreas de origen tiene varios rangos, debe estar en el formulario de esquema que se puede crear quitando filas o columnas completas de un rango rectangular.</span><span class="sxs-lookup"><span data-stu-id="9d53c-182">When the source RangeAreas has multiple ranges, it must in the outline form which can be created by removing full rows or columns from a rectangular range.</span></span>'
          type:
            - Range | RangeAreas | string
        - id: copyTypeString
          description: <span data-ttu-id="9d53c-183">Tipo de datos de celda o formato que se va a copiar.</span><span class="sxs-lookup"><span data-stu-id="9d53c-183">The type of cell data or formatting to copy over.</span></span> <span data-ttu-id="9d53c-184">El valor predeterminado es "All".</span><span class="sxs-lookup"><span data-stu-id="9d53c-184">Default is "All".</span></span>
          type:
            - '"All" | "Formulas" | "Values" | "Formats"'
        - id: skipBlanks
          description: <span data-ttu-id="9d53c-185">True si se omiten las celdas en blanco en el rango de origen.</span><span class="sxs-lookup"><span data-stu-id="9d53c-185">True if to skip blank cells in the source range.</span></span> <span data-ttu-id="9d53c-186">El valor predeterminado es falso.</span><span class="sxs-lookup"><span data-stu-id="9d53c-186">Default is false.</span></span>
          type:
            - boolean
        - id: transpose
          description: <span data-ttu-id="9d53c-187">True si se van a transponer las celdas en el rango de destino.</span><span class="sxs-lookup"><span data-stu-id="9d53c-187">True if to transpose the cells in the destination range.</span></span> <span data-ttu-id="9d53c-188">El valor predeterminado es falso.</span><span class="sxs-lookup"><span data-stu-id="9d53c-188">Default is false.</span></span>
          type:
            - boolean
  - uid: excel_release.Excel.Range.dataValidation
    summary: |-
      <span data-ttu-id="9d53c-189">Devuelve un objeto de validación de datos.</span><span class="sxs-lookup"><span data-stu-id="9d53c-189">Returns a data validation object.</span></span>

      <span data-ttu-id="9d53c-190">\[[Conjunto de API: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="9d53c-190">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: dataValidation
    fullName: dataValidation
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly dataValidation: Excel.DataValidation;'
      return:
        type:
          - excel.Excel.DataValidation
  - uid: excel_release.Excel.Range.delete
    summary: |-
      <span data-ttu-id="9d53c-191">Elimina las celdas asociadas al rango.</span><span class="sxs-lookup"><span data-stu-id="9d53c-191">Deletes the cells associated with the range.</span></span>

      <span data-ttu-id="9d53c-192">\[[Conjunto de API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="9d53c-192">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: delete(shift)
    fullName: delete(shift)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'delete(shift: Excel.DeleteShiftDirection): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: shift
          description: <span data-ttu-id="9d53c-193">Especifica hacia dónde se desplazarán las celdas.</span><span class="sxs-lookup"><span data-stu-id="9d53c-193">Specifies which way to shift the cells.</span></span> <span data-ttu-id="9d53c-194">Consulte Excel. DeleteShiftDirection para obtener información detallada.</span><span class="sxs-lookup"><span data-stu-id="9d53c-194">See Excel.DeleteShiftDirection for details.</span></span>
          type:
            - excel.Excel.DeleteShiftDirection
  - uid: excel_release.Excel.Range.delete_1
    summary: |-
      <span data-ttu-id="9d53c-195">Elimina las celdas asociadas al rango.</span><span class="sxs-lookup"><span data-stu-id="9d53c-195">Deletes the cells associated with the range.</span></span>

      <span data-ttu-id="9d53c-196">\[[Conjunto de API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="9d53c-196">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: delete(shiftString)
    fullName: delete(shiftString)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'delete(shiftString: "Up" | "Left"): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="9d53c-197">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="9d53c-197">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "D:F";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              range.delete("Left");
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: shiftString
          description: <span data-ttu-id="9d53c-198">Especifica hacia dónde se desplazarán las celdas.</span><span class="sxs-lookup"><span data-stu-id="9d53c-198">Specifies which way to shift the cells.</span></span> <span data-ttu-id="9d53c-199">Consulte Excel. DeleteShiftDirection para obtener información detallada.</span><span class="sxs-lookup"><span data-stu-id="9d53c-199">See Excel.DeleteShiftDirection for details.</span></span>
          type:
            - '"Up" | "Left"'
  - uid: excel_release.Excel.Range.find
    summary: |-
      <span data-ttu-id="9d53c-200">Busca la cadena especificada, según los criterios especificados.</span><span class="sxs-lookup"><span data-stu-id="9d53c-200">Finds the given string based on the criteria specified.</span></span> <span data-ttu-id="9d53c-201">Si el rango actual es mayor que una sola celda, la búsqueda se limitará a ese intervalo; de lo contrario, la búsqueda cubrirá toda la hoja a partir de esa celda.</span><span class="sxs-lookup"><span data-stu-id="9d53c-201">If the current range is larger than a single cell, then the search will be limited to that range, else the search will cover the entire sheet starting after that cell.</span></span>

      <span data-ttu-id="9d53c-202">\[[Conjunto de API: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="9d53c-202">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'find(text, criteria)'
    fullName: 'find(text, criteria)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'find(text: string, criteria: Excel.SearchCriteria): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-
          <span data-ttu-id="9d53c-203">Intervalo que coincide con los criterios de búsqueda.</span><span class="sxs-lookup"><span data-stu-id="9d53c-203">The Range which matched the search criteria.</span></span>

          #### <a name="examples"></a><span data-ttu-id="9d53c-204">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="9d53c-204">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const table = sheet.tables.getItem("ExpensesTable");
              const searchRange = table.getRange();

              // NOTE: If no match is found, an ItemNotFound error
              // is thrown when Range.find is evaluated.
              const foundRange = searchRange.find($("#searchText").text(), {
                  completeMatch: completeMatch,
                  matchCase: matchCase,
                  searchDirection: searchDirection
              });
              
              foundRange.load("address");
              await context.sync();


              console.log(foundRange.address);
          });
          ```
      parameters:
        - id: text
          description: <span data-ttu-id="9d53c-205">Cadena que se va a buscar.</span><span class="sxs-lookup"><span data-stu-id="9d53c-205">The string to find.</span></span>
          type:
            - string
        - id: criteria
          description: '<span data-ttu-id="9d53c-206">Criterios de búsqueda adicionales, incluida la dirección de la búsqueda y si la búsqueda debe coincidir con toda la celda o distinguir mayúsculas de minúsculas.</span><span class="sxs-lookup"><span data-stu-id="9d53c-206">Additional search criteria, including the search direction and whether the search needs to match the entire cell or be case sensitive.</span></span>'
          type:
            - excel.Excel.SearchCriteria
  - uid: excel_release.Excel.Range.findOrNullObject
    summary: |-
      <span data-ttu-id="9d53c-207">Busca la cadena especificada, según los criterios especificados.</span><span class="sxs-lookup"><span data-stu-id="9d53c-207">Finds the given string based on the criteria specified.</span></span> <span data-ttu-id="9d53c-208">Si el rango actual es mayor que una sola celda, la búsqueda se limitará a ese intervalo; de lo contrario, la búsqueda cubrirá toda la hoja a partir de esa celda.</span><span class="sxs-lookup"><span data-stu-id="9d53c-208">If the current range is larger than a single cell, then the search will be limited to that range, else the search will cover the entire sheet starting after that cell.</span></span> <span data-ttu-id="9d53c-209">Si no hay coincidencias, esta función devolverá un objeto null.</span><span class="sxs-lookup"><span data-stu-id="9d53c-209">If there are no matches, this function will return a null object.</span></span>

      <span data-ttu-id="9d53c-210">\[[Conjunto de API: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="9d53c-210">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'findOrNullObject(text, criteria)'
    fullName: 'findOrNullObject(text, criteria)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'findOrNullObject(text: string, criteria: Excel.SearchCriteria): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-
          <span data-ttu-id="9d53c-211">Intervalo que coincide con los criterios de búsqueda.</span><span class="sxs-lookup"><span data-stu-id="9d53c-211">The Range which matched the search criteria.</span></span>

          #### <a name="examples"></a><span data-ttu-id="9d53c-212">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="9d53c-212">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const table = sheet.tables.getItem("ExpensesTable");
              const searchRange = table.getRange();
              const foundRange = searchRange.findOrNullObject($("#searchText").text(), {
                  completeMatch: completeMatch,
                  matchCase: matchCase,
                  searchDirection: searchDirection
              });
              
              foundRange.load("address");
              await context.sync();

              if (foundRange.isNullObject) {
                  console.log("Text not found");
              } else {
                  console.log(foundRange.address);
              }
          });
          ```
      parameters:
        - id: text
          description: <span data-ttu-id="9d53c-213">Cadena que se va a buscar.</span><span class="sxs-lookup"><span data-stu-id="9d53c-213">The string to find.</span></span>
          type:
            - string
        - id: criteria
          description: '<span data-ttu-id="9d53c-214">Criterios de búsqueda adicionales, incluida la dirección de la búsqueda y si la búsqueda debe coincidir con toda la celda o distinguir mayúsculas de minúsculas.</span><span class="sxs-lookup"><span data-stu-id="9d53c-214">Additional search criteria, including the search direction and whether the search needs to match the entire cell or be case sensitive.</span></span>'
          type:
            - excel.Excel.SearchCriteria
  - uid: excel_release.Excel.Range.flashFill
    summary: |-
      <span data-ttu-id="9d53c-215">Aplica el relleno rápido en el rango actual. Relleno rápido rellena automáticamente los datos cuando detecta un patrón, por lo que el rango debe ser de una única columna y tener datos en los laterales para obtener el patrón.</span><span class="sxs-lookup"><span data-stu-id="9d53c-215">Does FlashFill to current range.Flash Fill will automatically fills data when it senses a pattern, so the range must be single column range and have data around in order to find pattern.</span></span>

      <span data-ttu-id="9d53c-216">\[[Conjunto de API: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="9d53c-216">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: flashFill()
    fullName: flashFill()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'flashFill(): void;'
      return:
        type:
          - void
        description: ''
  - uid: excel_release.Excel.Range.format
    summary: |-
      <span data-ttu-id="9d53c-217">Devuelve un objeto de formato que encapsula la fuente, el relleno, los bordes, la alineación y otras propiedades del rango.</span><span class="sxs-lookup"><span data-stu-id="9d53c-217">Returns a format object, encapsulating the range's font, fill, borders, alignment, and other properties.</span></span> <span data-ttu-id="9d53c-218">Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="9d53c-218">Read-only.</span></span>

      <span data-ttu-id="9d53c-219">\[[Conjunto de API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="9d53c-219">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: format
    fullName: format
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly format: Excel.RangeFormat;'
      return:
        type:
          - excel.Excel.RangeFormat
  - uid: excel_release.Excel.Range.formulas
    summary: |-
      <span data-ttu-id="9d53c-220">Representa la fórmula en notación de estilo A1.</span><span class="sxs-lookup"><span data-stu-id="9d53c-220">Represents the formula in A1-style notation.</span></span> <span data-ttu-id="9d53c-221">Al establecer fórmulas en un rango, el argumento valor puede ser un valor único (una cadena) o una matriz bidimensional.</span><span class="sxs-lookup"><span data-stu-id="9d53c-221">When setting formulas to a range, the value argument can be either a single value (a string) or a two-dimensional array.</span></span> <span data-ttu-id="9d53c-222">Si el argumento es un valor único, se aplicará a todas las celdas del rango.</span><span class="sxs-lookup"><span data-stu-id="9d53c-222">If the argument is a single value, it will be applied to all cells in the range.</span></span>

      <span data-ttu-id="9d53c-223">\[[Conjunto de API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="9d53c-223">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: formulas
    fullName: formulas
    langs:
      - typeScript
    type: property
    syntax:
      content: 'formulas: any[][];'
      return:
        type:
          - 'any[][]'
  - uid: excel_release.Excel.Range.formulasLocal
    summary: |-
      <span data-ttu-id="9d53c-224">Representa la fórmula en notación de estilo A1, en el idioma del usuario y en la configuración regional del formato numérico.</span><span class="sxs-lookup"><span data-stu-id="9d53c-224">Represents the formula in A1-style notation, in the user's language and number-formatting locale.</span></span> <span data-ttu-id="9d53c-225">Por ejemplo, la fórmula "=SUM(A1, 1.5)" en inglés se convertiría en "=SUMME(A1; 1,5)" en alemán.</span><span class="sxs-lookup"><span data-stu-id="9d53c-225">For example, the English "=SUM(A1, 1.5)" formula would become "=SUMME(A1; 1,5)" in German.</span></span> <span data-ttu-id="9d53c-226">Al establecer fórmulas en un rango, el argumento valor puede ser un valor único (una cadena) o una matriz bidimensional.</span><span class="sxs-lookup"><span data-stu-id="9d53c-226">When setting formulas to a range, the value argument can be either a single value (a string) or a two-dimensional array.</span></span> <span data-ttu-id="9d53c-227">Si el argumento es un valor único, se aplicará a todas las celdas del rango.</span><span class="sxs-lookup"><span data-stu-id="9d53c-227">If the argument is a single value, it will be applied to all cells in the range.</span></span>

      <span data-ttu-id="9d53c-228">\[[Conjunto de API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="9d53c-228">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: formulasLocal
    fullName: formulasLocal
    langs:
      - typeScript
    type: property
    syntax:
      content: 'formulasLocal: any[][];'
      return:
        type:
          - 'any[][]'
  - uid: excel_release.Excel.Range.formulasR1C1
    summary: |-
      <span data-ttu-id="9d53c-229">Representa la fórmula en notación de estilo R1C1.</span><span class="sxs-lookup"><span data-stu-id="9d53c-229">Represents the formula in R1C1-style notation.</span></span> <span data-ttu-id="9d53c-230">Al establecer fórmulas en un rango, el argumento valor puede ser un valor único (una cadena) o una matriz bidimensional.</span><span class="sxs-lookup"><span data-stu-id="9d53c-230">When setting formulas to a range, the value argument can be either a single value (a string) or a two-dimensional array.</span></span> <span data-ttu-id="9d53c-231">Si el argumento es un valor único, se aplicará a todas las celdas del rango.</span><span class="sxs-lookup"><span data-stu-id="9d53c-231">If the argument is a single value, it will be applied to all cells in the range.</span></span>

      <span data-ttu-id="9d53c-232">\[[Conjunto de API: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="9d53c-232">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: formulasR1C1
    fullName: formulasR1C1
    langs:
      - typeScript
    type: property
    syntax:
      content: 'formulasR1C1: any[][];'
      return:
        type:
          - 'any[][]'
  - uid: excel_release.Excel.Range.getAbsoluteResizedRange
    summary: |-
      <span data-ttu-id="9d53c-233">Obtiene un objeto Range con la misma celda superior izquierda que el objeto Range actual, pero con los números de filas y columnas especificados.</span><span class="sxs-lookup"><span data-stu-id="9d53c-233">Gets a Range object with the same top-left cell as the current Range object, but with the specified numbers of rows and columns.</span></span>

      <span data-ttu-id="9d53c-234">\[[Conjunto de API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="9d53c-234">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'getAbsoluteResizedRange(numRows, numColumns)'
    fullName: 'getAbsoluteResizedRange(numRows, numColumns)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getAbsoluteResizedRange(numRows: number, numColumns: number): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: ''
      parameters:
        - id: numRows
          description: <span data-ttu-id="9d53c-235">El número de filas del nuevo tamaño del intervalo.</span><span class="sxs-lookup"><span data-stu-id="9d53c-235">The number of rows of the new range size.</span></span>
          type:
            - number
        - id: numColumns
          description: <span data-ttu-id="9d53c-236">El número de columnas del nuevo tamaño de intervalo.</span><span class="sxs-lookup"><span data-stu-id="9d53c-236">The number of columns of the new range size.</span></span>
          type:
            - number
  - uid: excel_release.Excel.Range.getBoundingRect
    summary: |-
      <span data-ttu-id="9d53c-237">Obtiene el objeto de intervalo más pequeño que abarca los intervalos especificados.</span><span class="sxs-lookup"><span data-stu-id="9d53c-237">Gets the smallest range object that encompasses the given ranges.</span></span> <span data-ttu-id="9d53c-238">Por ejemplo, el valor GetBoundingRect de "B2:C5" y "D10:E15" es "B2:E15".</span><span class="sxs-lookup"><span data-stu-id="9d53c-238">For example, the GetBoundingRect of "B2:C5" and "D10:E15" is "B2:E15".</span></span>

      <span data-ttu-id="9d53c-239">\[[Conjunto de API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="9d53c-239">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getBoundingRect(anotherRange)
    fullName: getBoundingRect(anotherRange)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getBoundingRect(anotherRange: Range | string): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="9d53c-240">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="9d53c-240">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "D4:G6";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              var range = range.getBoundingRect("G4:H8");
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // Prints Sheet1!D4:H8
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: anotherRange
          description: <span data-ttu-id="9d53c-241">Objeto o dirección de intervalo o nombre de intervalo.</span><span class="sxs-lookup"><span data-stu-id="9d53c-241">The range object or address or range name.</span></span>
          type:
            - Range | string
  - uid: excel_release.Excel.Range.getCell
    summary: |-
      <span data-ttu-id="9d53c-242">Obtiene el objeto de intervalo que contiene la celda en función de los números de fila y columna.</span><span class="sxs-lookup"><span data-stu-id="9d53c-242">Gets the range object containing the single cell based on row and column numbers.</span></span> <span data-ttu-id="9d53c-243">La celda puede estar fuera de los límites de su rango primario, siempre y cuando se mantenga dentro de la cuadrícula de la hoja de cálculo.</span><span class="sxs-lookup"><span data-stu-id="9d53c-243">The cell can be outside the bounds of its parent range, so long as it stays within the worksheet grid.</span></span> <span data-ttu-id="9d53c-244">La celda devuelta se ubica con respecto a la celda superior izquierda del intervalo.</span><span class="sxs-lookup"><span data-stu-id="9d53c-244">The returned cell is located relative to the top left cell of the range.</span></span>

      <span data-ttu-id="9d53c-245">\[[Conjunto de API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="9d53c-245">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'getCell(row, column)'
    fullName: 'getCell(row, column)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCell(row: number, column: number): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="9d53c-246">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="9d53c-246">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var worksheet = ctx.workbook.worksheets.getItem(sheetName);
              var range = worksheet.getRange(rangeAddress);
              var cell = range.cell(0,0);
              cell.load('address');
              return ctx.sync().then(function() {
                  console.log(cell.address);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: row
          description: <span data-ttu-id="9d53c-247">Número de fila de la celda que se va a recuperar.</span><span class="sxs-lookup"><span data-stu-id="9d53c-247">Row number of the cell to be retrieved.</span></span> <span data-ttu-id="9d53c-248">Indizado con cero.</span><span class="sxs-lookup"><span data-stu-id="9d53c-248">Zero-indexed.</span></span>
          type:
            - number
        - id: column
          description: <span data-ttu-id="9d53c-249">Número de columna de la celda que se va a recuperar.</span><span class="sxs-lookup"><span data-stu-id="9d53c-249">Column number of the cell to be retrieved.</span></span> <span data-ttu-id="9d53c-250">Indizado con cero.</span><span class="sxs-lookup"><span data-stu-id="9d53c-250">Zero-indexed.</span></span>
          type:
            - number
  - uid: excel_release.Excel.Range.getCellProperties
    summary: |-
      <span data-ttu-id="9d53c-251">Devuelve una matriz 2D que encapsula los datos para la fuente, el relleno, los bordes, la alineación y otras propiedades de la celda.</span><span class="sxs-lookup"><span data-stu-id="9d53c-251">Returns a 2D array, encapsulating the data for each cell's font, fill, borders, alignment, and other properties.</span></span>

      <span data-ttu-id="9d53c-252">\[[Conjunto de API: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="9d53c-252">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getCellProperties(cellPropertiesLoadOptions)
    fullName: getCellProperties(cellPropertiesLoadOptions)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCellProperties(cellPropertiesLoadOptions: CellPropertiesLoadOptions): OfficeExtension.ClientResult<CellProperties[][]>;'
      return:
        type:
          - 'OfficeExtension.ClientResult<CellProperties[][]>'
        description: |-
          <span data-ttu-id="9d53c-253">Una matriz bidimensional donde cada elemento representa las propiedades solicitadas de la celda correspondiente.</span><span class="sxs-lookup"><span data-stu-id="9d53c-253">A 2D array where each item represents the requested properties of the corresponding cell.</span></span>

          #### <a name="examples"></a><span data-ttu-id="9d53c-254">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="9d53c-254">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const cell = context.workbook.getActiveCell();

              // Define the cell properties to get by setting the matching LoadOptions to true.
              const propertiesToGet = cell.getCellProperties({
                  address: true,
                  format: {
                      fill: {
                          color: true
                      },
                      font: {
                          color: true
                      }
                  },
                  style: true
              });

              // Sync to get the data from the workbook.
              await context.sync();
              const cellProperties = propertiesToGet.value[0][0];
              console.log(
                  `Address: ${cellProperties.address}\nStyle: ${cellProperties.style}\nFill Color: ${cellProperties.format.fill.color}\nFont Color: ${cellProperties.format.font.color}`);
          });
          ```
      parameters:
        - id: cellPropertiesLoadOptions
          description: <span data-ttu-id="9d53c-255">Objeto que representa las propiedades de celda que se van a cargar.</span><span class="sxs-lookup"><span data-stu-id="9d53c-255">An object that represents which cell properties to load.</span></span>
          type:
            - CellPropertiesLoadOptions
  - uid: excel_release.Excel.Range.getColumn
    summary: |-
      <span data-ttu-id="9d53c-256">Obtiene una columna contenida en el intervalo.</span><span class="sxs-lookup"><span data-stu-id="9d53c-256">Gets a column contained in the range.</span></span>

      <span data-ttu-id="9d53c-257">\[[Conjunto de API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="9d53c-257">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getColumn(column)
    fullName: getColumn(column)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getColumn(column: number): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="9d53c-258">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="9d53c-258">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet19";
              var rangeAddress = "A1:F8";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getColumn(1);
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // prints Sheet1!B1:B8
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: column
          description: <span data-ttu-id="9d53c-259">Número de columna del intervalo que se va a recuperar.</span><span class="sxs-lookup"><span data-stu-id="9d53c-259">Column number of the range to be retrieved.</span></span> <span data-ttu-id="9d53c-260">Indizado con cero.</span><span class="sxs-lookup"><span data-stu-id="9d53c-260">Zero-indexed.</span></span>
          type:
            - number
  - uid: excel_release.Excel.Range.getColumnProperties
    summary: |-
      <span data-ttu-id="9d53c-261">Devuelve una matriz de una sola dimensión que encapsula los datos para la fuente, el relleno, los bordes, la alineación y otras propiedades de la columna.</span><span class="sxs-lookup"><span data-stu-id="9d53c-261">Returns a single-dimensional array, encapsulating the data for each column's font, fill, borders, alignment, and other properties.</span></span> <span data-ttu-id="9d53c-262">Se devolverá null para las propiedades que no son coherentes en cada celda de una columna determinada.</span><span class="sxs-lookup"><span data-stu-id="9d53c-262">For properties that are not consistent across each cell within a given column, null will be returned.</span></span>

      <span data-ttu-id="9d53c-263">\[[Conjunto de API: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="9d53c-263">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getColumnProperties(columnPropertiesLoadOptions)
    fullName: getColumnProperties(columnPropertiesLoadOptions)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getColumnProperties(columnPropertiesLoadOptions: ColumnPropertiesLoadOptions): OfficeExtension.ClientResult<ColumnProperties[]>;'
      return:
        type:
          - 'OfficeExtension.ClientResult<ColumnProperties[]>'
        description: <span data-ttu-id="9d53c-264">Matriz donde cada elemento representa las propiedades solicitadas de la columna correspondiente.</span><span class="sxs-lookup"><span data-stu-id="9d53c-264">An array where each item represents the requested properties of the corresponding column.</span></span>
      parameters:
        - id: columnPropertiesLoadOptions
          description: <span data-ttu-id="9d53c-265">Objeto que representa las propiedades de columna que se van a cargar.</span><span class="sxs-lookup"><span data-stu-id="9d53c-265">An object that represents which column properties to load.</span></span>
          type:
            - ColumnPropertiesLoadOptions
  - uid: excel_release.Excel.Range.getColumnsAfter
    summary: |-
      <span data-ttu-id="9d53c-266">Obtiene un número determinado de columnas a la derecha del objeto Range actual.</span><span class="sxs-lookup"><span data-stu-id="9d53c-266">Gets a certain number of columns to the right of the current Range object.</span></span>

      <span data-ttu-id="9d53c-267">\[[Conjunto de API: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="9d53c-267">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getColumnsAfter(count)
    fullName: getColumnsAfter(count)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getColumnsAfter(count?: number): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: ''
      parameters:
        - id: count
          description: '<span data-ttu-id="9d53c-p138">Opcional. El número de columnas que se va a incluir en el rango resultante. En general, use un número positivo para crear un intervalo fuera del intervalo actual. También puede usar un número negativo para crear un intervalo dentro del intervalo actual. El valor predeterminado es 1.</span><span class="sxs-lookup"><span data-stu-id="9d53c-p138">Optional. The number of columns to include in the resulting range. In general, use a positive number to create a range outside the current range. You can also use a negative number to create a range within the current range. The default value is 1.</span></span>'
          type:
            - number
  - uid: excel_release.Excel.Range.getColumnsBefore
    summary: |-
      <span data-ttu-id="9d53c-273">Obtiene un número determinado de columnas a la izquierda del objeto Range actual.</span><span class="sxs-lookup"><span data-stu-id="9d53c-273">Gets a certain number of columns to the left of the current Range object.</span></span>

      <span data-ttu-id="9d53c-274">\[[Conjunto de API: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="9d53c-274">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getColumnsBefore(count)
    fullName: getColumnsBefore(count)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getColumnsBefore(count?: number): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: ''
      parameters:
        - id: count
          description: '<span data-ttu-id="9d53c-p139">Opcional. El número de columnas que se va a incluir en el rango resultante. En general, use un número positivo para crear un intervalo fuera del intervalo actual. También puede usar un número negativo para crear un intervalo dentro del intervalo actual. El valor predeterminado es 1.</span><span class="sxs-lookup"><span data-stu-id="9d53c-p139">Optional. The number of columns to include in the resulting range. In general, use a positive number to create a range outside the current range. You can also use a negative number to create a range within the current range. The default value is 1.</span></span>'
          type:
            - number
  - uid: excel_release.Excel.Range.getEntireColumn
    summary: |-
      <span data-ttu-id="9d53c-280">Obtiene un objeto que representa toda la columna del rango (por ejemplo, si el rango actual representa las celdas "B4: E11", `getEntireColumn` es un rango que representa las columnas "B:E").</span><span class="sxs-lookup"><span data-stu-id="9d53c-280">Gets an object that represents the entire column of the range (for example, if the current range represents cells "B4:E11", its `getEntireColumn` is a range that represents columns "B:E").</span></span>

      <span data-ttu-id="9d53c-281">\[[Conjunto de API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="9d53c-281">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getEntireColumn()
    fullName: getEntireColumn()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getEntireColumn(): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="9d53c-282">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="9d53c-282">Examples</span></span>

          ```javascript
          // Note: the grid properties of the Range (values, numberFormat, formulas) 
          // contains null since the Range in question is unbounded.
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "D:F";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              var rangeEC = range.getEntireColumn();
              rangeEC.load('address');
              return ctx.sync().then(function() {
                  console.log(rangeEC.address);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: excel_release.Excel.Range.getEntireRow
    summary: |-
      <span data-ttu-id="9d53c-283">Obtiene un objeto que representa toda la fila del rango (por ejemplo, si el rango actual representa las celdas "B4: E11", `GetEntireRow` es un rango que representa las filas "4:11").</span><span class="sxs-lookup"><span data-stu-id="9d53c-283">Gets an object that represents the entire row of the range (for example, if the current range represents cells "B4:E11", its `GetEntireRow` is a range that represents rows "4:11").</span></span>

      <span data-ttu-id="9d53c-284">\[[Conjunto de API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="9d53c-284">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getEntireRow()
    fullName: getEntireRow()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getEntireRow(): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="9d53c-285">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="9d53c-285">Examples</span></span>

          ```javascript
          // Gets an object that represents the entire row of the range 
          // (for example, if the current range represents cells "B4:E11", 
          // its GetEntireRow is a range that represents rows "4:11").
          Excel.run(function (ctx) {
              var sheetName = "Sheet1";
              var rangeAddress = "D:F"; 
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              var rangeER = range.getEntireRow();
              rangeER.load('address');
              return ctx.sync().then(function() {
                  console.log(rangeER.address);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: excel_release.Excel.Range.getImage
    summary: |-
      <span data-ttu-id="9d53c-286">Representa el intervalo como una imagen PNG codificada en Base64.</span><span class="sxs-lookup"><span data-stu-id="9d53c-286">Renders the range as a base64-encoded png image.</span></span>

      <span data-ttu-id="9d53c-287">\[[Conjunto de API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="9d53c-287">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getImage()
    fullName: getImage()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getImage(): OfficeExtension.ClientResult<string>;'
      return:
        type:
          - OfficeExtension.ClientResult<string>
        description: ''
  - uid: excel_release.Excel.Range.getIntersection
    summary: |-
      <span data-ttu-id="9d53c-288">Obtiene el objeto de rango que representa la intersección rectangular de los rangos especificados.</span><span class="sxs-lookup"><span data-stu-id="9d53c-288">Gets the range object that represents the rectangular intersection of the given ranges.</span></span>

      <span data-ttu-id="9d53c-289">\[[Conjunto de API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="9d53c-289">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getIntersection(anotherRange)
    fullName: getIntersection(anotherRange)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getIntersection(anotherRange: Range | string): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="9d53c-290">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="9d53c-290">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var range = 
                  ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getIntersection("D4:G6");
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // prints Sheet1!D4:F6
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: anotherRange
          description: <span data-ttu-id="9d53c-291">Objeto de intervalo o dirección de intervalo que se usará para determinar la intersección de los intervalos.</span><span class="sxs-lookup"><span data-stu-id="9d53c-291">The range object or range address that will be used to determine the intersection of ranges.</span></span>
          type:
            - Range | string
  - uid: excel_release.Excel.Range.getIntersectionOrNullObject
    summary: |-
      <span data-ttu-id="9d53c-292">Obtiene el objeto de intervalo que representa la intersección rectangular de los intervalos especificados.</span><span class="sxs-lookup"><span data-stu-id="9d53c-292">Gets the range object that represents the rectangular intersection of the given ranges.</span></span> <span data-ttu-id="9d53c-293">Si no se encuentra ninguna intersección, se devolverá un objeto NULL.</span><span class="sxs-lookup"><span data-stu-id="9d53c-293">If no intersection is found, will return a null object.</span></span>

      <span data-ttu-id="9d53c-294">\[[Conjunto de API: ExcelApi 1,4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="9d53c-294">\[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getIntersectionOrNullObject(anotherRange)
    fullName: getIntersectionOrNullObject(anotherRange)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getIntersectionOrNullObject(anotherRange: Range | string): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="9d53c-295">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="9d53c-295">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const salesTable = sheet.tables.getItem("SalesTable");
              const dataRange = salesTable.getDataBodyRange();

              // We want the most recent quarter that has data, so
              // exclude quarters without data and get the last of
              // the remaining columns.
              const usedDataRange = dataRange.getUsedRange(true /* valuesOnly */);
              const currentQuarterRange = usedDataRange.getLastColumn();

              // Asian and European teams have separate contests.
              const asianSalesRange = sheet.getRange("A2:E4");
              const europeanSalesRange = sheet.getRange("A5:E7");

              // The data for each chart is the intersection of the
              // current quarter column and the rows for the continent.
              const asianContestRange = asianSalesRange.getIntersectionOrNullObject(currentQuarterRange);
              const europeanContestRange = europeanSalesRange.getIntersectionOrNullObject(currentQuarterRange);

              // Must sync before you can test the output of *OrNullObject
              // method/property.
              await context.sync();

              if (asianContestRange.isNullObject) {
                  // See the declaration of this method for how to
                  // test this code path.
                  reportMissingData("Asian");
              } else {
                  createContinentChart(
                      sheet,
                      "Asian",
                      asianContestRange,
                      "A9",
                      "F24"
                  );
              }

              if (europeanContestRange.isNullObject) {
                  // See the declaration of this method for how to
                  // test this code path.
                  reportMissingData("European");
              } else {
                  createContinentChart(
                      sheet,
                      "European",
                      europeanContestRange,
                      "A25",
                      "F40"
                  );
              }

              await context.sync();
          });
          ```
      parameters:
        - id: anotherRange
          description: <span data-ttu-id="9d53c-296">Objeto de intervalo o dirección de intervalo que se usará para determinar la intersección de los intervalos.</span><span class="sxs-lookup"><span data-stu-id="9d53c-296">The range object or range address that will be used to determine the intersection of ranges.</span></span>
          type:
            - Range | string
  - uid: excel_release.Excel.Range.getLastCell
    summary: |-
      <span data-ttu-id="9d53c-297">Obtiene la última celda del intervalo.</span><span class="sxs-lookup"><span data-stu-id="9d53c-297">Gets the last cell within the range.</span></span> <span data-ttu-id="9d53c-298">Por ejemplo, la última celda de "B2:D5" es "D5".</span><span class="sxs-lookup"><span data-stu-id="9d53c-298">For example, the last cell of "B2:D5" is "D5".</span></span>

      <span data-ttu-id="9d53c-299">\[[Conjunto de API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="9d53c-299">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getLastCell()
    fullName: getLastCell()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getLastCell(): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="9d53c-300">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="9d53c-300">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getLastCell();
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // prints Sheet1!F8
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: excel_release.Excel.Range.getLastColumn
    summary: |-
      <span data-ttu-id="9d53c-301">Obtiene la última columna del intervalo.</span><span class="sxs-lookup"><span data-stu-id="9d53c-301">Gets the last column within the range.</span></span> <span data-ttu-id="9d53c-302">Por ejemplo, la última columna de "B2:D5" es "D2:D5".</span><span class="sxs-lookup"><span data-stu-id="9d53c-302">For example, the last column of "B2:D5" is "D2:D5".</span></span>

      <span data-ttu-id="9d53c-303">\[[Conjunto de API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="9d53c-303">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getLastColumn()
    fullName: getLastColumn()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getLastColumn(): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="9d53c-304">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="9d53c-304">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getLastColumn();
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // prints Sheet1!F1:F8
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: excel_release.Excel.Range.getLastRow
    summary: |-
      <span data-ttu-id="9d53c-305">Obtiene la última fila del intervalo.</span><span class="sxs-lookup"><span data-stu-id="9d53c-305">Gets the last row within the range.</span></span> <span data-ttu-id="9d53c-306">Por ejemplo, la última fila de "B2:D5" es "B5:D5".</span><span class="sxs-lookup"><span data-stu-id="9d53c-306">For example, the last row of "B2:D5" is "B5:D5".</span></span>

      <span data-ttu-id="9d53c-307">\[[Conjunto de API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="9d53c-307">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getLastRow()
    fullName: getLastRow()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getLastRow(): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="9d53c-308">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="9d53c-308">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getLastRow();
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // prints Sheet1!A8:F8
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: excel_release.Excel.Range.getOffsetRange
    summary: |-
      <span data-ttu-id="9d53c-p144">Obtiene un objeto que representa un intervalo desplazado con respecto al intervalo especificado. La dimensión del rango devuelto coincidirá con este rango. Si el rango resultante se fuerza más allá de los límites de la cuadrícula de la hoja de cálculo, se producirá un error.</span><span class="sxs-lookup"><span data-stu-id="9d53c-p144">Gets an object which represents a range that's offset from the specified range. The dimension of the returned range will match this range. If the resulting range is forced outside the bounds of the worksheet grid, an error will be thrown.</span></span>

      <span data-ttu-id="9d53c-312">\[[Conjunto de API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="9d53c-312">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'getOffsetRange(rowOffset, columnOffset)'
    fullName: 'getOffsetRange(rowOffset, columnOffset)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getOffsetRange(rowOffset: number, columnOffset: number): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="9d53c-313">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="9d53c-313">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "D4:F6";
              var range = 
                  ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getOffsetRange(-1,4);
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // prints Sheet1!H3:K5
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: rowOffset
          description: '<span data-ttu-id="9d53c-p145">Número de filas (número positivo, negativo o 0) que debe desplazarse el intervalo. Los valores positivos desplazan hacia abajo, mientras que los negativos lo hacen hacia arriba.</span><span class="sxs-lookup"><span data-stu-id="9d53c-p145">The number of rows (positive, negative, or 0) by which the range is to be offset. Positive values are offset downward, and negative values are offset upward.</span></span>'
          type:
            - number
        - id: columnOffset
          description: '<span data-ttu-id="9d53c-p146">Número de columnas (número positivo, negativo o 0) que debe desplazarse el intervalo. Los valores positivos desplazan hacia la derecha, mientras que los negativos lo hacen hacia la izquierda.</span><span class="sxs-lookup"><span data-stu-id="9d53c-p146">The number of columns (positive, negative, or 0) by which the range is to be offset. Positive values are offset to the right, and negative values are offset to the left.</span></span>'
          type:
            - number
  - uid: excel_release.Excel.Range.getResizedRange
    summary: |-
      <span data-ttu-id="9d53c-318">Obtiene un objeto Range similar al objeto Range actual, pero con su esquina inferior derecha expandida (o contraída) mediante un número de filas y columnas.</span><span class="sxs-lookup"><span data-stu-id="9d53c-318">Gets a Range object similar to the current Range object, but with its bottom-right corner expanded (or contracted) by some number of rows and columns.</span></span>

      <span data-ttu-id="9d53c-319">\[[Conjunto de API: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="9d53c-319">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'getResizedRange(deltaRows, deltaColumns)'
    fullName: 'getResizedRange(deltaRows, deltaColumns)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getResizedRange(deltaRows: number, deltaColumns: number): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: ''
      parameters:
        - id: deltaRows
          description: '<span data-ttu-id="9d53c-p147">El número de filas en el que se va a expandir la esquina inferior derecha, con respecto al intervalo actual. Use un número positivo para expandir el intervalo, o un número negativo para reducirlo.</span><span class="sxs-lookup"><span data-stu-id="9d53c-p147">The number of rows by which to expand the bottom-right corner, relative to the current range. Use a positive number to expand the range, or a negative number to decrease it.</span></span>'
          type:
            - number
        - id: deltaColumns
          description: '<span data-ttu-id="9d53c-322">Número de columnas que se va a expandir la esquina inferior derecha con respecto al intervalo actual.</span><span class="sxs-lookup"><span data-stu-id="9d53c-322">The number of columns by which to expand the bottom-right corner, relative to the current range.</span></span> <span data-ttu-id="9d53c-323">Use un número positivo para expandir el intervalo, o un número negativo para reducirlo.</span><span class="sxs-lookup"><span data-stu-id="9d53c-323">Use a positive number to expand the range, or a negative number to decrease it.</span></span>'
          type:
            - number
  - uid: excel_release.Excel.Range.getRow
    summary: |-
      <span data-ttu-id="9d53c-324">Obtiene una fila contenida en el intervalo.</span><span class="sxs-lookup"><span data-stu-id="9d53c-324">Gets a row contained in the range.</span></span>

      <span data-ttu-id="9d53c-325">\[[Conjunto de API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="9d53c-325">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getRow(row)
    fullName: getRow(row)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRow(row: number): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="9d53c-326">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="9d53c-326">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getRow(1);
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // prints Sheet1!A2:F2
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: row
          description: <span data-ttu-id="9d53c-327">Número de fila del intervalo que se va a recuperar.</span><span class="sxs-lookup"><span data-stu-id="9d53c-327">Row number of the range to be retrieved.</span></span> <span data-ttu-id="9d53c-328">Indizado con cero.</span><span class="sxs-lookup"><span data-stu-id="9d53c-328">Zero-indexed.</span></span>
          type:
            - number
  - uid: excel_release.Excel.Range.getRowProperties
    summary: |-
      <span data-ttu-id="9d53c-329">Devuelve una matriz de una sola dimensión que encapsula los datos para la fuente, el relleno, los bordes, la alineación y otras propiedades de la fila.</span><span class="sxs-lookup"><span data-stu-id="9d53c-329">Returns a single-dimensional array, encapsulating the data for each row's font, fill, borders, alignment, and other properties.</span></span> <span data-ttu-id="9d53c-330">Se devolverá null para las propiedades que no son coherentes en cada celda de una fila determinada.</span><span class="sxs-lookup"><span data-stu-id="9d53c-330">For properties that are not consistent across each cell within a given row, null will be returned.</span></span>

      <span data-ttu-id="9d53c-331">\[[Conjunto de API: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="9d53c-331">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getRowProperties(rowPropertiesLoadOptions)
    fullName: getRowProperties(rowPropertiesLoadOptions)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRowProperties(rowPropertiesLoadOptions: RowPropertiesLoadOptions): OfficeExtension.ClientResult<RowProperties[]>;'
      return:
        type:
          - 'OfficeExtension.ClientResult<RowProperties[]>'
        description: <span data-ttu-id="9d53c-332">Matriz donde cada elemento representa las propiedades solicitadas de la fila correspondiente.</span><span class="sxs-lookup"><span data-stu-id="9d53c-332">An array where each item represents the requested properties of the corresponding row.</span></span>
      parameters:
        - id: rowPropertiesLoadOptions
          description: <span data-ttu-id="9d53c-333">Objeto que representa las propiedades de fila que se cargan.</span><span class="sxs-lookup"><span data-stu-id="9d53c-333">An object that represents which row properties to load.</span></span>
          type:
            - RowPropertiesLoadOptions
  - uid: excel_release.Excel.Range.getRowsAbove
    summary: |-
      <span data-ttu-id="9d53c-334">Obtiene un número determinado de filas encima del objeto Range actual.</span><span class="sxs-lookup"><span data-stu-id="9d53c-334">Gets a certain number of rows above the current Range object.</span></span>

      <span data-ttu-id="9d53c-335">\[[Conjunto de API: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="9d53c-335">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getRowsAbove(count)
    fullName: getRowsAbove(count)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRowsAbove(count?: number): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: ''
      parameters:
        - id: count
          description: '<span data-ttu-id="9d53c-p151">Opcional. El número de filas que se va a incluir en el intervalo resultante. En general, use un número positivo para crear un intervalo fuera del intervalo actual. También puede usar un número negativo para crear un intervalo dentro del intervalo actual. El valor predeterminado es 1.</span><span class="sxs-lookup"><span data-stu-id="9d53c-p151">Optional. The number of rows to include in the resulting range. In general, use a positive number to create a range outside the current range. You can also use a negative number to create a range within the current range. The default value is 1.</span></span>'
          type:
            - number
  - uid: excel_release.Excel.Range.getRowsBelow
    summary: |-
      <span data-ttu-id="9d53c-341">Obtiene un número determinado de filas debajo del objeto Range actual.</span><span class="sxs-lookup"><span data-stu-id="9d53c-341">Gets a certain number of rows below the current Range object.</span></span>

      <span data-ttu-id="9d53c-342">\[[Conjunto de API: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="9d53c-342">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getRowsBelow(count)
    fullName: getRowsBelow(count)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRowsBelow(count?: number): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: ''
      parameters:
        - id: count
          description: '<span data-ttu-id="9d53c-p152">Opcional. El número de filas que se va a incluir en el intervalo resultante. En general, use un número positivo para crear un intervalo fuera del intervalo actual. También puede usar un número negativo para crear un intervalo dentro del intervalo actual. El valor predeterminado es 1.</span><span class="sxs-lookup"><span data-stu-id="9d53c-p152">Optional. The number of rows to include in the resulting range. In general, use a positive number to create a range outside the current range. You can also use a negative number to create a range within the current range. The default value is 1.</span></span>'
          type:
            - number
  - uid: excel_release.Excel.Range.getSpecialCells
    summary: |-
      <span data-ttu-id="9d53c-348">Obtiene el objeto RangeAreas, que incluye uno o más intervalos rectangulares y representa todas las celdas que coinciden con el tipo y valor especificados.</span><span class="sxs-lookup"><span data-stu-id="9d53c-348">Gets the RangeAreas object, comprising one or more rectangular ranges, that represents all the cells that match the specified type and value.</span></span> <span data-ttu-id="9d53c-349">Si no se encuentra ninguna celda especial, se producirá un error ItemNotFound.</span><span class="sxs-lookup"><span data-stu-id="9d53c-349">If no special cells are found, an ItemNotFound error will be thrown.</span></span>

      <span data-ttu-id="9d53c-350">\[[Conjunto de API: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="9d53c-350">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'getSpecialCells(cellType, cellValueType)'
    fullName: 'getSpecialCells(cellType, cellValueType)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSpecialCells(cellType: Excel.SpecialCellType, cellValueType?: Excel.SpecialCellValueType): Excel.RangeAreas;'
      return:
        type:
          - excel.Excel.RangeAreas
        description: |-


          #### <a name="examples"></a><span data-ttu-id="9d53c-351">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="9d53c-351">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {

              const sheet = context.workbook.worksheets.getActiveWorksheet();
              const usedRange = sheet.getUsedRange();

              // Find the ranges with either text or logical (boolean) values.
              const formulaRanges = usedRange.getSpecialCells("Constants", "LogicalText");
              formulaRanges.format.fill.color = "orange";

              return context.sync();
          });
          ```
      parameters:
        - id: cellType
          description: <span data-ttu-id="9d53c-352">Tipo de las celdas que se van a incluir.</span><span class="sxs-lookup"><span data-stu-id="9d53c-352">The type of cells to include.</span></span>
          type:
            - excel.Excel.SpecialCellType
        - id: cellValueType
          description: '<span data-ttu-id="9d53c-353">Si el argumento cellType es constante o fórmulas, este argumento se usa para determinar los tipos de celdas que se van a incluir en el resultado.</span><span class="sxs-lookup"><span data-stu-id="9d53c-353">If cellType is either Constants or Formulas, this argument is used to determine which types of cells to include in the result.</span></span> <span data-ttu-id="9d53c-354">Estos valores se pueden combinar para que devuelvan más de un tipo.</span><span class="sxs-lookup"><span data-stu-id="9d53c-354">These values can be combined together to return more than one type.</span></span> <span data-ttu-id="9d53c-355">El valor predeterminado es seleccionar todas las constantes o fórmulas, sea cual sea el tipo.</span><span class="sxs-lookup"><span data-stu-id="9d53c-355">The default is to select all constants or formulas, no matter what the type.</span></span>'
          type:
            - excel.Excel.SpecialCellValueType
  - uid: excel_release.Excel.Range.getSpecialCells_1
    summary: |-
      <span data-ttu-id="9d53c-356">Obtiene el objeto RangeAreas, que incluye uno o más intervalos rectangulares y representa todas las celdas que coinciden con el tipo y valor especificados.</span><span class="sxs-lookup"><span data-stu-id="9d53c-356">Gets the RangeAreas object, comprising one or more rectangular ranges, that represents all the cells that match the specified type and value.</span></span> <span data-ttu-id="9d53c-357">Si no se encuentra ninguna celda especial, se producirá un error ItemNotFound.</span><span class="sxs-lookup"><span data-stu-id="9d53c-357">If no special cells are found, an ItemNotFound error will be thrown.</span></span>

      <span data-ttu-id="9d53c-358">\[[Conjunto de API: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="9d53c-358">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'getSpecialCells(cellTypeString, cellValueType)'
    fullName: 'getSpecialCells(cellTypeString, cellValueType)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSpecialCells(cellTypeString: "ConditionalFormats" | "DataValidations" | "Blanks" | "Constants" | "Formulas" | "SameConditionalFormat" | "SameDataValidation" | "Visible", cellValueType?: "All" | "Errors" | "ErrorsLogical" | "ErrorsNumbers" | "ErrorsText" | "ErrorsLogicalNumber" | "ErrorsLogicalText" | "ErrorsNumberText" | "Logical" | "LogicalNumbers" | "LogicalText" | "LogicalNumbersText" | "Numbers" | "NumbersText" | "Text"): Excel.RangeAreas;'
      return:
        type:
          - excel.Excel.RangeAreas
        description: ''
      parameters:
        - id: cellTypeString
          description: <span data-ttu-id="9d53c-359">Tipo de las celdas que se van a incluir.</span><span class="sxs-lookup"><span data-stu-id="9d53c-359">The type of cells to include.</span></span>
          type:
            - '"ConditionalFormats" | "DataValidations" | "Blanks" | "Constants" | "Formulas" | "SameConditionalFormat" | "SameDataValidation" | "Visible"'
        - id: cellValueType
          description: '<span data-ttu-id="9d53c-360">Si el argumento cellType es constante o fórmulas, este argumento se usa para determinar los tipos de celdas que se van a incluir en el resultado.</span><span class="sxs-lookup"><span data-stu-id="9d53c-360">If cellType is either Constants or Formulas, this argument is used to determine which types of cells to include in the result.</span></span> <span data-ttu-id="9d53c-361">Estos valores se pueden combinar para que devuelvan más de un tipo.</span><span class="sxs-lookup"><span data-stu-id="9d53c-361">These values can be combined together to return more than one type.</span></span> <span data-ttu-id="9d53c-362">El valor predeterminado es seleccionar todas las constantes o fórmulas, sea cual sea el tipo.</span><span class="sxs-lookup"><span data-stu-id="9d53c-362">The default is to select all constants or formulas, no matter what the type.</span></span>'
          type:
            - '"All" | "Errors" | "ErrorsLogical" | "ErrorsNumbers" | "ErrorsText" | "ErrorsLogicalNumber" | "ErrorsLogicalText" | "ErrorsNumberText" | "Logical" | "LogicalNumbers" | "LogicalText" | "LogicalNumbersText" | "Numbers" | "NumbersText" | "Text"'
  - uid: excel_release.Excel.Range.getSpecialCellsOrNullObject
    summary: |-
      <span data-ttu-id="9d53c-363">Obtiene el objeto RangeAreas, que incluye uno o más intervalos y representa todas las celdas que coinciden con el tipo y valor especificados.</span><span class="sxs-lookup"><span data-stu-id="9d53c-363">Gets the RangeAreas object, comprising one or more ranges, that represents all the cells that match the specified type and value.</span></span> <span data-ttu-id="9d53c-364">Si no se encuentra ninguna celda especial, se devolverá un objeto null.</span><span class="sxs-lookup"><span data-stu-id="9d53c-364">If no special cells are found, a null object will be returned.</span></span>

      <span data-ttu-id="9d53c-365">\[[Conjunto de API: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="9d53c-365">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'getSpecialCellsOrNullObject(cellType, cellValueType)'
    fullName: 'getSpecialCellsOrNullObject(cellType, cellValueType)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSpecialCellsOrNullObject(cellType: Excel.SpecialCellType, cellValueType?: Excel.SpecialCellValueType): Excel.RangeAreas;'
      return:
        type:
          - excel.Excel.RangeAreas
        description: ''
      parameters:
        - id: cellType
          description: <span data-ttu-id="9d53c-366">Tipo de las celdas que se van a incluir.</span><span class="sxs-lookup"><span data-stu-id="9d53c-366">The type of cells to include.</span></span>
          type:
            - excel.Excel.SpecialCellType
        - id: cellValueType
          description: '<span data-ttu-id="9d53c-367">Si el argumento cellType es constante o fórmulas, este argumento se usa para determinar los tipos de celdas que se van a incluir en el resultado.</span><span class="sxs-lookup"><span data-stu-id="9d53c-367">If cellType is either Constants or Formulas, this argument is used to determine which types of cells to include in the result.</span></span> <span data-ttu-id="9d53c-368">Estos valores se pueden combinar para que devuelvan más de un tipo.</span><span class="sxs-lookup"><span data-stu-id="9d53c-368">These values can be combined together to return more than one type.</span></span> <span data-ttu-id="9d53c-369">El valor predeterminado es seleccionar todas las constantes o fórmulas, sea cual sea el tipo.</span><span class="sxs-lookup"><span data-stu-id="9d53c-369">The default is to select all constants or formulas, no matter what the type.</span></span>'
          type:
            - excel.Excel.SpecialCellValueType
  - uid: excel_release.Excel.Range.getSpecialCellsOrNullObject_1
    summary: |-
      <span data-ttu-id="9d53c-370">Obtiene el objeto RangeAreas, que incluye uno o más intervalos y representa todas las celdas que coinciden con el tipo y valor especificados.</span><span class="sxs-lookup"><span data-stu-id="9d53c-370">Gets the RangeAreas object, comprising one or more ranges, that represents all the cells that match the specified type and value.</span></span> <span data-ttu-id="9d53c-371">Si no se encuentra ninguna celda especial, se devolverá un objeto null.</span><span class="sxs-lookup"><span data-stu-id="9d53c-371">If no special cells are found, a null object will be returned.</span></span>

      <span data-ttu-id="9d53c-372">\[[Conjunto de API: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="9d53c-372">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'getSpecialCellsOrNullObject(cellTypeString, cellValueType)'
    fullName: 'getSpecialCellsOrNullObject(cellTypeString, cellValueType)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSpecialCellsOrNullObject(cellTypeString: "ConditionalFormats" | "DataValidations" | "Blanks" | "Constants" | "Formulas" | "SameConditionalFormat" | "SameDataValidation" | "Visible", cellValueType?: "All" | "Errors" | "ErrorsLogical" | "ErrorsNumbers" | "ErrorsText" | "ErrorsLogicalNumber" | "ErrorsLogicalText" | "ErrorsNumberText" | "Logical" | "LogicalNumbers" | "LogicalText" | "LogicalNumbersText" | "Numbers" | "NumbersText" | "Text"): Excel.RangeAreas;'
      return:
        type:
          - excel.Excel.RangeAreas
        description: ''
      parameters:
        - id: cellTypeString
          description: <span data-ttu-id="9d53c-373">Tipo de las celdas que se van a incluir.</span><span class="sxs-lookup"><span data-stu-id="9d53c-373">The type of cells to include.</span></span>
          type:
            - '"ConditionalFormats" | "DataValidations" | "Blanks" | "Constants" | "Formulas" | "SameConditionalFormat" | "SameDataValidation" | "Visible"'
        - id: cellValueType
          description: '<span data-ttu-id="9d53c-374">Si el argumento cellType es constante o fórmulas, este argumento se usa para determinar los tipos de celdas que se van a incluir en el resultado.</span><span class="sxs-lookup"><span data-stu-id="9d53c-374">If cellType is either Constants or Formulas, this argument is used to determine which types of cells to include in the result.</span></span> <span data-ttu-id="9d53c-375">Estos valores se pueden combinar para que devuelvan más de un tipo.</span><span class="sxs-lookup"><span data-stu-id="9d53c-375">These values can be combined together to return more than one type.</span></span> <span data-ttu-id="9d53c-376">El valor predeterminado es seleccionar todas las constantes o fórmulas, sea cual sea el tipo.</span><span class="sxs-lookup"><span data-stu-id="9d53c-376">The default is to select all constants or formulas, no matter what the type.</span></span>'
          type:
            - '"All" | "Errors" | "ErrorsLogical" | "ErrorsNumbers" | "ErrorsText" | "ErrorsLogicalNumber" | "ErrorsLogicalText" | "ErrorsNumberText" | "Logical" | "LogicalNumbers" | "LogicalText" | "LogicalNumbersText" | "Numbers" | "NumbersText" | "Text"'
  - uid: excel_release.Excel.Range.getSurroundingRegion
    summary: |-
      <span data-ttu-id="9d53c-377">Devuelve un objeto Range que representa la región circundante para la celda superior izquierda de este intervalo.</span><span class="sxs-lookup"><span data-stu-id="9d53c-377">Returns a Range object that represents the surrounding region for the top-left cell in this range.</span></span> <span data-ttu-id="9d53c-378">Una región circundante es un intervalo limitado por cualquier combinación de filas y columnas en blanco en relación a este intervalo.</span><span class="sxs-lookup"><span data-stu-id="9d53c-378">A surrounding region is a range bounded by any combination of blank rows and blank columns relative to this range.</span></span>

      <span data-ttu-id="9d53c-379">\[[Conjunto de API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="9d53c-379">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getSurroundingRegion()
    fullName: getSurroundingRegion()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSurroundingRegion(): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: ''
  - uid: excel_release.Excel.Range.getTables
    summary: |-
      <span data-ttu-id="9d53c-380">Obtiene una colección con ámbito de tablas que se superpone con el intervalo.</span><span class="sxs-lookup"><span data-stu-id="9d53c-380">Gets a scoped collection of tables that overlap with the range.</span></span>

      <span data-ttu-id="9d53c-381">\[[Conjunto de API: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="9d53c-381">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getTables(fullyContained)
    fullName: getTables(fullyContained)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTables(fullyContained?: boolean): Excel.TableScopedCollection;'
      return:
        type:
          - excel.Excel.TableScopedCollection
        description: ''
      parameters:
        - id: fullyContained
          description: '<span data-ttu-id="9d53c-382">Si es true, devuelve solo las tablas que están completamente contenidas dentro de los límites del rango.</span><span class="sxs-lookup"><span data-stu-id="9d53c-382">If true, returns only tables that are fully contained within the range bounds.</span></span> <span data-ttu-id="9d53c-383">El valor predeterminado es False.</span><span class="sxs-lookup"><span data-stu-id="9d53c-383">The default value is false.</span></span>'
          type:
            - boolean
  - uid: excel_release.Excel.Range.getUsedRange
    summary: |-
      <span data-ttu-id="9d53c-p163">Devuelve el rango usado del objeto de rango especificado. Si no hay ninguna celda usada dentro del rango, esta función producirá un error ItemNotFound.</span><span class="sxs-lookup"><span data-stu-id="9d53c-p163">Returns the used range of the given range object. If there are no used cells within the range, this function will throw an ItemNotFound error.</span></span>

      <span data-ttu-id="9d53c-386">\[[Conjunto de API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="9d53c-386">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getUsedRange(valuesOnly)
    fullName: getUsedRange(valuesOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getUsedRange(valuesOnly?: boolean): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="9d53c-387">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="9d53c-387">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "D:F";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              var rangeUR = range.getUsedRange();
              rangeUR.load('address');
              return ctx.sync().then(function() {
                  console.log(rangeUR.address);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const salesTable = sheet.tables.getItem("SalesTable");
              const dataRange = salesTable.getDataBodyRange();

              // We want the most recent quarter that has data, so
              // exclude quarters without data and get the last of
              // the remaining columns.
              const usedDataRange = dataRange.getUsedRange(true /* valuesOnly */);
              const currentQuarterRange = usedDataRange.getLastColumn();

              // Asian and European teams have separate contests.
              const asianSalesRange = sheet.getRange("A2:E4");
              const europeanSalesRange = sheet.getRange("A5:E7");

              // The data for each chart is the intersection of the
              // current quarter column and the rows for the continent.
              const asianContestRange = asianSalesRange.getIntersectionOrNullObject(currentQuarterRange);
              const europeanContestRange = europeanSalesRange.getIntersectionOrNullObject(currentQuarterRange);

              // Must sync before you can test the output of *OrNullObject
              // method/property.
              await context.sync();

              if (asianContestRange.isNullObject) {
                  // See the declaration of this method for how to
                  // test this code path.
                  reportMissingData("Asian");
              } else {
                  createContinentChart(
                      sheet,
                      "Asian",
                      asianContestRange,
                      "A9",
                      "F24"
                  );
              }

              if (europeanContestRange.isNullObject) {
                  // See the declaration of this method for how to
                  // test this code path.
                  reportMissingData("European");
              } else {
                  createContinentChart(
                      sheet,
                      "European",
                      europeanContestRange,
                      "A25",
                      "F40"
                  );
              }

              await context.sync();
          });
          ```
      parameters:
        - id: valuesOnly
          description: '<span data-ttu-id="9d53c-388">Solo tiene en cuenta las celdas con valores como celdas usadas.</span><span class="sxs-lookup"><span data-stu-id="9d53c-388">Considers only cells with values as used cells.</span></span> <span data-ttu-id="9d53c-389">\[Conjunto de API: ExcelApi 1,2\]</span><span class="sxs-lookup"><span data-stu-id="9d53c-389">\[Api set: ExcelApi 1.2\]</span></span>'
          type:
            - boolean
  - uid: excel_release.Excel.Range.getUsedRangeOrNullObject
    summary: |-
      <span data-ttu-id="9d53c-p165">Devuelve el rango usado del objeto de rango especificado. Si no hay ninguna celda usada dentro del rango, esta función devolverá un objeto NULL.</span><span class="sxs-lookup"><span data-stu-id="9d53c-p165">Returns the used range of the given range object. If there are no used cells within the range, this function will return a null object.</span></span>

      <span data-ttu-id="9d53c-392">\[[Conjunto de API: ExcelApi 1,4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="9d53c-392">\[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getUsedRangeOrNullObject(valuesOnly)
    fullName: getUsedRangeOrNullObject(valuesOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getUsedRangeOrNullObject(valuesOnly?: boolean): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="9d53c-393">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="9d53c-393">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const salesTable = sheet.tables.getItem("SalesTable");
              const dataRange = salesTable.getDataBodyRange();

              // Pass true so only cells with values count as used
              const usedDataRange = dataRange.getUsedRangeOrNullObject(
                  true /* valuesOnly */
              );

              //Must sync before reading value returned from *OrNullObject method/property.
              await context.sync();

              if (usedDataRange.isNullObject) {
                  console.log("Need Data to Make Chart");
                  console.log("To create a meaningful chart, press 'Fill the table' (or add names to the Product column and numbers to some of the other cells). Then press 'Try to create chart' again.");
              } else {
                  const chart = sheet.charts.add(
                      Excel.ChartType.columnClustered,
                      dataRange,
                      "Columns"
                  );
                  chart.setPosition("A15", "F30");
                  chart.title.text = "Quarterly sales chart";
                  chart.legend.position = "Right";
                  chart.legend.format.fill.setSolidColor("white");
                  chart.dataLabels.format.font.size = 15;
                  chart.dataLabels.format.font.color = "black";
              }

              await context.sync();
          });
          ```
      parameters:
        - id: valuesOnly
          description: <span data-ttu-id="9d53c-394">Solo tiene en cuenta las celdas con valores como celdas usadas.</span><span class="sxs-lookup"><span data-stu-id="9d53c-394">Considers only cells with values as used cells.</span></span>
          type:
            - boolean
  - uid: excel_release.Excel.Range.getVisibleView
    summary: |-
      <span data-ttu-id="9d53c-395">Representa las filas visibles del intervalo actual.</span><span class="sxs-lookup"><span data-stu-id="9d53c-395">Represents the visible rows of the current range.</span></span>

      <span data-ttu-id="9d53c-396">\[[Conjunto de API: ExcelApi 1,3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="9d53c-396">\[ [API set: ExcelApi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getVisibleView()
    fullName: getVisibleView()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getVisibleView(): Excel.RangeView;'
      return:
        type:
          - excel.Excel.RangeView
        description: ''
  - uid: excel_release.Excel.Range.hidden
    summary: |-
      <span data-ttu-id="9d53c-397">Representa si todas las celdas del rango actual están ocultas.</span><span class="sxs-lookup"><span data-stu-id="9d53c-397">Represents if all cells of the current range are hidden.</span></span> <span data-ttu-id="9d53c-398">Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="9d53c-398">Read-only.</span></span>

      <span data-ttu-id="9d53c-399">\[[Conjunto de API: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="9d53c-399">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: hidden
    fullName: hidden
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly hidden: boolean;'
      return:
        type:
          - boolean
  - uid: excel_release.Excel.Range.hyperlink
    summary: |-
      <span data-ttu-id="9d53c-400">Representa el hipervínculo para el intervalo actual.</span><span class="sxs-lookup"><span data-stu-id="9d53c-400">Represents the hyperlink for the current range.</span></span>

      <span data-ttu-id="9d53c-401">\[[Conjunto de API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="9d53c-401">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: hyperlink
    fullName: hyperlink
    langs:
      - typeScript
    type: property
    syntax:
      content: 'hyperlink: Excel.RangeHyperlink;'
      return:
        type:
          - excel.Excel.RangeHyperlink
        description: |-


          #### <a name="examples"></a><span data-ttu-id="9d53c-402">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="9d53c-402">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Orders");

              let productsRange = sheet.getRange("A3:A5");
              productsRange.load("values");

              await context.sync();

              // Create a hyperlink to a URL 
              // for each product name in the first table.
              for (let i = 0; i < productsRange.values.length; i++) {
                  let cellRange = productsRange.getCell(i, 0);
                  let cellText = productsRange.values[i][0];

                  let hyperlink = {
                      textToDisplay: cellText,
                      screenTip: "Search Bing for '" + cellText + "'",
                      address: "https://www.bing.com?q=" + cellText
                  }
                  cellRange.hyperlink = hyperlink;
              }

              await context.sync();
          });
          ```
  - uid: excel_release.Excel.Range.insert
    summary: |-
      <span data-ttu-id="9d53c-p167">Inserta una celda o un intervalo de celdas en la hoja de cálculo en lugar de este rango y desplaza las demás celdas para crear espacio. Devuelve un nuevo objeto Range en el espacio que queda en blanco.</span><span class="sxs-lookup"><span data-stu-id="9d53c-p167">Inserts a cell or a range of cells into the worksheet in place of this range, and shifts the other cells to make space. Returns a new Range object at the now blank space.</span></span>

      <span data-ttu-id="9d53c-405">\[[Conjunto de API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="9d53c-405">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: insert(shift)
    fullName: insert(shift)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insert(shift: Excel.InsertShiftDirection): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="9d53c-406">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="9d53c-406">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "F5:F10";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              range.insert();
              return ctx.sync(); 
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: shift
          description: <span data-ttu-id="9d53c-407">Especifica hacia dónde se desplazarán las celdas.</span><span class="sxs-lookup"><span data-stu-id="9d53c-407">Specifies which way to shift the cells.</span></span> <span data-ttu-id="9d53c-408">Consulte Excel. InsertShiftDirection para obtener información detallada.</span><span class="sxs-lookup"><span data-stu-id="9d53c-408">See Excel.InsertShiftDirection for details.</span></span>
          type:
            - excel.Excel.InsertShiftDirection
  - uid: excel_release.Excel.Range.insert_1
    summary: |-
      <span data-ttu-id="9d53c-p169">Inserta una celda o un intervalo de celdas en la hoja de cálculo en lugar de este rango y desplaza las demás celdas para crear espacio. Devuelve un nuevo objeto Range en el espacio que queda en blanco.</span><span class="sxs-lookup"><span data-stu-id="9d53c-p169">Inserts a cell or a range of cells into the worksheet in place of this range, and shifts the other cells to make space. Returns a new Range object at the now blank space.</span></span>

      <span data-ttu-id="9d53c-411">\[[Conjunto de API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="9d53c-411">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: insert(shiftString)
    fullName: insert(shiftString)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insert(shiftString: "Down" | "Right"): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: ''
      parameters:
        - id: shiftString
          description: <span data-ttu-id="9d53c-412">Especifica hacia dónde se desplazarán las celdas.</span><span class="sxs-lookup"><span data-stu-id="9d53c-412">Specifies which way to shift the cells.</span></span> <span data-ttu-id="9d53c-413">Consulte Excel. InsertShiftDirection para obtener información detallada.</span><span class="sxs-lookup"><span data-stu-id="9d53c-413">See Excel.InsertShiftDirection for details.</span></span>
          type:
            - '"Down" | "Right"'
  - uid: excel_release.Excel.Range.isEntireColumn
    summary: |-
      <span data-ttu-id="9d53c-414">Representa si el intervalo actual es una columna completa.</span><span class="sxs-lookup"><span data-stu-id="9d53c-414">Represents if the current range is an entire column.</span></span> <span data-ttu-id="9d53c-415">Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="9d53c-415">Read-only.</span></span>

      <span data-ttu-id="9d53c-416">\[[Conjunto de API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="9d53c-416">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: isEntireColumn
    fullName: isEntireColumn
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly isEntireColumn: boolean;'
      return:
        type:
          - boolean
  - uid: excel_release.Excel.Range.isEntireRow
    summary: |-
      <span data-ttu-id="9d53c-417">Representa si el intervalo actual es una fila completa.</span><span class="sxs-lookup"><span data-stu-id="9d53c-417">Represents if the current range is an entire row.</span></span> <span data-ttu-id="9d53c-418">Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="9d53c-418">Read-only.</span></span>

      <span data-ttu-id="9d53c-419">\[[Conjunto de API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="9d53c-419">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: isEntireRow
    fullName: isEntireRow
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly isEntireRow: boolean;'
      return:
        type:
          - boolean
  - uid: excel_release.Excel.Range.linkedDataTypeState
    summary: |-
      <span data-ttu-id="9d53c-420">Indica el estado del tipo de datos de cada celda.</span><span class="sxs-lookup"><span data-stu-id="9d53c-420">Represents the data type state of each cell.</span></span> <span data-ttu-id="9d53c-421">Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="9d53c-421">Read-only.</span></span>

      <span data-ttu-id="9d53c-422">\[[Conjunto de API: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="9d53c-422">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: linkedDataTypeState
    fullName: linkedDataTypeState
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly linkedDataTypeState: Excel.LinkedDataTypeState[][];'
      return:
        type:
          - 'Excel.LinkedDataTypeState[][]'
  - uid: excel_release.Excel.Range.load
    summary: '<span data-ttu-id="9d53c-423">Pone en cola un comando para cargar las propiedades especificadas del objeto.</span><span class="sxs-lookup"><span data-stu-id="9d53c-423">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="9d53c-424">Antes de leer las propiedades, debe llamar a "context.sync()".</span><span class="sxs-lookup"><span data-stu-id="9d53c-424">You must call "context.sync()" before reading the properties.</span></span>'
    remarks: |-
      <span data-ttu-id="9d53c-425">Además de esta firma, este método tiene las siguientes firmas:</span><span class="sxs-lookup"><span data-stu-id="9d53c-425">In addition to this signature, this method has the following signatures:</span></span>

      <span data-ttu-id="9d53c-426">`load(option?: string | string[]): Excel.Range`-Donde opción es una cadena delimitada por comas o una matriz de cadenas que especifican las propiedades que se van a cargar.</span><span class="sxs-lookup"><span data-stu-id="9d53c-426">`load(option?: string | string[]): Excel.Range` - Where option is a comma-delimited string or an array of strings that specify the properties to load.</span></span>

      <span data-ttu-id="9d53c-427">`load(option?: { select?: string; expand?: string; }): Excel.Range`-Where opción. Select es una cadena delimitada por comas que especifica las propiedades que se van a cargar y Options. Expand es una cadena delimitada por comas que especifica las propiedades de navegación que se deben cargar.</span><span class="sxs-lookup"><span data-stu-id="9d53c-427">`load(option?: { select?: string; expand?: string; }): Excel.Range` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>

      <span data-ttu-id="9d53c-428">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.Range`-Solo disponible en tipos de colección.</span><span class="sxs-lookup"><span data-stu-id="9d53c-428">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.Range` - Only available on collection types.</span></span> <span data-ttu-id="9d53c-429">Es similar a la firma anterior.</span><span class="sxs-lookup"><span data-stu-id="9d53c-429">It is similar to the preceding signature.</span></span> <span data-ttu-id="9d53c-430">Option. Top especifica el número máximo de elementos de colección que se pueden incluir en el resultado.</span><span class="sxs-lookup"><span data-stu-id="9d53c-430">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="9d53c-431">La opción. SKIP especifica el número de elementos que se deben omitir y que no se incluyen en el resultado.</span><span class="sxs-lookup"><span data-stu-id="9d53c-431">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="9d53c-432">Si se especifica Option. Top, el conjunto de resultados se iniciará después de omitir el número especificado de elementos.</span><span class="sxs-lookup"><span data-stu-id="9d53c-432">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: Excel.Interfaces.RangeLoadOptions): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - excel.Excel.Interfaces.RangeLoadOptions
  - uid: excel_release.Excel.Range.load_1
    summary: <span data-ttu-id="9d53c-433">Pone en cola un comando para cargar las propiedades especificadas del objeto.</span><span class="sxs-lookup"><span data-stu-id="9d53c-433">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="9d53c-434">Debe llamar `context.sync()` antes de leer las propiedades.</span><span class="sxs-lookup"><span data-stu-id="9d53c-434">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="9d53c-435">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="9d53c-435">Examples</span></span>

          ```javascript
          // Below example uses range address to get the range object.
          Excel.run(function (ctx) {
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8"; 
              var worksheet = ctx.workbook.worksheets.getItem(sheetName);
              var range = worksheet.getRange(rangeAddress);
              range.load('cellCount');
              return ctx.sync().then(function() {
                  console.log(range.cellCount);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          // Below example uses a named-range to get the range object.
          Excel.run(function (ctx) { 
              var rangeName = 'MyRange';
              var range = ctx.workbook.names.getItem(rangeName).range;
              range.load('cellCount');
              return ctx.sync().then(function() {
                  console.log(range.cellCount);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          // The example below sets number-format, values and formulas on a grid that contains 2x3 grid.
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "F5:G7";
              var numberFormat = [[null, "d-mmm"], [null, "d-mmm"], [null, null]]
              var values = [["Today", 42147], ["Tomorrow", "5/24"], ["Difference in days", null]];
              var formulas = [[null,null], [null,null], [null,"=G6-G5"]];
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              range.numberFormat = numberFormat;
              range.values = values;
              range.formulas= formulas;
              range.load('text');
              return ctx.sync().then(function() {
                  console.log(range.text);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: propertyNames
          description: <span data-ttu-id="9d53c-436">Una cadena delimitada por comas o una matriz de cadenas que especifican las propiedades que se van a cargar.</span><span class="sxs-lookup"><span data-stu-id="9d53c-436">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
          type:
            - 'string | string[]'
  - uid: excel_release.Excel.Range.load_2
    summary: <span data-ttu-id="9d53c-437">Pone en cola un comando para cargar las propiedades especificadas del objeto.</span><span class="sxs-lookup"><span data-stu-id="9d53c-437">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="9d53c-438">Debe llamar `context.sync()` antes de leer las propiedades.</span><span class="sxs-lookup"><span data-stu-id="9d53c-438">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '<span data-ttu-id="9d53c-439">Donde propertyNamesAndPaths. Select es una cadena delimitada por comas que especifica las propiedades que se van a cargar y propertyNamesAndPaths. Expand es una cadena delimitada por comas que especifica las propiedades de navegación que se deben cargar.</span><span class="sxs-lookup"><span data-stu-id="9d53c-439">Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>'
          type:
            - '{ select?: string; expand?: string; }'
  - uid: excel_release.Excel.Range.merge
    summary: |-
      <span data-ttu-id="9d53c-440">Combinar las celdas del rango en una región de la hoja de cálculo.</span><span class="sxs-lookup"><span data-stu-id="9d53c-440">Merge the range cells into one region in the worksheet.</span></span>

      <span data-ttu-id="9d53c-441">\[[Conjunto de API: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="9d53c-441">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: merge(across)
    fullName: merge(across)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'merge(across?: boolean): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="9d53c-442">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="9d53c-442">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:C3";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              range.merge(true);
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:C3";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              range.unmerge();
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: across
          description: <span data-ttu-id="9d53c-443">Opcional.</span><span class="sxs-lookup"><span data-stu-id="9d53c-443">Optional.</span></span> <span data-ttu-id="9d53c-444">Verdadero para que se combinen las celdas de cada fila del rango especificado como celdas combinadas distintas.</span><span class="sxs-lookup"><span data-stu-id="9d53c-444">Set true to merge cells in each row of the specified range as separate merged cells.</span></span> <span data-ttu-id="9d53c-445">El valor predeterminado es falso.</span><span class="sxs-lookup"><span data-stu-id="9d53c-445">The default value is false.</span></span>
          type:
            - boolean
  - uid: excel_release.Excel.Range.numberFormat
    summary: |-
      <span data-ttu-id="9d53c-446">Representa el código de formato numérico de Excel para el intervalo especificado.</span><span class="sxs-lookup"><span data-stu-id="9d53c-446">Represents Excel's number format code for the given range.</span></span> <span data-ttu-id="9d53c-447">Cuando se establece el formato de número en un rango, el argumento de valor puede ser un valor único (String) o una matriz de dos dimensiones.</span><span class="sxs-lookup"><span data-stu-id="9d53c-447">When setting number format to a range, the value argument can be either a single value (string) or a two-dimensional array.</span></span> <span data-ttu-id="9d53c-448">Si el argumento es un valor único, se aplicará a todas las celdas del rango.</span><span class="sxs-lookup"><span data-stu-id="9d53c-448">If the argument is a single value, it will be applied to all cells in the range.</span></span>

      <span data-ttu-id="9d53c-449">\[[Conjunto de API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="9d53c-449">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: numberFormat
    fullName: numberFormat
    langs:
      - typeScript
    type: property
    syntax:
      content: 'numberFormat: any[][];'
      return:
        type:
          - 'any[][]'
  - uid: excel_release.Excel.Range.numberFormatLocal
    summary: |-
      <span data-ttu-id="9d53c-450">Representa el código de formato numérico de Excel para el intervalo determinado como una cadena en el idioma del usuario.</span><span class="sxs-lookup"><span data-stu-id="9d53c-450">Represents Excel's number format code for the given range as a string in the language of the user.</span></span> <span data-ttu-id="9d53c-451">Cuando se establece el formato de número local en un intervalo, el argumento de valor puede ser un valor único (String) o una matriz de dos dimensiones.</span><span class="sxs-lookup"><span data-stu-id="9d53c-451">When setting number format local to a range, the value argument can be either a single value (string) or a two-dimensional array.</span></span> <span data-ttu-id="9d53c-452">Si el argumento es un valor único, se aplicará a todas las celdas del rango.</span><span class="sxs-lookup"><span data-stu-id="9d53c-452">If the argument is a single value, it will be applied to all cells in the range.</span></span>

      <span data-ttu-id="9d53c-453">\[[Conjunto de API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="9d53c-453">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: numberFormatLocal
    fullName: numberFormatLocal
    langs:
      - typeScript
    type: property
    syntax:
      content: 'numberFormatLocal: any[][];'
      return:
        type:
          - 'any[][]'
  - uid: excel_release.Excel.Range.removeDuplicates
    summary: |-
      <span data-ttu-id="9d53c-454">Quita los valores duplicados del intervalo especificado por las columnas.</span><span class="sxs-lookup"><span data-stu-id="9d53c-454">Removes duplicate values from the range specified by the columns.</span></span>

      <span data-ttu-id="9d53c-455">\[[Conjunto de API: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="9d53c-455">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'removeDuplicates(columns, includesHeader)'
    fullName: 'removeDuplicates(columns, includesHeader)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeDuplicates(columns: number[], includesHeader: boolean): Excel.RemoveDuplicatesResult;'
      return:
        type:
          - excel.Excel.RemoveDuplicatesResult
        description: |-
          <span data-ttu-id="9d53c-456">El objeto resultante que contiene el número de filas eliminadas y el número de filas únicas restantes.</span><span class="sxs-lookup"><span data-stu-id="9d53c-456">The resulting object that contains the number of rows removed and the number of remaining unique rows.</span></span>

          #### <a name="examples"></a><span data-ttu-id="9d53c-457">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="9d53c-457">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const range = sheet.getRange("B2:D11");

              const deleteResult = range.removeDuplicates([0],true);    
              deleteResult.load();    
              await context.sync();

              console.log(deleteResult.removed + " entries with duplicate names removed.");
              console.log(deleteResult.uniqueRemaining + " entries with unique names remain in the range.");
          });
          ```
      parameters:
        - id: columns
          description: <span data-ttu-id="9d53c-458">Las columnas dentro del rango que pueden contener Duplicados.</span><span class="sxs-lookup"><span data-stu-id="9d53c-458">The columns inside the range that may contain duplicates.</span></span> <span data-ttu-id="9d53c-459">Debe especificarse al menos una columna.</span><span class="sxs-lookup"><span data-stu-id="9d53c-459">At least one column needs to be specified.</span></span> <span data-ttu-id="9d53c-460">Indizado con cero.</span><span class="sxs-lookup"><span data-stu-id="9d53c-460">Zero-indexed.</span></span>
          type:
            - 'number[]'
        - id: includesHeader
          description: <span data-ttu-id="9d53c-461">True si el encabezado contiene datos de entrada.</span><span class="sxs-lookup"><span data-stu-id="9d53c-461">True if the input data contains header.</span></span> <span data-ttu-id="9d53c-462">El valor predeterminado es falso.</span><span class="sxs-lookup"><span data-stu-id="9d53c-462">Default is false.</span></span>
          type:
            - boolean
  - uid: excel_release.Excel.Range.replaceAll
    summary: |-
      <span data-ttu-id="9d53c-463">Busca y reemplaza la cadena especificada, según los criterios especificados dentro del intervalo actual.</span><span class="sxs-lookup"><span data-stu-id="9d53c-463">Finds and replaces the given string based on the criteria specified within the current range.</span></span>

      <span data-ttu-id="9d53c-464">\[[Conjunto de API: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="9d53c-464">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'replaceAll(text, replacement, criteria)'
    fullName: 'replaceAll(text, replacement, criteria)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'replaceAll(text: string, replacement: string, criteria: Excel.ReplaceCriteria): OfficeExtension.ClientResult<number>;'
      return:
        type:
          - OfficeExtension.ClientResult<number>
        description: <span data-ttu-id="9d53c-465">Número de reemplazos realizados.</span><span class="sxs-lookup"><span data-stu-id="9d53c-465">The number of replacements performed.</span></span>
      parameters:
        - id: text
          description: <span data-ttu-id="9d53c-466">Cadena que se va a buscar.</span><span class="sxs-lookup"><span data-stu-id="9d53c-466">String to find.</span></span>
          type:
            - string
        - id: replacement
          description: <span data-ttu-id="9d53c-467">Cadena con la que se va a reemplazar el original.</span><span class="sxs-lookup"><span data-stu-id="9d53c-467">String to replace the original with.</span></span>
          type:
            - string
        - id: criteria
          description: <span data-ttu-id="9d53c-468">Criterios de reemplazo adicionales.</span><span class="sxs-lookup"><span data-stu-id="9d53c-468">Additional Replace Criteria.</span></span>
          type:
            - excel.Excel.ReplaceCriteria
  - uid: excel_release.Excel.Range.rowCount
    summary: |-
      <span data-ttu-id="9d53c-469">Devuelve el número total de filas del intervalo.</span><span class="sxs-lookup"><span data-stu-id="9d53c-469">Returns the total number of rows in the range.</span></span> <span data-ttu-id="9d53c-470">Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="9d53c-470">Read-only.</span></span>

      <span data-ttu-id="9d53c-471">\[[Conjunto de API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="9d53c-471">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: rowCount
    fullName: rowCount
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly rowCount: number;'
      return:
        type:
          - number
  - uid: excel_release.Excel.Range.rowHidden
    summary: |-
      <span data-ttu-id="9d53c-472">Representa si todas las filas del intervalo actual están ocultas.</span><span class="sxs-lookup"><span data-stu-id="9d53c-472">Represents if all rows of the current range are hidden.</span></span>

      <span data-ttu-id="9d53c-473">\[[Conjunto de API: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="9d53c-473">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: rowHidden
    fullName: rowHidden
    langs:
      - typeScript
    type: property
    syntax:
      content: 'rowHidden: boolean;'
      return:
        type:
          - boolean
  - uid: excel_release.Excel.Range.rowIndex
    summary: |-
      <span data-ttu-id="9d53c-474">Devuelve el número de fila de la primera celda del intervalo.</span><span class="sxs-lookup"><span data-stu-id="9d53c-474">Returns the row number of the first cell in the range.</span></span> <span data-ttu-id="9d53c-475">Indizado con cero.</span><span class="sxs-lookup"><span data-stu-id="9d53c-475">Zero-indexed.</span></span> <span data-ttu-id="9d53c-476">Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="9d53c-476">Read-only.</span></span>

      <span data-ttu-id="9d53c-477">\[[Conjunto de API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="9d53c-477">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: rowIndex
    fullName: rowIndex
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly rowIndex: number;'
      return:
        type:
          - number
  - uid: excel_release.Excel.Range.select
    summary: |-
      <span data-ttu-id="9d53c-478">Selecciona el intervalo especificado en la interfaz de usuario de Excel.</span><span class="sxs-lookup"><span data-stu-id="9d53c-478">Selects the specified range in the Excel UI.</span></span>

      <span data-ttu-id="9d53c-479">\[[Conjunto de API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="9d53c-479">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: select()
    fullName: select()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'select(): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="9d53c-480">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="9d53c-480">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) {
              var sheetName = "Sheet1";
              var rangeAddress = "F5:F10"; 
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              range.select();
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: excel_release.Excel.Range.set
    summary: '<span data-ttu-id="9d53c-481">Establece varias propiedades de un objeto al mismo tiempo.</span><span class="sxs-lookup"><span data-stu-id="9d53c-481">Sets multiple properties of an object at the same time.</span></span> <span data-ttu-id="9d53c-482">Puede pasar un objeto sin formato con las propiedades apropiadas o cualquier otro objeto de la API del mismo tipo.</span><span class="sxs-lookup"><span data-stu-id="9d53c-482">You can pass either a plain object with the appropriate properties, or another API object of the same type.</span></span>'
    remarks: |-
      <span data-ttu-id="9d53c-483">Este método tiene la siguiente firma adicional:</span><span class="sxs-lookup"><span data-stu-id="9d53c-483">This method has the following additional signature:</span></span>

      `set(properties: Excel.Range): void`

      #### <a name="examples"></a><span data-ttu-id="9d53c-484">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="9d53c-484">Examples</span></span>

      ```typescript
      await Excel.run(async (context) => {
          const sheet = context.workbook.worksheets.getItem("Sample");

          const range = sheet.getRange("B2:E2");
          range.set({
              format: {
                  fill: {
                      color: "#4472C4"
                  },
                  font: {
                      name: "Verdana",
                      color: "white"
                  }
              }
          })
          range.format.autofitColumns();
          await context.sync();
      });
      ```
      ```typescript
      await Excel.run(async (context) => {
          const sheet = context.workbook.worksheets.getItem("Sample");

          const sourceRange = sheet.getRange("B2:E2");
          sourceRange.load("format/fill/color, format/font/name, format/font/color");
          await context.sync();

          // Set properties based on the loaded and synced 
          // source range.
          const targetRange = sheet.getRange("B7:E7");
          targetRange.set(sourceRange); 
          targetRange.format.autofitColumns();
          await context.sync();
      });
      ```
    name: 'set(properties, options)'
    fullName: 'set(properties, options)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Interfaces.RangeUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: <span data-ttu-id="9d53c-485">Objeto de JavaScript con propiedades que se estructuran de forma isomórfico a las propiedades del objeto en el que se llama al método.</span><span class="sxs-lookup"><span data-stu-id="9d53c-485">A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.</span></span>
          type:
            - Interfaces.RangeUpdateData
        - id: options
          description: <span data-ttu-id="9d53c-486">Proporciona una opción para suprimir errores si el objeto Properties intenta establecer propiedades de solo lectura.</span><span class="sxs-lookup"><span data-stu-id="9d53c-486">Provides an option to suppress errors if the properties object tries to set any read-only properties.</span></span>
          type:
            - office.OfficeExtension.UpdateOptions
  - uid: excel_release.Excel.Range.set_1
    summary: '<span data-ttu-id="9d53c-487">Establece varias propiedades en el objeto al mismo tiempo, basándose en un objeto cargado existente.</span><span class="sxs-lookup"><span data-stu-id="9d53c-487">Sets multiple properties on the object at the same time, based on an existing loaded object.</span></span>'
    name: set(properties)
    fullName: set(properties)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Excel.Range): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - excel.Excel.Range
  - uid: excel_release.Excel.Range.setCellProperties
    summary: |-
      <span data-ttu-id="9d53c-488">Actualiza el intervalo con una matriz 2D de propiedades de celda, encapsulando elementos como la fuente, el relleno, los bordes, la alineación, y así sucesivamente.</span><span class="sxs-lookup"><span data-stu-id="9d53c-488">Updates the range based on a 2D array of cell properties , encapsulating things like font, fill, borders, alignment, and so forth.</span></span>

      <span data-ttu-id="9d53c-489">\[[Conjunto de API: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="9d53c-489">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: setCellProperties(cellPropertiesData)
    fullName: setCellProperties(cellPropertiesData)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setCellProperties(cellPropertiesData: SettableCellProperties[][]): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="9d53c-490">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="9d53c-490">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getActiveWorksheet();

              // Creating the SettableCellProperties objects to use for the range.
              // In your add-in, these should be created once, outside the function.
              const topHeaderProps: Excel.SettableCellProperties = {
                  // The style property takes a string matching the name of an Excel style.
                  // Note that a style will overwrite any formatting,
                  // so do not use the format property with the style property.
                  style: "Heading1"
              };

              const headerProps: Excel.SettableCellProperties = {
                  // Any subproperties of format that are not set will not be changed when these cell properties are set.
                  format: {
                      fill: {
                          color: "Blue"
                      },
                      font: {
                          color: "White",
                          bold: true
                      }
                  }
              };

              const nonApplicableProps: Excel.SettableCellProperties = {
                  format: {
                      fill: {
                          pattern: Excel.FillPattern.gray25
                      },
                      font: {
                          color: "Gray",
                          italic: true
                      }
                  }
              };

              const matchupScoreProps: Excel.SettableCellProperties = {
                  format: {
                      borders: {
                          bottom: {
                              style: Excel.BorderLineStyle.continuous
                          },
                          left: {
                              style: Excel.BorderLineStyle.continuous
                          },
                          right: {
                              style: Excel.BorderLineStyle.continuous
                          },
                          top: {
                              style: Excel.BorderLineStyle.continuous
                          }
                      }
                  }
              };

              const range = sheet.getRange("A1:E5");

              // You can use empty JSON objects to avoid changing a cell's properties.
              range.setCellProperties([
                  [topHeaderProps, {}, {}, {}, {}],
                  [{}, {}, headerProps, headerProps, headerProps],
                  [{}, headerProps, nonApplicableProps, matchupScoreProps, matchupScoreProps],
                  [{}, headerProps, matchupScoreProps, nonApplicableProps, matchupScoreProps],
                  [{}, headerProps, matchupScoreProps, matchupScoreProps, nonApplicableProps]
              ]);

              sheet.getUsedRange().format.autofitColumns();
              await context.sync();
          });
          ```
      parameters:
        - id: cellPropertiesData
          description: <span data-ttu-id="9d53c-491">Una matriz 2D que representa las propiedades que se van a establecer en cada celda.</span><span class="sxs-lookup"><span data-stu-id="9d53c-491">A 2D array that represents which properties to set in each cell.</span></span>
          type:
            - 'SettableCellProperties[][]'
  - uid: excel_release.Excel.Range.setColumnProperties
    summary: |-
      <span data-ttu-id="9d53c-492">Actualiza el intervalo con una matriz de una sola dimensión de propiedades de columna, encapsulando elementos como la fuente, el relleno, los bordes, la alineación, y así sucesivamente.</span><span class="sxs-lookup"><span data-stu-id="9d53c-492">Updates the range based on a single-dimensional array of column properties, encapsulating things like font, fill, borders, alignment, and so forth.</span></span>

      <span data-ttu-id="9d53c-493">\[[Conjunto de API: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="9d53c-493">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: setColumnProperties(columnPropertiesData)
    fullName: setColumnProperties(columnPropertiesData)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setColumnProperties(columnPropertiesData: SettableColumnProperties[]): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: columnPropertiesData
          description: <span data-ttu-id="9d53c-494">Matriz que representa las propiedades que se van a establecer en cada columna.</span><span class="sxs-lookup"><span data-stu-id="9d53c-494">An array that represents which properties to set in each column.</span></span>
          type:
            - 'SettableColumnProperties[]'
  - uid: excel_release.Excel.Range.setDirty
    summary: |-
      <span data-ttu-id="9d53c-495">Establece un intervalo que se deberá actualizar cuando se realice la próxima actualización.</span><span class="sxs-lookup"><span data-stu-id="9d53c-495">Set a range to be recalculated when the next recalculation occurs.</span></span>

      <span data-ttu-id="9d53c-496">\[[Conjunto de API: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="9d53c-496">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: setDirty()
    fullName: setDirty()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setDirty(): void;'
      return:
        type:
          - void
        description: ''
  - uid: excel_release.Excel.Range.setRowProperties
    summary: |-
      <span data-ttu-id="9d53c-497">Actualiza el intervalo con una matriz de una sola dimensión de propiedades de fila, encapsulando elementos como la fuente, el relleno, los bordes, la alineación, y así sucesivamente.</span><span class="sxs-lookup"><span data-stu-id="9d53c-497">Updates the range based on a single-dimensional array of row properties, encapsulating things like font, fill, borders, alignment, and so forth.</span></span>

      <span data-ttu-id="9d53c-498">\[[Conjunto de API: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="9d53c-498">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: setRowProperties(rowPropertiesData)
    fullName: setRowProperties(rowPropertiesData)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setRowProperties(rowPropertiesData: SettableRowProperties[]): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: rowPropertiesData
          description: <span data-ttu-id="9d53c-499">Matriz que representa las propiedades que se van a establecer en cada fila.</span><span class="sxs-lookup"><span data-stu-id="9d53c-499">An array that represents which properties to set in each row.</span></span>
          type:
            - 'SettableRowProperties[]'
  - uid: excel_release.Excel.Range.showCard
    summary: |-
      <span data-ttu-id="9d53c-500">Muestra la tarjeta de una celda activa si tiene contenido de valor enriquecido.</span><span class="sxs-lookup"><span data-stu-id="9d53c-500">Displays the card for an active cell if it has rich value content.</span></span>

      <span data-ttu-id="9d53c-501">\[[Conjunto de API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="9d53c-501">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: showCard()
    fullName: showCard()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'showCard(): void;'
      return:
        type:
          - void
        description: ''
  - uid: excel_release.Excel.Range.sort
    summary: |-
      <span data-ttu-id="9d53c-502">Representa la ordenación del intervalo del intervalo actual.</span><span class="sxs-lookup"><span data-stu-id="9d53c-502">Represents the range sort of the current range.</span></span> <span data-ttu-id="9d53c-503">Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="9d53c-503">Read-only.</span></span>

      <span data-ttu-id="9d53c-504">\[[Conjunto de API: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="9d53c-504">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: sort
    fullName: sort
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly sort: Excel.RangeSort;'
      return:
        type:
          - excel.Excel.RangeSort
  - uid: excel_release.Excel.Range.style
    summary: |-
      <span data-ttu-id="9d53c-505">Representa el estilo del rango actual.</span><span class="sxs-lookup"><span data-stu-id="9d53c-505">Represents the style of the current range.</span></span> <span data-ttu-id="9d53c-506">Si los estilos de las celdas son incoherentes, se devolverá null.</span><span class="sxs-lookup"><span data-stu-id="9d53c-506">If the styles of the cells are inconsistent, null will be returned.</span></span> <span data-ttu-id="9d53c-507">Para los estilos personalizados, se devolverá el nombre del estilo.</span><span class="sxs-lookup"><span data-stu-id="9d53c-507">For custom styles, the style name will be returned.</span></span> <span data-ttu-id="9d53c-508">Para los estilos integrados, se devolverá una cadena que representa un valor en la enumeración BuiltInStyle.</span><span class="sxs-lookup"><span data-stu-id="9d53c-508">For built-in styles, a string representing a value in the BuiltInStyle enum will be returned.</span></span>

      <span data-ttu-id="9d53c-509">\[[Conjunto de API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="9d53c-509">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: style
    fullName: style
    langs:
      - typeScript
    type: property
    syntax:
      content: 'style: string;'
      return:
        type:
          - string
        description: |-


          #### <a name="examples"></a><span data-ttu-id="9d53c-510">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="9d53c-510">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              let worksheet = context.workbook.worksheets.getItem("Sample");
              let range = worksheet.getRange("A1:E1");

              // Apply built-in style. 
              // Styles are in the Home tab ribbon.
              range.style = Excel.BuiltInStyle.neutral;
              range.format.horizontalAlignment = "Right";

              await context.sync();
          });
          ```
  - uid: excel_release.Excel.Range.text
    summary: |-
      <span data-ttu-id="9d53c-511">Valores de texto del rango especificado.</span><span class="sxs-lookup"><span data-stu-id="9d53c-511">Text values of the specified range.</span></span> <span data-ttu-id="9d53c-512">El valor Text no dependerá del ancho de la celda.</span><span class="sxs-lookup"><span data-stu-id="9d53c-512">The Text value will not depend on the cell width.</span></span> <span data-ttu-id="9d53c-513">La \# sustitución de firma que se produce en la interfaz de usuario de Excel no afecta al valor de texto devuelto por la API.</span><span class="sxs-lookup"><span data-stu-id="9d53c-513">The \# sign substitution that happens in Excel UI will not affect the text value returned by the API.</span></span> <span data-ttu-id="9d53c-514">Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="9d53c-514">Read-only.</span></span>

      <span data-ttu-id="9d53c-515">\[[Conjunto de API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="9d53c-515">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: text
    fullName: text
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly text: string[][];'
      return:
        type:
          - 'string[][]'
  - uid: excel_release.Excel.Range.toJSON
    summary: '<span data-ttu-id="9d53c-516">Reemplaza el método JavaScript `toJSON()` para proporcionar un resultado más útil cuando se pasa un objeto API a`JSON.stringify()`</span><span class="sxs-lookup"><span data-stu-id="9d53c-516">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id="9d53c-517">.</span><span class="sxs-lookup"><span data-stu-id="9d53c-517"></span></span> <span data-ttu-id="9d53c-518">(`JSON.stringify`</span><span class="sxs-lookup"><span data-stu-id="9d53c-518"></span></span><!-- --><span data-ttu-id="9d53c-519">, a su vez, llama `toJSON` al método del objeto que se le pasa.) Mientras que el objeto Excel. Range original es un objeto API, `toJSON` el método devuelve un objeto JavaScript sin formato (escrito como`Excel.Interfaces.RangeData`</span><span class="sxs-lookup"><span data-stu-id="9d53c-519">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original Excel.Range object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.RangeData`</span></span><!-- --><span data-ttu-id="9d53c-520">) que contiene copias rasas de las propiedades secundarias cargadas del objeto original.</span><span class="sxs-lookup"><span data-stu-id="9d53c-520">) that contains shallow copies of any loaded child properties from the original object.</span></span>'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.RangeData;'
      return:
        type:
          - excel.Excel.Interfaces.RangeData
        description: ''
  - uid: excel_release.Excel.Range.track
    summary: '<span data-ttu-id="9d53c-521">Realiza un seguimiento del objeto de ajuste automático según cambios adyacentes en el documento.</span><span class="sxs-lookup"><span data-stu-id="9d53c-521">Track the object for automatic adjustment based on surrounding changes in the document.</span></span> <span data-ttu-id="9d53c-522">Esta llamada es una forma abreviada de context.trackedObjects.add(thisObject).</span><span class="sxs-lookup"><span data-stu-id="9d53c-522">This call is a shorthand for context.trackedObjects.add(thisObject).</span></span> <span data-ttu-id="9d53c-523">Si usa este objeto en llamadas ".sync" y fuera de la ejecución secuencial de un lote de ".run", y obtiene un error "InvalidObjectPath" al establecer una propiedad o invocar un método en el objeto, debería haber agregado el objeto a la colección de objetos de la que realiza un seguimiento cuando se creó el objeto.</span><span class="sxs-lookup"><span data-stu-id="9d53c-523">If you are using this object across ".sync" calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you needed to have added the object to the tracked object collection when the object was first created.</span></span>'
    name: track()
    fullName: track()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'track(): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: ''
  - uid: excel_release.Excel.Range.unmerge
    summary: |-
      <span data-ttu-id="9d53c-524">Separar las celdas del rango en celdas independientes.</span><span class="sxs-lookup"><span data-stu-id="9d53c-524">Unmerge the range cells into separate cells.</span></span>

      <span data-ttu-id="9d53c-525">\[[Conjunto de API: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="9d53c-525">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: unmerge()
    fullName: unmerge()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'unmerge(): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="9d53c-526">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="9d53c-526">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:C3";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              range.unmerge();
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: excel_release.Excel.Range.untrack
    summary: '<span data-ttu-id="9d53c-527">Libere la memoria asociada a este objeto, si se ha realizado un seguimiento de él anteriormente.</span><span class="sxs-lookup"><span data-stu-id="9d53c-527">Release the memory associated with this object, if it has previously been tracked.</span></span> <span data-ttu-id="9d53c-528">Esta llamada es una forma abreviada de context.trackedObjects.remove(thisObject).</span><span class="sxs-lookup"><span data-stu-id="9d53c-528">This call is shorthand for context.trackedObjects.remove(thisObject).</span></span> <span data-ttu-id="9d53c-529">Tener muchos objetos marcados ralentiza la aplicación host, así que debe recordar liberar los objetos que agregue cuando haya terminado con ellos.</span><span class="sxs-lookup"><span data-stu-id="9d53c-529">Having many tracked objects slows down the host application, so please remember to free any objects you add, once you''re done using them.</span></span> <span data-ttu-id="9d53c-530">Debe llamar a "context.sync()" antes de que surta efecto la liberación de memoria.</span><span class="sxs-lookup"><span data-stu-id="9d53c-530">You will need to call "context.sync()" before the memory release takes effect.</span></span>'
    name: untrack()
    fullName: untrack()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'untrack(): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="9d53c-531">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="9d53c-531">Examples</span></span>

          ```typescript
          Excel.run(async (context) => {
              const largeRange = context.workbook.getSelectedRange();
              largeRange.load(["rowCount", "columnCount"]);
              await context.sync();

              for (let i = 0; i < largeRange.rowCount; i++) {
                  for (let j = 0; j < largeRange.columnCount; j++) {
                      let cell = largeRange.getCell(i, j);
                      cell.values = [[i *j]];

                      // call untrack() to release the range from memory
                      cell.untrack();
                  }
              }

              await context.sync();
          });
          ```
  - uid: excel_release.Excel.Range.values
    summary: |-
      <span data-ttu-id="9d53c-532">Representa los valores sin formato del rango especificado.</span><span class="sxs-lookup"><span data-stu-id="9d53c-532">Represents the raw values of the specified range.</span></span> <span data-ttu-id="9d53c-533">Los datos devueltos pueden ser de tipo cadena, número o booleano.</span><span class="sxs-lookup"><span data-stu-id="9d53c-533">The data returned could be of type string, number, or a boolean.</span></span> <span data-ttu-id="9d53c-534">Las celdas que contienen un error devolverán la cadena de error.</span><span class="sxs-lookup"><span data-stu-id="9d53c-534">Cells that contain an error will return the error string.</span></span> <span data-ttu-id="9d53c-535">Al establecer valores en un rango, el argumento valor puede ser un valor único (cadena, número o booleano) o una matriz bidimensional.</span><span class="sxs-lookup"><span data-stu-id="9d53c-535">When setting values to a range, the value argument can be either a single value (string, number or boolean) or a two-dimensional array.</span></span> <span data-ttu-id="9d53c-536">Si el argumento es un valor único, se aplicará a todas las celdas del rango.</span><span class="sxs-lookup"><span data-stu-id="9d53c-536">If the argument is a single value, it will be applied to all cells in the range.</span></span>

      <span data-ttu-id="9d53c-537">\[[Conjunto de API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="9d53c-537">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: values
    fullName: values
    langs:
      - typeScript
    type: property
    syntax:
      content: 'values: any[][];'
      return:
        type:
          - 'any[][]'
  - uid: excel_release.Excel.Range.valueTypes
    summary: |-
      <span data-ttu-id="9d53c-538">Representa el tipo de datos de cada celda.</span><span class="sxs-lookup"><span data-stu-id="9d53c-538">Represents the type of data of each cell.</span></span> <span data-ttu-id="9d53c-539">Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="9d53c-539">Read-only.</span></span>

      <span data-ttu-id="9d53c-540">\[[Conjunto de API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="9d53c-540">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: valueTypes
    fullName: valueTypes
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly valueTypes: Excel.RangeValueType[][];'
      return:
        type:
          - 'Excel.RangeValueType[][]'
  - uid: excel_release.Excel.Range.worksheet
    summary: |-
      <span data-ttu-id="9d53c-541">Hoja de cálculo que contiene el rango actual.</span><span class="sxs-lookup"><span data-stu-id="9d53c-541">The worksheet containing the current range.</span></span> <span data-ttu-id="9d53c-542">Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="9d53c-542">Read-only.</span></span>

      <span data-ttu-id="9d53c-543">\[[Conjunto de API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="9d53c-543">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: worksheet
    fullName: worksheet
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly worksheet: Excel.Worksheet;'
      return:
        type:
          - excel.Excel.Worksheet