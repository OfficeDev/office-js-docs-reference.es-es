### YamlMime:UniversalReference
items:
  - uid: excel_release.Excel.TableSort
    summary: |-
      Administra operaciones de ordenación en objetos Table.

      \[[Conjunto de API: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: Excel.TableSort
    fullName: Excel.TableSort
    langs:
      - typeScript
    type: class
    extends:
      - office.OfficeExtension.ClientObject
    package: excel_release
    children:
      - excel_release.Excel.TableSort.apply
      - excel_release.Excel.TableSort.apply_1
      - excel_release.Excel.TableSort.clear
      - excel_release.Excel.TableSort.context
      - excel_release.Excel.TableSort.fields
      - excel_release.Excel.TableSort.load
      - excel_release.Excel.TableSort.load_1
      - excel_release.Excel.TableSort.load_2
      - excel_release.Excel.TableSort.matchCase
      - excel_release.Excel.TableSort.method
      - excel_release.Excel.TableSort.reapply
      - excel_release.Excel.TableSort.toJSON
  - uid: excel_release.Excel.TableSort.apply
    summary: |-
      Realizar una operación de ordenación.

      \[[Conjunto de API: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: 'apply(fields, matchCase, method)'
    fullName: 'apply(fields, matchCase, method)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'apply(fields: Excel.SortField[], matchCase?: boolean, method?: Excel.SortMethod): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>Ejemplos

          ```javascript
          Excel.run(function (ctx) { 
              var tableName = 'Table1';
              var table = ctx.workbook.tables.getItem(tableName);
              table.sort.apply([ 
                      {
                          key: 2,
                          ascending: true
                      },
                  ], true);
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: fields
          description: La lista de condiciones por las que realizar la ordenación.
          type:
            - 'Excel.SortField[]'
        - id: matchCase
          description: Opcional. Indica si la ordenación de cadenas distingue mayúsculas de minúsculas.
          type:
            - boolean
        - id: method
          description: Opcional. Método de ordenación que se usa para los caracteres chinos.
          type:
            - excel.Excel.SortMethod
  - uid: excel_release.Excel.TableSort.apply_1
    summary: |-
      Realizar una operación de ordenación.

      \[[Conjunto de API: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: 'apply(fields, matchCase, methodString)'
    fullName: 'apply(fields, matchCase, methodString)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'apply(fields: Excel.SortField[], matchCase?: boolean, methodString?: "PinYin" | "StrokeCount"): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: fields
          description: La lista de condiciones por las que realizar la ordenación.
          type:
            - 'Excel.SortField[]'
        - id: matchCase
          description: Opcional. Indica si la ordenación de cadenas distingue mayúsculas de minúsculas.
          type:
            - boolean
        - id: methodString
          description: Opcional. Método de ordenación que se usa para los caracteres chinos.
          type:
            - '"PinYin" | "StrokeCount"'
  - uid: excel_release.Excel.TableSort.clear
    summary: |-
      Borra la ordenación que se aplica actualmente en la tabla. Aunque esto no modifica la ordenación de la tabla, borra el estado de los botones de encabezado.

      \[[Conjunto de API: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: clear()
    fullName: clear()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clear(): void;'
      return:
        type:
          - void
        description: ''
  - uid: excel_release.Excel.TableSort.context
    summary: Contexto de la solicitud asociado al objeto. Esto conecta el proceso del complemento con el proceso de la aplicación host de Office.
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - RequestContext
  - uid: excel_release.Excel.TableSort.fields
    summary: |-
      Representa las condiciones actuales que se usaron por última vez para ordenar la tabla. Solo lectura.

      \[[Conjunto de API: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: fields
    fullName: fields
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly fields: Excel.SortField[];'
      return:
        type:
          - 'Excel.SortField[]'
  - uid: excel_release.Excel.TableSort.load
    summary: 'Pone en cola un comando para cargar las propiedades especificadas del objeto. Antes de leer las propiedades, debe llamar a "context.sync()".'
    remarks: |-
      Además de esta firma, este método tiene las siguientes firmas:

      `load(option?: string | string[]): Excel.TableSort`-Donde opción es una cadena delimitada por comas o una matriz de cadenas que especifican las propiedades que se van a cargar.

      `load(option?: { select?: string; expand?: string; }): Excel.TableSort`-Where opción. Select es una cadena delimitada por comas que especifica las propiedades que se van a cargar y Options. Expand es una cadena delimitada por comas que especifica las propiedades de navegación que se deben cargar.

      `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.TableSort`-Solo disponible en tipos de colección. Es similar a la firma anterior. Option. Top especifica el número máximo de elementos de colección que se pueden incluir en el resultado. La opción. SKIP especifica el número de elementos que se deben omitir y que no se incluyen en el resultado. Si se especifica Option. Top, el conjunto de resultados se iniciará después de omitir el número especificado de elementos.
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: Excel.Interfaces.TableSortLoadOptions): Excel.TableSort;'
      return:
        type:
          - excel.Excel.TableSort
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - excel.Excel.Interfaces.TableSortLoadOptions
  - uid: excel_release.Excel.TableSort.load_1
    summary: Pone en cola un comando para cargar las propiedades especificadas del objeto. Debe llamar `context.sync()` antes de leer las propiedades.
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.TableSort;'
      return:
        type:
          - excel.Excel.TableSort
        description: ''
      parameters:
        - id: propertyNames
          description: Una cadena delimitada por comas o una matriz de cadenas que especifican las propiedades que se van a cargar.
          type:
            - 'string | string[]'
  - uid: excel_release.Excel.TableSort.load_2
    summary: Pone en cola un comando para cargar las propiedades especificadas del objeto. Debe llamar `context.sync()` antes de leer las propiedades.
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): Excel.TableSort;'
      return:
        type:
          - excel.Excel.TableSort
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: Donde propertyNamesAndPaths. Select es una cadena delimitada por comas que especifica las propiedades que se van a cargar y propertyNamesAndPaths. Expand es una cadena delimitada por comas que especifica las propiedades de navegación que se deben cargar.
          type:
            - '{ select?: string; expand?: string; }'
  - uid: excel_release.Excel.TableSort.matchCase
    summary: |-
      Indica si última ordenación de la tabla distinguía mayúsculas de minúsculas. Solo lectura.

      \[[Conjunto de API: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: matchCase
    fullName: matchCase
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly matchCase: boolean;'
      return:
        type:
          - boolean
  - uid: excel_release.Excel.TableSort.method
    summary: |-
      Representa el método de ordenación de caracteres chinos usado por última vez para ordenar la tabla. Solo lectura.

      \[[Conjunto de API: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: method
    fullName: method
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly method: Excel.SortMethod | "PinYin" | "StrokeCount";'
      return:
        type:
          - Excel.SortMethod | "PinYin" | "StrokeCount"
  - uid: excel_release.Excel.TableSort.reapply
    summary: |-
      Vuelve a aplicar los parámetros de ordenación actuales a la tabla.

      \[[Conjunto de API: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: reapply()
    fullName: reapply()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'reapply(): void;'
      return:
        type:
          - void
        description: ''
  - uid: excel_release.Excel.TableSort.toJSON
    summary: 'Reemplaza el método JavaScript `toJSON()` para proporcionar un resultado más útil cuando se pasa un objeto API a`JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, a su vez, llama `toJSON` al método del objeto que se le pasa.) Mientras que el objeto Excel. TableSort original es un objeto API, `toJSON` el método devuelve un objeto JavaScript sin formato (escrito como`Excel.Interfaces.TableSortData`<!-- -->) que contiene copias rasas de las propiedades secundarias cargadas del objeto original.'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.TableSortData;'
      return:
        type:
          - excel.Excel.Interfaces.TableSortData
        description: ''