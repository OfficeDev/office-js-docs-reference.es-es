### YamlMime:UniversalReference
items:
  - uid: excel_release.Excel.IconSetConditionalFormat
    summary: |-
      <span data-ttu-id="4d72d-101">Representa un criterio IconSet para el formato condicional.</span><span class="sxs-lookup"><span data-stu-id="4d72d-101">Represents an IconSet criteria for conditional formatting.</span></span>

      <span data-ttu-id="4d72d-102">\[[Conjunto de API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="4d72d-102">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: Excel.IconSetConditionalFormat
    fullName: Excel.IconSetConditionalFormat
    langs:
      - typeScript
    type: class
    extends:
      - office.OfficeExtension.ClientObject
    package: excel_release
    children:
      - excel_release.Excel.IconSetConditionalFormat.context
      - excel_release.Excel.IconSetConditionalFormat.criteria
      - excel_release.Excel.IconSetConditionalFormat.load
      - excel_release.Excel.IconSetConditionalFormat.load_1
      - excel_release.Excel.IconSetConditionalFormat.load_2
      - excel_release.Excel.IconSetConditionalFormat.reverseIconOrder
      - excel_release.Excel.IconSetConditionalFormat.set
      - excel_release.Excel.IconSetConditionalFormat.set_1
      - excel_release.Excel.IconSetConditionalFormat.showIconOnly
      - excel_release.Excel.IconSetConditionalFormat.style
      - excel_release.Excel.IconSetConditionalFormat.toJSON
  - uid: excel_release.Excel.IconSetConditionalFormat.context
    summary: <span data-ttu-id="4d72d-103">Contexto de la solicitud asociado al objeto.</span><span class="sxs-lookup"><span data-stu-id="4d72d-103">The request context associated with the object.</span></span> <span data-ttu-id="4d72d-104">Esto conecta el proceso del complemento con el proceso de la aplicación host de Office.</span><span class="sxs-lookup"><span data-stu-id="4d72d-104">This connects the add-in's process to the Office host application's process.</span></span>
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - RequestContext
  - uid: excel_release.Excel.IconSetConditionalFormat.criteria
    summary: |-
      <span data-ttu-id="4d72d-105">Una matriz de criterios y IconSets para las reglas y los posibles iconos personalizados para los iconos condicionales.</span><span class="sxs-lookup"><span data-stu-id="4d72d-105">An array of Criteria and IconSets for the rules and potential custom icons for conditional icons.</span></span> <span data-ttu-id="4d72d-106">Tenga en cuenta que para el primer criterio solo se puede modificar el icono personalizado, mientras que el tipo, la fórmula y el operador se omitirán cuando se establezca.</span><span class="sxs-lookup"><span data-stu-id="4d72d-106">Note that for the first criterion only the custom icon can be modified, while type, formula, and operator will be ignored when set.</span></span>

      <span data-ttu-id="4d72d-107">\[[Conjunto de API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="4d72d-107">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: criteria
    fullName: criteria
    langs:
      - typeScript
    type: property
    syntax:
      content: 'criteria: Excel.ConditionalIconCriterion[];'
      return:
        type:
          - 'Excel.ConditionalIconCriterion[]'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="4d72d-108">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="4d72d-108">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const range = sheet.getRange("B8:E13");
              const conditionalFormat = range.conditionalFormats
                  .add(Excel.ConditionalFormatType.iconSet);
              const iconSetCF = conditionalFormat.iconSet;
              iconSetCF.style = Excel.IconSet.threeTriangles;

              /*
                  The iconSetCF.criteria array is automatically prepopulated with
                  criterion elements whose properties have been given default settings.
                  You can't write to each property of a criterion directly. Instead,
                  replace the whole criteria object.

                  With a "three*" icon set style, such as "threeTriangles", the third
                  element in the criteria array (criteria[2]) defines the "top" icon;
                  e.g., a green triangle. The second (criteria[1]) defines the "middle"
                  icon, The first (criteria[0]) defines the "low" icon, but it
                  can often be left empty as this method does below, because every
                  cell that does not match the other two criteria always gets the low
                  icon.            
              */
              iconSetCF.criteria = [
                  {} as any,
                  {
                      type: Excel.ConditionalFormatIconRuleType.number,
                      operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                      formula: "=700"
                  },
                  {
                      type: Excel.ConditionalFormatIconRuleType.number,
                      operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                      formula: "=1000",
                  }
              ];

              await context.sync();
          });
          ```
  - uid: excel_release.Excel.IconSetConditionalFormat.load
    summary: '<span data-ttu-id="4d72d-109">Pone en cola un comando para cargar las propiedades especificadas del objeto.</span><span class="sxs-lookup"><span data-stu-id="4d72d-109">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="4d72d-110">Antes de leer las propiedades, debe llamar a "context.sync()".</span><span class="sxs-lookup"><span data-stu-id="4d72d-110">You must call "context.sync()" before reading the properties.</span></span>'
    remarks: |-
      <span data-ttu-id="4d72d-111">Además de esta firma, este método tiene las siguientes firmas:</span><span class="sxs-lookup"><span data-stu-id="4d72d-111">In addition to this signature, this method has the following signatures:</span></span>

      <span data-ttu-id="4d72d-112">`load(option?: string | string[]): Excel.IconSetConditionalFormat`-Donde opción es una cadena delimitada por comas o una matriz de cadenas que especifican las propiedades que se van a cargar.</span><span class="sxs-lookup"><span data-stu-id="4d72d-112">`load(option?: string | string[]): Excel.IconSetConditionalFormat` - Where option is a comma-delimited string or an array of strings that specify the properties to load.</span></span>

      <span data-ttu-id="4d72d-113">`load(option?: { select?: string; expand?: string; }): Excel.IconSetConditionalFormat`-Where opción. Select es una cadena delimitada por comas que especifica las propiedades que se van a cargar y Options. Expand es una cadena delimitada por comas que especifica las propiedades de navegación que se deben cargar.</span><span class="sxs-lookup"><span data-stu-id="4d72d-113">`load(option?: { select?: string; expand?: string; }): Excel.IconSetConditionalFormat` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>

      <span data-ttu-id="4d72d-114">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.IconSetConditionalFormat`-Solo disponible en tipos de colección.</span><span class="sxs-lookup"><span data-stu-id="4d72d-114">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.IconSetConditionalFormat` - Only available on collection types.</span></span> <span data-ttu-id="4d72d-115">Es similar a la firma anterior.</span><span class="sxs-lookup"><span data-stu-id="4d72d-115">It is similar to the preceding signature.</span></span> <span data-ttu-id="4d72d-116">Option. Top especifica el número máximo de elementos de colección que se pueden incluir en el resultado.</span><span class="sxs-lookup"><span data-stu-id="4d72d-116">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="4d72d-117">La opción. SKIP especifica el número de elementos que se deben omitir y que no se incluyen en el resultado.</span><span class="sxs-lookup"><span data-stu-id="4d72d-117">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="4d72d-118">Si se especifica Option. Top, el conjunto de resultados se iniciará después de omitir el número especificado de elementos.</span><span class="sxs-lookup"><span data-stu-id="4d72d-118">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: Excel.Interfaces.IconSetConditionalFormatLoadOptions): Excel.IconSetConditionalFormat;'
      return:
        type:
          - excel.Excel.IconSetConditionalFormat
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - excel.Excel.Interfaces.IconSetConditionalFormatLoadOptions
  - uid: excel_release.Excel.IconSetConditionalFormat.load_1
    summary: <span data-ttu-id="4d72d-119">Pone en cola un comando para cargar las propiedades especificadas del objeto.</span><span class="sxs-lookup"><span data-stu-id="4d72d-119">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="4d72d-120">Debe llamar `context.sync()` antes de leer las propiedades.</span><span class="sxs-lookup"><span data-stu-id="4d72d-120">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.IconSetConditionalFormat;'
      return:
        type:
          - excel.Excel.IconSetConditionalFormat
        description: ''
      parameters:
        - id: propertyNames
          description: <span data-ttu-id="4d72d-121">Una cadena delimitada por comas o una matriz de cadenas que especifican las propiedades que se van a cargar.</span><span class="sxs-lookup"><span data-stu-id="4d72d-121">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
          type:
            - 'string | string[]'
  - uid: excel_release.Excel.IconSetConditionalFormat.load_2
    summary: <span data-ttu-id="4d72d-122">Pone en cola un comando para cargar las propiedades especificadas del objeto.</span><span class="sxs-lookup"><span data-stu-id="4d72d-122">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="4d72d-123">Debe llamar `context.sync()` antes de leer las propiedades.</span><span class="sxs-lookup"><span data-stu-id="4d72d-123">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): Excel.IconSetConditionalFormat;'
      return:
        type:
          - excel.Excel.IconSetConditionalFormat
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '<span data-ttu-id="4d72d-124">Donde propertyNamesAndPaths. Select es una cadena delimitada por comas que especifica las propiedades que se van a cargar y propertyNamesAndPaths. Expand es una cadena delimitada por comas que especifica las propiedades de navegación que se deben cargar.</span><span class="sxs-lookup"><span data-stu-id="4d72d-124">Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>'
          type:
            - '{ select?: string; expand?: string; }'
  - uid: excel_release.Excel.IconSetConditionalFormat.reverseIconOrder
    summary: |-
      <span data-ttu-id="4d72d-125">Si es true, invierte el orden de los iconos del IconSet.</span><span class="sxs-lookup"><span data-stu-id="4d72d-125">If true, reverses the icon orders for the IconSet.</span></span> <span data-ttu-id="4d72d-126">Tenga en cuenta que no se puede establecer si se usan iconos personalizados.</span><span class="sxs-lookup"><span data-stu-id="4d72d-126">Note that this cannot be set if custom icons are used.</span></span>

      <span data-ttu-id="4d72d-127">\[[Conjunto de API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="4d72d-127">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: reverseIconOrder
    fullName: reverseIconOrder
    langs:
      - typeScript
    type: property
    syntax:
      content: 'reverseIconOrder: boolean;'
      return:
        type:
          - boolean
  - uid: excel_release.Excel.IconSetConditionalFormat.set
    summary: '<span data-ttu-id="4d72d-128">Establece varias propiedades de un objeto al mismo tiempo.</span><span class="sxs-lookup"><span data-stu-id="4d72d-128">Sets multiple properties of an object at the same time.</span></span> <span data-ttu-id="4d72d-129">Puede pasar un objeto sin formato con las propiedades apropiadas o cualquier otro objeto de la API del mismo tipo.</span><span class="sxs-lookup"><span data-stu-id="4d72d-129">You can pass either a plain object with the appropriate properties, or another API object of the same type.</span></span>'
    remarks: |-
      <span data-ttu-id="4d72d-130">Este método tiene la siguiente firma adicional:</span><span class="sxs-lookup"><span data-stu-id="4d72d-130">This method has the following additional signature:</span></span>

      `set(properties: Excel.IconSetConditionalFormat): void`
    name: 'set(properties, options)'
    fullName: 'set(properties, options)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Interfaces.IconSetConditionalFormatUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: <span data-ttu-id="4d72d-131">Objeto de JavaScript con propiedades que se estructuran de forma isomórfico a las propiedades del objeto en el que se llama al método.</span><span class="sxs-lookup"><span data-stu-id="4d72d-131">A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.</span></span>
          type:
            - Interfaces.IconSetConditionalFormatUpdateData
        - id: options
          description: <span data-ttu-id="4d72d-132">Proporciona una opción para suprimir errores si el objeto Properties intenta establecer propiedades de solo lectura.</span><span class="sxs-lookup"><span data-stu-id="4d72d-132">Provides an option to suppress errors if the properties object tries to set any read-only properties.</span></span>
          type:
            - office.OfficeExtension.UpdateOptions
  - uid: excel_release.Excel.IconSetConditionalFormat.set_1
    summary: '<span data-ttu-id="4d72d-133">Establece varias propiedades en el objeto al mismo tiempo, basándose en un objeto cargado existente.</span><span class="sxs-lookup"><span data-stu-id="4d72d-133">Sets multiple properties on the object at the same time, based on an existing loaded object.</span></span>'
    name: set(properties)
    fullName: set(properties)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Excel.IconSetConditionalFormat): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - excel.Excel.IconSetConditionalFormat
  - uid: excel_release.Excel.IconSetConditionalFormat.showIconOnly
    summary: |-
      <span data-ttu-id="4d72d-134">Si es true, oculta los valores y solo muestra los iconos.</span><span class="sxs-lookup"><span data-stu-id="4d72d-134">If true, hides the values and only shows icons.</span></span>

      <span data-ttu-id="4d72d-135">\[[Conjunto de API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="4d72d-135">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: showIconOnly
    fullName: showIconOnly
    langs:
      - typeScript
    type: property
    syntax:
      content: 'showIconOnly: boolean;'
      return:
        type:
          - boolean
  - uid: excel_release.Excel.IconSetConditionalFormat.style
    summary: |-
      <span data-ttu-id="4d72d-136">Si se establece, muestra la opción IconSet del formato condicional.</span><span class="sxs-lookup"><span data-stu-id="4d72d-136">If set, displays the IconSet option for the conditional format.</span></span>

      <span data-ttu-id="4d72d-137">\[[Conjunto de API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="4d72d-137">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: style
    fullName: style
    langs:
      - typeScript
    type: property
    syntax:
      content: 'style: Excel.IconSet | "Invalid" | "ThreeArrows" | "ThreeArrowsGray" | "ThreeFlags" | "ThreeTrafficLights1" | "ThreeTrafficLights2" | "ThreeSigns" | "ThreeSymbols" | "ThreeSymbols2" | "FourArrows" | "FourArrowsGray" | "FourRedToBlack" | "FourRating" | "FourTrafficLights" | "FiveArrows" | "FiveArrowsGray" | "FiveRating" | "FiveQuarters" | "ThreeStars" | "ThreeTriangles" | "FiveBoxes" | "LinkedEntityFinanceIcon" | "LinkedEntityMapIcon";'
      return:
        type:
          - Excel.IconSet | "Invalid" | "ThreeArrows" | "ThreeArrowsGray" | "ThreeFlags" | "ThreeTrafficLights1" | "ThreeTrafficLights2" | "ThreeSigns" | "ThreeSymbols" | "ThreeSymbols2" | "FourArrows" | "FourArrowsGray" | "FourRedToBlack" | "FourRating" | "FourTrafficLights" | "FiveArrows" | "FiveArrowsGray" | "FiveRating" | "FiveQuarters" | "ThreeStars" | "ThreeTriangles" | "FiveBoxes" | "LinkedEntityFinanceIcon" | "LinkedEntityMapIcon"
        description: |-


          #### <a name="examples"></a><span data-ttu-id="4d72d-138">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="4d72d-138">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const range = sheet.getRange("B8:E13");
              const conditionalFormat = range.conditionalFormats
                  .add(Excel.ConditionalFormatType.iconSet);
              const iconSetCF = conditionalFormat.iconSet;
              iconSetCF.style = Excel.IconSet.threeTriangles;

              /*
                  The iconSetCF.criteria array is automatically prepopulated with
                  criterion elements whose properties have been given default settings.
                  You can't write to each property of a criterion directly. Instead,
                  replace the whole criteria object.

                  With a "three*" icon set style, such as "threeTriangles", the third
                  element in the criteria array (criteria[2]) defines the "top" icon;
                  e.g., a green triangle. The second (criteria[1]) defines the "middle"
                  icon, The first (criteria[0]) defines the "low" icon, but it
                  can often be left empty as this method does below, because every
                  cell that does not match the other two criteria always gets the low
                  icon.            
              */
              iconSetCF.criteria = [
                  {} as any,
                  {
                      type: Excel.ConditionalFormatIconRuleType.number,
                      operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                      formula: "=700"
                  },
                  {
                      type: Excel.ConditionalFormatIconRuleType.number,
                      operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                      formula: "=1000",
                  }
              ];

              await context.sync();
          });
          ```
  - uid: excel_release.Excel.IconSetConditionalFormat.toJSON
    summary: '<span data-ttu-id="4d72d-139">Reemplaza el método JavaScript `toJSON()` para proporcionar un resultado más útil cuando se pasa un objeto API a`JSON.stringify()`</span><span class="sxs-lookup"><span data-stu-id="4d72d-139">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id="4d72d-140">.</span><span class="sxs-lookup"><span data-stu-id="4d72d-140"></span></span> <span data-ttu-id="4d72d-141">(`JSON.stringify`</span><span class="sxs-lookup"><span data-stu-id="4d72d-141"></span></span><!-- --><span data-ttu-id="4d72d-142">, a su vez, llama `toJSON` al método del objeto que se le pasa.) Mientras que el objeto Excel. IconSetConditionalFormat original es un objeto API, `toJSON` el método devuelve un objeto JavaScript sin formato (escrito como`Excel.Interfaces.IconSetConditionalFormatData`</span><span class="sxs-lookup"><span data-stu-id="4d72d-142">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original Excel.IconSetConditionalFormat object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.IconSetConditionalFormatData`</span></span><!-- --><span data-ttu-id="4d72d-143">) que contiene copias rasas de las propiedades secundarias cargadas del objeto original.</span><span class="sxs-lookup"><span data-stu-id="4d72d-143">) that contains shallow copies of any loaded child properties from the original object.</span></span>'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.IconSetConditionalFormatData;'
      return:
        type:
          - excel.Excel.Interfaces.IconSetConditionalFormatData
        description: ''