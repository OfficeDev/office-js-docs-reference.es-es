### YamlMime:UniversalReference
ms.openlocfilehash: 5d5329a030d39f0a5f00d5dbb8d182973422535f
ms.sourcegitcommit: e9bfba6ec767e9d34fd1cf7b38c30f689617900a
ms.translationtype: MT
ms.contentlocale: es-ES
ms.lasthandoff: 02/20/2019
ms.locfileid: "30105163"
items:
- uid: excel_release.Excel.RangeHyperlink
  summary: >-
    <span data-ttu-id="0eb52-101">Representa las cadenas necesarias para obtener o establecer un objeto Hyperlink (XHL).</span><span class="sxs-lookup"><span data-stu-id="0eb52-101">Represents the necessary strings to get/set a hyperlink (XHL) object.</span></span>


    <span data-ttu-id="0eb52-102">\[[Conjunto de API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0eb52-102">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: Excel.RangeHyperlink
  fullName: Excel.RangeHyperlink
  langs:
  - typeScript
  type: interface
  package: excel_release
  children:
  - excel_release.Excel.RangeHyperlink.address
  - excel_release.Excel.RangeHyperlink.documentReference
  - excel_release.Excel.RangeHyperlink.screenTip
  - excel_release.Excel.RangeHyperlink.textToDisplay
- uid: excel_release.Excel.RangeHyperlink.address
  summary: >-
    <span data-ttu-id="0eb52-103">Representa la dirección url de destino del hipervínculo.</span><span class="sxs-lookup"><span data-stu-id="0eb52-103">Represents the url target for the hyperlink.</span></span>


    <span data-ttu-id="0eb52-104">\[[Conjunto de API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0eb52-104">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: address
  fullName: address
  langs:
  - typeScript
  type: property
  syntax:
    content: 'address?: string;'
    return:
      type:
      - string
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"0eb52-105\">Ejemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"0eb52-105\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Orders\");\n\n    let productsRange = sheet.getRange(\"A3:A5\");\n    productsRange.load(\"values\");\n\n    await context.sync();\n\n    // Create a hyperlink to a URL \n    // for each product name in the first table.\n    for (let i = 0; i < productsRange.values.length; i++) {\n        let cellRange = productsRange.getCell(i, 0);\n        let cellText = productsRange.values[i][0];\n\n        let hyperlink = {\n            textToDisplay: cellText,\n            screenTip: \"Search Bing for '\" + cellText + \"'\",\n            address: \"https://www.bing.com?q=\" + cellText\n        }\n        cellRange.hyperlink = hyperlink;\n    }\n\n    await context.sync();\n});\n```"
- uid: excel_release.Excel.RangeHyperlink.documentReference
  summary: >-
    <span data-ttu-id="0eb52-106">Representa el destino de referencia de documento para el hipervínculo.</span><span class="sxs-lookup"><span data-stu-id="0eb52-106">Represents the document reference target for the hyperlink.</span></span>


    <span data-ttu-id="0eb52-107">\[[Conjunto de API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0eb52-107">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: documentReference
  fullName: documentReference
  langs:
  - typeScript
  type: property
  syntax:
    content: 'documentReference?: string;'
    return:
      type:
      - string
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"0eb52-108\">Ejemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"0eb52-108\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Orders\");\n\n    let productsRange = sheet.getRange(\"A9:A11\");\n    productsRange.load(\"values\");\n\n    await context.sync();\n\n    // Create a hyperlink to a location within the workbook\n    // for each product name in the second table.\n    for (let i = 0; i < productsRange.values.length; i++) {\n        let cellRange = productsRange.getCell(i, 0);\n        let cellText = productsRange.values[i][0];\n\n        let hyperlink = {\n            textToDisplay: cellText,\n            screenTip: \"Navigate to the '\" + cellText + \"' worksheet\",\n            documentReference: cellText + \"!A1\"\n        }\n        cellRange.hyperlink = hyperlink;\n    }\n\n    await context.sync();\n});\n```"
- uid: excel_release.Excel.RangeHyperlink.screenTip
  summary: >-
    <span data-ttu-id="0eb52-109">Representa la cadena que se muestra al mantener el puntero sobre el hipervínculo.</span><span class="sxs-lookup"><span data-stu-id="0eb52-109">Represents the string displayed when hovering over the hyperlink.</span></span>


    <span data-ttu-id="0eb52-110">\[[Conjunto de API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0eb52-110">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: screenTip
  fullName: screenTip
  langs:
  - typeScript
  type: property
  syntax:
    content: 'screenTip?: string;'
    return:
      type:
      - string
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"0eb52-111\">Ejemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"0eb52-111\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Orders\");\n\n    let productsRange = sheet.getRange(\"A3:A5\");\n    productsRange.load(\"values\");\n\n    await context.sync();\n\n    // Create a hyperlink to a URL \n    // for each product name in the first table.\n    for (let i = 0; i < productsRange.values.length; i++) {\n        let cellRange = productsRange.getCell(i, 0);\n        let cellText = productsRange.values[i][0];\n\n        let hyperlink = {\n            textToDisplay: cellText,\n            screenTip: \"Search Bing for '\" + cellText + \"'\",\n            address: \"https://www.bing.com?q=\" + cellText\n        }\n        cellRange.hyperlink = hyperlink;\n    }\n\n    await context.sync();\n});\n```"
- uid: excel_release.Excel.RangeHyperlink.textToDisplay
  summary: >-
    <span data-ttu-id="0eb52-112">Representa la cadena que se muestra en la celda superior izquierda del rango.</span><span class="sxs-lookup"><span data-stu-id="0eb52-112">Represents the string that is displayed in the top left most cell in the range.</span></span>


    <span data-ttu-id="0eb52-113">\[[Conjunto de API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0eb52-113">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: textToDisplay
  fullName: textToDisplay
  langs:
  - typeScript
  type: property
  syntax:
    content: 'textToDisplay?: string;'
    return:
      type:
      - string
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"0eb52-114\">Ejemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"0eb52-114\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Orders\");\n\n    let productsRange = sheet.getRange(\"A3:A5\");\n    productsRange.load(\"values\");\n\n    await context.sync();\n\n    // Create a hyperlink to a URL \n    // for each product name in the first table.\n    for (let i = 0; i < productsRange.values.length; i++) {\n        let cellRange = productsRange.getCell(i, 0);\n        let cellText = productsRange.values[i][0];\n\n        let hyperlink = {\n            textToDisplay: cellText,\n            screenTip: \"Search Bing for '\" + cellText + \"'\",\n            address: \"https://www.bing.com?q=\" + cellText\n        }\n        cellRange.hyperlink = hyperlink;\n    }\n\n    await context.sync();\n});\n```"
