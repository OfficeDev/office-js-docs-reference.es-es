### YamlMime:UniversalReference
ms.openlocfilehash: fba1f8bad39a41fcef6c4852701605bb4c86e20e
ms.sourcegitcommit: e9bfba6ec767e9d34fd1cf7b38c30f689617900a
ms.translationtype: MT
ms.contentlocale: es-ES
ms.lasthandoff: 02/20/2019
ms.locfileid: "30116734"
items:
- uid: excel_release.Excel.TableColumnCollection
  summary: >-
    <span data-ttu-id="ab316-101">Representa una colección de todas las columnas que forman parte de la tabla.</span><span class="sxs-lookup"><span data-stu-id="ab316-101">Represents a collection of all the columns that are part of the table.</span></span>


    <span data-ttu-id="ab316-102">\[[Conjunto de API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="ab316-102">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: Excel.TableColumnCollection
  fullName: Excel.TableColumnCollection
  langs:
  - typeScript
  type: class
  extends:
  - office.OfficeExtension.ClientObject
  package: excel_release
  children:
  - excel_release.Excel.TableColumnCollection.add
  - excel_release.Excel.TableColumnCollection.context
  - excel_release.Excel.TableColumnCollection.count
  - excel_release.Excel.TableColumnCollection.getCount
  - excel_release.Excel.TableColumnCollection.getItem
  - excel_release.Excel.TableColumnCollection.getItemAt
  - excel_release.Excel.TableColumnCollection.getItemOrNullObject
  - excel_release.Excel.TableColumnCollection.items
  - excel_release.Excel.TableColumnCollection.load
  - excel_release.Excel.TableColumnCollection.load_1
  - excel_release.Excel.TableColumnCollection.load_2
  - excel_release.Excel.TableColumnCollection.toJSON
- uid: excel_release.Excel.TableColumnCollection.add
  summary: >-
    <span data-ttu-id="ab316-103">Agrega una nueva columna a la tabla.</span><span class="sxs-lookup"><span data-stu-id="ab316-103">Adds a new column to the table.</span></span>


    <span data-ttu-id="ab316-104">\[[Conjunto de API: ExcelApi 1,1 requiere un índice más pequeño que el recuento total de columnas; 1,4 permite que el índice sea opcional (null o-1) y anexará una columna al final; 1,4 permite el parámetro name en el momento de la creación.](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)</span><span class="sxs-lookup"><span data-stu-id="ab316-104">\[ [API set: ExcelApi 1.1 requires an index smaller than the total column count; 1.4 allows index to be optional (null or -1) and will append a column at the end; 1.4 allows name parameter at creation time.](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)</span></span> <span data-ttu-id="ab316-105">\]</span><span class="sxs-lookup"><span data-stu-id="ab316-105"></span></span>
  name: add(index, values, name)
  fullName: add(index, values, name)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'add(index?: number, values?: Array<Array<boolean | string | number>> | boolean | string | number, name?: string): Excel.TableColumn;'
    return:
      type:
      - excel.Excel.TableColumn
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"ab316-106\">Ejemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"ab316-106\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var tables = ctx.workbook.tables;\n    var values = [[\"Sample\"], [\"Values\"], [\"For\"], [\"New\"], [\"Column\"]];\n    var column = tables.getItem(\"Table1\").columns.add(null, values);\n    column.load('name');\n    return ctx.sync().then(function() {\n        console.log(column.name);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: index
      description: <span data-ttu-id="ab316-p102">Opcional. Especifica la posición relativa de la nueva columna. Si es NULL o -1, la columna se agrega al final. Las columnas con un índice más alto se desplazarán a un lado. Indizado con cero.</span><span class="sxs-lookup"><span data-stu-id="ab316-p102">Optional. Specifies the relative position of the new column. If null or -1, the addition happens at the end. Columns with a higher index will be shifted to the side. Zero-indexed.</span></span>
      type:
      - number
    - id: values
      description: <span data-ttu-id="ab316-p103">Opcional. Matriz bidimensional de valores sin formato de la columna de la tabla.</span><span class="sxs-lookup"><span data-stu-id="ab316-p103">Optional. A 2-dimensional array of unformatted values of the table column.</span></span>
      type:
      - Array<Array<boolean | string | number>> | boolean | string | number
    - id: name
      description: <span data-ttu-id="ab316-p104">Opcional. Especifica el nombre de la nueva columna. Si es NULL, se utilizará el nombre predeterminado.</span><span class="sxs-lookup"><span data-stu-id="ab316-p104">Optional. Specifies the name of the new column. If null, the default name will be used.</span></span>
      type:
      - string
- uid: excel_release.Excel.TableColumnCollection.context
  summary: <span data-ttu-id="ab316-117">Contexto de la solicitud asociado al objeto.</span><span class="sxs-lookup"><span data-stu-id="ab316-117">The request context associated with the object.</span></span> <span data-ttu-id="ab316-118">Esto conecta el proceso del complemento con el proceso de la aplicación host de Office.</span><span class="sxs-lookup"><span data-stu-id="ab316-118">This connects the add-in's process to the Office host application's process.</span></span>
  name: context
  fullName: context
  langs:
  - typeScript
  type: property
  syntax:
    content: 'context: RequestContext;'
    return:
      type:
      - RequestContext
- uid: excel_release.Excel.TableColumnCollection.count
  summary: >-
    <span data-ttu-id="ab316-p106">Devuelve el número de columnas de la tabla. Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="ab316-p106">Returns the number of columns in the table. Read-only.</span></span>


    <span data-ttu-id="ab316-121">\[[Conjunto de API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="ab316-121">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: count
  fullName: count
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly count: number;'
    return:
      type:
      - number
- uid: excel_release.Excel.TableColumnCollection.getCount
  summary: >-
    <span data-ttu-id="ab316-122">Obtiene el número de columnas de la tabla.</span><span class="sxs-lookup"><span data-stu-id="ab316-122">Gets the number of columns in the table.</span></span>


    <span data-ttu-id="ab316-123">\[[Conjunto de API: ExcelApi 1,4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="ab316-123">\[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getCount()
  fullName: getCount()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getCount(): OfficeExtension.ClientResult<number>;'
    return:
      type:
      - OfficeExtension.ClientResult<number>
      description: ''
- uid: excel_release.Excel.TableColumnCollection.getItem
  summary: >-
    <span data-ttu-id="ab316-124">Obtiene un objeto de columna por nombre o identificador.</span><span class="sxs-lookup"><span data-stu-id="ab316-124">Gets a column object by Name or ID.</span></span>


    <span data-ttu-id="ab316-125">\[[Conjunto de API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="ab316-125">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getItem(key)
  fullName: getItem(key)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getItem(key: number | string): Excel.TableColumn;'
    return:
      type:
      - excel.Excel.TableColumn
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"ab316-126\">Ejemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"ab316-126\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var tablecolumn = ctx.workbook.tables.getItem('Table1').columns.getItem(0);\n    tablecolumn.load('name');\n    return ctx.sync().then(function() {\n            console.log(tablecolumn.name);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: key
      description: <span data-ttu-id="ab316-127">Nombre o identificador de columna.</span><span class="sxs-lookup"><span data-stu-id="ab316-127">Column Name or ID.</span></span>
      type:
      - number | string
- uid: excel_release.Excel.TableColumnCollection.getItemAt
  summary: >-
    <span data-ttu-id="ab316-128">Obtiene una columna en función de su posición en la colección.</span><span class="sxs-lookup"><span data-stu-id="ab316-128">Gets a column based on its position in the collection.</span></span>


    <span data-ttu-id="ab316-129">\[[Conjunto de API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="ab316-129">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getItemAt(index)
  fullName: getItemAt(index)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getItemAt(index: number): Excel.TableColumn;'
    return:
      type:
      - excel.Excel.TableColumn
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"ab316-130\">Ejemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"ab316-130\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var tablecolumn = ctx.workbook.tables.getItem['Table1'].columns.getItemAt(0);\n    tablecolumn.load('name');\n    return ctx.sync().then(function() {\n            console.log(tablecolumn.name);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: index
      description: <span data-ttu-id="ab316-p107">Valor de índice del objeto que se va a recuperar. Indizado con cero.</span><span class="sxs-lookup"><span data-stu-id="ab316-p107">Index value of the object to be retrieved. Zero-indexed.</span></span>
      type:
      - number
- uid: excel_release.Excel.TableColumnCollection.getItemOrNullObject
  summary: >-
    <span data-ttu-id="ab316-p108">Obtiene un objeto de columna por nombre o identificador. Si la columna no existe, devolverá un objeto NULL.</span><span class="sxs-lookup"><span data-stu-id="ab316-p108">Gets a column object by Name or ID. If the column does not exist, will return a null object.</span></span>


    <span data-ttu-id="ab316-135">\[[Conjunto de API: ExcelApi 1,4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="ab316-135">\[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getItemOrNullObject(key)
  fullName: getItemOrNullObject(key)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getItemOrNullObject(key: number | string): Excel.TableColumn;'
    return:
      type:
      - excel.Excel.TableColumn
      description: ''
    parameters:
    - id: key
      description: <span data-ttu-id="ab316-136">Nombre o identificador de columna.</span><span class="sxs-lookup"><span data-stu-id="ab316-136">Column Name or ID.</span></span>
      type:
      - number | string
- uid: excel_release.Excel.TableColumnCollection.items
  summary: <span data-ttu-id="ab316-137">Obtiene los elementos secundarios cargados de esta colección.</span><span class="sxs-lookup"><span data-stu-id="ab316-137">Gets the loaded child items in this collection.</span></span>
  name: items
  fullName: items
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly items: Excel.TableColumn[];'
    return:
      type:
      - Excel.TableColumn[]
- uid: excel_release.Excel.TableColumnCollection.load
  summary: <span data-ttu-id="ab316-138">Pone en cola un comando para cargar las propiedades especificadas del objeto.</span><span class="sxs-lookup"><span data-stu-id="ab316-138">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="ab316-139">Debe llamar a "context. Sync ()" antes de leer las propiedades.</span><span class="sxs-lookup"><span data-stu-id="ab316-139">You must call "context.sync()" before reading the properties.</span></span>
  remarks: >-
    <span data-ttu-id="ab316-140">Además de esta firma, este método tiene las siguientes firmas:</span><span class="sxs-lookup"><span data-stu-id="ab316-140">In addition to this signature, this method has the following signatures:</span></span>


    <span data-ttu-id="ab316-141">`load(option?: string | string[]): Excel.TableColumnCollection`-Donde opción es una cadena delimitada por comas o una matriz de cadenas que especifican las propiedades que se van a cargar.</span><span class="sxs-lookup"><span data-stu-id="ab316-141">`load(option?: string | string[]): Excel.TableColumnCollection` - Where option is a comma-delimited string or an array of strings that specify the properties to load.</span></span>


    <span data-ttu-id="ab316-142">`load(option?: { select?: string; expand?: string; }): Excel.TableColumnCollection`-Where opción. Select es una cadena delimitada por comas que especifica las propiedades que se van a cargar y Options. Expand es una cadena delimitada por comas que especifica las propiedades de navegación que se deben cargar.</span><span class="sxs-lookup"><span data-stu-id="ab316-142">`load(option?: { select?: string; expand?: string; }): Excel.TableColumnCollection` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>


    <span data-ttu-id="ab316-143">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.TableColumnCollection`-Solo disponible en tipos de colección.</span><span class="sxs-lookup"><span data-stu-id="ab316-143">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.TableColumnCollection` - Only available on collection types.</span></span> <span data-ttu-id="ab316-144">Es similar a la firma anterior.</span><span class="sxs-lookup"><span data-stu-id="ab316-144">It is similar to the preceding signature.</span></span> <span data-ttu-id="ab316-145">Option. Top especifica el número máximo de elementos de colección que se pueden incluir en el resultado.</span><span class="sxs-lookup"><span data-stu-id="ab316-145">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="ab316-146">La opción. SKIP especifica el número de elementos que se deben omitir y que no se incluyen en el resultado.</span><span class="sxs-lookup"><span data-stu-id="ab316-146">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="ab316-147">Si se especifica Option. Top, el conjunto de resultados se iniciará después de omitir el número especificado de elementos.</span><span class="sxs-lookup"><span data-stu-id="ab316-147">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
  name: load(option)
  fullName: load(option)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: Excel.Interfaces.TableColumnCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions): Excel.TableColumnCollection;'
    return:
      type:
      - excel.Excel.TableColumnCollection
      description: ''
    parameters:
    - id: option
      description: ''
      type:
      - Excel.Interfaces.TableColumnCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions
- uid: excel_release.Excel.TableColumnCollection.load_1
  summary: <span data-ttu-id="ab316-148">Pone en cola un comando para cargar las propiedades especificadas del objeto.</span><span class="sxs-lookup"><span data-stu-id="ab316-148">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="ab316-149">Debe llamar `context.sync()` antes de leer las propiedades.</span><span class="sxs-lookup"><span data-stu-id="ab316-149">You must call `context.sync()` before reading the properties.</span></span>
  name: load(propertyNames)
  fullName: load(propertyNames)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(propertyNames?: string | string[]): Excel.TableColumnCollection;'
    return:
      type:
      - excel.Excel.TableColumnCollection
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"ab316-150\">Ejemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"ab316-150\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var tablecolumns = ctx.workbook.tables.getItem('Table1').columns;\n    tablecolumns.load('items');\n    return ctx.sync().then(function() {\n        console.log(\"tablecolumns Count: \" + tablecolumns.count);\n        for (var i = 0; i < tablecolumns.items.length; i++) {\n            console.log(tablecolumns.items[i].name);\n        }\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: propertyNames
      description: <span data-ttu-id="ab316-151">Una cadena delimitada por comas o una matriz de cadenas que especifican las propiedades que se van a cargar.</span><span class="sxs-lookup"><span data-stu-id="ab316-151">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
      type:
      - string | string[]
- uid: excel_release.Excel.TableColumnCollection.load_2
  name: load(option)
  fullName: load(option)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: OfficeExtension.LoadOption): Excel.TableColumnCollection;'
    return:
      type:
      - excel.Excel.TableColumnCollection
      description: ''
    parameters:
    - id: option
      description: ''
      type:
      - office.OfficeExtension.LoadOption
- uid: excel_release.Excel.TableColumnCollection.toJSON
  summary: <span data-ttu-id="ab316-152">Reemplaza el método de JavaScript `toJSON()` para proporcionar un resultado más útil cuando se pasa un objeto de `JSON.stringify()` <!-- -->la API.</span><span class="sxs-lookup"><span data-stu-id="ab316-152">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`<!-- -->.</span></span> <span data-ttu-id="ab316-153">(`JSON.stringify`<!-- -->a su vez, llama al `toJSON` método del objeto que se le pasa). Mientras que el `Excel.TableColumnCollection` objeto original es un objeto API, `toJSON` el método devuelve un objeto JavaScript sin formato (escrito `Excel.Interfaces.TableColumnCollectionData` <!-- -->como) que contiene una matriz "items" con copias rasas de las propiedades cargadas de los elementos de la colección.</span><span class="sxs-lookup"><span data-stu-id="ab316-153">(`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original `Excel.TableColumnCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.TableColumnCollectionData`<!-- -->) that contains an "items" array with shallow copies of any loaded properties from the collection's items.</span></span>
  name: toJSON()
  fullName: toJSON()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON(): Excel.Interfaces.TableColumnCollectionData;'
    return:
      type:
      - excel.Excel.Interfaces.TableColumnCollectionData
      description: ''
