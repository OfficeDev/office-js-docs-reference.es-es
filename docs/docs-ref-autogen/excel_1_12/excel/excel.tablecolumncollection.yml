### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.TableColumnCollection:class'
    summary: |-
      Representa una colección de todas las columnas que forman parte de la tabla.

      \[[Conjunto de API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: Excel.TableColumnCollection
    fullName: Excel.TableColumnCollection
    langs:
      - typeScript
    type: class
    extends:
      - 'office!OfficeExtension.ClientObject:class'
    package: excel!
    children:
      - 'excel!Excel.TableColumnCollection#add:member(1)'
      - 'excel!Excel.TableColumnCollection#context:member'
      - 'excel!Excel.TableColumnCollection#count:member'
      - 'excel!Excel.TableColumnCollection#getCount:member(1)'
      - 'excel!Excel.TableColumnCollection#getItem:member(1)'
      - 'excel!Excel.TableColumnCollection#getItemAt:member(1)'
      - 'excel!Excel.TableColumnCollection#getItemOrNullObject:member(1)'
      - 'excel!Excel.TableColumnCollection#items:member'
      - 'excel!Excel.TableColumnCollection#load:member(1)'
      - 'excel!Excel.TableColumnCollection#load:member(2)'
      - 'excel!Excel.TableColumnCollection#load:member(3)'
      - 'excel!Excel.TableColumnCollection#toJSON:member(1)'
  - uid: 'excel!Excel.TableColumnCollection#add:member(1)'
    summary: |-
      Agrega una nueva columna a la tabla.

      \[[Conjunto de API: ExcelApi 1,1 requiere un índice más pequeño que el recuento total de columnas; 1,4 permite que el índice sea opcional (null o-1) y anexará una columna al final; 1,4 permite el parámetro name en el momento de la creación.](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]
    name: 'add(index, values, name)'
    fullName: 'add(index, values, name)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'add(index?: number, values?: Array<Array<boolean | string | number>> | boolean | string | number, name?: string): Excel.TableColumn;'
      return:
        type:
          - 'excel!Excel.TableColumn:class'
        description: |-


          #### <a name="examples"></a>Ejemplos

          ```javascript
          Excel.run(function (ctx) { 
              var tables = ctx.workbook.tables;
              var values = [["Sample"], ["Values"], ["For"], ["New"], ["Column"]];
              var column = tables.getItem("Table1").columns.add(null, values);
              column.load('name');
              return ctx.sync().then(function() {
                  console.log(column.name);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: index
          description: 'Opcional. Especifica la posición relativa de la nueva columna. Si es NULL o -1, la columna se agrega al final. Las columnas con un índice más alto se desplazarán a un lado. Indizado con cero.'
          type:
            - number
        - id: values
          description: Opcional. Matriz bidimensional de valores sin formato de la columna de la tabla.
          type:
            - 'excel!Excel.TableColumnCollection#add~0:complex'
        - id: name
          description: 'Opcional. Especifica el nombre de la nueva columna. Si es NULL, se utilizará el nombre predeterminado.'
          type:
            - string
  - uid: 'excel!Excel.TableColumnCollection#context:member'
    summary: Contexto de la solicitud asociado al objeto. Esto conecta el proceso del complemento con el proceso de la aplicación host de Office.
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'excel!Excel.RequestContext:class'
  - uid: 'excel!Excel.TableColumnCollection#count:member'
    summary: |-
      Devuelve el número de columnas de la tabla.

      \[[Conjunto de API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: count
    fullName: count
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly count: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.TableColumnCollection#getCount:member(1)'
    summary: |-
      Obtiene el número de columnas de la tabla.

      \[[Conjunto de API: ExcelApi 1,4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getCount()
    fullName: getCount()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCount(): OfficeExtension.ClientResult<number>;'
      return:
        type:
          - 'excel!Excel.TableColumnCollection#getCount~0:complex'
        description: ''
  - uid: 'excel!Excel.TableColumnCollection#getItem:member(1)'
    summary: |-
      Obtiene un objeto de columna por nombre o identificador.

      \[[Conjunto de API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getItem(key)
    fullName: getItem(key)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItem(key: number | string): Excel.TableColumn;'
      return:
        type:
          - 'excel!Excel.TableColumn:class'
        description: |-


          #### <a name="examples"></a>Ejemplos

          ```javascript
          Excel.run(function (ctx) { 
              var tableColumn = ctx.workbook.tables.getItem('Table1').columns.getItem(0);
              tableColumn.load('name');
              return ctx.sync().then(function() {
                      console.log(tableColumn.name);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: key
          description: Nombre o identificador de columna.
          type:
            - number | string
  - uid: 'excel!Excel.TableColumnCollection#getItemAt:member(1)'
    summary: |-
      Obtiene una columna en función de su posición en la colección.

      \[[Conjunto de API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getItemAt(index)
    fullName: getItemAt(index)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemAt(index: number): Excel.TableColumn;'
      return:
        type:
          - 'excel!Excel.TableColumn:class'
        description: |-


          #### <a name="examples"></a>Ejemplos

          ```javascript
          Excel.run(function (ctx) { 
              var tableColumn = ctx.workbook.tables.getItem['Table1'].columns.getItemAt(0);
              tableColumn.load('name');
              return ctx.sync().then(function() {
                      console.log(tableColumn.name);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: index
          description: Valor de índice del objeto que se va a recuperar. Indizado con cero.
          type:
            - number
  - uid: 'excel!Excel.TableColumnCollection#getItemOrNullObject:member(1)'
    summary: |-
      Obtiene un objeto de columna por nombre o identificador. Si la columna no existe, devolverá un objeto NULL.

      \[[Conjunto de API: ExcelApi 1,4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getItemOrNullObject(key)
    fullName: getItemOrNullObject(key)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemOrNullObject(key: number | string): Excel.TableColumn;'
      return:
        type:
          - 'excel!Excel.TableColumn:class'
        description: ''
      parameters:
        - id: key
          description: Nombre o identificador de columna.
          type:
            - number | string
  - uid: 'excel!Excel.TableColumnCollection#items:member'
    summary: Obtiene los elementos secundarios cargados en esta colección.
    name: items
    fullName: items
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly items: Excel.TableColumn[];'
      return:
        type:
          - 'excel!Excel.TableColumnCollection#items~0:complex'
  - uid: 'excel!Excel.TableColumnCollection#load:member(1)'
    summary: Pone en cola un comando para cargar las propiedades especificadas del objeto. Debe llamar a `context.sync()` antes de leer las propiedades.
    name: load(options)
    fullName: load(options)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(options?: Excel.Interfaces.TableColumnCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions): Excel.TableColumnCollection;'
      return:
        type:
          - 'excel!Excel.TableColumnCollection:class'
        description: ''
      parameters:
        - id: options
          description: Proporciona opciones para las propiedades del objeto que se va a cargar.
          type:
            - 'excel!Excel.TableColumnCollection#load~0:complex'
  - uid: 'excel!Excel.TableColumnCollection#load:member(2)'
    summary: Pone en cola un comando para cargar las propiedades especificadas del objeto. Debe llamar a `context.sync()` antes de leer las propiedades.
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.TableColumnCollection;'
      return:
        type:
          - 'excel!Excel.TableColumnCollection:class'
        description: |-


          #### <a name="examples"></a>Ejemplos

          ```javascript
          Excel.run(function (ctx) { 
              var tableColumns = ctx.workbook.tables.getItem('Table1').columns;
              tableColumns.load('items');
              return ctx.sync().then(function() {
                  console.log("tableColumns Count: " + tableColumns.count);
                  for (var i = 0; i < tableColumns.items.length; i++) {
                      console.log(tableColumns.items[i].name);
                  }
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: propertyNames
          description: Una cadena delimitada por comas o una matriz de cadenas que especifican las propiedades que se van a cargar.
          type:
            - 'string | string[]'
  - uid: 'excel!Excel.TableColumnCollection#load:member(3)'
    summary: Pone en cola un comando para cargar las propiedades especificadas del objeto. Debe llamar a `context.sync()` antes de leer las propiedades.
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Excel.TableColumnCollection;'
      return:
        type:
          - 'excel!Excel.TableColumnCollection:class'
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '`propertyNamesAndPaths.select` es una cadena delimitada por comas que especifica las propiedades que se van a cargar y `propertyNamesAndPaths.expand` es una cadena delimitada por comas que especifica las propiedades de navegación que se deben cargar.'
          type:
            - 'office!OfficeExtension.LoadOption:interface'
  - uid: 'excel!Excel.TableColumnCollection#toJSON:member(1)'
    summary: 'Reemplaza el `toJSON()` método JavaScript para proporcionar un resultado más útil cuando se pasa un objeto API a `JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, a su vez, llama al `toJSON` método del objeto que se le pasa.) Mientras que el `Excel.TableColumnCollection` objeto original es un objeto API, el `toJSON` método devuelve un objeto JavaScript sin formato (escrito como `Excel.Interfaces.TableColumnCollectionData`<!-- -->) que contiene una matriz "items" con copias rasas de las propiedades cargadas de los elementos de la colección.'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.TableColumnCollectionData;'
      return:
        type:
          - 'excel!Excel.Interfaces.TableColumnCollectionData:interface'
        description: ''
references:
  - uid: 'office!OfficeExtension.ClientObject:class'
    name: OfficeExtension.ClientObject
  - uid: 'excel!Excel.TableColumn:class'
    name: Excel.TableColumn
  - uid: 'excel!Excel.TableColumnCollection#add~0:complex'
    name: Array<Array<boolean | string | number>> | boolean | string | number
    fullName: Array<Array<boolean | string | number>> | boolean | string | number
    spec.typeScript:
      - uid: '!Array:interface'
        name: Array
        fullName: Array
      - name: <
        fullName: <
      - uid: '!Array:interface'
        name: Array
        fullName: Array
      - name: <boolean | string | number>> | boolean | string | number
        fullName: <boolean | string | number>> | boolean | string | number
  - uid: 'excel!Excel.RequestContext:class'
    name: RequestContext
  - uid: 'excel!Excel.TableColumnCollection#getCount~0:complex'
    name: OfficeExtension.ClientResult<number>
    fullName: OfficeExtension.ClientResult<number>
    spec.typeScript:
      - uid: 'office!OfficeExtension.ClientResult:class'
        name: OfficeExtension.ClientResult
        fullName: OfficeExtension.ClientResult
      - name: <number>
        fullName: <number>
  - uid: 'excel!Excel.TableColumnCollection#items~0:complex'
    name: 'Excel.TableColumn[]'
    fullName: 'Excel.TableColumn[]'
    spec.typeScript:
      - uid: 'excel!Excel.TableColumn:class'
        name: Excel.TableColumn
        fullName: Excel.TableColumn
      - name: '[]'
        fullName: '[]'
  - uid: 'excel!Excel.TableColumnCollection:class'
    name: Excel.TableColumnCollection
  - uid: 'excel!Excel.TableColumnCollection#load~0:complex'
    name: Excel.Interfaces.TableColumnCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions
    fullName: Excel.Interfaces.TableColumnCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions
    spec.typeScript:
      - uid: 'excel!Excel.Interfaces.TableColumnCollectionLoadOptions:interface'
        name: Excel.Interfaces.TableColumnCollectionLoadOptions
        fullName: Excel.Interfaces.TableColumnCollectionLoadOptions
      - name: ' & '
        fullName: ' & '
      - uid: 'excel!Excel.Interfaces.CollectionLoadOptions:interface'
        name: Excel.Interfaces.CollectionLoadOptions
        fullName: Excel.Interfaces.CollectionLoadOptions
  - uid: 'office!OfficeExtension.LoadOption:interface'
    name: OfficeExtension.LoadOption
  - uid: 'excel!Excel.Interfaces.TableColumnCollectionData:interface'
    name: Excel.Interfaces.TableColumnCollectionData