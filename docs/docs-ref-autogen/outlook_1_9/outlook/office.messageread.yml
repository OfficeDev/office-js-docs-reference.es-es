### YamlMime:TSType
name: Office.MessageRead
uid: outlook!Office.MessageRead:interface
package: outlook!
fullName: Office.MessageRead
summary: >-
  El modo de lectura de mensajes de [Office. Context. Mailbox. Item](xref:outlook!Office.Item:interface)<!-- -->.


  **Importante**: se trata de un objeto interno de Outlook, que no se expone directamente a través de las interfaces existentes. Debe tratarlo como un modo de `Office.context.mailbox.item`<!-- -->. Consulte la página del [modelo de objetos](https://docs.microsoft.com/office/dev/add-ins/reference/objectmodel/requirement-set-1.8/office.context.mailbox.item) para obtener más información.


  Interfaces principales:


  - [ItemRead](xref:outlook!Office.ItemRead:interface)


  - [Message](xref:outlook!Office.Message:interface)
remarks: ''
isPreview: false
isDeprecated: false
type: interface
properties:
- name: attachments
  uid: outlook!Office.MessageRead#attachments:member
  package: outlook!
  fullName: attachments
  summary: Obtiene los datos adjuntos del elemento como una matriz.
  remarks: >-
    **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`


    **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: mensaje leído


    **Nota**: ciertos tipos de archivos están bloqueados por Outlook debido a posibles problemas de seguridad y, por lo tanto, no se devuelven. Para obtener más información, consulte [datos adjuntos bloqueados en Outlook](https://support.office.com/article/Blocked-attachments-in-Outlook-434752E1-02D3-4E90-9124-8B81E49A8519) .<!-- -->.


    #### <a name="examples"></a>Ejemplos


    ```javascript

    // The following code builds an HTML string with details of all attachments on the current item.

    var item = Office.context.mailbox.item;

    var outputString = "";


    if (item.attachments.length > 0) {
        for (i = 0 ; i < item.attachments.length ; i++) {
            var attachment = item.attachments[i];
            outputString += "<BR>" + i + ". Name: ";
            outputString += attachment.name;
            outputString += "<BR>ID: " + attachment.id;
            outputString += "<BR>contentType: " + attachment.contentType;
            outputString += "<BR>size: " + attachment.size;
            outputString += "<BR>attachmentType: " + attachment.attachmentType;
            outputString += "<BR>isInline: " + attachment.isInline;
        }
    }


    console.log(outputString);

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/40-attachments/get-attachments-read.yaml

    var attachments = Office.context.mailbox.item.attachments;

    console.log(attachments);

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'attachments: AttachmentDetails[];'
    return:
      type: <xref uid="outlook!Office.AttachmentDetails:interface" />[]
- name: body
  uid: outlook!Office.MessageRead#body:member
  package: outlook!
  fullName: body
  summary: >-
    Obtiene un objeto que proporciona métodos para manipular el cuerpo de un elemento.


    \[[Conjunto de API: buzón de correo 1,1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`


    **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: mensaje leído


    #### <a name="examples"></a>Ejemplos


    ```javascript

    // This example gets the body of the item as plain text.

    Office.context.mailbox.item.body.getAsync(
        "text",
        { asyncContext: "This is passed to the callback" },
        function callback(result) {
            // Do something with the result.
        });

    // The following is an example of the result parameter passed to the callback function.

    {
        "value": "TEXT of whole body (including threads below)",
        "status": "succeeded",
        "asyncContext": "This is passed to the callback"
    }

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'body: Body;'
    return:
      type: <xref uid="outlook!Office.Body:interface" />
- name: categories
  uid: outlook!Office.MessageRead#categories:member
  package: outlook!
  fullName: categories
  summary: >-
    Obtiene un objeto que proporciona métodos para administrar las categorías del elemento.


    \[[Conjunto de API: buzón de correo 1,8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`


    **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: mensaje leído


    #### <a name="examples"></a>Ejemplos


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/45-categories/work-with-categories.yaml

    Office.context.mailbox.item.categories.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        var categories = asyncResult.value;
        if (categories && categories.length > 0) {
          console.log("Categories assigned to this item:");
          console.log(JSON.stringify(categories));
        } else {
          console.log("There are no categories assigned to this item.");
        }
      } else {
        console.error(asyncResult.error);
      }
    });

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/45-categories/work-with-categories.yaml

    // Note: In order for you to successfully add a category,

    // it must be in the mailbox categories master list.


    Office.context.mailbox.masterCategories.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        var masterCategories = asyncResult.value;
        if (masterCategories && masterCategories.length > 0) {
          // Grab the first category from the master list.
          var categoryToAdd = [masterCategories[0].displayName];
          Office.context.mailbox.item.categories.addAsync(categoryToAdd, function(asyncResult) {
            if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
              console.log(`Successfully assigned category '${categoryToAdd}' to item.`);
            } else {
              console.log("categories.addAsync call failed with error: " + asyncResult.error.message);
            }
          });
        } else {
          console.log("There are no categories in the master list on this mailbox. You can add categories using Office.context.mailbox.masterCategories.addAsync.");
        }
      } else {
        console.error(asyncResult.error);
      }
    });

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/45-categories/work-with-categories.yaml

    Office.context.mailbox.item.categories.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        var categories = asyncResult.value;
        if (categories && categories.length > 0) {
          // Grab the first category assigned to this item.
          var categoryToRemove = [categories[0].displayName];
          Office.context.mailbox.item.categories.removeAsync(categoryToRemove, function(asyncResult) {
            if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
              console.log(`Successfully unassigned category '${categoryToRemove}' from this item.`);
            } else {
              console.log("categories.removeAsync call failed with error: " + asyncResult.error.message);
            }
          });
        } else {
          console.log("There are no categories assigned to this item.");
        }
      } else {
        console.error(asyncResult.error);
      }
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'categories: Categories;'
    return:
      type: <xref uid="outlook!Office.Categories:interface" />
- name: cc
  uid: outlook!Office.MessageRead#cc:member
  package: outlook!
  fullName: cc
  summary: >-
    Proporciona acceso a los destinatarios CC (en copia) de un mensaje. El tipo de objeto y el nivel de acceso dependen del modo del elemento actual.


    La `cc` propiedad devuelve una matriz que contiene un objeto [EmailAddressDetails](xref:outlook!Office.EmailAddressDetails:interface) para cada uno de los destinatarios que aparecen en la línea **CC** del mensaje. Límites de tamaño de recopilación:


    - Windows: 500 miembros


    - Mac: 100 miembros


    - Explorador Web: 20 miembros


    - Other: sin límite
  remarks: >-
    **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`


    **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: mensaje leído


    #### <a name="examples"></a>Ejemplos


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/30-recipients-and-attendees/get-cc-message-read.yaml

    var msgCc = Office.context.mailbox.item.cc;

    console.log("Message copied to:");

    for (var i = 0; i < msgCc.length; i++) {
      console.log(msgCc[i].displayName + " (" + msgCc[i].emailAddress + ")");
    }

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'cc: EmailAddressDetails[];'
    return:
      type: <xref uid="outlook!Office.EmailAddressDetails:interface" />[]
- name: conversationId
  uid: outlook!Office.MessageRead#conversationId:member
  package: outlook!
  fullName: conversationId
  summary: >-
    Obtiene un identificador de la conversación de correo electrónico que contiene un mensaje determinado.


    Puede obtener un entero para esta propiedad si la aplicación de correo se activa en respuestas o formularios de lectura o en formularios de redacción. Si, después, el usuario cambia el asunto del mensaje de respuesta, al enviar dicha respuesta, el Id. de conversación de ese mensaje cambiará y el valor que se obtuvo anteriormente ya no será de aplicación.


    Obtiene un valor NULL para esta propiedad para un nuevo elemento de un formulario de redacción. Si el usuario establece un asunto y guarda el elemento, la propiedad `conversationId` devolverá un valor.
  remarks: >-
    **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`


    **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: mensaje leído


    #### <a name="examples"></a>Ejemplos


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-conversation-id-message.yaml

    console.log(`Conversation ID: ${Office.context.mailbox.item.conversationId}`);

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'conversationId: string;'
    return:
      type: string
- name: dateTimeCreated
  uid: outlook!Office.MessageRead#dateTimeCreated:member
  package: outlook!
  fullName: dateTimeCreated
  summary: Obtiene la fecha y hora de creación de un elemento.
  remarks: >-
    **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`


    **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: mensaje leído


    #### <a name="examples"></a>Ejemplos


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-date-time-created-read.yaml

    console.log(`Creation date and time: ${Office.context.mailbox.item.dateTimeCreated}`);

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'dateTimeCreated: Date;'
    return:
      type: Date
- name: dateTimeModified
  uid: outlook!Office.MessageRead#dateTimeModified:member
  package: outlook!
  fullName: dateTimeModified
  summary: >-
    Obtiene la fecha y hora en que se modificó por última vez un elemento.


    **Nota**: este miembro no es compatible con Outlook en iOS o Android.
  remarks: >-
    **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`


    **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: mensaje leído


    #### <a name="examples"></a>Ejemplos


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-date-time-modified-read.yaml

    console.log(`Date and time item last modified: ${Office.context.mailbox.item.dateTimeModified}`);

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'dateTimeModified: Date;'
    return:
      type: Date
- name: end
  uid: outlook!Office.MessageRead#end:member
  package: outlook!
  fullName: end
  summary: >-
    Obtiene la fecha y la hora de finalización de la cita.


    La `end` propiedad es un `Date` objeto expresado como un valor de fecha y hora de la hora universal coordinada (UTC). Puede usar el `convertToLocalClientTime` método para convertir el valor de la `end` propiedad en la fecha y hora local del cliente.


    Si usa el método `Time.setAsync` para establecer la hora de finalización, use el método `convertToUtcClientTime` para convertir la hora local del cliente en un valor UTC para el servidor.
  remarks: >-
    **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`


    **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: mensaje leído


    #### <a name="examples"></a>Ejemplos


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-end-read.yaml

    console.log(`Appointment ends: ${Office.context.mailbox.item.end}`);

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'end: Date;'
    return:
      type: Date
- name: from
  uid: outlook!Office.MessageRead#from:member
  package: outlook!
  fullName: from
  summary: >-
    Obtiene la dirección de correo electrónico del remitente de un mensaje.


    Las propiedades `from` y `sender` representan a la misma persona, a menos que un delegado envíe el mensaje. En ese caso, la `from` propiedad representa al usuario que delega, y la `sender` propiedad representa el delegado.


    **Nota**: la `recipientType` propiedad del `EmailAddressDetails` objeto de la `from` propiedad está sin definir.


    La `from` propiedad devuelve un `EmailAddressDetails` objeto.
  remarks: >-
    **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`


    **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: mensaje leído


    #### <a name="examples"></a>Ejemplos


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/30-recipients-and-attendees/get-from-message-read.yaml

    var msgFrom = Office.context.mailbox.item.from;

    console.log("Message received from: " + msgFrom.displayName + " (" + msgFrom.emailAddress + ")");

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'from: EmailAddressDetails;'
    return:
      type: <xref uid="outlook!Office.EmailAddressDetails:interface" />
- name: internetMessageId
  uid: outlook!Office.MessageRead#internetMessageId:member
  package: outlook!
  fullName: internetMessageId
  summary: >-
    Obtiene el identificador de mensaje de Internet de un mensaje de correo electrónico.


    **Importante**: en la carpeta **elementos enviados** , `internetMessageId` es posible que no esté disponible aún en los elementos enviados recientemente. En ese caso, considere la posibilidad de usar los [servicios web Exchange](https://docs.microsoft.com/office/dev/add-ins/outlook/web-services) para obtener esta [propiedad del servidor](https://docs.microsoft.com/exchange/client-developer/web-service-reference/internetmessageid)<!-- -->.
  remarks: >-
    **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`


    **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: mensaje leído


    #### <a name="examples"></a>Ejemplos


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-internet-message-id-read.yaml

    console.log(`Internet message ID: ${Office.context.mailbox.item.internetMessageId}`);

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'internetMessageId: string;'
    return:
      type: string
- name: itemClass
  uid: outlook!Office.MessageRead#itemClass:member
  package: outlook!
  fullName: itemClass
  summary: >-
    Obtiene la clase de elemento Servicios Web Exchange del elemento seleccionado.


    Puede crear clases de mensaje personalizadas que extienda una clase de mensaje predeterminada, por ejemplo, una clase de mensaje de cita personalizada. `IPM.Appointment.Contoso`<!-- -->.
  remarks: >-
    **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`


    **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: mensaje leído


    La propiedad `itemClass` especifica la clase de mensaje del elemento seleccionado. Las siguientes son las clases de mensaje predeterminadas para el elemento de mensaje o cita.


    <table> <tr> <th>Tipo</th> <th>Descripción</th> <th>Clase Item</th> </tr> <tr> <td>Elementos de cita</td> <td>Estos son los elementos de calendario de la clase de elemento IPM. Appointment o IPM. Appointment. repeticiones.</td> <td>IPM. Cita, IPM. Appointment. repeticiones</td> </tr> <tr> <td>Elementos de mensaje</td> <td>Entre estos se encuentran los correos electrónicos que tienen la clase de mensaje predeterminada IPM.Note y las convocatorias de reunión, respuestas y cancelaciones que usan IPM.Schedule.Meeting como clase de mensaje base.</td> <td>IPM. Nota: IPM. Program. Meeting. request, IPM. Program. Meeting. NEG, IPM. Program. Meeting. POS, IPM. Program. Meeting. carpa, IPM. Schedule. Meeting. Canceled</td> </tr> </table>


    #### <a name="examples"></a>Ejemplos


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-item-class-read.yaml

    console.log(`Item class: ${Office.context.mailbox.item.itemClass}`);

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'itemClass: string;'
    return:
      type: string
- name: itemId
  uid: outlook!Office.MessageRead#itemId:member
  package: outlook!
  fullName: itemId
  summary: >-
    Obtiene el [identificador de elemento de servicios web Exchange](https://docs.microsoft.com/exchange/client-developer/exchange-web-services/ews-identifiers-in-exchange) para el elemento actual.


    La propiedad `itemId` no está disponible en el modo redacción. Si se requiere un identificador de elemento, el método `saveAsync` puede usarse para guardar el elemento en el servidor, que devolverá el identificador de elemento en el parámetro `asyncResult.value` de la función de devolución de llamada.


    **Nota**: el identificador que devuelve la `itemId` propiedad es el mismo que el [identificador de elemento de servicios web Exchange](https://docs.microsoft.com/exchange/client-developer/exchange-web-services/ews-identifiers-in-exchange)<!-- -->. La propiedad `itemId` no es idéntica al identificador de entrada de Outlook ni al identificador que usa la API de REST de Outlook. Antes de realizar llamadas a la API de REST con este valor, se debe convertir mediante `Office.context.mailbox.convertToRestId`<!-- -->. Para obtener más información, vea [usar las API de REST de Outlook desde un complemento de Outlook](https://docs.microsoft.com/office/dev/add-ins/outlook/use-rest-api#get-the-item-id) .<!-- -->.
  remarks: >-
    **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`


    **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: mensaje leído


    #### <a name="examples"></a>Ejemplos


    ```javascript

    // The following code checks for the presence of an item

    // identifier. If the `itemId` property returns `null` or

    // `undefined`, it saves the item to the store and gets the

    // item identifier from the asynchronous result.

    // **Important**: `saveAsync` was introduced with requirement set 1.3

    // so you can't get the `itemId` in Compose mode in earlier sets.

    var itemId = Office.context.mailbox.item.itemId;

    if (itemId === null || itemId == undefined) {
        Office.context.mailbox.item.saveAsync(function(result) {
            itemId = result.value;
        });
    }

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'itemId: string;'
    return:
      type: string
- name: itemType
  uid: outlook!Office.MessageRead#itemType:member
  package: outlook!
  fullName: itemType
  summary: >-
    Obtiene el tipo de elemento que representa una instancia.


    La `itemType` propiedad devuelve uno de los `ItemType` valores de enumeración, lo que indica si la instancia del objeto Item es un mensaje o una cita.
  remarks: >-
    **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`


    **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: mensaje leído


    #### <a name="examples"></a>Ejemplos


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-item-type.yaml

    console.log(`Item type: ${Office.context.mailbox.item.itemType}`);

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'itemType: MailboxEnums.ItemType | string;'
    return:
      type: <xref uid="outlook!Office.MailboxEnums.ItemType:enum" /> | string
- name: location
  uid: outlook!Office.MessageRead#location:member
  package: outlook!
  fullName: location
  summary: >-
    Obtiene la ubicación de una convocatoria de reunión.


    La propiedad `location` devuelve una cadena que contiene la ubicación de la cita.
  remarks: >-
    **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`


    **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: mensaje leído


    #### <a name="examples"></a>Ejemplos


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-location-read.yaml

    console.log(`Appointment location: ${Office.context.mailbox.item.location}`);

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'location: string;'
    return:
      type: string
- name: normalizedSubject
  uid: outlook!Office.MessageRead#normalizedSubject:member
  package: outlook!
  fullName: normalizedSubject
  summary: >-
    Obtiene el asunto de un elemento, con todos los prefijos quitados (incluidos RE: y FWD:).


    La `normalizedSubject` propiedad obtiene el asunto del elemento, con todos los prefijos estándar (como re: y RV:) agregados por los programas de correo electrónico. Para obtener el asunto del elemento con los prefijos intactos, use la propiedad `subject`.
  remarks: >-
    **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`


    **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: mensaje leído


    #### <a name="examples"></a>Ejemplos


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-normalized-subject-read.yaml

    console.log(`Normalized subject: ${Office.context.mailbox.item.normalizedSubject}`);

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'normalizedSubject: string;'
    return:
      type: string
- name: notificationMessages
  uid: outlook!Office.MessageRead#notificationMessages:member
  package: outlook!
  fullName: notificationMessages
  summary: >-
    Obtiene los mensajes de notificación de un elemento.


    \[[Conjunto de API: buzón de correo 1,3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: "**<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`\n\n**<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: mensaje leído\n\n#### <a name=\"examples\"></a>Ejemplos\n\n```javascript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/35-notifications/add-getall-remove.yaml\nvar id = $(\"#notificationId\").val();\nvar details =\n  {\n    type: \"progressIndicator\",\n    message: \"Progress indicator with id = \" + id\n  };\nOffice.context.mailbox.item.notificationMessages.addAsync(id, details, handleResult);\n```\n```javascript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/35-notifications/add-getall-remove.yaml\nvar id = $(\"#notificationId\").val();\nvar details =\n  {\n    type: \"informationalMessage\",\n    message: \"Non-persistent informational notification message with id = \" + id,\n    icon: \"icon1\",\n    persistent: false\n  };\nOffice.context.mailbox.item.notificationMessages.addAsync(id, details, handleResult);\n```\n```javascript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/35-notifications/add-getall-remove.yaml\nvar id = $(\"#notificationId\").val();\nvar details =\n  {\n    type: \"informationalMessage\",\n    message: \"Persistent informational notification message with id = \" + id,\n    icon: \"icon1\",\n    persistent: true\n  };\nOffice.context.mailbox.item.notificationMessages.addAsync(id, details, handleResult);\n```\n```javascript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/35-notifications/add-getall-remove.yaml\nOffice.context.mailbox.item.notificationMessages.getAllAsync(handleResult);          \n```\n```javascript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/35-notifications/add-getall-remove.yaml\nvar id = $(\"#notificationId\").val();\nOffice.context.mailbox.item.notificationMessages.replaceAsync(\n  id,\n  {\n    type: \"informationalMessage\",\n    message: \"Notification message with id = \" + id + \" has been replaced with an informational message.\",\n    icon: \"icon2\",\n    persistent: false\n  },\n  handleResult);\n```\n```javascript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/35-notifications/add-getall-remove.yaml\nvar id = $(\"#notificationId\").val();\nOffice.context.mailbox.item.notificationMessages.removeAsync(id, handleResult);\n```"
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'notificationMessages: NotificationMessages;'
    return:
      type: <xref uid="outlook!Office.NotificationMessages:interface" />
- name: recurrence
  uid: outlook!Office.MessageRead#recurrence:member
  package: outlook!
  fullName: recurrence
  summary: >-
    Obtiene el patrón de periodicidad de una cita. Obtiene el patrón de periodicidad de una convocatoria de reunión. Modos de lectura y redacción para elementos de cita. Modo de lectura para los elementos de convocatoria de reunión.


    La `recurrence` propiedad devuelve un `Recurrence` objeto para citas periódicas o convocatorias de reunión si un elemento es una serie o una instancia de una serie. `null` se devuelve para citas únicas y convocatorias de reunión de citas únicas. `undefined` se devuelve para los mensajes que no son convocatorias de reunión.


    **Nota**: las convocatorias de reunión tienen un valor itemClass de `IPM.Schedule.Meeting.Request`<!-- -->.


    **Nota**: Si el `recurrence` objeto es null, indica que el objeto es una cita única o una convocatoria de reunión de una sola cita y no forma parte de una serie.


    \[[Conjunto de API: buzón de correo 1,7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`


    **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: mensaje leído


    #### <a name="examples"></a>Ejemplos


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/50-recurrence/get-recurrence-read.yaml

    var recurrence = Office.context.mailbox.item.recurrence;


    if (recurrence === undefined) {
      console.log("This item is a message but not a meeting request.");
    } else if (recurrence === null) {
      console.log("This is a single appointment.");
    } else {
      console.log(JSON.stringify(recurrence));
    }

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'recurrence: Recurrence;'
    return:
      type: <xref uid="outlook!Office.Recurrence:interface" />
- name: sender
  uid: outlook!Office.MessageRead#sender:member
  package: outlook!
  fullName: sender
  summary: >-
    Obtiene la dirección de correo electrónico del remitente de un mensaje de correo electrónico.


    Las propiedades `from` y `sender` representan a la misma persona, a menos que un delegado envíe el mensaje. En ese caso, la `from` propiedad representa al usuario que delega, y la `sender` propiedad representa el delegado.


    **Nota**: la `recipientType` propiedad del `EmailAddressDetails` objeto de la `sender` propiedad está sin definir.
  remarks: >-
    **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`


    **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: mensaje leído


    #### <a name="examples"></a>Ejemplos


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/30-recipients-and-attendees/get-sender-message-read.yaml

    var msgSender = Office.context.mailbox.item.sender;

    console.log("Sender: " + msgSender.displayName + " (" + msgSender.emailAddress + ")");

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'sender: EmailAddressDetails;'
    return:
      type: <xref uid="outlook!Office.EmailAddressDetails:interface" />
- name: seriesId
  uid: outlook!Office.MessageRead#seriesId:member
  package: outlook!
  fullName: seriesId
  summary: >-
    Obtiene el identificador de la serie a la que pertenece una instancia.


    En los clientes de Outlook en la web y de escritorio, el `seriesId` devuelve el identificador de los servicios web Exchange (EWS) del elemento primario (serie) al que pertenece este elemento. Sin embargo, en iOS y Android, el `seriesId` devuelve el identificador de REST del elemento primario.


    **Nota**: el identificador que devuelve la `seriesId` propiedad es el mismo que el identificador de elemento de servicios web Exchange. La `seriesId` propiedad no es idéntica a los identificadores de Outlook usados por la API de REST de Outlook. Antes de realizar llamadas a la API de REST con este valor, se debe convertir mediante `Office.context.mailbox.convertToRestId`<!-- -->. Para obtener más información, vea [usar las API de REST de Outlook desde un complemento de Outlook](https://docs.microsoft.com/office/dev/add-ins/outlook/use-rest-api) .<!-- -->.


    La `seriesId` propiedad devuelve los `null` elementos que no tienen elementos primarios, como citas únicas, elementos de serie o convocatorias de reunión, y devuelven los `undefined` elementos que no son convocatorias de reunión.


    \[[Conjunto de API: buzón de correo 1,7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`


    **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: mensaje leído


    #### <a name="examples"></a>Ejemplos


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/50-recurrence/get-series-id.yaml

    var seriesId = Office.context.mailbox.item.seriesId;


    if (seriesId === undefined) {
      console.log("This is a message that's not a meeting request.");
    } else if (seriesId === null) {
      console.log("This is a single appointment, a parent series, or a meeting request for a series or single meeting.");
    } else {
      console.log("This is an instance belonging to series with ID " + seriesId);
    }

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'seriesId: string;'
    return:
      type: string
- name: start
  uid: outlook!Office.MessageRead#start:member
  package: outlook!
  fullName: start
  summary: >-
    Obtiene la fecha y hora de inicio de la cita.


    La `start` propiedad es un `Date` objeto expresado como un valor de fecha y hora de la hora universal coordinada (UTC). Puede usar el `convertToLocalClientTime` método para convertir el valor a la fecha y hora local del cliente.
  remarks: >-
    **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`


    **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: mensaje leído


    #### <a name="examples"></a>Ejemplos


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-start-read.yaml

    console.log(`Appointment starts: ${Office.context.mailbox.item.start}`);

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'start: Date;'
    return:
      type: Date
- name: subject
  uid: outlook!Office.MessageRead#subject:member
  package: outlook!
  fullName: subject
  summary: >-
    Obtiene la descripción que aparece en el campo de asunto de un elemento.


    La propiedad `subject` obtiene o establece el asunto completo del elemento, como lo ha enviado el servidor de correo electrónico.


    La propiedad `subject` devuelve una cadena. Use la `normalizedSubject` propiedad para obtener el asunto menos los prefijos iniciales como re: y RV:.
  remarks: >-
    **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`


    **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: mensaje leído


    #### <a name="examples"></a>Ejemplos


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-subject-read.yaml

    console.log(`Subject: ${Office.context.mailbox.item.subject}`);

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'subject: string;'
    return:
      type: string
- name: to
  uid: outlook!Office.MessageRead#to:member
  package: outlook!
  fullName: to
  summary: >-
    Proporciona acceso a los destinatarios en la línea **Para** de un mensaje. El tipo de objeto y el nivel de acceso dependen del modo del elemento actual.


    La `to` propiedad devuelve una matriz que contiene un objeto [EmailAddressDetails](xref:outlook!Office.EmailAddressDetails:interface) para cada uno de los destinatarios que aparecen en la línea **para** del mensaje. Límites de tamaño de recopilación:


    - Windows: 500 miembros


    - Mac: 100 miembros


    - Explorador Web: 20 miembros


    - Other: sin límite
  remarks: >-
    **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`


    **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: mensaje leído


    #### <a name="examples"></a>Ejemplos


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/30-recipients-and-attendees/get-to-message-read.yaml

    var msgTo = Office.context.mailbox.item.to;

    console.log("Message sent to:");

    for (var i = 0; i < msgTo.length; i++) {
      console.log(msgTo[i].displayName + " (" + msgTo[i].emailAddress + ")");
    }

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'to: EmailAddressDetails[];'
    return:
      type: <xref uid="outlook!Office.EmailAddressDetails:interface" />[]
methods:
- name: addHandlerAsync(eventType, handler, options, callback)
  uid: outlook!Office.MessageRead#addHandlerAsync:member(1)
  package: outlook!
  fullName: addHandlerAsync(eventType, handler, options, callback)
  summary: >-
    Agrega un controlador de eventos para un evento admitido. **Nota**: los eventos solo están disponibles con el panel de tareas.


    Consulte la [sección eventos](https://docs.microsoft.com/office/dev/add-ins/reference/objectmodel/requirement-set-1.8/office.context.mailbox.item#events) del modelo de objetos de elementos para ver los eventos admitidos.


    \[[Conjunto de API: buzón de correo 1,7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`


    **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: mensaje leído


    #### <a name="examples"></a>Ejemplos


    ```javascript

    function myHandlerFunction(eventarg) {
        if (eventarg.attachmentStatus === Office.MailboxEnums.AttachmentStatus.Added) {
            var attachment = eventarg.attachmentDetails;
            console.log("Event Fired and Attachment Added!");
            getAttachmentContentAsync(attachment.id, options, callback);
        }
    }


    Office.context.mailbox.item.addHandlerAsync(Office.EventType.AttachmentsChanged, myHandlerFunction, myCallback);

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addHandlerAsync(eventType: Office.EventType | string, handler: any, options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
    parameters:
    - id: eventType
      description: El evento que debe invocar el controlador.
      type: <xref uid="office!Office.EventType:enum" /> | string
    - id: handler
      description: La función que va a controlar el evento. La función debe aceptar un único parámetro, que es un literal de objeto. La propiedad Type del parámetro coincidirá con el eventType `parameter` que se pasó a `addHandlerAsync`<!-- -->.
      type: any
    - id: options
      description: 'Opcional. Un objeto literal que contiene una o más de las siguientes propiedades. `asyncContext`<!-- -->: Los desarrolladores pueden proporcionar cualquier objeto al que quieran tener acceso en el método de devolución de llamada.'
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Opcional. Cuando el método finaliza, la función que se pasa en el `callback` parámetro se llama con un único parámetro, `asyncResult`<!-- -->, que es un `Office.AsyncResult` objeto.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: displayReplyAllForm(formData)
  uid: outlook!Office.MessageRead#displayReplyAllForm:member(1)
  package: outlook!
  fullName: displayReplyAllForm(formData)
  summary: >-
    Muestra un formulario de respuesta que incluye al remitente y a todos los destinatarios del mensaje seleccionado, o el organizador y todos los asistentes de la cita seleccionada.


    En Outlook en la web, el formulario de respuesta se muestra como formulario emergente en la vista de tres columnas y como formulario emergente en la vista de 2 columnas o de 1 columna.


    Si cualquiera de los parámetros de cadena supera sus límites, `displayReplyAllForm` produce una excepción.


    Cuando se especifican datos adjuntos en el `formData.attachments` parámetro, Outlook intenta descargar todos los datos adjuntos y adjuntarlos al formulario de respuesta. Si se produce un error al agregar los datos adjuntos, se muestra un error en la interfaz de usuario del formulario. Si esto no es posible, no se produce ningún mensaje de error.


    **Nota**: este método no es compatible con Outlook en iOS o Android.
  remarks: >-
    **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`


    **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: mensaje leído


    #### <a name="examples"></a>Ejemplos


    ```javascript

    // The following code passes a string to the `displayReplyAllForm` function.

    Office.context.mailbox.item.displayReplyAllForm('hello there');

    Office.context.mailbox.item.displayReplyAllForm('<b>hello there</b>');


    // Reply with an empty body.

    Office.context.mailbox.item.displayReplyAllForm({});


    // Reply with just a body.

    Office.context.mailbox.item.displayReplyAllForm(

    {

    'htmlBody' : 'hi'

    });


    // Reply with a body and a file attachment.

    Office.context.mailbox.item.displayReplyAllForm(

    {
        'htmlBody' : 'hi',
        'attachments' :
        [
            {
            'type' : Office.MailboxEnums.AttachmentType.File,
            'name' : 'squirrel.png',
            'url' : 'http://i.imgur.com/sRgTlGR.jpg'
            }
        ]
    });


    // Reply with a body and an item attachment.

    Office.context.mailbox.item.displayReplyAllForm(

    {
        'htmlBody' : 'hi',
        'attachments' :
        [
            {
            'type' : 'item',
            'name' : 'rand',
            'itemId' : Office.context.mailbox.item.itemId
            }
        ]
    });


    // Reply with a body, file attachment, item attachment, and a callback.

    Office.context.mailbox.item.displayReplyAllForm(

    {
        'htmlBody' : 'hi',
        'attachments' :
        [
            {
                'type' : Office.MailboxEnums.AttachmentType.File,
                'name' : 'squirrel.png',
                'url' : 'http://i.imgur.com/sRgTlGR.jpg'
            },
            {
                'type' : 'item',
                'name' : 'rand',
                'itemId' : Office.context.mailbox.item.itemId
            }
        ],
        'callback' : function(asyncResult)
        {
            console.log(asyncResult.value);
        }
    });

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/55-display-items/display-reply-forms.yaml

    Office.context.mailbox.item.displayReplyAllForm("This is a reply ALL with <b>some bold text</b>.");

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'displayReplyAllForm(formData: string | ReplyFormData): void;'
    parameters:
    - id: formData
      description: Una cadena que contiene texto y HTML y que representa el cuerpo del formulario de respuestas. La cadena está limitada a 32 KB o un objeto [ReplyFormData](xref:outlook!Office.ReplyFormData:interface) que contiene datos de cuerpo o datos adjuntos y una función de devolución de llamada.
      type: string | <xref uid="outlook!Office.ReplyFormData:interface" />
    return:
      type: void
      description: ''
- name: displayReplyAllFormAsync(formData, options, callback)
  uid: outlook!Office.MessageRead#displayReplyAllFormAsync:member(1)
  package: outlook!
  fullName: displayReplyAllFormAsync(formData, options, callback)
  summary: >-
    Muestra un formulario de respuesta que incluye al remitente y a todos los destinatarios del mensaje seleccionado, o el organizador y todos los asistentes de la cita seleccionada.


    En Outlook en la web, el formulario de respuesta se muestra como formulario emergente en la vista de tres columnas y como formulario emergente en la vista de 2 columnas o de 1 columna.


    Si cualquiera de los parámetros de cadena supera sus límites, `displayReplyAllFormAsync` produce una excepción.


    Cuando se especifican datos adjuntos en el `formData.attachments` parámetro, Outlook intenta descargar todos los datos adjuntos y adjuntarlos al formulario de respuesta. Si se produce un error al agregar los datos adjuntos, se muestra un error en la interfaz de usuario del formulario. Si esto no es posible, no se produce ningún mensaje de error.


    **Nota**: este método no es compatible con Outlook en iOS o Android.


    \[[Conjunto de API: buzón de correo 1,9](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`


    **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: mensaje leído


    #### <a name="examples"></a>Ejemplos


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/55-display-items/display-reply-forms.yaml

    Office.context.mailbox.item.displayReplyAllFormAsync("This is a reply ALL with <b>some bold text</b>.", function(
      asyncResult
    ) {
      console.log(JSON.stringify(asyncResult));
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'displayReplyAllFormAsync(formData: string | ReplyFormData, options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
    parameters:
    - id: formData
      description: Una cadena que contiene texto y HTML y que representa el cuerpo del formulario de respuestas. La cadena está limitada a 32 KB o un objeto [ReplyFormData](xref:outlook!Office.ReplyFormData:interface) que contiene datos de cuerpo o datos adjuntos y una función de devolución de llamada.
      type: string | <xref uid="outlook!Office.ReplyFormData:interface" />
    - id: options
      description: 'Opcional. Un objeto literal que contiene una o más de las siguientes propiedades. `asyncContext`<!-- -->: Los desarrolladores pueden proporcionar cualquier objeto al que quieran tener acceso en el método de devolución de llamada.'
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Opcional. Cuando el método finaliza, la función que se pasa en el `callback` parámetro se llama con un único parámetro, `asyncResult`<!-- -->, que es un `Office.AsyncResult` objeto.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: displayReplyForm(formData)
  uid: outlook!Office.MessageRead#displayReplyForm:member(1)
  package: outlook!
  fullName: displayReplyForm(formData)
  summary: >-
    Muestra un formulario de respuesta que incluye solo el remitente del mensaje seleccionado o el organizador de la cita seleccionada.


    En Outlook en la web, el formulario de respuesta se muestra como formulario emergente en la vista de tres columnas y como formulario emergente en la vista de 2 columnas o de 1 columna.


    Si cualquiera de los parámetros de cadena supera sus límites, `displayReplyForm` produce una excepción.


    Cuando se especifican datos adjuntos en el `formData.attachments` parámetro, Outlook intenta descargar todos los datos adjuntos y adjuntarlos al formulario de respuesta. Si se produce un error al agregar los datos adjuntos, se muestra un error en la interfaz de usuario del formulario. Si esto no es posible, no se produce ningún mensaje de error.


    **Nota**: este método no es compatible con Outlook en iOS o Android.
  remarks: >-
    **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`


    **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: mensaje leído


    #### <a name="examples"></a>Ejemplos


    ```javascript

    // The following code passes a string to the `displayReplyForm` function.

    Office.context.mailbox.item.displayReplyForm('hello there');

    Office.context.mailbox.item.displayReplyForm('<b>hello there</b>');


    // Reply with an empty body.

    Office.context.mailbox.item.displayReplyForm({});


    // Reply with just a body.

    Office.context.mailbox.item.displayReplyForm(

    {
        'htmlBody' : 'hi'
    });


    // Reply with a body and a file attachment.

    Office.context.mailbox.item.displayReplyForm(

    {
        'htmlBody' : 'hi',
        'attachments' :
        [
            {
                'type' : Office.MailboxEnums.AttachmentType.File,
                'name' : 'squirrel.png',
                'url' : 'http://i.imgur.com/sRgTlGR.jpg'
            }
        ]
    });


    // Reply with a body and an item attachment.

    Office.context.mailbox.item.displayReplyForm(

    {
        'htmlBody' : 'hi',
        'attachments' :
        [
            {
                'type' : 'item',
                'name' : 'rand',
                'itemId' : Office.context.mailbox.item.itemId
            }
        ]
    });


    // Reply with a body, file attachment, item attachment, and a callback.

    Office.context.mailbox.item.displayReplyForm(

    {
        'htmlBody' : 'hi',
        'attachments' :
        [
            {
                'type' : Office.MailboxEnums.AttachmentType.File,
                'name' : 'squirrel.png',
                'url' : 'http://i.imgur.com/sRgTlGR.jpg'
            },
            {
                'type' : 'item',
                'name' : 'rand',
                'itemId' : Office.context.mailbox.item.itemId
            }
        ],
        'callback' : function(asyncResult)
        {
            console.log(asyncResult.value);
        }
    });

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/55-display-items/display-reply-forms.yaml

    Office.context.mailbox.item.displayReplyForm("This is a reply with <i>some text in italics</i>.");

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/55-display-items/display-reply-with-attachments.yaml

    Office.context.mailbox.item.displayReplyForm({
      htmlBody: "This is a reply with a couple of attachments - an inline image and an item<br><img src='cid:dog.jpg'>",
      attachments: [
        { type: "file", url: "http://i.imgur.com/9S36xvA.jpg", name: "dog.jpg", isInline: true },
        { type: "item", itemId: Office.context.mailbox.item.itemId, name: "test_email.msg" }
      ],
      options: { asyncContext: null },
      callback: function(result) {
        if (result.status !== Office.AsyncResultStatus.Succeeded) {
          console.error(`Action failed with message ${result.error.message}`);
        }
      }
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'displayReplyForm(formData: string | ReplyFormData): void;'
    parameters:
    - id: formData
      description: Una cadena que contiene texto y HTML y que representa el cuerpo del formulario de respuestas. La cadena está limitada a 32 KB o un objeto [ReplyFormData](xref:outlook!Office.ReplyFormData:interface) que contiene datos de cuerpo o datos adjuntos y una función de devolución de llamada.
      type: string | <xref uid="outlook!Office.ReplyFormData:interface" />
    return:
      type: void
      description: ''
- name: displayReplyFormAsync(formData, options, callback)
  uid: outlook!Office.MessageRead#displayReplyFormAsync:member(1)
  package: outlook!
  fullName: displayReplyFormAsync(formData, options, callback)
  summary: >-
    Muestra un formulario de respuesta que incluye solo el remitente del mensaje seleccionado o el organizador de la cita seleccionada.


    En Outlook en la web, el formulario de respuesta se muestra como formulario emergente en la vista de tres columnas y como formulario emergente en la vista de 2 columnas o de 1 columna.


    Si cualquiera de los parámetros de cadena supera sus límites, `displayReplyFormAsync` produce una excepción.


    Cuando se especifican datos adjuntos en el `formData.attachments` parámetro, Outlook intenta descargar todos los datos adjuntos y adjuntarlos al formulario de respuesta. Si se produce un error al agregar los datos adjuntos, se muestra un error en la interfaz de usuario del formulario. Si esto no es posible, no se produce ningún mensaje de error.


    **Nota**: este método no es compatible con Outlook en iOS o Android.


    \[[Conjunto de API: buzón de correo 1,9](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`


    **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: mensaje leído


    #### <a name="examples"></a>Ejemplos


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/55-display-items/display-reply-forms.yaml

    Office.context.mailbox.item.displayReplyFormAsync("This is a reply with <i>some text in italics</i>.", function(
      asyncResult
    ) {
      console.log(JSON.stringify(asyncResult));
    });

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/55-display-items/display-reply-with-attachments.yaml

    // The async version is only available starting with requirement set 1.9,

    // and provides a callback when the new appointment form has been created.

    Office.context.mailbox.item.displayReplyFormAsync(
      {
        htmlBody: "This is a reply with a couple of attachments - an inline image and an item<br><img src='cid:dog.jpg'>",
        attachments: [
          { type: "file", url: "http://i.imgur.com/9S36xvA.jpg", name: "dog.jpg", isInline: true },
          { type: "item", itemId: Office.context.mailbox.item.itemId, name: "test_email.msg" }
        ]
      },
      function(asyncResult) {
        console.log(JSON.stringify(asyncResult));
      }
    );

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'displayReplyFormAsync(formData: string | ReplyFormData, options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
    parameters:
    - id: formData
      description: Una cadena que contiene texto y HTML y que representa el cuerpo del formulario de respuestas. La cadena está limitada a 32 KB o un objeto [ReplyFormData](xref:outlook!Office.ReplyFormData:interface) que contiene datos de cuerpo o datos adjuntos y una función de devolución de llamada.
      type: string | <xref uid="outlook!Office.ReplyFormData:interface" />
    - id: options
      description: 'Opcional. Un objeto literal que contiene una o más de las siguientes propiedades. `asyncContext`<!-- -->: Los desarrolladores pueden proporcionar cualquier objeto al que quieran tener acceso en el método de devolución de llamada.'
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Opcional. Cuando el método finaliza, la función que se pasa en el `callback` parámetro se llama con un único parámetro, `asyncResult`<!-- -->, que es un `Office.AsyncResult` objeto.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getAllInternetHeadersAsync(options, callback)
  uid: outlook!Office.MessageRead#getAllInternetHeadersAsync:member(1)
  package: outlook!
  fullName: getAllInternetHeadersAsync(options, callback)
  summary: >-
    Obtiene todos los encabezados de Internet del mensaje en forma de cadena.


    \[[Conjunto de API: buzón de correo 1,8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`


    **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: mensaje leído


    #### <a name="examples"></a>Ejemplos


    ```javascript

    // Get the internet headers related to the mail.

    Office.context.mailbox.item.getAllInternetHeadersAsync(
        function(asyncResult) {
            if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
                console.log(asyncResult.value);
            } else {
                if (asyncResult.error.code == 9020) {
                    // GenericResponseError returned when there is no context.
                    // Treat as no context.
                } else {
                    // Handle the error.
                }
            }
        }
    );

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getAllInternetHeadersAsync(options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<string>) => void): void;'
    parameters:
    - id: options
      description: 'Opcional. Un objeto literal que contiene una o más de las siguientes propiedades. `asyncContext`<!-- -->: Los desarrolladores pueden proporcionar cualquier objeto al que quieran tener acceso en el método de devolución de llamada.'
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Opcional. Cuando el método finaliza, la función que se pasa en el `callback` parámetro se llama con un único parámetro, `asyncResult`<!-- -->, que es un `Office.AsyncResult` objeto. Si se realiza correctamente, los datos de los encabezados de Internet se proporcionan en la `asyncResult.value` propiedad como una cadena. Consulte [RFC 2183](https://tools.ietf.org/html/rfc2183) para obtener información sobre el formato del valor de cadena devuelto. Si se produce un error en la llamada, la propiedad contendrá `asyncResult.error` un código de error con el motivo del error.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getAttachmentContentAsync(attachmentId, options, callback)
  uid: outlook!Office.MessageRead#getAttachmentContentAsync:member(1)
  package: outlook!
  fullName: getAttachmentContentAsync(attachmentId, options, callback)
  summary: >-
    Obtiene datos adjuntos de un mensaje o cita y los devuelve como un `AttachmentContent` objeto.


    El `getAttachmentContentAsync` método obtiene los datos adjuntos con el identificador especificado del elemento. Como práctica recomendada, debe usar el identificador para recuperar datos adjuntos en la misma sesión que identificadores se recuperaron con la `getAttachmentsAsync` llamada o `item.attachments` . En Outlook en la Web y dispositivos móviles, el identificador de datos adjuntos solo es válido en la misma sesión. Una sesión es superior a cuando el usuario cierra la aplicación o si el usuario comienza a redactar un formulario en línea y, a continuación, el formulario continúa en una ventana independiente.


    \[[Conjunto de API: buzón de correo 1,8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`


    **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: mensaje leído


    **Errores**:


    - `AttachmentTypeNotSupported`<!-- -->: No se admite el tipo de datos adjuntos. Los tipos no admitidos incluyen imágenes insertadas en formato de texto enriquecido o tipos de datos adjuntos que no sean de correo electrónico o de calendario (como un elemento de contacto o tarea).


    - `InvalidAttachmentId`<!-- -->: El identificador de los datos adjuntos no existe.


    #### <a name="examples"></a>Ejemplos


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/40-attachments/get-attachment-content.yaml

    var item = Office.context.mailbox.item;

    var options = {asyncContext: {currentItem: item}};

    item.getAttachmentsAsync(options, callback);


    function callback(result) {
        if (result.value.length > 0) {
            for (i = 0 ; i < result.value.length ; i++) {
                result.asyncContext.currentItem.getAttachmentContentAsync(result.value[i].id, handleAttachmentsCallback);
            }
        }
    }


    function handleAttachmentsCallback(result) {
        // Parse string to be a url, an .eml file, a base64-encoded string, or an .icalendar file.
        switch (result.value.format) {
            case Office.MailboxEnums.AttachmentContentFormat.Base64:
                // Handle file attachment.
                console.log(result.value.content);
                break;
            case Office.MailboxEnums.AttachmentContentFormat.Eml:
                // Handle email item attachment.
                console.log("Attachment is a message.");
                break;
            case Office.MailboxEnums.AttachmentContentFormat.ICalendar:
                // Handle .icalender attachment.
                console.log("Attachment is a calendar item.");
                break;
            case Office.MailboxEnums.AttachmentContentFormat.Url:
                // Handle cloud attachment.
                console.log("Attachment is a cloud attachment.");
                break;
            default:
                // Handle attachment formats that are not supported.
        }
    }

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getAttachmentContentAsync(attachmentId: string, options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<AttachmentContent>) => void): void;'
    parameters:
    - id: attachmentId
      description: El identificador de los datos adjuntos que desea obtener.
      type: string
    - id: options
      description: 'Opcional. Un objeto literal que contiene una o más de las siguientes propiedades. `asyncContext`<!-- -->: Los desarrolladores pueden proporcionar cualquier objeto al que quieran tener acceso en el método de devolución de llamada.'
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Opcional. Cuando el método finaliza, la función que se pasa en el `callback` parámetro se llama con un único parámetro, `asyncResult`<!-- -->, que es un `Office.AsyncResult` objeto. Si se produce un error en la llamada, la propiedad contendrá `asyncResult.error` un código de error con el motivo del error.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;<xref uid="outlook!Office.AttachmentContent:interface" />&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getEntities()
  uid: outlook!Office.MessageRead#getEntities:member(1)
  package: outlook!
  fullName: getEntities()
  summary: >-
    Obtiene las entidades que obtenidas en el cuerpo del elemento seleccionado.


    **Nota**: este método no es compatible con Outlook en iOS o Android.
  remarks: >-
    **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`


    **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: mensaje leído


    #### <a name="examples"></a>Ejemplos


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/75-entities-and-regex-matches/basic-entities.yaml

    var entities = Office.context.mailbox.item.getEntities();

    var entityTypesFound = 0;

    if (entities.addresses.length > 0) {
        console.warn("physical addresses: ");
        console.log(entities.addresses);
        entityTypesFound++;
    }

    if (entities.contacts.length > 0) {
        console.warn("contacts: ");
        entities.contacts.forEach(function (contact) { console.log(contact.personName); })
        entityTypesFound++;
    }

    if (entities.emailAddresses.length > 0) {
        console.warn("email addresses: ");
        console.log(entities.emailAddresses);
        entityTypesFound++;
    }

    if (entities.meetingSuggestions.length > 0) {
        console.warn("meetings suggestions: ");
        entities.meetingSuggestions.forEach(function (meetingSuggestion) { console.log(meetingSuggestion.meetingString); })
        entityTypesFound++;
    }

    if (entities.phoneNumbers.length > 0) {
        console.warn("phone numbers: ");
        entities.phoneNumbers.forEach(function (phoneNumber) { console.log(phoneNumber.originalPhoneString); })
        entityTypesFound++;
    }

    if (entities.taskSuggestions.length > 0) {
        console.warn("task suggestions: ");
        entities.taskSuggestions.forEach(function (taskSuggestion) { console.log(taskSuggestion.taskString); })
        entityTypesFound++;
    }

    if (entities.urls.length > 0) {
        console.warn("URLs: ");
        console.log(entities.urls);
        entityTypesFound++;
    }

    if (entityTypesFound == 0)

    {
        console.log("No entities found on this item.");
    }

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getEntities(): Entities;'
    return:
      type: <xref uid="outlook!Office.Entities:interface" />
      description: ''
- name: getEntitiesByType(entityType)
  uid: outlook!Office.MessageRead#getEntitiesByType:member(1)
  package: outlook!
  fullName: getEntitiesByType(entityType)
  summary: >-
    Obtiene una matriz de todas las entidades del tipo de entidad especificado encontrado en el cuerpo del elemento seleccionado.


    **Nota**: este método no es compatible con Outlook en iOS o Android.
  remarks: >-
    **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`Restricted`


    **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: mensaje leído


    #### <a name="examples"></a>Ejemplos


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/75-entities-and-regex-matches/basic-entities.yaml

    console.log(Office.context.mailbox.item.getEntitiesByType(Office.MailboxEnums.EntityType.Address));

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getEntitiesByType(entityType: MailboxEnums.EntityType | string): (string | Contact | MeetingSuggestion | PhoneNumber | TaskSuggestion)[];'
    parameters:
    - id: entityType
      description: >-
        Uno de los `EntityType` valores de enumeración.


        Aunque el nivel de permiso mínimo para usar este método es `Restricted`<!-- -->, algunos tipos de entidad necesitan `ReadItem` tener acceso, como se especifica en la siguiente tabla.


        <table> <tr> <th>Valor de entityType</th> <th>Tipo de objetos de la matriz devuelta</th> <th>Nivel de permiso requerido</th> </tr> <tr> <td>Address</td> <td>String</td> <td>Restricted</td> </tr> <tr> <td>Contacto</td> <td>Contacto</td> <td>ReadItem</td> </tr> <tr> <td>EmailAddress</td> <td>String</td> <td>ReadItem</td> </tr> <tr> <td>MeetingSuggestion</td> <td>MeetingSuggestion</td> <td>ReadItem</td> </tr> <tr> <td>PhoneNumber</td> <td>PhoneNumber</td> <td>Restricted</td> </tr> <tr> <td>TaskSuggestion</td> <td>TaskSuggestion</td> <td>ReadItem</td> </tr> <tr> <td>URL</td> <td>String</td> <td>Restricted</td> </tr> </table>
      type: <xref uid="outlook!Office.MailboxEnums.EntityType:enum" /> | string
    return:
      type: (string | <xref uid="outlook!Office.Contact:interface" /> | <xref uid="outlook!Office.MeetingSuggestion:interface" /> | <xref uid="outlook!Office.PhoneNumber:interface" /> | <xref uid="outlook!Office.TaskSuggestion:interface" />)[]
      description: Si el valor pasado `entityType` no es un miembro válido de la `EntityType` enumeración, el método devuelve `null`<!-- -->. Si no hay presente ninguna entidad del tipo especificado en el cuerpo del elemento, el método devuelve una matriz vacía. De lo contrario, el tipo de los objetos en la matriz devuelta depende del tipo de entidad solicitada en el parámetro `entityType`.
- name: getFilteredEntitiesByName(name)
  uid: outlook!Office.MessageRead#getFilteredEntitiesByName:member(1)
  package: outlook!
  fullName: getFilteredEntitiesByName(name)
  summary: >-
    Devuelve entidades conocidas en el elemento seleccionado que pasan el filtro con nombre definido en el archivo XML de manifiesto.


    El `getFilteredEntitiesByName` método devuelve las entidades que coinciden con la expresión regular definida en el `ItemHasKnownEntity` elemento rule del archivo XML de manifiesto con el `FilterName` valor de elemento especificado.


    **Nota**: este método no es compatible con Outlook en iOS o Android.
  remarks: >-
    **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`


    **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: mensaje leído


    #### <a name="examples"></a>Ejemplos


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/75-entities-and-regex-matches/contextual.yaml

    // This API would only work when you click on highlighted physical address that has the word "Way" in it.

    console.log(Office.context.mailbox.item.getFilteredEntitiesByName("sampleFilterName"));

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getFilteredEntitiesByName(name: string): (string | Contact | MeetingSuggestion | PhoneNumber | TaskSuggestion)[];'
    parameters:
    - id: name
      description: El nombre del elemento de regla `ItemHasKnownEntity` que define el filtro para que coincidan.
      type: string
    return:
      type: (string | <xref uid="outlook!Office.Contact:interface" /> | <xref uid="outlook!Office.MeetingSuggestion:interface" /> | <xref uid="outlook!Office.PhoneNumber:interface" /> | <xref uid="outlook!Office.TaskSuggestion:interface" />)[]
      description: Si no hay ningún `ItemHasKnownEntity` elemento en el manifiesto con un `FilterName` valor de elemento que coincida con el `name` parámetro, el método devuelve `null`<!-- -->. Si el parámetro `name` no coincide con un elemento `ItemHasKnownEntity` del manifiesto, pero no existen entidades en el elemento actual que coincidan, el método devuelve una matriz vacía.
- name: getRegExMatches()
  uid: outlook!Office.MessageRead#getRegExMatches:member(1)
  package: outlook!
  fullName: getRegExMatches()
  summary: >-
    Devuelve valores de cadena en el elemento seleccionado que coinciden con las expresiones regulares definidas en el archivo XML de manifiesto.


    El método `getRegExMatches` devuelve las cadenas que coinciden con la expresión regular definida en cada elemento de regla `ItemHasRegularExpressionMatch` o `ItemHasKnownEntity` del archivo XML de manifiesto. Para una regla `ItemHasRegularExpressionMatch`, tiene que darse una cadena coincidente en la propiedad del elemento especificado por la regla. El tipo simple `PropertyName` define las propiedades admitidas.


    Si especifica una regla `ItemHasRegularExpressionMatch` en la propiedad body de un elemento, la expresión regular debe filtrar aún más el cuerpo y no debe intentar devolver todo el cuerpo del elemento. El uso de una expresión regular como .* para obtener todo el cuerpo de un elemento no siempre devuelve los resultados esperados. En su lugar, use el método `Body.getAsync` para recuperar todo el cuerpo.


    **Nota**: este método no es compatible con Outlook en iOS o Android.
  remarks: >-
    **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`


    **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: mensaje leído


    #### <a name="examples"></a>Ejemplos


    ```javascript

    // Consider an add-in manifest has the following `Rule` element:

    //<Rule xsi:type="RuleCollection" Mode="And">

    //  <Rule xsi:type="ItemIs" FormType="Read" ItemType="Message" />

    //  <Rule xsi:type="RuleCollection" Mode="Or">

    //    <Rule xsi:type="ItemHasRegularExpressionMatch" RegExName="fruits" RegExValue="apple|banana|coconut" PropertyName="BodyAsPlaintext" IgnoreCase="true" />

    //    <Rule xsi:type="ItemHasRegularExpressionMatch" RegExName="veggies" RegExValue="tomato|onion|spinach|broccoli" PropertyName="BodyAsPlaintext" IgnoreCase="true" />

    //  </Rule>

    //</Rule>


    // The object returned from `getRegExMatches` would have two properties: `fruits` and `veggies`.

    //{

    //'fruits': ['apple','banana','Banana','coconut'],

    //'veggies': ['tomato','onion','spinach','broccoli']

    //}


    // The following example shows how to access the array of

    // matches for the regular expression rule elements `fruits`

    // and `veggies`, which are specified in the manifest.

    var allMatches = Office.context.mailbox.item.getRegExMatches();

    var fruits = allMatches.fruits;

    var veggies = allMatches.veggies;

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/75-entities-and-regex-matches/contextual.yaml

    // This API would only work when you click on highlighted word "ScriptLab".

    console.log(Office.context.mailbox.item.getRegExMatches());

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getRegExMatches(): any;'
    return:
      type: any
      description: Un objeto que contiene matrices de cadenas que coinciden con las expresiones regulares definidas en el archivo XML de manifiesto. El nombre de cada matriz es igual al valor correspondiente del atributo `RegExName` de la regla `ItemHasRegularExpressionMatch` coincidente o al atributo `FilterName` de la regla `ItemHasKnownEntity` coincidente.
- name: getRegExMatchesByName(name)
  uid: outlook!Office.MessageRead#getRegExMatchesByName:member(1)
  package: outlook!
  fullName: getRegExMatchesByName(name)
  summary: >-
    Devuelve valores de cadena en el elemento seleccionado que coinciden con la expresión regular de nombre definida en el archivo XML de manifiesto.


    El método `getRegExMatchesByName` devuelve las cadenas que coinciden con la expresión regular definida en el elemento de regla `ItemHasRegularExpressionMatch` del archivo XML de manifiesto con el valor de elemento `RegExName` especificado.


    Si especifica una regla `ItemHasRegularExpressionMatch` en la propiedad body de un elemento, la expresión regular debe filtrar aún más el cuerpo y no debe intentar devolver todo el cuerpo del elemento. El uso de una expresión regular como .* para obtener todo el cuerpo de un elemento no siempre devuelve los resultados esperados.


    **Nota**: este método no es compatible con Outlook en iOS o Android.
  remarks: >-
    **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`


    **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: mensaje leído


    #### <a name="examples"></a>Ejemplos


    ```javascript

    // Consider an add-in manifest has the following `Rule` element:

    //<Rule xsi:type="RuleCollection" Mode="And">

    //  <Rule xsi:type="ItemIs" FormType="Read" ItemType="Message" />

    //  <Rule xsi:type="RuleCollection" Mode="Or">

    //    <Rule xsi:type="ItemHasRegularExpressionMatch" RegExName="fruits" RegExValue="apple|banana|coconut" PropertyName="BodyAsPlaintext" IgnoreCase="true" />

    //    <Rule xsi:type="ItemHasRegularExpressionMatch" RegExName="veggies" RegExValue="tomato|onion|spinach|broccoli" PropertyName="BodyAsPlaintext" IgnoreCase="true" />

    //  </Rule>

    //</Rule>


    // The object returned from `getRegExMatches` would have two properties: `fruits` and `veggies`.

    //{

    //'fruits': ['apple','banana','Banana','coconut'],

    //'veggies': ['tomato','onion','spinach','broccoli']

    //}


    var fruits = Office.context.mailbox.item.getRegExMatchesByName("fruits");

    var veggies = Office.context.mailbox.item.getRegExMatchesByName("veggies");

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/75-entities-and-regex-matches/contextual.yaml

    // This API would only work when you click on highlighted word "ScriptLab".

    console.log(Office.context.mailbox.item.getRegExMatchesByName("sampleRegexName"));

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getRegExMatchesByName(name: string): string[];'
    parameters:
    - id: name
      description: El nombre del elemento de regla `ItemHasRegularExpressionMatch` que define el filtro para que coincidan.
      type: string
    return:
      type: string[]
      description: Una matriz que contiene las cadenas que coinciden con la expresión regular definida en el archivo XML de manifiesto.
- name: getSelectedEntities()
  uid: outlook!Office.MessageRead#getSelectedEntities:member(1)
  package: outlook!
  fullName: getSelectedEntities()
  summary: >-
    Obtiene las entidades que se han detectado en una coincidencia resaltada que un usuario ha seleccionado. Las coincidencias resaltadas se aplican a complementos contextuales.


    **Nota**: este método no es compatible con Outlook en iOS o Android.


    \[[Conjunto de API: buzón de correo 1,6](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`


    **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: mensaje leído


    #### <a name="examples"></a>Ejemplos


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/75-entities-and-regex-matches/selected.yaml

    var entities = Office.context.mailbox.item.getSelectedEntities();

    var entityTypesFound = 0;

    if (entities.addresses.length > 0) {
        console.warn("physical addresses: ");
        console.log(entities.addresses);
        entityTypesFound++;
    }

    if (entities.contacts.length > 0) {
        console.warn("contacts: ");
        entities.contacts.forEach(function (contact) { console.log(contact.personName); })
        entityTypesFound++;
    }

    if (entities.emailAddresses.length > 0) {
        console.warn("email addresses: ");
        console.log(entities.emailAddresses);
        entityTypesFound++;
    }

    if (entities.meetingSuggestions.length > 0) {
        console.warn("meetings suggestions: ");
        entities.meetingSuggestions.forEach(function (meetingSuggestion) { console.log(meetingSuggestion.meetingString); })
        entityTypesFound++;
    }

    if (entities.phoneNumbers.length > 0) {
        console.warn("phone numbers: ");
        entities.phoneNumbers.forEach(function (phoneNumber) { console.log(phoneNumber.originalPhoneString); })
        entityTypesFound++;
    }

    if (entities.taskSuggestions.length > 0) {
        console.warn("task suggestions: ");
        entities.taskSuggestions.forEach(function (taskSuggestion) { console.log(taskSuggestion.taskString); })
        entityTypesFound++;
    }

    if (entities.urls.length > 0) {
        console.warn("URLs: ");
        console.log(entities.urls);
        entityTypesFound++;
    }

    if (entityTypesFound == 0)

    {
        console.error("Open add-in by clicking on a highlighted entity, for this API to return something useful.");
    }

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSelectedEntities(): Entities;'
    return:
      type: <xref uid="outlook!Office.Entities:interface" />
      description: ''
- name: getSelectedRegExMatches()
  uid: outlook!Office.MessageRead#getSelectedRegExMatches:member(1)
  package: outlook!
  fullName: getSelectedRegExMatches()
  summary: >-
    Devuelve valores de cadena en una coincidencia resaltada que coinciden con las expresiones regulares definidas en el archivo XML de manifiesto. Las coincidencias resaltadas se aplican a complementos contextuales.


    El método `getSelectedRegExMatches` devuelve las cadenas que coinciden con la expresión regular definida en cada elemento de regla `ItemHasRegularExpressionMatch` o `ItemHasKnownEntity` del archivo XML de manifiesto. Para una regla `ItemHasRegularExpressionMatch`, tiene que darse una cadena coincidente en la propiedad del elemento especificado por la regla. El tipo simple `PropertyName` define las propiedades admitidas.


    Si especifica una regla `ItemHasRegularExpressionMatch` en la propiedad body de un elemento, la expresión regular debe filtrar aún más el cuerpo y no debe intentar devolver todo el cuerpo del elemento. El uso de una expresión regular como .* para obtener todo el cuerpo de un elemento no siempre devuelve los resultados esperados. En su lugar, use el método `Body.getAsync` para recuperar todo el cuerpo.


    **Nota**: este método no es compatible con Outlook en iOS o Android.


    \[[Conjunto de API: buzón de correo 1,6](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`


    **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: mensaje leído


    #### <a name="examples"></a>Ejemplos


    ```javascript

    // Consider an add-in manifest has the following `Rule` element:

    //<Rule xsi:type="RuleCollection" Mode="And">

    //  <Rule xsi:type="ItemIs" FormType="Read" ItemType="Message" />

    //  <Rule xsi:type="RuleCollection" Mode="Or">

    //    <Rule xsi:type="ItemHasRegularExpressionMatch" RegExName="fruits" RegExValue="apple|banana|coconut" PropertyName="BodyAsPlaintext" IgnoreCase="true" />

    //    <Rule xsi:type="ItemHasRegularExpressionMatch" RegExName="veggies" RegExValue="tomato|onion|spinach|broccoli" PropertyName="BodyAsPlaintext" IgnoreCase="true" />

    //  </Rule>

    //</Rule>


    // The object returned from `getRegExMatches` would have two properties: `fruits` and `veggies`.

    //{

    //'fruits': ['apple','banana','Banana','coconut'],

    //'veggies': ['tomato','onion','spinach','broccoli']

    //}


    // The following example shows how to access the array of matches for the

    // regular expression rule elements `fruits` and `veggies`, which are

    // specified in the manifest.

    var selectedMatches = Office.context.mailbox.item.getSelectedRegExMatches();

    var fruits = selectedMatches.fruits;

    var veggies = selectedMatches.veggies;

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/75-entities-and-regex-matches/selected.yaml

    var matches = Office.context.mailbox.item.getSelectedRegExMatches();

    if (matches) {
        console.log(matches);
    }

    else {
        console.error("Open add-in by clicking on a highlighted regex match, for this API to return something useful.");
    }

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSelectedRegExMatches(): any;'
    return:
      type: any
      description: Un objeto que contiene matrices de cadenas que coinciden con las expresiones regulares definidas en el archivo XML de manifiesto. El nombre de cada matriz es igual al valor correspondiente del atributo `RegExName` de la regla `ItemHasRegularExpressionMatch` coincidente o al atributo `FilterName` de la regla `ItemHasKnownEntity` coincidente.
- name: getSharedPropertiesAsync(options, callback)
  uid: outlook!Office.MessageRead#getSharedPropertiesAsync:member(1)
  package: outlook!
  fullName: getSharedPropertiesAsync(options, callback)
  summary: >-
    Obtiene las propiedades de una cita o un mensaje en una carpeta compartida, calendario o buzón.


    Para obtener más información sobre el uso de esta API, vea el artículo [delegados de acceso](https://docs.microsoft.com/office/dev/add-ins/outlook/delegate-access) .


    **Nota**: este método no es compatible con Outlook en iOS o Android.


    \[[Conjunto de API: buzón de correo 1,8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`


    **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: mensaje leído


    #### <a name="examples"></a>Ejemplos


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/65-delegates-and-shared-folders/get-shared-properties.yaml

    if (!Office.context.mailbox.item.getSharedPropertiesAsync) {
      console.error("Try this sample on a message from a shared folder.");
      return;
    }


    Office.context.mailbox.getCallbackTokenAsync({ isRest: true }, function(result) {
      if (result.status === Office.AsyncResultStatus.Succeeded && result.value !== "") {
        Office.context.mailbox.item.getSharedPropertiesAsync(
          {
            // Pass auth token along.
            asyncContext: result.value
          },
          function(result2) {
            let sharedProperties = result2.value;
            let delegatePermissions = sharedProperties.delegatePermissions;

            // Determine if user has the appropriate permission to do the operation.
            if ((delegatePermissions & Office.MailboxEnums.DelegatePermissions.Read) != 0) {
              var ewsId = Office.context.mailbox.item.itemId;
              var restId = Office.context.mailbox.convertToRestId(ewsId, Office.MailboxEnums.RestVersion.v2_0);
              let rest_url =
                sharedProperties.targetRestUrl + "/v2.0/users/" + sharedProperties.targetMailbox + "/messages/" + restId;

              $.ajax({
                url: rest_url,
                dataType: "json",
                headers: { Authorization: "Bearer " + result2.asyncContext }
              })
                .done(function(response) {
                  console.log(response);
                })
                .fail(function(error) {
                  console.error(error);
                });
            }
          }
        );
      }
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSharedPropertiesAsync(options: Office.AsyncContextOptions, callback: (asyncResult: Office.AsyncResult<SharedProperties>) => void): void;'
    parameters:
    - id: options
      description: 'Un objeto literal que contiene una o más de las siguientes propiedades. `asyncContext`<!-- -->: Los desarrolladores pueden proporcionar cualquier objeto al que quieran tener acceso en el método de devolución de llamada.'
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Cuando el método finaliza, la función que se pasa en el `callback` parámetro se llama con un único parámetro de tipo `Office.AsyncResult`<!-- -->. La `value` propiedad del resultado son las propiedades del elemento compartido.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;<xref uid="outlook!Office.SharedProperties:interface" />&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getSharedPropertiesAsync(callback)
  uid: outlook!Office.MessageRead#getSharedPropertiesAsync:member(2)
  package: outlook!
  fullName: getSharedPropertiesAsync(callback)
  summary: >-
    Obtiene las propiedades de una cita o un mensaje en una carpeta compartida, calendario o buzón.


    Para obtener más información sobre el uso de esta API, vea el artículo [delegados de acceso](https://docs.microsoft.com/office/dev/add-ins/outlook/delegate-access) .


    **Nota**: este método no es compatible con Outlook en iOS o Android.


    \[[Conjunto de API: buzón de correo 1,8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`


    **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: mensaje leído


    #### <a name="examples"></a>Ejemplos


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/65-delegates-and-shared-folders/get-shared-properties.yaml

    if (!Office.context.mailbox.item.getSharedPropertiesAsync) {
      console.error("Try this sample on an item from a shared folder.");
      return;
    }


    Office.context.mailbox.item.getSharedPropertiesAsync(function(result) {
      console.log(result.value);
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSharedPropertiesAsync(callback: (asyncResult: Office.AsyncResult<SharedProperties>) => void): void;'
    parameters:
    - id: callback
      description: Cuando el método finaliza, la función que se pasa en el `callback` parámetro se llama con un único parámetro de tipo `Office.AsyncResult`<!-- -->. La `value` propiedad del resultado son las propiedades del elemento compartido.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;<xref uid="outlook!Office.SharedProperties:interface" />&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: loadCustomPropertiesAsync(callback, userContext)
  uid: outlook!Office.MessageRead#loadCustomPropertiesAsync:member(1)
  package: outlook!
  fullName: loadCustomPropertiesAsync(callback, userContext)
  summary: >-
    Carga de forma asincrónica las propiedades personalizadas de este complemento en el elemento seleccionado.


    Las propiedades personalizadas se almacenan como pares de clave/valor según la aplicación y el elemento. Este método devuelve un objeto `CustomProperties` en la devolución de llamada, que proporciona métodos para tener acceso a las propiedades personalizadas específicas del elemento y el complemento actual. Las propiedades personalizadas no están cifradas en el elemento, por lo que no debería usarse como almacenamiento seguro.


    Las propiedades personalizadas se proporcionan como un objeto `CustomProperties` en la propiedad `asyncResult.value`. Este objeto puede usarse para obtener, establecer y quitar las propiedades personalizadas del elemento, así como para guardar los cambios en la propiedad personalizada que se vuelve a establecer en el servidor.
  remarks: "**<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`\n\n**<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: mensaje leído\n\n#### <a name=\"examples\"></a>Ejemplos\n\n```javascript\n// The following example shows how to use the loadCustomPropertiesAsync method\n// to asynchronously load custom properties that are specific to the current item.\n// The example also shows how to use the saveAsync method to save these properties\n// back to the server. After loading the custom properties, the example uses the\n// get method to read the custom property myProp, the set method to write the\n// custom property otherProp, and then finally calls the saveAsync method to save\n// the custom properties.\nOffice.initialize = function () {\n    // Checks for the DOM to load using the jQuery ready function.\n    $(document).ready(function () {\n        // After the DOM is loaded, add-in-specific code can run.\n        var mailbox = Office.context.mailbox;\n        mailbox.item.loadCustomPropertiesAsync(customPropsCallback);\n    });\n};\n\nfunction customPropsCallback(asyncResult) {\n    var customProps = asyncResult.value;\n    var myProp = customProps.get(\"myProp\");\n\n    customProps.set(\"otherProp\", \"value\");\n    customProps.saveAsync(saveCallback);\n}\n\nfunction saveCallback(asyncResult) {\n}\n```\n```javascript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/15-item-custom-properties/load-set-get-save.yaml\nOffice.context.mailbox.item.loadCustomPropertiesAsync(function (result) {\n  if (result.status === Office.AsyncResultStatus.Succeeded) {\n    console.log(\"Loaded following custom properties:\");\n    customProps = result.value;\n    var dataKey = Object.keys(customProps)[0];\n    var data = customProps[dataKey];\n    for (var propertyName in data)\n    {\n      var propertyValue = data[propertyName];\n      console.log(`${propertyName}: ${propertyValue}`);\n    }              \n  }\n  else {\n    console.error(`loadCustomPropertiesAsync failed with message ${result.error.message}`);\n  }\n});\n```"
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'loadCustomPropertiesAsync(callback: (asyncResult: Office.AsyncResult<CustomProperties>) => void, userContext?: any): void;'
    parameters:
    - id: callback
      description: Cuando el método finaliza, la función que se pasa en el `callback` parámetro se llama con un único parámetro de tipo `Office.AsyncResult`<!-- -->.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;<xref uid="outlook!Office.CustomProperties:interface" />&gt;) =&gt; void'
    - id: userContext
      description: Opcional. Los desarrolladores pueden proporcionar cualquier objeto al que quieran obtener acceso en la función de devolución de llamada. A este objeto se puede acceder mediante la propiedad `asyncResult.asyncContext` en la función de devolución de llamada.
      type: any
    return:
      type: void
      description: ''
- name: removeHandlerAsync(eventType, options, callback)
  uid: outlook!Office.MessageRead#removeHandlerAsync:member(1)
  package: outlook!
  fullName: removeHandlerAsync(eventType, options, callback)
  summary: >-
    Elimina el controlador de eventos de un tpo de evento admitido. **Nota**: los eventos solo están disponibles con el panel de tareas.


    Consulte la [sección eventos](https://docs.microsoft.com/office/dev/add-ins/reference/objectmodel/requirement-set-1.8/office.context.mailbox.item#events) del modelo de objetos de elementos para ver los eventos admitidos.


    \[[Conjunto de API: buzón de correo 1,7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`


    **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: mensaje leído
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'removeHandlerAsync(eventType: Office.EventType | string, options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
    parameters:
    - id: eventType
      description: El evento que debe revocar el controlador.
      type: <xref uid="office!Office.EventType:enum" /> | string
    - id: options
      description: 'Opcional. Un objeto literal que contiene una o más de las siguientes propiedades. `asyncContext`<!-- -->: Los desarrolladores pueden proporcionar cualquier objeto al que quieran tener acceso en el método de devolución de llamada.'
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Opcional. Cuando el método finaliza, la función que se pasa en el `callback` parámetro se llama con un único parámetro, `asyncResult`<!-- -->, que es un `Office.AsyncResult` objeto.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
extends: <xref uid="outlook!Office.Message:interface" />
metadata:
  ms.openlocfilehash: 60bcaa61f9adb539e5d6244d2ce9bae3e9cdf266
  ms.sourcegitcommit: 3bab97ab3b91da7cca497f6fc895408a76bd8b46
  ms.translationtype: MT
  ms.contentlocale: es-ES
  ms.lasthandoff: 11/18/2020
  ms.locfileid: "49339885"
