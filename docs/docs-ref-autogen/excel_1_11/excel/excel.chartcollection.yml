### YamlMime:TSType
name: Excel.ChartCollection
uid: excel!Excel.ChartCollection:class
package: excel!
fullName: Excel.ChartCollection
summary: >-
  Colección de todos los objetos de gráfico en una hoja de cálculo.


  \[[Conjunto de API: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
remarks: ''
isPreview: false
isDeprecated: false
type: class
properties:
- name: context
  uid: excel!Excel.ChartCollection#context:member
  package: excel!
  fullName: context
  summary: Contexto de solicitud asociado al objeto. Esto conecta el proceso del complemento con el Office proceso de la aplicación host.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'context: RequestContext;'
    return:
      type: <xref uid="excel!Excel.RequestContext:class" />
- name: count
  uid: excel!Excel.ChartCollection#count:member
  package: excel!
  fullName: count
  summary: >-
    Devuelve el número de gráficos de la hoja de cálculo.


    \[[Conjunto de API: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly count: number;'
    return:
      type: number
- name: items
  uid: excel!Excel.ChartCollection#items:member
  package: excel!
  fullName: items
  summary: Obtiene los elementos secundarios cargados en esta colección.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly items: Excel.Chart[];'
    return:
      type: <xref uid="excel!Excel.Chart:class" />[]
methods:
- name: add(type, sourceData, seriesBy)
  uid: excel!Excel.ChartCollection#add:member(1)
  package: excel!
  fullName: add(type, sourceData, seriesBy)
  summary: >-
    Crea un nuevo gráfico.


    \[[Conjunto de API: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'add(type: Excel.ChartType, sourceData: Range, seriesBy?: Excel.ChartSeriesBy): Excel.Chart;'
    parameters:
    - id: type
      description: Representa el tipo de un gráfico. Vea `Excel.ChartType` para más información.
      type: <xref uid="excel!Excel.ChartType:enum" />
    - id: sourceData
      description: El `Range` objeto correspondiente a los datos de origen.
      type: <xref uid="excel!Excel.Range:class" />
    - id: seriesBy
      description: Opcional. Especifica la manera en que las columnas o las filas se usan como series de datos en el gráfico. Vea `Excel.ChartSeriesBy` para más información.
      type: <xref uid="excel!Excel.ChartSeriesBy:enum" />
    return:
      type: <xref uid="excel!Excel.Chart:class" />
      description: "\n\n#### <a name=\"examples\"></a>Ejemplos\n\n```javascript\n// Add a chart of chartType \"ColumnClustered\" on worksheet \"Charts\" \n// with sourceData from Range \"A1:B4\" and seriresBy is set to be \"auto\".\nExcel.run(function (ctx) { \n    var rangeSelection = \"A1:B4\";\n    var range = ctx.workbook.worksheets.getItem(sheetName)\n        .getRange(rangeSelection);\n    var chart = ctx.workbook.worksheets.getItem(sheetName)\n        .charts.add(\"ColumnClustered\", range, \"auto\");    return ctx.sync().then(function() {\n            console.log(\"New Chart Added\");\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: add(typeString, sourceData, seriesBy)
  uid: excel!Excel.ChartCollection#add:member(2)
  package: excel!
  fullName: add(typeString, sourceData, seriesBy)
  summary: >-
    Crea un nuevo gráfico.


    \[[Conjunto de API: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'add(typeString: "Invalid" | "ColumnClustered" | "ColumnStacked" | "ColumnStacked100" | "3DColumnClustered" | "3DColumnStacked" | "3DColumnStacked100" | "BarClustered" | "BarStacked" | "BarStacked100" | "3DBarClustered" | "3DBarStacked" | "3DBarStacked100" | "LineStacked" | "LineStacked100" | "LineMarkers" | "LineMarkersStacked" | "LineMarkersStacked100" | "PieOfPie" | "PieExploded" | "3DPieExploded" | "BarOfPie" | "XYScatterSmooth" | "XYScatterSmoothNoMarkers" | "XYScatterLines" | "XYScatterLinesNoMarkers" | "AreaStacked" | "AreaStacked100" | "3DAreaStacked" | "3DAreaStacked100" | "DoughnutExploded" | "RadarMarkers" | "RadarFilled" | "Surface" | "SurfaceWireframe" | "SurfaceTopView" | "SurfaceTopViewWireframe" | "Bubble" | "Bubble3DEffect" | "StockHLC" | "StockOHLC" | "StockVHLC" | "StockVOHLC" | "CylinderColClustered" | "CylinderColStacked" | "CylinderColStacked100" | "CylinderBarClustered" | "CylinderBarStacked" | "CylinderBarStacked100" | "CylinderCol" | "ConeColClustered" | "ConeColStacked" | "ConeColStacked100" | "ConeBarClustered" | "ConeBarStacked" | "ConeBarStacked100" | "ConeCol" | "PyramidColClustered" | "PyramidColStacked" | "PyramidColStacked100" | "PyramidBarClustered" | "PyramidBarStacked" | "PyramidBarStacked100" | "PyramidCol" | "3DColumn" | "Line" | "3DLine" | "3DPie" | "Pie" | "XYScatter" | "3DArea" | "Area" | "Doughnut" | "Radar" | "Histogram" | "Boxwhisker" | "Pareto" | "RegionMap" | "Treemap" | "Waterfall" | "Sunburst" | "Funnel", sourceData: Range, seriesBy?: "Auto" | "Columns" | "Rows"): Excel.Chart;'
    parameters:
    - id: typeString
      description: Representa el tipo de un gráfico. Vea `Excel.ChartType` para más información.
      type: "\"Invalid\" | \"ColumnClustered\" | \"ColumnStacked\" | \"ColumnStacked100\" | \"3DColumnClustered\" | \"3DColumnStacked\" | \"3DColumnStacked100\" | \"BarClustered\" | \"BarStacked\" | \"BarStacked100\" | \"3DBarClustered\" | \"3DBarStacked\" | \"3DBarStacked100\" | \"LineStacked\" | \"LineStacked100\" | \"LineMarkers\" | \"LineMarkersStacked\" | \"LineMarkersStacked100\" | \"PieOfPie\" | \"PieExploded\" | \"3DPieExploded\" | \"BarOfPie\" | \"XYScatterSmooth\" | \"XYScatterSmoothNoMarkers\" | \"XYScatterLines\" | \"XYScatterLinesNoMarkers\" | \"AreaStacked\" | \"AreaStacked100\" | \"3DAreaStacked\" | \"3DAreaStacked100\" | \"DoughnutExploded\" | \"RadarMarkers\" | \"RadarFilled\" | \"Surface\" | \"SurfaceWireframe\" | \"SurfaceTopView\" | \"SurfaceTopViewWireframe\" | \"Bubble\" | \"Bubble3DEffect\" | \"StockHLC\" | \"StockOHLC\" | \"StockVHLC\" | \"StockVOHLC\" | \"CylinderColClustered\" | \"CylinderColStacked\" | \"CylinderColStacked100\" | \"CylinderBarClustered\" | \"CylinderBarStacked\" | \"CylinderBarStacked100\" | \"CylinderCol\" | \"ConeColClustered\" | \"ConeColStacked\" | \"ConeColStacked100\" | \"ConeBarClustered\" | \"ConeBarStacked\" | \"ConeBarStacked100\" | \"ConeCol\" | \"PyramidColClustered\" | \"PyramidColStacked\" | \"PyramidColStacked100\" | \"PyramidBarClustered\" | \"PyramidBarStacked\" | \"PyramidBarStacked100\" | \"PyramidCol\" | \"3DColumn\" | \"Line\" | \"3DLine\" | \"3DPie\" | \"Pie\" | \"XYScatter\" | \"3DArea\" | \"Area\" | \"Doughnut\" | \"Radar\" | \"Histogram\" | \"Boxwhisker\" | \"Pareto\" | \"RegionMap\" | \"Treemap\" | \"Waterfall\" | \"Sunburst\" | \"Funnel\""
    - id: sourceData
      description: El `Range` objeto correspondiente a los datos de origen.
      type: <xref uid="excel!Excel.Range:class" />
    - id: seriesBy
      description: Opcional. Especifica la manera en que las columnas o las filas se usan como series de datos en el gráfico. Vea `Excel.ChartSeriesBy` para más información.
      type: "\"Auto\" | \"Columns\" | \"Rows\""
    return:
      type: <xref uid="excel!Excel.Chart:class" />
      description: ''
- name: getCount()
  uid: excel!Excel.ChartCollection#getCount:member(1)
  package: excel!
  fullName: getCount()
  summary: >-
    Devuelve el número de gráficos de la hoja de cálculo.


    \[[Conjunto de API: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getCount(): OfficeExtension.ClientResult<number>;'
    return:
      type: <xref uid="office!OfficeExtension.ClientResult:class" />&lt;number&gt;
      description: ''
- name: getItem(name)
  uid: excel!Excel.ChartCollection#getItem:member(1)
  package: excel!
  fullName: getItem(name)
  summary: >-
    Obtiene un gráfico mediante su nombre. Si hay varias tablas con el mismo nombre, se devolverá la primera.


    \[[Conjunto de API: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getItem(name: string): Excel.Chart;'
    parameters:
    - id: name
      description: Nombre del gráfico que se va a recuperar.
      type: string
    return:
      type: <xref uid="excel!Excel.Chart:class" />
      description: "\n\n#### <a name=\"examples\"></a>Ejemplos\n\n```javascript\n// Get the number of charts\nExcel.run(function (ctx) { \n    var charts = ctx.workbook.worksheets.getItem(\"Sheet1\").charts;\n    charts.load('count');\n    return ctx.sync().then(function() {\n        console.log(\"charts: Count= \" + charts.count);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getItemAt(index)
  uid: excel!Excel.ChartCollection#getItemAt:member(1)
  package: excel!
  fullName: getItemAt(index)
  summary: >-
    Obtiene un gráfico en función de su posición en la colección.


    \[[Conjunto de API: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getItemAt(index: number): Excel.Chart;'
    parameters:
    - id: index
      description: Valor de índice del objeto que se va a recuperar. Indizado con cero.
      type: number
    return:
      type: <xref uid="excel!Excel.Chart:class" />
      description: "\n\n#### <a name=\"examples\"></a>Ejemplos\n\n```javascript\nExcel.run(function (ctx) { \n    var lastPosition = ctx.workbook.worksheets.getItem(\"Sheet1\").charts.count - 1;\n    var chart = ctx.workbook.worksheets.getItem(\"Sheet1\").charts.getItemAt(lastPosition);\n    return ctx.sync().then(function() {\n            console.log(chart.name);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getItemOrNullObject(name)
  uid: excel!Excel.ChartCollection#getItemOrNullObject:member(1)
  package: excel!
  fullName: getItemOrNullObject(name)
  summary: >-
    Obtiene un gráfico mediante su nombre. Si hay varias tablas con el mismo nombre, se devolverá la primera. Si el gráfico no existe, esta función devolverá un objeto con su `isNullObject` propiedad establecida en `true`<!-- -->. Para obtener más información, [vea *OrNullObject methods and properties](https://docs.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties)<!-- -->.


    \[[Conjunto de API: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getItemOrNullObject(name: string): Excel.Chart;'
    parameters:
    - id: name
      description: Nombre del gráfico que se va a recuperar.
      type: string
    return:
      type: <xref uid="excel!Excel.Chart:class" />
      description: ''
- name: load(options)
  uid: excel!Excel.ChartCollection#load:member(1)
  package: excel!
  fullName: load(options)
  summary: Pone en cola un comando para cargar las propiedades especificadas del objeto. Debe llamar a `context.sync()` antes de leer las propiedades.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(options?: Excel.Interfaces.ChartCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions): Excel.ChartCollection;'
    parameters:
    - id: options
      description: Proporciona opciones para las propiedades del objeto que se cargarán.
      type: <xref uid="excel!Excel.Interfaces.ChartCollectionLoadOptions:interface" /> & <xref uid="excel!Excel.Interfaces.CollectionLoadOptions:interface" />
    return:
      type: <xref uid="excel!Excel.ChartCollection:class" />
      description: ''
- name: load(propertyNames)
  uid: excel!Excel.ChartCollection#load:member(2)
  package: excel!
  fullName: load(propertyNames)
  summary: Pone en cola un comando para cargar las propiedades especificadas del objeto. Debe llamar a `context.sync()` antes de leer las propiedades.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(propertyNames?: string | string[]): Excel.ChartCollection;'
    parameters:
    - id: propertyNames
      description: Una cadena delimitada por comas o una matriz de cadenas que especifican las propiedades que se cargarán.
      type: string | string[]
    return:
      type: <xref uid="excel!Excel.ChartCollection:class" />
      description: "\n\n#### <a name=\"examples\"></a>Ejemplos\n\n```javascript\nExcel.run(function (ctx) { \n    var charts = ctx.workbook.worksheets.getItem(\"Sheet1\").charts;\n    charts.load('items');\n    return ctx.sync().then(function() {\n        for (var i = 0; i < charts.items.length; i++) {\n            console.log(charts.items[i].name);\n        }\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: load(propertyNamesAndPaths)
  uid: excel!Excel.ChartCollection#load:member(3)
  package: excel!
  fullName: load(propertyNamesAndPaths)
  summary: Pone en cola un comando para cargar las propiedades especificadas del objeto. Debe llamar a `context.sync()` antes de leer las propiedades.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Excel.ChartCollection;'
    parameters:
    - id: propertyNamesAndPaths
      description: '`propertyNamesAndPaths.select` es una cadena delimitada por comas que especifica las propiedades que se cargarán y es una cadena delimitada por comas que especifica las propiedades de navegación que `propertyNamesAndPaths.expand` se cargarán.'
      type: <xref uid="office!OfficeExtension.LoadOption:interface" />
    return:
      type: <xref uid="excel!Excel.ChartCollection:class" />
      description: ''
- name: toJSON()
  uid: excel!Excel.ChartCollection#toJSON:member(1)
  package: excel!
  fullName: toJSON()
  summary: Invalida el método JavaScript para proporcionar resultados más útiles cuando se pasa un objeto API a `toJSON()``JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, a su vez, llama `toJSON` al método del objeto que se pasa a él). Mientras que el objeto original es un objeto API, el método devuelve un objeto JavaScript sin formato `Excel.ChartCollection` `toJSON` (se escribe como `Excel.Interfaces.ChartCollectionData`<!-- -->) que contiene una matriz "items" con copias superficiales de las propiedades cargadas de los elementos de la colección.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'toJSON(): Excel.Interfaces.ChartCollectionData;'
    return:
      type: <xref uid="excel!Excel.Interfaces.ChartCollectionData:interface" />
      description: ''
events:
- name: onActivated
  uid: excel!Excel.ChartCollection#onActivated:member
  package: excel!
  fullName: onActivated
  summary: >-
    Se produce cuando se activa un gráfico.


    \[[Conjunto de API: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly onActivated: OfficeExtension.EventHandlers<Excel.ChartActivatedEventArgs>;'
    return:
      type: <xref uid="office!OfficeExtension.EventHandlers:class" />&lt;<xref uid="excel!Excel.ChartActivatedEventArgs:interface" />&gt;
      description: "\n\n#### <a name=\"examples\"></a>Ejemplos\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/events-chart-activated.yaml\nawait Excel.run(async (context) => {\n\n    const pieChart = context.workbook.worksheets.getActiveWorksheet().charts.getItem(\"Pie\");\n\n    // Register the onActivated and onDeactivated event handlers.\n    pieChart.onActivated.add(chartActivated);\n    pieChart.onDeactivated.add(chartDeactivated);\n\n    await context.sync();\n\n    console.log(\"Added handlers for Chart onActivated and onDeactivated events.\");\n});\n```\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/events-chart-activated.yaml\nasync function chartActivated(event) {\n    await Excel.run(async (context) => {\n        // Retrieve the worksheet.\n        const sheet = context.workbook.worksheets.getActiveWorksheet();\n\n        // Retrieve the activated chart by ID and load the name of the chart. \n        const activatedChart = sheet.charts.getItem(event.chartId);\n        activatedChart.load([\"name\"]);\n        await context.sync();\n\n        // Print out the activated chart's data.\n        console.log(`A chart was activated. ID: ${event.chartId}. Chart name: ${activatedChart.name}.`);\n    });\n}\n```"
- name: onAdded
  uid: excel!Excel.ChartCollection#onAdded:member
  package: excel!
  fullName: onAdded
  summary: >-
    Se produce cuando se agrega un nuevo gráfico a la hoja de cálculo.


    \[[Conjunto de API: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly onAdded: OfficeExtension.EventHandlers<Excel.ChartAddedEventArgs>;'
    return:
      type: <xref uid="office!OfficeExtension.EventHandlers:class" />&lt;<xref uid="excel!Excel.ChartAddedEventArgs:interface" />&gt;
      description: "\n\n#### <a name=\"examples\"></a>Ejemplos\n\n```javascript\nExcel.run(function (context){\n    context.workbook.worksheets.getActiveWorksheet()\n        .charts.onAdded.add(function (event) {\n        return Excel.run(function (context) {\n            console.log(\"A chart has been added with ID: \" + event.chartId);\n            return context.sync();\n        });\n    });\n    return context.sync();\n});\n```"
- name: onDeactivated
  uid: excel!Excel.ChartCollection#onDeactivated:member
  package: excel!
  fullName: onDeactivated
  summary: >-
    Se produce cuando se desactiva un gráfico.


    \[[Conjunto de API: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly onDeactivated: OfficeExtension.EventHandlers<Excel.ChartDeactivatedEventArgs>;'
    return:
      type: <xref uid="office!OfficeExtension.EventHandlers:class" />&lt;<xref uid="excel!Excel.ChartDeactivatedEventArgs:interface" />&gt;
      description: "\n\n#### <a name=\"examples\"></a>Ejemplos\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/events-chart-activated.yaml\nawait Excel.run(async (context) => {\n\n    const pieChart = context.workbook.worksheets.getActiveWorksheet().charts.getItem(\"Pie\");\n\n    // Register the onActivated and onDeactivated event handlers.\n    pieChart.onActivated.add(chartActivated);\n    pieChart.onDeactivated.add(chartDeactivated);\n\n    await context.sync();\n\n    console.log(\"Added handlers for Chart onActivated and onDeactivated events.\");\n});\n```\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/events-chart-activated.yaml\nasync function chartDeactivated(event) {\n    await Excel.run(async (context) => {\n        // Callback function for when the chart is deactivated.\n        console.log(\"The pie chart is NOT active.\");\n    });\n}\n```"
- name: onDeleted
  uid: excel!Excel.ChartCollection#onDeleted:member
  package: excel!
  fullName: onDeleted
  summary: >-
    Se produce cuando se elimina un gráfico.


    \[[Conjunto de API: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly onDeleted: OfficeExtension.EventHandlers<Excel.ChartDeletedEventArgs>;'
    return:
      type: <xref uid="office!OfficeExtension.EventHandlers:class" />&lt;<xref uid="excel!Excel.ChartDeletedEventArgs:interface" />&gt;
      description: "\n\n#### <a name=\"examples\"></a>Ejemplos\n\n```javascript\nExcel.run(function (context){\n    context.workbook.worksheets.getActiveWorksheet()\n        .charts.onDeleted.add(function (event) {\n        return Excel.run(function (context) {\n            console.log(\"The chart with this ID was deleted: \" + event.chartId);\n            return context.sync();\n        });\n    });\n    return context.sync();\n});\n```"
extends: <xref uid="office!OfficeExtension.ClientObject:class" />
metadata:
  ms.openlocfilehash: 38d533b996c484133be95130548af52db590db3d
  ms.sourcegitcommit: 254c121bb627b0cf1f6bfa4cfd0a1b38e5de6ed9
  ms.translationtype: MT
  ms.contentlocale: es-ES
  ms.lasthandoff: 06/23/2021
  ms.locfileid: "53077323"
