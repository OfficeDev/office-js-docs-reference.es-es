### YamlMime:TSPackage
uid: powerpoint!
name: powerpoint
type: package
summary: ''
classes:
- powerpoint!PowerPoint.Application:class
- powerpoint!PowerPoint.Presentation:class
- powerpoint!PowerPoint.RequestContext:class
enums:
- powerpoint!PowerPoint.ErrorCodes:enum
interfaces:
- powerpoint!PowerPoint.Interfaces.CollectionLoadOptions:interface
- powerpoint!PowerPoint.Interfaces.PresentationData:interface
- powerpoint!PowerPoint.Interfaces.PresentationLoadOptions:interface
functions:
- name: PowerPoint.createPresentation(base64File)
  uid: powerpoint!PowerPoint.createPresentation:function(1)
  package: powerpoint!
  summary: >-
    Crea y abre una nueva presentación. Opcionalmente, la presentación se puede rellenar previamente con un archivo. pptx codificado en Base64.


    \[[Conjunto de API: PowerPointApi 1,1](/office/dev/add-ins/reference/javascript-api-for-office)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'export function createPresentation(base64File?: string): Promise<void>;'
    parameters:
    - id: base64File
      description: Opcional. El archivo. pptx codificado en Base64. El valor predeterminado es null.
      type: string
    return:
      type: Promise&lt;void&gt;
      description: "\n\n#### <a name=\"examples\"></a>Ejemplos\n\n```javascript\nvar myFile = document.getElementById(\"file\");\nvar reader = new FileReader();\n\nreader.onload = function (event) {\n    // strip off the metadata before the base64-encoded string\n    var startIndex = event.target.result.indexOf(\"base64,\");\n    var copyBase64 = event.target.result.substr(startIndex + 7);\n\n    PowerPoint.createPresentation(copyBase64);        \n};\n\n// read in the file as a data URL so we can parse the base64-encoded string\nreader.readAsDataURL(myFile.files[0]);\n```"
- name: PowerPoint.run(batch)
  uid: powerpoint!PowerPoint.run:function(1)
  package: powerpoint!
  summary: Ejecuta un script de proceso por lotes que realiza acciones en el modelo de objetos de PowerPoint, utilizando un nuevo RequestContext. Cuando se resuelve la promesa, se publicarán todos los objetos controlados que se asignaron automáticamente durante la ejecución.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'export function run<T>(batch: (context: PowerPoint.RequestContext) => OfficeExtension.IPromise<T>): OfficeExtension.IPromise<T>;'
    parameters:
    - id: batch
      description: Una función que toma un RequestContext y devuelve una promesa (normalmente, solo el resultado de "context. Sync ()"). El parámetro context facilita las solicitudes a la aplicación de PowerPoint. Dado que el complemento de Office y la aplicación de PowerPoint se ejecutan en dos procesos diferentes, se necesita RequestContext para obtener acceso al modelo de objetos de PowerPoint desde el complemento.
      type: '(context: <xref uid="powerpoint!PowerPoint.RequestContext:class" />) =&gt; <xref uid="powerpoint!OfficeExtension.IPromise:type" />&lt;T&gt;'
    return:
      type: <xref uid="powerpoint!OfficeExtension.IPromise:type" />&lt;T&gt;
      description: ''
- name: PowerPoint.run(object, batch)
  uid: powerpoint!PowerPoint.run:function(2)
  package: powerpoint!
  summary: Ejecuta un script de proceso por lotes que realiza acciones en el modelo de objetos de PowerPoint, mediante el RequestContext de un objeto API creado anteriormente. Cuando se resuelve la promesa, se publicarán todos los objetos controlados que se asignaron automáticamente durante la ejecución.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'export function run<T>(object: OfficeExtension.ClientObject, batch: (context: PowerPoint.RequestContext) => OfficeExtension.IPromise<T>): OfficeExtension.IPromise<T>;'
    parameters:
    - id: object
      description: Un objeto API creado anteriormente. El lote usará el mismo RequestContext que el objeto pasado, lo que significa que los cambios aplicados al objeto se seleccionarán "context. Sync ()".
      type: <xref uid="powerpoint!OfficeExtension.ClientObject:class" />
    - id: batch
      description: Una función que toma un RequestContext y devuelve una promesa (normalmente, solo el resultado de "context. Sync ()"). El parámetro context facilita las solicitudes a la aplicación de PowerPoint. Dado que el complemento de Office y la aplicación de PowerPoint se ejecutan en dos procesos diferentes, se necesita RequestContext para obtener acceso al modelo de objetos de PowerPoint desde el complemento.
      type: '(context: <xref uid="powerpoint!PowerPoint.RequestContext:class" />) =&gt; <xref uid="powerpoint!OfficeExtension.IPromise:type" />&lt;T&gt;'
    return:
      type: <xref uid="powerpoint!OfficeExtension.IPromise:type" />&lt;T&gt;
      description: ''
- name: PowerPoint.run(objects, batch)
  uid: powerpoint!PowerPoint.run:function(3)
  package: powerpoint!
  summary: Ejecuta un script de proceso por lotes que realiza acciones en el modelo de objetos de PowerPoint, utilizando el RequestContext de los objetos de la API creados anteriormente.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'export function run<T>(objects: OfficeExtension.ClientObject[], batch: (context: PowerPoint.RequestContext) => OfficeExtension.IPromise<T>): OfficeExtension.IPromise<T>;'
    parameters:
    - id: objects
      description: Una matriz de objetos API creados previamente. La matriz se validará para asegurarse de que todos los objetos comparten el mismo contexto. El lote usará este RequestContext compartido, lo que significa que los cambios aplicados a estos objetos se seleccionarán "context. Sync ()".
      type: <xref uid="powerpoint!OfficeExtension.ClientObject:class" />[]
    - id: batch
      description: Una función que toma un RequestContext y devuelve una promesa (normalmente, solo el resultado de "context. Sync ()"). El parámetro context facilita las solicitudes a la aplicación de PowerPoint. Dado que el complemento de Office y la aplicación de PowerPoint se ejecutan en dos procesos diferentes, se necesita RequestContext para obtener acceso al modelo de objetos de PowerPoint desde el complemento.
      type: '(context: <xref uid="powerpoint!PowerPoint.RequestContext:class" />) =&gt; <xref uid="powerpoint!OfficeExtension.IPromise:type" />&lt;T&gt;'
    return:
      type: <xref uid="powerpoint!OfficeExtension.IPromise:type" />&lt;T&gt;
      description: ''
metadata:
  ms.openlocfilehash: 3e5b024651dd5d1d211168d7cd1339dd58b6d7bd
  ms.sourcegitcommit: 3bab97ab3b91da7cca497f6fc895408a76bd8b46
  ms.translationtype: MT
  ms.contentlocale: es-ES
  ms.lasthandoff: 11/18/2020
  ms.locfileid: "49263648"
