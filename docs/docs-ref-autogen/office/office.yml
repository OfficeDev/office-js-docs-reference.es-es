### YamlMime:TSPackage
uid: office!
name: office
type: package
summary: ''
interfaces:
- office!Office.Actions:interface
- office!Office.AddBindingFromNamedItemOptions:interface
- office!Office.AddBindingFromPromptOptions:interface
- office!Office.AddBindingFromSelectionOptions:interface
- office!Office.Addin:interface
- office!Office.AddinCommands.Event:interface
- office!Office.AddinCommands.EventCompletedOptions:interface
- office!Office.AddinCommands.Source:interface
- office!Office.AsyncContextOptions:interface
- office!Office.AsyncResult:interface
- office!Office.Auth:interface
- office!Office.AuthOptions:interface
- office!Office.Binding:interface
- office!Office.BindingDataChangedEventArgs:interface
- office!Office.Bindings:interface
- office!Office.BindingSelectionChangedEventArgs:interface
- office!Office.Context:interface
- office!Office.ContextInformation:interface
- office!Office.Control:interface
- office!Office.CustomXmlNode:interface
- office!Office.CustomXmlPart:interface
- office!Office.CustomXmlParts:interface
- office!Office.CustomXmlPrefixMappings:interface
- office!Office.Dialog:interface
- office!Office.DialogOptions:interface
- office!Office.DialogParentMessageReceivedEventArgs:interface
- office!Office.Document:interface
- office!Office.DocumentSelectionChangedEventArgs:interface
- office!Office.Error:interface
- office!Office.File:interface
- office!Office.FileProperties:interface
- office!Office.GetBindingDataOptions:interface
- office!Office.GetFileOptions:interface
- office!Office.GetSelectedDataOptions:interface
- office!Office.GoToByIdOptions:interface
- office!Office.IPromiseConstructor:interface
- office!Office.MatrixBinding:interface
- office!Office.NodeDeletedEventArgs:interface
- office!Office.NodeInsertedEventArgs:interface
- office!Office.NodeReplacedEventArgs:interface
- office!Office.OfficeTheme:interface
- office!Office.RangeCoordinates:interface
- office!Office.RangeFormatConfiguration:interface
- office!Office.RemoveHandlerOptions:interface
- office!Office.RequirementSetSupport:interface
- office!Office.Ribbon:interface
- office!Office.RibbonUpdaterData:interface
- office!Office.SaveSettingsOptions:interface
- office!Office.SetBindingDataOptions:interface
- office!Office.SetSelectedDataOptions:interface
- office!Office.Settings:interface
- office!Office.SettingsChangedEventArgs:interface
- office!Office.Slice:interface
- office!Office.Tab:interface
- office!Office.TableBinding:interface
- office!Office.TextBinding:interface
- office!Office.UI:interface
- office!Office.VisibilityModeChangedMessage:interface
- office!OfficeExtension.DebugInfo:interface
- office!OfficeExtension.EmbeddedOptions:interface
- office!OfficeExtension.EventInfo:interface
- office!OfficeExtension.LoadOption:interface
- office!OfficeExtension.RequestContextDebugInfo:interface
- office!OfficeExtension.RequestUrlAndHeaderInfo:interface
- office!OfficeExtension.RunOptions:interface
- office!OfficeExtension.UpdateOptions:interface
enums:
- office!Office.ActiveView:enum
- office!Office.AsyncResultStatus:enum
- office!Office.BindingType:enum
- office!Office.CoercionType:enum
- office!Office.CustomXMLNodeType:enum
- office!Office.DocumentMode:enum
- office!Office.EventType:enum
- office!Office.FileType:enum
- office!Office.FilterType:enum
- office!Office.GoToType:enum
- office!Office.HostType:enum
- office!Office.Index:enum
- office!Office.InitializationReason:enum
- office!Office.PlatformType:enum
- office!Office.ProjectProjectFields:enum
- office!Office.ProjectResourceFields:enum
- office!Office.ProjectTaskFields:enum
- office!Office.ProjectViewTypes:enum
- office!Office.SelectionMode:enum
- office!Office.StartupBehavior:enum
- office!Office.Table:enum
- office!Office.ValueFormat:enum
- office!Office.VisibilityMode:enum
classes:
- office!Office.TableData:class
- office!OfficeExtension.ClientObject:class
- office!OfficeExtension.ClientRequestContext:class
- office!OfficeExtension.ClientResult:class
- office!OfficeExtension.EmbeddedSession:class
- office!OfficeExtension.Error:class
- office!OfficeExtension.ErrorCodes:class
- office!OfficeExtension.EventHandlerResult:class
- office!OfficeExtension.EventHandlers:class
- office!OfficeExtension.TrackedObjects:class
functions:
- name: Office.initialize(reason)
  uid: office!Office.initialize:function(1)
  package: office!
  summary: >-
    Ocurre cuando se carga el entorno en tiempo de ejecución y el complemento está preparado para empezar a interactuar con la aplicación y el documento alojado.


    El parámetro reason de la función de escucha de eventos initialize devuelve un valor `InitializationReason` de enumeración que especifica cómo se produjo la inicialización. El complemento de contenido o panel de tareas puede inicializarse con dos procedimientos:


    - El usuario acaba de insertarlo desde la sección Complementos usados recientemente de la lista desplegable Complementos de la ficha Insertar de la cinta de opciones de la aplicación host de Office o desde el cuadro de diálogo Insertar complemento.


    - El usuario abre un documento que contiene el complemento.


    *Nota:* El parámetro reason de la función de escucha de eventos initialize solo devuelve un valor de enumeración para los complementos de contenido y panel `InitializationReason` de tareas. No devuelve un valor para los complementos de Outlook.
  remarks: "**Información sobre soporte técnico**\n\nUna Y mayúscula en la siguiente matriz indica que este método es compatible con la aplicación host de Office correspondiente. Una celda vacía indica que la aplicación host no admite este método.\n\nPara obtener más información acerca de los requisitos de servidor y aplicación host de Office, vea [Requirements for running Office Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.\n\n*Hosts compatibles, por plataforma* <table> <tr><th> </th><th> Office en Windows </th><th> Office en el explorador web </th><th> Office en iPad </th><th> Outlook en dispositivos móviles </th><th> Office en Mac </th></tr> <tr><td><strong> Excel </strong></td><td> v </td><td> v </td><td> v </td><td> </td><td> v </td></tr> <tr><td><strong> Outlook </strong></td><td> v </td><td> v </td><td> </td><td> v </td><td> v </td></tr> <tr><td><strong> PowerPoint </strong></td><td> v </td><td> v </td><td> v </td><td> </td><td> v </td></tr> <tr><td><strong> Project </strong></td><td> v </td><td> </td><td> </td><td> </td><td> v </td></tr> <tr><td><strong> Word </strong></td><td> v </td><td> v </td><td> v </td><td> </td><td> v </td></tr> </table>\n\n#### <a name=\"examples\"></a>Ejemplos\n\n```javascript\n// You can use the value of the InitializationEnumeration to implement different logic for\n// when the add-in is first inserted versus when it is already part of the document.\n// The following example shows some simple logic that uses the value of the reason parameter\n// to display how the task pane or content add-in was initialized.\nOffice.initialize = function (reason) {\n    // Checks for the DOM to load using the jQuery ready function.\n    $(document).ready(function () {\n    // After the DOM is loaded, code specific to the add-in can run.\n    // Display initialization reason.\n    if (reason == \"inserted\")\n    write(\"The add-in was just inserted.\");\n\n    if (reason == \"documentOpened\")\n    write(\"The add-in is already part of the document.\");\n    });\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'export function initialize(reason: InitializationReason): void;'
    parameters:
    - id: reason
      description: Indica cómo se inicializó la aplicación.
      type: <xref uid="office!Office.InitializationReason:enum" />
    return:
      type: void
      description: ''
- name: Office.isSetSupported(name, minVersion)
  uid: office!Office.isSetSupported:function(1)
  package: office!
  summary: Comprueba si la aplicación host de Office admite el conjunto de requisitos especificado.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'export function isSetSupported(name: string, minVersion?: string): boolean;'
    parameters:
    - id: name
      description: Establecer nombre; Por ejemplo, "MatrixBindings".
      type: string
    - id: minVersion
      description: La versión mínima necesaria; Por ejemplo, "1.4".
      type: string
    return:
      type: boolean
      description: ''
- name: Office.onReady(callback)
  uid: office!Office.onReady:function(1)
  package: office!
  summary: Garantiza que las API de JavaScript de Office estén listas para ser llamadas por el complemento. Si el marco aún no se ha inicializado, la devolución de llamada o la promesa esperarán hasta que el host de Office esté listo para aceptar llamadas API. Tenga en cuenta que, aunque esta API está diseñada para usarse dentro de un complemento de Office, también se puede usar fuera del complemento. En ese caso, una vez Office.js determina que se está ejecutando fuera de una aplicación host de Office, llamará a la devolución de llamada y resolverá la promesa con "null" para el host y la plataforma.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'export function onReady(callback?: (info: { host: HostType, platform: PlatformType }) => any): Promise<{ host: HostType, platform: PlatformType }>;'
    parameters:
    - id: callback
      description: Un método de devolución de llamada opcional, que recibirá la información del host y la plataforma. Como alternativa, en lugar de usar una devolución de llamada, un complemento puede simplemente esperar a que se resuelva la promesa devuelta por la función.
      type: '(info: { host: <xref uid="office!Office.HostType:enum" />, platform: <xref uid="office!Office.PlatformType:enum" /> }) =&gt; any'
    return:
      type: 'Promise&lt;{ host: <xref uid="office!Office.HostType:enum" />, platform: <xref uid="office!Office.PlatformType:enum" /> }&gt;'
      description: Una promesa que contiene la información del host y la plataforma, una vez completada la inicialización.
- name: Office.select(expression, callback)
  uid: office!Office.select:function(1)
  package: office!
  summary: Devuelve una promesa de un objeto descrito en la expresión. La devolución de llamada solo se invoca si se produce un error en el método.
  remarks: >-
    **Información sobre soporte técnico**


    Una Y mayúscula en la siguiente matriz indica que este método es compatible con la aplicación host de Office correspondiente. Una celda vacía indica que la aplicación host no admite este método.


    Para obtener más información acerca de los requisitos de servidor y aplicación host de Office, vea [Requirements for running Office Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.


    *Hosts compatibles, por plataforma* <table> <tr><th> </th><th> Office en Windows </th><th> Office en el explorador web </th><th> Office en iPad </th></tr> <tr><td><strong> Excel </strong></td><td> v </td><td> v </td><td> v </td></tr> <tr><td><strong> Word </strong></td><td> v </td><td> </td><td> v </td></tr> </table>


    #### <a name="examples"></a>Ejemplos


    ```javascript

    // The following code example uses the select method to retrieve a binding with the id "cities" from

    // the Bindings collection, and then calls the addHandlerAsync method to add an event handler for the

    // dataChanged event of the binding.

    function addBindingDataChangedEventHandler() {
        Office.select("bindings#cities", function onError(){}).addHandlerAsync(Office.EventType.BindingDataChanged,
        function (eventArgs) {
            doSomethingWithBinding(eventArgs.binding);
        });
    }

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'export function select(expression: string, callback?: (result: AsyncResult<any>) => void): Binding;'
    parameters:
    - id: expression
      description: Objeto que se va a recuperar. En el ejemplo \# "bindings BindingName", se recupera una promesa de enlace para un enlace denominado 'BindingName'
      type: string
    - id: callback
      description: Opcional. Función que se invoca cuando se devuelve la devolución de llamada, cuyo único parámetro es de tipo [Office.AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;any&gt;) =&gt; void'
    return:
      type: <xref uid="office!Office.Binding:interface" />
      description: ''
- name: Office.useShortNamespace(useShortNamespace)
  uid: office!Office.useShortNamespace:function(1)
  package: office!
  summary: Activa y desactiva el `Office` alias del espacio de nombres `Microsoft.Office.WebExtension` completo.
  remarks: "**Información sobre soporte técnico**\n\nUna Y mayúscula en la siguiente matriz indica que este método es compatible con la aplicación host de Office correspondiente. Una celda vacía indica que la aplicación host no admite este método.\n\nPara obtener más información acerca de los requisitos de servidor y aplicación host de Office, vea [Requirements for running Office Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.\n\n*Hosts compatibles, por plataforma* <table> <tr><th> </th><th> Office en Windows </th><th> Office en el explorador web </th><th> Office en iPad </th><th> Outlook en dispositivos móviles </th><th> Office en Mac </th></tr> <tr><td><strong> Excel </strong></td><td> v </td><td> v </td><td> v </td><td> </td><td> </td></tr> <tr><td><strong> Outlook </strong></td><td> v </td><td> v </td><td> </td><td> v </td><td> v </td></tr> <tr><td><strong> PowerPoint </strong></td><td> v </td><td> v </td><td> v </td><td> </td><td> </td></tr> <tr><td><strong> Project </strong></td><td> v </td><td> </td><td> </td><td> </td><td> </td></tr> <tr><td><strong> Word </strong></td><td> v </td><td> v </td><td> v </td><td> </td><td> </td></tr> </table>\n\n#### <a name=\"examples\"></a>Ejemplos\n\n```javascript\nfunction startUsingShortNamespace() {\n    if (typeof Office === 'undefined') {\n        Microsoft.Office.WebExtension.useShortNamespace(true);\n    }\n    else {\n        Office.useShortNamespace(true);\n    }\n    write('Office alias is now ' + typeof Office);\n}\n\nfunction stopUsingShortNamespace() {\n    if (typeof Office === 'undefined') {\n        Microsoft.Office.WebExtension.useShortNamespace(false);\n    }\n    else {\n        Office.useShortNamespace(false);\n    }\n    write('Office alias is now ' + typeof Office);\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'export function useShortNamespace(useShortNamespace: boolean): void;'
    parameters:
    - id: useShortNamespace
      description: True para usar el alias de acceso directo; de lo contrario es false para deshabilitarlo. El valor predeterminado es true.
      type: boolean
    return:
      type: void
      description: ''
metadata:
  ms.openlocfilehash: 16cd978a65fa86da9077efd47b65fb42e2e27d28
  ms.sourcegitcommit: a8a86cfcaff5ad7dacc653d63502c76b1fedbebe
  ms.translationtype: MT
  ms.contentlocale: es-ES
  ms.lasthandoff: 03/26/2021
  ms.locfileid: "51320625"
