### YamlMime:UniversalReference
items:
  - uid: office.Office.AddinCommands.Event
    summary: <span data-ttu-id="b8673-101">El objeto Event se pasa como un parámetro a las funciones de complemento invocadas por botones de comando sin interfaz de usuario.</span><span class="sxs-lookup"><span data-stu-id="b8673-101">The event object is passed as a parameter to add-in functions invoked by UI-less command buttons.</span></span> <span data-ttu-id="b8673-102">El objeto permite que el complemento identifique en qué botón se ha hecho clic y que indique el host que ha completado su procesamiento.</span><span class="sxs-lookup"><span data-stu-id="b8673-102">The object allows the add-in to identify which button was clicked and to signal the host that it has completed its processing.</span></span>
    remarks: |-
      <span data-ttu-id="b8673-103">Consulte [conjuntos de requisitos de comandos de complemento](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/add-in-commands-requirement-sets) para obtener más información de soporte técnico.</span><span class="sxs-lookup"><span data-stu-id="b8673-103">See [Add-in commands requirement sets](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/add-in-commands-requirement-sets) for more support information.</span></span>

      <span data-ttu-id="b8673-104">**<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)**: \*\* [modo](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->de Outlook\*\*restringido aplicable: redacción o lectura</span><span class="sxs-lookup"><span data-stu-id="b8673-104">**[Minimum permission level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: Restricted **[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: Compose or Read</span></span>
    name: Office.AddinCommands.Event
    fullName: Office.AddinCommands.Event
    langs:
      - typeScript
    type: interface
    package: office
    children:
      - office.Office.AddinCommands.Event.completed
      - office.Office.AddinCommands.Event.source
  - uid: office.Office.AddinCommands.Event.completed
    summary: |-
      <span data-ttu-id="b8673-105">Indica que el complemento ha completado el procesamiento que se desencadenó mediante un botón de comando del complemento o un controlador de eventos.</span><span class="sxs-lookup"><span data-stu-id="b8673-105">Indicates that the add-in has completed processing that was triggered by an add-in command button or event handler.</span></span>

      <span data-ttu-id="b8673-106">Se debe llamar a este método al final de una función invocada por un comando de complemento definido con un elemento Action con un atributo xsi: Type establecido en ExecuteFunction.</span><span class="sxs-lookup"><span data-stu-id="b8673-106">This method must be called at the end of a function which was invoked by an add-in command defined with an Action element with an xsi:type attribute set to ExecuteFunction.</span></span> <span data-ttu-id="b8673-107">Al llamar a este método se indica al cliente de host que la función está completa y que puede limpiar cualquier estado que esté implicado al invocar la función.</span><span class="sxs-lookup"><span data-stu-id="b8673-107">Calling this method signals the host client that the function is complete and that it can clean up any state involved with invoking the function.</span></span> <span data-ttu-id="b8673-108">Por ejemplo, si el usuario cierra Outlook antes de que se llame a este método, Outlook le advertirá de que una función continúa ejecutándose.</span><span class="sxs-lookup"><span data-stu-id="b8673-108">For example, if the user closes Outlook before this method is called, Outlook will warn that a function is still executing.</span></span>

      <span data-ttu-id="b8673-109">Este método debe llamarse en un controlador de eventos agregado mediante Office.context.mailbox.addHandlerAsync después de completar el procesamiento del evento.</span><span class="sxs-lookup"><span data-stu-id="b8673-109">This method must be called in an event handler added via Office.context.mailbox.addHandlerAsync after completing processing of the event.</span></span>

      <span data-ttu-id="b8673-110">\[[Conjunto de API: buzón de correo 1,3](/office/dev/add-ins/reference/javascript-api-for-office)\]</span><span class="sxs-lookup"><span data-stu-id="b8673-110">\[ [API set: Mailbox 1.3](/office/dev/add-ins/reference/javascript-api-for-office) \]</span></span>
    remarks: |-
      <span data-ttu-id="b8673-111">**<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)**: \*\* [modo](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->de Outlook\*\*restringido aplicable: redacción o lectura</span><span class="sxs-lookup"><span data-stu-id="b8673-111">**[Minimum permission level](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->**: Restricted **[Applicable Outlook mode](https://docs.microsoft.com/outlook/add-ins/#extension-points)<!-- -->**: Compose or Read</span></span>

      <span data-ttu-id="b8673-112">El buzón 1,3 no tiene el `options` parámetro mientras la vista previa del buzón admite `options` el parámetro</span><span class="sxs-lookup"><span data-stu-id="b8673-112">Mailbox 1.3 does not have the `options` parameter while Mailbox Preview does have support for `options` parameter)</span></span>

      #### <a name="examples"></a><span data-ttu-id="b8673-113">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="b8673-113">Examples</span></span>

      ```javascript
      function processItem (event) {
          // Do some processing

          event.completed();
      }

      // In the following example, the checkMessage function has
      // been registered as an event handler for ItemSend.
      function checkMessage(event) {
          // Get the item being sent
          var outgoingMsg = Office.context.mailbox.item;

          // Check if subject contains "BLOCK"
          outgoingMsg.subject.getAsync(function (result) {
              // Subject is in result.value
              if (result.value.indexOf('BLOCK') != -1) {
                  // Value is found, stop send
                  event.completed({allowEvent = false});
              } else {
                  // Value wasn't found, allow send
                  event.completed({allowEvent = true});
              }
          });
      }
      ```
    name: completed(options)
    fullName: completed(options)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'completed(options?: { allowEvent: boolean }): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: '<span data-ttu-id="b8673-114">Opcional.</span><span class="sxs-lookup"><span data-stu-id="b8673-114">Optional.</span></span> <span data-ttu-id="b8673-115">Un objeto literal que contiene una o más de las siguientes propiedades.</span><span class="sxs-lookup"><span data-stu-id="b8673-115">An object literal that contains one or more of the following properties.</span></span> <span data-ttu-id="b8673-116">allowEvent: valor booleano.</span><span class="sxs-lookup"><span data-stu-id="b8673-116">allowEvent: A boolean value.</span></span> <span data-ttu-id="b8673-117">Cuando se usa el método Completed para indicar la finalización de un controlador de eventos, este valor indica que el evento controlado debe continuar la ejecución o cancelarse.</span><span class="sxs-lookup"><span data-stu-id="b8673-117">When the completed method is used to signal completion of an event handler, this value indicates of the handled event should continue execution or be canceled.</span></span> <span data-ttu-id="b8673-118">Por ejemplo, un complemento que controla el evento ItemSend puede establecer allowEvent = false para cancelar el envío del mensaje.</span><span class="sxs-lookup"><span data-stu-id="b8673-118">For example, an add-in that handles the ItemSend event can set allowEvent = false to cancel sending of the message.</span></span>'
          type:
            - '{ allowEvent: boolean }'
  - uid: office.Office.AddinCommands.Event.source
    summary: <span data-ttu-id="b8673-119">Información sobre el control que desencadenó la llamada a esta función.</span><span class="sxs-lookup"><span data-stu-id="b8673-119">Information about the control that triggered calling this function.</span></span>
    remarks: |-
      <span data-ttu-id="b8673-120">Esta propiedad solo se admite en Outlook en el buzón de correo del [conjunto de requisitos](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets) 1,3 y versiones posteriores.</span><span class="sxs-lookup"><span data-stu-id="b8673-120">This property is only supported in Outlook in [requirement set](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets) Mailbox 1.3 and later.</span></span>

      #### <a name="examples"></a><span data-ttu-id="b8673-121">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="b8673-121">Examples</span></span>

      ```javascript
      // In this example, consider a button defined in an add-in manifest as follows:
      //<Control xsi:type="Button" id="eventTestButton">
      //    <Label resid="eventButtonLabel" />
      //    <Tooltip resid="eventButtonTooltip" />
      //    <Supertip>
      //        <Title resid="eventSuperTipTitle" />
      //        <Description resid="eventSuperTipDescription" />
      //    </Supertip>
      //    <Icon>
      //        <bt:Image size="16" resid="blue-icon-16" />
      //        <bt:Image size="32" resid="blue-icon-32" />
      //        <bt:Image size="80" resid="blue-icon-80" />
      //    </Icon>
      //    <Action xsi:type="ExecuteFunction">
      //        <FunctionName>testEventObject</FunctionName>
      //    </Action>
      //</Control>

      // The button has an id attribute set to eventTestButton, and will invoke
      // the testEventObject function defined in the add-in.
      // That function looks like this:
      function testEventObject(event) {
          // The event object implements the Event interface.

          // This value will be "eventTestButton".
          var buttonId = event.source.id;

          // Signal to the host app that processing is complete.
          event.completed();
      }
      ```
      ```javascript
      // Function is used by two buttons:
      // button1 and button2
      function multiButton (event) {
          // Check which button was clicked.
          var buttonId = event.source.id;

          if (buttonId === 'button1') {
              doButton1Action();
          } else {
              doButton2Action();
          }

          event.completed();
      }
      ```
    name: source
    fullName: source
    langs:
      - typeScript
    type: property
    syntax:
      content: 'source:Source;'
      return:
        type:
          - office.Office.AddinCommands.Source