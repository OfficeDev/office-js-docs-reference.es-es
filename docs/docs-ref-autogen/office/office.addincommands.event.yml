### YamlMime:UniversalReference
ms.openlocfilehash: 45f7cc7ea0d9cec7b247ef8ace1eccdb788bbcc1
ms.sourcegitcommit: c1149d24b38f20daf9ce690cd0761ec1ceb7333d
ms.translationtype: MT
ms.contentlocale: es-ES
ms.lasthandoff: 10/17/2018
ms.locfileid: "25580833"
items:
- uid: office.Office.AddinCommands.Event
  summary: El objeto event se pasa como parámetro a las funciones del complemento que invocan los botones de comando directos. El objeto permite que el complemento identifique en qué botón se ha hecho clic y que indique el host que ha completado su procesamiento.
  remarks: >-
    <table><tr><td>Tipo de complemento</td><td>Contenido, panel de tareas y Outlook</td></tr>


    <tr><td>[Nivel de permiso mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>Restricted</td></tr>


    <tr><td>[Modo de Outlook aplicable](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Redacción o lectura</td></tr></table>
  name: Office.AddinCommands.Event
  fullName: office.Office.AddinCommands.Event
  langs:
  - typeScript
  type: interface
  package: office
  children:
  - office.Office.AddinCommands.Event.completed
  - office.Office.AddinCommands.Event.source
- uid: office.Office.AddinCommands.Event.completed
  summary: >-
    Indica que el complemento ha completado el procesamiento que se desencadenó mediante un botón de comando del complemento o un controlador de eventos.


    Este método debe llamarse al final de una función que se ha invocado mediante un comando de complemento definido con un elemento Action con un atributo xsi:type establecido en ExecuteFunction. Al llamar a este método se indica al cliente de host que la función está completa y que puede limpiar cualquier estado que esté implicado al invocar la función. Por ejemplo, si el usuario cierra Outlook antes de que se llame a este método, Outlook le advertirá de que una función continúa ejecutándose.


    Este método debe llamarse en un controlador de eventos agregado mediante Office.context.mailbox.addHandlerAsync después de completar el procesamiento del evento.


    \[[Conjunto de API: buzón 1.3](/office/dev/add-ins/reference/javascript-api-for-office)\]
  remarks: >-
    <table><tr><td>[Nivel de permiso mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>Restricted</td></tr>


    <tr><td>[Modo de Outlook aplicable](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Redacción o lectura</td></tr></table>


    **Detalles de compatibilidad**


    Una Y mayúscula en la siguiente matriz indica que este método es compatible con la aplicación host de Office correspondiente. Una celda vacía indica que la aplicación host no admite este método.


    Para obtener más información acerca de los requisitos de aplicación y servidor de host de Office, vea [requisitos para ejecutar Office Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.


    *Hosts compatibles, por plataforma* <table> <tr><th> </th><th> Office para escritorio de Windows </th><th> Office Online (en el explorador) </th><th> Office para iPad </th></tr> <tr><td><strong>Excel</strong></td><td> v </td><td> v </td><td> v </td></tr> <tr><td><strong>Outlook</strong></td><td> Y (buzón 1.3) </td><td> </td><td> </td></tr> <tr><td><strong>PowerPoint</strong></td><td> v </td><td> v </td><td> v </td></tr> <tr><td><strong>Word</strong></td><td> v </td><td> v </td><td> v </td></tr> </table>

    #### <a name="examples"></a>Ejemplos


    ```javascript

    function processItem (event) {
        // Do some processing

        event.completed();
    }


    // In the following example, the checkMessage function has

    // been registered as an event handler for ItemSend.

    function checkMessage(event) {
        // Get the item being sent
        var outgoingMsg = Office.context.mailbox.item;

        // Check if subject contains "BLOCK"
        outgoingMsg.subject.getAsync(function (result) {
            // Subject is in result.value
            if (result.value.indexOf('BLOCK') != -1) {
                // Value is found, stop send
                event.completed({allowEvent = false});
            } else {
                // Value wasn't found, allow send
                event.completed({allowEvent = true});
            }
        });
    }

    ```
  name: completed(options)
  fullName: office.Office.AddinCommands.Event.completed
  langs:
  - typeScript
  type: method
  syntax:
    content: 'completed(options?: any): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: options
      description: 'Opcional. Un objeto literal que contiene una o más de las siguientes propiedades. allowEvent: un valor de tipo boolean. Cuando se utiliza el método completado para señalar la finalización de un controlador de eventos, que este valor indica por el evento controlado debe continuar la ejecución o se puede cancelar. Por ejemplo, un complemento que controla el evento ItemSend puede establecer allowEvent = false para cancelar el envío del mensaje.'
      type:
      - any
- uid: office.Office.AddinCommands.Event.source
  summary: >-
    Información sobre el control que desencadenó al llamar a esta función.


    **Detalles de compatibilidad**


    Una Y mayúscula en la siguiente matriz indica que esta propiedad es compatible con la aplicación host de Office correspondiente. Una celda vacía indica que la aplicación host no admite esta propiedad.


    Para obtener más información acerca de los requisitos de aplicación y servidor de host de Office, vea [requisitos para ejecutar Office Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.


    *Hosts compatibles, por plataforma* <table> <tr><th> </th><th> Office para escritorio de Windows </th><th> Office Online (en el explorador) </th><th> Office para iPad </th></tr> <tr><td><strong>Outlook</strong></td><td> Y (buzón 1.3) </td><td> </td><td> </td></tr> </table>
  name: source
  fullName: office.Office.AddinCommands.Event.source
  langs:
  - typeScript
  type: property
  syntax:
    content: 'source: Source;'
    return:
      type:
      - office.Office.AddinCommands.Source
      description: "\n#### <a name=\"examples\"></a>Ejemplos\n\n```javascript\n// In this example, consider a button defined in an add-in manifest as follows:\n<Control xsi:type=\"Button\" id=\"eventTestButton\">\n    <Label resid=\"eventButtonLabel\" />\n    <Tooltip resid=\"eventButtonTooltip\" />\n    <Supertip>\n        <Title resid=\"eventSuperTipTitle\" />\n        <Description resid=\"eventSuperTipDescription\" />\n    </Supertip>\n    <Icon>\n        <bt:Image size=\"16\" resid=\"blue-icon-16\" />\n        <bt:Image size=\"32\" resid=\"blue-icon-32\" />\n        <bt:Image size=\"80\" resid=\"blue-icon-80\" />\n    </Icon>\n    <Action xsi:type=\"ExecuteFunction\">\n        <FunctionName>testEventObject</FunctionName>\n    </Action>\n</Control>\n// The button has an id attribute set to eventTestButton, and will invoke\n// the testEventObject function defined in the add-in.\n// That function looks like this:\nfunction testEventObject(event) {\n    // The event object implements the Event interface\n\n    // This value will be \"eventTestButton\"\n    var buttonId = event.source.id;\n\n    // Signal to the host app that processing is complete.\n    event.completed();\n}\n```\n```javascript\n// Function is used by two buttons:\n// button1 and button2\nfunction multiButton (event) {\n    // Check which button was clicked\n    var buttonId = event.source.id;\n\n    if (buttonId === 'button1') {\n        doButton1Action();\n    }\n    else {\n        doButton2Action();\n    }\n\n    event.completed();\n}\n```"
