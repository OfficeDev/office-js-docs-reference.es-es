### YamlMime:UniversalReference
ms.openlocfilehash: db98f3f5b4e39d5b5662233c54ff302901f90fcb
ms.sourcegitcommit: b05ee546d9dfbc914c8d1c594d9b206b04780bbc
ms.translationtype: MT
ms.contentlocale: es-ES
ms.lasthandoff: 11/22/2018
ms.locfileid: "26647199"
items:
- uid: office.Office.CustomXmlNode
  summary: <span data-ttu-id="78cb7-101">Representa un nodo XML en un árbol de un documento.</span><span class="sxs-lookup"><span data-stu-id="78cb7-101">Represents an XML node in a tree in a document.</span></span>
  remarks: >-
    <table><tr><td><span data-ttu-id="78cb7-102">Conjuntos de requisitos</span><span class="sxs-lookup"><span data-stu-id="78cb7-102">Requirement Sets</span></span></td><td><span data-ttu-id="78cb7-103">CustomXmlParts</span><span class="sxs-lookup"><span data-stu-id="78cb7-103">CustomXmlParts</span></span></td></tr></table>


    <span data-ttu-id="78cb7-104">**Detalles de compatibilidad**</span><span class="sxs-lookup"><span data-stu-id="78cb7-104">**Support details**</span></span>


    <span data-ttu-id="78cb7-105">Una letra mayúscula Y en la siguiente matriz indica que esta interfaz es compatible con la aplicación host de Office correspondiente.</span><span class="sxs-lookup"><span data-stu-id="78cb7-105">A capital Y in the following matrix indicates that this interface is supported in the corresponding Office host application.</span></span> <span data-ttu-id="78cb7-106">Una celda vacía indica que la aplicación host de Office no admite esta interfaz.</span><span class="sxs-lookup"><span data-stu-id="78cb7-106">An empty cell indicates that the Office host application doesn't support this interface.</span></span>


    <span data-ttu-id="78cb7-107">Para obtener más información acerca de los requisitos de aplicación y servidor de host de Office, vea [requisitos para ejecutar Office Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.</span><span class="sxs-lookup"><span data-stu-id="78cb7-107">For more information about Office host application and server requirements, see [Requirements for running Office Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.</span></span>


    <span data-ttu-id="78cb7-108">*Hosts compatibles, por plataforma*</span><span class="sxs-lookup"><span data-stu-id="78cb7-108">*Supported hosts, by platform*</span></span> <table> <tr><th> </th><th> <span data-ttu-id="78cb7-109">Office para escritorio de Windows</span><span class="sxs-lookup"><span data-stu-id="78cb7-109">Office for Windows desktop</span></span> </th><th> <span data-ttu-id="78cb7-110">Office Online (en el explorador)</span><span class="sxs-lookup"><span data-stu-id="78cb7-110">Office Online (in browser)</span></span> </th><th> <span data-ttu-id="78cb7-111">Office for iPad</span><span class="sxs-lookup"><span data-stu-id="78cb7-111">Office for iPad</span></span> </th><th> <span data-ttu-id="78cb7-112">Office for Mac</span><span class="sxs-lookup"><span data-stu-id="78cb7-112">Office for Mac</span></span> </th></tr> <tr><td><span data-ttu-id="78cb7-113"><strong>Word</strong></span><span class="sxs-lookup"><span data-stu-id="78cb7-113"><strong> Word </strong></span></span></td><td> <span data-ttu-id="78cb7-114">v</span><span class="sxs-lookup"><span data-stu-id="78cb7-114">Y</span></span> </td><td> <span data-ttu-id="78cb7-115">v</span><span class="sxs-lookup"><span data-stu-id="78cb7-115">Y</span></span> </td><td> <span data-ttu-id="78cb7-116">v</span><span class="sxs-lookup"><span data-stu-id="78cb7-116">Y</span></span> </td><td> <span data-ttu-id="78cb7-117">v</span><span class="sxs-lookup"><span data-stu-id="78cb7-117">Y</span></span> </td></tr> </table>
  name: Office.CustomXmlNode
  fullName: Office.CustomXmlNode
  langs:
  - typeScript
  type: interface
  package: office
  children:
  - office.Office.CustomXmlNode.baseName
  - office.Office.CustomXmlNode.getNodesAsync
  - office.Office.CustomXmlNode.getNodeValueAsync
  - office.Office.CustomXmlNode.getTextAsync
  - office.Office.CustomXmlNode.getXmlAsync
  - office.Office.CustomXmlNode.namespaceUri
  - office.Office.CustomXmlNode.nodeType
  - office.Office.CustomXmlNode.setNodeValueAsync
  - office.Office.CustomXmlNode.setTextAsync
  - office.Office.CustomXmlNode.setXmlAsync
- uid: office.Office.CustomXmlNode.baseName
  summary: <span data-ttu-id="78cb7-118">Obtiene el nombre base del nodo sin el prefijo de espacio de nombres, si existe alguno.</span><span class="sxs-lookup"><span data-stu-id="78cb7-118">Gets the base name of the node without the namespace prefix, if one exists.</span></span>
  remarks: "<table><tr><td><span data-ttu-id=\"78cb7-119\">Conjuntos de requisitos</span><span class=\"sxs-lookup\"><span data-stu-id=\"78cb7-119\">Requirement Sets</span></span></td><td><span data-ttu-id=\"78cb7-120\">CustomXmlParts</span><span class=\"sxs-lookup\"><span data-stu-id=\"78cb7-120\">CustomXmlParts</span></span></td></tr></table>\n#### <span data-ttu-id=\"78cb7-121\">Ejemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"78cb7-121\">Examples</span></span>\n\n```javascript\nfunction showXmlNodeBaseNames() {\n    Office.context.document.customXmlParts.getByIdAsync(\n        \"{3BC85265-09D6-4205-B665-8EB239A8B9A1}\", function (result) {\n        var xmlPart = result.value;\n        xmlPart.getNodesAsync('*/*', function (nodeResults) {\n            for (i = 0; i < nodeResults.value.length; i++) {\n                var node = nodeResults.value[i];\n                write(node.baseName);\n            }\n        });\n    });\n}\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
  name: baseName
  fullName: baseName
  langs:
  - typeScript
  type: property
  syntax:
    content: 'baseName: string;'
    return:
      type:
      - string
- uid: office.Office.CustomXmlNode.getNodesAsync
  summary: <span data-ttu-id="78cb7-122">Obtiene los nodos asociados con la expresión XPath.</span><span class="sxs-lookup"><span data-stu-id="78cb7-122">Gets the nodes associated with the XPath expression.</span></span>
  remarks: "<table><tr><td><span data-ttu-id=\"78cb7-123\">Conjuntos de requisitos</span><span class=\"sxs-lookup\"><span data-stu-id=\"78cb7-123\">Requirement Sets</span></span></td><td><span data-ttu-id=\"78cb7-124\">CustomXmlParts</span><span class=\"sxs-lookup\"><span data-stu-id=\"78cb7-124\">CustomXmlParts</span></span></td></tr></table>\n#### <span data-ttu-id=\"78cb7-125\">Ejemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"78cb7-125\">Examples</span></span>\n\n```javascript\nfunction showXmlChildNodes() {\n    Office.context.document.customXmlParts.getByIdAsync(\n        \"{3BC85265-09D6-4205-B665-8EB239A8B9A1}\", function (result) {\n        var xmlPart = result.value;\n        xmlPart.getNodesAsync('*', function (nodeResults) {\n            for (i = 0; i < nodeResults.value.length; i++) {\n                var node = nodeResults.value[i];\n                node.getNodesAsync('*', function (nodeResults) {\n                    write(nodeResults.value.length + \" childNodes\");\n                });\n            }\n        });\n    });\n}\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
  name: getNodesAsync(xPath, options, callback)
  fullName: getNodesAsync
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getNodesAsync(xPath: string, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<CustomXmlNode[]>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: xPath
      description: <span data-ttu-id="78cb7-126">La expresión de XPath que especifica los nodos a obtener.</span><span class="sxs-lookup"><span data-stu-id="78cb7-126">The XPath expression that specifies the nodes to get.</span></span> <span data-ttu-id="78cb7-127">Obligatorio.</span><span class="sxs-lookup"><span data-stu-id="78cb7-127">Required.</span></span>
      type:
      - string
    - id: options
      description: <span data-ttu-id="78cb7-128">Proporciona una opción para conservar los datos de contexto de cualquier tipo, sin cambios, para su uso en una devolución de llamada.</span><span class="sxs-lookup"><span data-stu-id="78cb7-128">Provides an option for preserving context data of any type, unchanged, for use in a callback.</span></span>
      type:
      - office.Office.AsyncContextOptions
    - id: callback
      description: <span data-ttu-id="78cb7-129">Opcional.</span><span class="sxs-lookup"><span data-stu-id="78cb7-129">Optional.</span></span> <span data-ttu-id="78cb7-130">Una función que se invoca cuando vuelve la devolución de llamada, cuyo único parámetro es del tipo [Office.AsyncResult](xref:office.Office.AsyncResult)<!-- -->.</span><span class="sxs-lookup"><span data-stu-id="78cb7-130">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office.Office.AsyncResult)<!-- -->.</span></span> <span data-ttu-id="78cb7-131">El `value` (propiedad) del resultado es una matriz de objetos CustomXmlNode que representan los nodos especificados por la expresión de XPath que se pasan a la `xPath` parámetro.</span><span class="sxs-lookup"><span data-stu-id="78cb7-131">The `value` property of the result is an array of CustomXmlNode objects that represent the nodes specified by the XPath expression passed to the `xPath` parameter.</span></span>
      type:
      - '(result: AsyncResult<CustomXmlNode[]>) => void'
- uid: office.Office.CustomXmlNode.getNodeValueAsync
  summary: <span data-ttu-id="78cb7-132">Obtiene el valor del nodo.</span><span class="sxs-lookup"><span data-stu-id="78cb7-132">Gets the node value.</span></span>
  remarks: "<table><tr><td><span data-ttu-id=\"78cb7-133\">Conjuntos de requisitos</span><span class=\"sxs-lookup\"><span data-stu-id=\"78cb7-133\">Requirement Sets</span></span></td><td><span data-ttu-id=\"78cb7-134\">CustomXmlParts</span><span class=\"sxs-lookup\"><span data-stu-id=\"78cb7-134\">CustomXmlParts</span></span></td></tr></table>\n#### <span data-ttu-id=\"78cb7-135\">Ejemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"78cb7-135\">Examples</span></span>\n\n```javascript\nfunction showXmlNodeValues() {\n    Office.context.document.customXmlParts.getByIdAsync(\n        \"{3BC85265-09D6-4205-B665-8EB239A8B9A1}\", function (result) {\n        var xmlPart = result.value;\n        xmlPart.getNodesAsync('*/*', function (nodeResults) {\n            for (i = 0; i < nodeResults.value.length; i++) {\n                var node = nodeResults.value[i];\n                node.getNodeValueAsync(function (asyncResult) {\n                    write(asyncResult.value);\n                });\n            }\n        });\n    });\n}\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
  name: getNodeValueAsync(options, callback)
  fullName: getNodeValueAsync
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getNodeValueAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<string>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: options
      description: <span data-ttu-id="78cb7-136">Proporciona una opción para conservar los datos de contexto de cualquier tipo, sin cambios, para su uso en una devolución de llamada.</span><span class="sxs-lookup"><span data-stu-id="78cb7-136">Provides an option for preserving context data of any type, unchanged, for use in a callback.</span></span>
      type:
      - office.Office.AsyncContextOptions
    - id: callback
      description: <span data-ttu-id="78cb7-137">Opcional.</span><span class="sxs-lookup"><span data-stu-id="78cb7-137">Optional.</span></span> <span data-ttu-id="78cb7-138">Una función que se invoca cuando vuelve la devolución de llamada, cuyo único parámetro es del tipo [Office.AsyncResult](xref:office.Office.AsyncResult)<!-- -->.</span><span class="sxs-lookup"><span data-stu-id="78cb7-138">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office.Office.AsyncResult)<!-- -->.</span></span> <span data-ttu-id="78cb7-139">El `value` (propiedad) del resultado es una cadena que contiene el valor del nodo que se hace referencia.</span><span class="sxs-lookup"><span data-stu-id="78cb7-139">The `value` property of the result is a string that contains the value of the referenced node.</span></span>
      type:
      - '(result: AsyncResult<string>) => void'
- uid: office.Office.CustomXmlNode.getTextAsync
  summary: <span data-ttu-id="78cb7-140">Obtiene el texto de un nodo XML en un fragmento XML personalizado.</span><span class="sxs-lookup"><span data-stu-id="78cb7-140">Gets the text of an XML node in a custom XML part.</span></span>
  remarks: "<table><tr><td><span data-ttu-id=\"78cb7-141\">Conjuntos de requisitos</span><span class=\"sxs-lookup\"><span data-stu-id=\"78cb7-141\">Requirement Sets</span></span></td><td><span data-ttu-id=\"78cb7-142\">CustomXmlParts</span><span class=\"sxs-lookup\"><span data-stu-id=\"78cb7-142\">CustomXmlParts</span></span></td></tr></table>\n#### <span data-ttu-id=\"78cb7-143\">Ejemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"78cb7-143\">Examples</span></span>\n\n```javascript\n// Get the built-in core properties XML part by using its ID. This results in a call to Word.\nOffice.context.document.customXmlParts.getByIdAsync(\n    \"{6C3C8BC8-F283-45AE-878A-BAB7291924A1}\", function (getByIdAsyncResult) {\n    \n    // Access the XML part.\n    var xmlPart = getByIdAsyncResult.value;\n    \n    // Add namespaces to the namespace manager. These two calls result in two calls to Word.\n    xmlPart.namespaceManager.addNamespaceAsync(\n        'cp',\n        'http://schemas.openxmlformats.org/package/2006/metadata/core-properties',\n        function () {\n        xmlPart.namespaceManager.addNamespaceAsync(\n            'dc', \n            'http://purl.org/dc/elements/1.1/', \n            function () {\n\n            // Get XML nodes by using an Xpath expression. This results in a call to Word.\n            xmlPart.getNodesAsync(\"/cp:coreProperties/dc:title\", function (getNodesAsyncResult) {\n                \n                // Get the first node returned by using the Xpath expression. \n                var node = getNodesAsyncResult.value[0];\n                \n                // Get the text value of the node and use the asyncContext. This results in a call to Word. \n                // The results are logged to the browser console.\n                node.getTextAsync({asyncContext: \"StateNormal\"}, function (getTextAsyncResult) {\n                  console.log(\"Text of the title element = \" + getTextAsyncResult.value;\n                  console.log(\"The asyncContext value = \" + getTextAsyncResult.asyncContext;\n                });\n            });\n        });\n    });\n});\n```"
  name: getTextAsync(options, callback)
  fullName: getTextAsync
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getTextAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<string>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: options
      description: <span data-ttu-id="78cb7-144">Proporciona una opción para conservar los datos de contexto de cualquier tipo, sin cambios, para su uso en una devolución de llamada.</span><span class="sxs-lookup"><span data-stu-id="78cb7-144">Provides an option for preserving context data of any type, unchanged, for use in a callback.</span></span>
      type:
      - office.Office.AsyncContextOptions
    - id: callback
      description: <span data-ttu-id="78cb7-145">Opcional.</span><span class="sxs-lookup"><span data-stu-id="78cb7-145">Optional.</span></span> <span data-ttu-id="78cb7-146">Una función que se invoca cuando vuelve la devolución de llamada, cuyo único parámetro es del tipo [Office.AsyncResult](xref:office.Office.AsyncResult)<!-- -->.</span><span class="sxs-lookup"><span data-stu-id="78cb7-146">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office.Office.AsyncResult)<!-- -->.</span></span> <span data-ttu-id="78cb7-147">El `value` (propiedad) del resultado es una cadena que contiene el texto interno de los nodos que se hace referencia.</span><span class="sxs-lookup"><span data-stu-id="78cb7-147">The `value` property of the result is a string that contains the inner text of the referenced nodes.</span></span>
      type:
      - '(result: AsyncResult<string>) => void'
- uid: office.Office.CustomXmlNode.getXmlAsync
  summary: <span data-ttu-id="78cb7-148">Obtiene el XML del nodo.</span><span class="sxs-lookup"><span data-stu-id="78cb7-148">Gets the node's XML.</span></span>
  remarks: "<table><tr><td><span data-ttu-id=\"78cb7-149\">Conjuntos de requisitos</span><span class=\"sxs-lookup\"><span data-stu-id=\"78cb7-149\">Requirement Sets</span></span></td><td><span data-ttu-id=\"78cb7-150\">CustomXmlParts</span><span class=\"sxs-lookup\"><span data-stu-id=\"78cb7-150\">CustomXmlParts</span></span></td></tr></table>\n#### <span data-ttu-id=\"78cb7-151\">Ejemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"78cb7-151\">Examples</span></span>\n\n```javascript\nfunction showXmlNodeInnerXml() {\n    Office.context.document.customXmlParts.getByIdAsync(\n        \"{3BC85265-09D6-4205-B665-8EB239A8B9A1}\", function (result) {\n        var xmlPart = result.value;\n        xmlPart.getNodesAsync('*', function (nodeResults) {\n            for (i = 0; i < nodeResults.value.length; i++) {\n                var node = nodeResults.value[i];\n                node.getXmlAsync(function (asyncResult) {\n                    write(asyncResult.value);\n                });\n            }\n        });\n    });\n}\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
  name: getXmlAsync(options, callback)
  fullName: getXmlAsync
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getXmlAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<string>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: options
      description: <span data-ttu-id="78cb7-152">Proporciona una opción para conservar los datos de contexto de cualquier tipo, sin cambios, para su uso en una devolución de llamada.</span><span class="sxs-lookup"><span data-stu-id="78cb7-152">Provides an option for preserving context data of any type, unchanged, for use in a callback.</span></span>
      type:
      - office.Office.AsyncContextOptions
    - id: callback
      description: <span data-ttu-id="78cb7-153">Opcional.</span><span class="sxs-lookup"><span data-stu-id="78cb7-153">Optional.</span></span> <span data-ttu-id="78cb7-154">Una función que se invoca cuando vuelve la devolución de llamada, cuyo único parámetro es del tipo [Office.AsyncResult](xref:office.Office.AsyncResult)<!-- -->.</span><span class="sxs-lookup"><span data-stu-id="78cb7-154">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office.Office.AsyncResult)<!-- -->.</span></span> <span data-ttu-id="78cb7-155">El `value` (propiedad) del resultado es una cadena que contiene el XML del nodo que se hace referencia.</span><span class="sxs-lookup"><span data-stu-id="78cb7-155">The `value` property of the result is a string that contains the XML of the referenced node.</span></span>
      type:
      - '(result: AsyncResult<string>) => void'
- uid: office.Office.CustomXmlNode.namespaceUri
  summary: <span data-ttu-id="78cb7-156">Recupera el GUID de cadena de CustomXMLPart.</span><span class="sxs-lookup"><span data-stu-id="78cb7-156">Retrieves the string GUID of the CustomXMLPart.</span></span>
  remarks: "<table><tr><td><span data-ttu-id=\"78cb7-157\">Conjuntos de requisitos</span><span class=\"sxs-lookup\"><span data-stu-id=\"78cb7-157\">Requirement Sets</span></span></td><td><span data-ttu-id=\"78cb7-158\">CustomXmlParts</span><span class=\"sxs-lookup\"><span data-stu-id=\"78cb7-158\">CustomXmlParts</span></span></td></tr></table>\n#### <span data-ttu-id=\"78cb7-159\">Ejemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"78cb7-159\">Examples</span></span>\n\n```javascript\nfunction showXmlNamespaceUri() {\n    Office.context.document.customXmlParts.getByIdAsync(\n        \"{3BC85265-09D6-4205-B665-8EB239A8B9A1}\", function (result) {\n        var xmlPart = result.value;\n        xmlPart.getNodesAsync('*/*', function (nodeResults) {\n            for (i = 0; i < nodeResults.value.length; i++) {\n                var node = nodeResults.value[i];\n                write(node.namespaceUri);\n            }\n        });\n    });\n}\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
  name: namespaceUri
  fullName: namespaceUri
  langs:
  - typeScript
  type: property
  syntax:
    content: 'namespaceUri: string;'
    return:
      type:
      - string
- uid: office.Office.CustomXmlNode.nodeType
  summary: <span data-ttu-id="78cb7-160">Obtiene el tipo de CustomXMLNode.</span><span class="sxs-lookup"><span data-stu-id="78cb7-160">Gets the type of the CustomXMLNode.</span></span>
  remarks: "<table><tr><td><span data-ttu-id=\"78cb7-161\">Conjuntos de requisitos</span><span class=\"sxs-lookup\"><span data-stu-id=\"78cb7-161\">Requirement Sets</span></span></td><td><span data-ttu-id=\"78cb7-162\">CustomXmlParts</span><span class=\"sxs-lookup\"><span data-stu-id=\"78cb7-162\">CustomXmlParts</span></span></td></tr></table>\n#### <span data-ttu-id=\"78cb7-163\">Ejemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"78cb7-163\">Examples</span></span>\n\n```javascript\nfunction showXmlNodeType() {\n    Office.context.document.customXmlParts.getByIdAsync(\n        \"{3BC85265-09D6-4205-B665-8EB239A8B9A1}\", function (result) {\n        var xmlPart = result.value;\n        xmlPart.getNodesAsync('*/*', function (nodeResults) {\n            for (i = 0; i < nodeResults.value.length; i++) {\n                var node = nodeResults.value[i];\n                write(node.nodeType);\n            }\n        });\n    });\n}\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
  name: nodeType
  fullName: nodeType
  langs:
  - typeScript
  type: property
  syntax:
    content: 'nodeType: string;'
    return:
      type:
      - string
- uid: office.Office.CustomXmlNode.setNodeValueAsync
  summary: <span data-ttu-id="78cb7-164">Establece el valor del nodo.</span><span class="sxs-lookup"><span data-stu-id="78cb7-164">Sets the node value.</span></span>
  remarks: "<table><tr><td><span data-ttu-id=\"78cb7-165\">Conjuntos de requisitos</span><span class=\"sxs-lookup\"><span data-stu-id=\"78cb7-165\">Requirement Sets</span></span></td><td><span data-ttu-id=\"78cb7-166\">CustomXmlParts</span><span class=\"sxs-lookup\"><span data-stu-id=\"78cb7-166\">CustomXmlParts</span></span></td></tr></table>\n#### <span data-ttu-id=\"78cb7-167\">Ejemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"78cb7-167\">Examples</span></span>\n\n```javascript\nfunction setXmlNodeValue() {\n    Office.context.document.customXmlParts.getByIdAsync(\n        \"{3BC85265-09D6-4205-B665-8EB239A8B9A1}\", function (result) {\n        var xmlPart = result.value;\n        xmlPart.getNodesAsync('*/*', function (nodeResults) {\n            for (i = 0; i < nodeResults.value.length; i++) {\n                var node = nodeResults.value[i];\n                write(node);\n                node.setNodeValueAsync(\"item number\" + i, {}, function (result) { });\n            }\n        });\n    });\n}\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
  name: setNodeValueAsync(value, options, callback)
  fullName: setNodeValueAsync
  langs:
  - typeScript
  type: method
  syntax:
    content: 'setNodeValueAsync(value: string, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: value
      description: <span data-ttu-id="78cb7-168">El valor que se establecerá en el nodo</span><span class="sxs-lookup"><span data-stu-id="78cb7-168">The value to be set on the node</span></span>
      type:
      - string
    - id: options
      description: <span data-ttu-id="78cb7-169">Proporciona una opción para conservar los datos de contexto de cualquier tipo, sin cambios, para su uso en una devolución de llamada.</span><span class="sxs-lookup"><span data-stu-id="78cb7-169">Provides an option for preserving context data of any type, unchanged, for use in a callback.</span></span>
      type:
      - office.Office.AsyncContextOptions
    - id: callback
      description: <span data-ttu-id="78cb7-170">Opcional.</span><span class="sxs-lookup"><span data-stu-id="78cb7-170">Optional.</span></span> <span data-ttu-id="78cb7-171">Una función que se invoca cuando vuelve la devolución de llamada, cuyo único parámetro es del tipo [Office.AsyncResult](xref:office.Office.AsyncResult)<!-- -->.</span><span class="sxs-lookup"><span data-stu-id="78cb7-171">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office.Office.AsyncResult)<!-- -->.</span></span>
      type:
      - '(result: AsyncResult<void>) => void'
- uid: office.Office.CustomXmlNode.setTextAsync
  summary: <span data-ttu-id="78cb7-172">Define el texto de un nodo XML de forma asincrónica en un elemento XML personalizado.</span><span class="sxs-lookup"><span data-stu-id="78cb7-172">Asynchronously sets the text of an XML node in a custom XML part.</span></span>
  remarks: "<table><tr><td><span data-ttu-id=\"78cb7-173\">Hosts</span><span class=\"sxs-lookup\"><span data-stu-id=\"78cb7-173\">Hosts</span></span></td><td><span data-ttu-id=\"78cb7-174\">Word</span><span class=\"sxs-lookup\"><span data-stu-id=\"78cb7-174\">Word</span></span></td></tr>\n\n<tr><td><span data-ttu-id=\"78cb7-175\">Conjuntos de requisitos</span><span class=\"sxs-lookup\"><span data-stu-id=\"78cb7-175\">Requirement Sets</span></span></td><td><span data-ttu-id=\"78cb7-176\">CustomXmlParts</span><span class=\"sxs-lookup\"><span data-stu-id=\"78cb7-176\">CustomXmlParts</span></span></td></tr></table>\n#### <span data-ttu-id=\"78cb7-177\">Ejemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"78cb7-177\">Examples</span></span>\n\n```javascript\n// Learn how to set the text value of a node in a custom XML part from the following example.\n\n// Get the built-in core properties XML part by using its ID. This results in a call to Word.\nOffice.context.document.customXmlParts.getByIdAsync(\n    \"{6C3C8BC8-F283-45AE-878A-BAB7291924A1}\",\n    function (getByIdAsyncResult) {\n    \n    // Access the XML part.\n    var xmlPart = getByIdAsyncResult.value;\n    \n    // Add namespaces to the namespace manager. These two calls result in two calls to Word.\n    xmlPart.namespaceManager.addNamespaceAsync(\n        'cp', \n        'http://schemas.openxmlformats.org/package/2006/metadata/core-properties', \n        function () {\n        xmlPart.namespaceManager.addNamespaceAsync(\n            'dc', \n            'http://purl.org/dc/elements/1.1/', \n            function () {\n\n            // Get XML nodes by using an Xpath expression. This results in a call to the host.\n            xmlPart.getNodesAsync(\"/cp:coreProperties/dc:subject\", function (getNodesAsyncResult) {\n                \n                // Get the first node returned by using the Xpath expression.\n                // This will be the subject element in this example.\n                var subjectNode = getNodesAsyncResult.value[0];\n                \n                // Set the text value of the subject node and use the asyncContext. \n                // This results in a call to the host.  The results are logged to the browser console.\n                subjectNode.setTextAsync(\n                    \"newSubject\", \n                    {asyncContext: \"StateNormal\"}, \n                    function (setTextAsyncResult) {\n                        console.log(\"The status of the call: \" + setTextAsyncResult.status);\n                        console.log(\"The asyncContext value = \" + setTextAsyncResult.asyncContext);\n                });\n            });\n        });\n    });\n});\n```"
  name: setTextAsync(text, options, callback)
  fullName: setTextAsync
  langs:
  - typeScript
  type: method
  syntax:
    content: 'setTextAsync(text: string, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: text
      description: <span data-ttu-id="78cb7-p108">Necesario. El valor de texto del nodo XML.</span><span class="sxs-lookup"><span data-stu-id="78cb7-p108">Required. The text value of the XML node.</span></span>
      type:
      - string
    - id: options
      description: <span data-ttu-id="78cb7-180">Proporciona una opción para conservar los datos de contexto de cualquier tipo, sin cambios, para su uso en una devolución de llamada.</span><span class="sxs-lookup"><span data-stu-id="78cb7-180">Provides an option for preserving context data of any type, unchanged, for use in a callback.</span></span>
      type:
      - office.Office.AsyncContextOptions
    - id: callback
      description: <span data-ttu-id="78cb7-181">Opcional.</span><span class="sxs-lookup"><span data-stu-id="78cb7-181">Optional.</span></span> <span data-ttu-id="78cb7-182">Una función que se invoca cuando vuelve la devolución de llamada, cuyo único parámetro es del tipo [Office.AsyncResult](xref:office.Office.AsyncResult)<!-- -->.</span><span class="sxs-lookup"><span data-stu-id="78cb7-182">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office.Office.AsyncResult)<!-- -->.</span></span>
      type:
      - '(result: AsyncResult<void>) => void'
- uid: office.Office.CustomXmlNode.setXmlAsync
  summary: <span data-ttu-id="78cb7-183">Establece el nodo XML.</span><span class="sxs-lookup"><span data-stu-id="78cb7-183">Sets the node XML.</span></span>
  remarks: >-
    <table><tr><td><span data-ttu-id="78cb7-184">Conjuntos de requisitos</span><span class="sxs-lookup"><span data-stu-id="78cb7-184">Requirement Sets</span></span></td><td><span data-ttu-id="78cb7-185">CustomXmlParts</span><span class="sxs-lookup"><span data-stu-id="78cb7-185">CustomXmlParts</span></span></td></tr></table>

    #### <span data-ttu-id="78cb7-186">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="78cb7-186">Examples</span></span>


    ```javascript

    function setXmlNodeInnerXml() {
        Office.context.document.customXmlParts.getByIdAsync(
            "{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
            var xmlPart = result.value;
            xmlPart.getNodesAsync('*', function (nodeResults) {
                for (i = 0; i < nodeResults.value.length; i++) {
                    var node = nodeResults.value[i];
                    node.setXmlAsync("<childNode>" + i + "</childNode>");
                }
            });
        });
    }

    ```
  name: setXmlAsync(xml, options, callback)
  fullName: setXmlAsync
  langs:
  - typeScript
  type: method
  syntax:
    content: 'setXmlAsync(xml: string, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: xml
      description: <span data-ttu-id="78cb7-187">El código XML que se establecerá en el nodo</span><span class="sxs-lookup"><span data-stu-id="78cb7-187">The XML to be set on the node</span></span>
      type:
      - string
    - id: options
      description: <span data-ttu-id="78cb7-188">Proporciona una opción para conservar los datos de contexto de cualquier tipo, sin cambios, para su uso en una devolución de llamada.</span><span class="sxs-lookup"><span data-stu-id="78cb7-188">Provides an option for preserving context data of any type, unchanged, for use in a callback.</span></span>
      type:
      - office.Office.AsyncContextOptions
    - id: callback
      description: <span data-ttu-id="78cb7-189">Opcional.</span><span class="sxs-lookup"><span data-stu-id="78cb7-189">Optional.</span></span> <span data-ttu-id="78cb7-190">Una función que se invoca cuando vuelve la devolución de llamada, cuyo único parámetro es del tipo [Office.AsyncResult](xref:office.Office.AsyncResult)<!-- -->.</span><span class="sxs-lookup"><span data-stu-id="78cb7-190">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office.Office.AsyncResult)<!-- -->.</span></span>
      type:
      - '(result: AsyncResult<void>) => void'
