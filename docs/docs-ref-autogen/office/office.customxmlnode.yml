### YamlMime:UniversalReference
ms.openlocfilehash: 5fcda619495e1ef3f50e53afe6975f410abaaec9
ms.sourcegitcommit: a36161c2113d94680dc68150d024e68bdf0390fa
ms.translationtype: MT
ms.contentlocale: es-ES
ms.lasthandoff: 10/10/2018
ms.locfileid: "25458001"
items:
- uid: office.Office.CustomXmlNode
  summary: Representa un nodo XML en un árbol de un documento.
  remarks: >-
    <table><tr><td>Conjuntos de requisitos</td><td>CustomXmlParts</td></tr></table>


    **Detalles de compatibilidad**


    Una letra mayúscula Y en la siguiente matriz indica que esta interfaz es compatible con la aplicación host de Office correspondiente. Una celda vacía indica que la aplicación host de Office no admite esta interfaz.


    Para obtener más información acerca de los requisitos de aplicación y servidor de host de Office, vea [requisitos para ejecutar Office Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.


    *Hosts compatibles, por plataforma* <table> <tr><th> </th><th> Office para escritorio de Windows </th><th> Office Online (en el explorador) </th><th> Office para iPad </th></tr> <tr><td><strong>Word</strong></td><td> v </td><td> v </td><td> v </td></tr> </table>
  name: Office.CustomXmlNode
  fullName: office.Office.CustomXmlNode
  langs:
  - typeScript
  type: interface
  package: office
  children:
  - office.Office.CustomXmlNode.baseName
  - office.Office.CustomXmlNode.getNodesAsync
  - office.Office.CustomXmlNode.getNodeValueAsync
  - office.Office.CustomXmlNode.getTextAsync
  - office.Office.CustomXmlNode.getXmlAsync
  - office.Office.CustomXmlNode.namespaceUri
  - office.Office.CustomXmlNode.nodeType
  - office.Office.CustomXmlNode.setNodeValueAsync
  - office.Office.CustomXmlNode.setTextAsync
  - office.Office.CustomXmlNode.setXmlAsync
- uid: office.Office.CustomXmlNode.baseName
  summary: Obtiene el nombre base del nodo sin el prefijo de espacio de nombres, si existe alguno.
  remarks: "<table><tr><td>Conjuntos de requisitos</td><td>CustomXmlParts</td></tr></table>\n#### Ejemplos\n\n```javascript\nfunction showXmlNodeBaseNames() {\n    Office.context.document.customXmlParts.getByIdAsync(\n        \"{3BC85265-09D6-4205-B665-8EB239A8B9A1}\", function (result) {\n        var xmlPart = result.value;\n        xmlPart.getNodesAsync('*/*', function (nodeResults) {\n            for (i = 0; i < nodeResults.value.length; i++) {\n                var node = nodeResults.value[i];\n                write(node.baseName);\n            }\n        });\n    });\n}\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
  name: baseName
  fullName: office.Office.CustomXmlNode.baseName
  langs:
  - typeScript
  type: property
  syntax:
    content: 'baseName: string;'
    return:
      type:
      - string
- uid: office.Office.CustomXmlNode.getNodesAsync
  summary: Obtiene los nodos asociados con la expresión XPath.
  remarks: "<table><tr><td>Conjuntos de requisitos</td><td>CustomXmlParts</td></tr></table>\n#### Ejemplos\n\n```javascript\nfunction showXmlChildNodes() {\n    Office.context.document.customXmlParts.getByIdAsync(\n        \"{3BC85265-09D6-4205-B665-8EB239A8B9A1}\", function (result) {\n        var xmlPart = result.value;\n        xmlPart.getNodesAsync('*', function (nodeResults) {\n            for (i = 0; i < nodeResults.value.length; i++) {\n                var node = nodeResults.value[i];\n                node.getNodesAsync('*', function (nodeResults) {\n                    write(nodeResults.value.length + \" childNodes\");\n                });\n            }\n        });\n    });\n}\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
  name: getNodesAsync(xPath, options, callback)
  fullName: office.Office.CustomXmlNode.getNodesAsync
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getNodesAsync(xPath: string, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<CustomXmlNode[]>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: xPath
      description: La expresión de XPath que especifica los nodos a obtener. Obligatorio.
      type:
      - string
    - id: options
      description: Proporciona una opción para conservar los datos de contexto de cualquier tipo, sin cambios, para su uso en una devolución de llamada.
      type:
      - office.Office.AsyncContextOptions
    - id: callback
      description: Opcional. Una función que se invoca cuando vuelve la devolución de llamada, cuyo único parámetro es del tipo [Office.AsyncResult](xref:office.Office.AsyncResult)<!-- -->. El `value` (propiedad) del resultado es una matriz de objetos CustomXmlNode que representan los nodos especificados por la expresión de XPath que se pasan a la `xPath` parámetro.
      type:
      - '(result: AsyncResult<CustomXmlNode[]>) => void'
- uid: office.Office.CustomXmlNode.getNodeValueAsync
  summary: Obtiene el valor del nodo.
  remarks: "<table><tr><td>Conjuntos de requisitos</td><td>CustomXmlParts</td></tr></table>\n#### Ejemplos\n\n```javascript\nfunction showXmlNodeValues() {\n    Office.context.document.customXmlParts.getByIdAsync(\n        \"{3BC85265-09D6-4205-B665-8EB239A8B9A1}\", function (result) {\n        var xmlPart = result.value;\n        xmlPart.getNodesAsync('*/*', function (nodeResults) {\n            for (i = 0; i < nodeResults.value.length; i++) {\n                var node = nodeResults.value[i];\n                node.getNodeValueAsync(function (asyncResult) {\n                    write(asyncResult.value);\n                });\n            }\n        });\n    });\n}\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
  name: getNodeValueAsync(options, callback)
  fullName: office.Office.CustomXmlNode.getNodeValueAsync
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getNodeValueAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<string>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: options
      description: Proporciona una opción para conservar los datos de contexto de cualquier tipo, sin cambios, para su uso en una devolución de llamada.
      type:
      - office.Office.AsyncContextOptions
    - id: callback
      description: Opcional. Una función que se invoca cuando vuelve la devolución de llamada, cuyo único parámetro es del tipo [Office.AsyncResult](xref:office.Office.AsyncResult)<!-- -->. El `value` (propiedad) del resultado es una cadena que contiene el valor del nodo que se hace referencia.
      type:
      - '(result: AsyncResult<string>) => void'
- uid: office.Office.CustomXmlNode.getTextAsync
  summary: Obtiene el texto de un nodo XML en un fragmento XML personalizado.
  remarks: "<table><tr><td>Conjuntos de requisitos</td><td>CustomXmlParts</td></tr></table>\n#### Ejemplos\n\n```javascript\n// Get the built-in core properties XML part by using its ID. This results in a call to Word.\nOffice.context.document.customXmlParts.getByIdAsync(\n    \"{6C3C8BC8-F283-45AE-878A-BAB7291924A1}\", function (getByIdAsyncResult) {\n    \n    // Access the XML part.\n    var xmlPart = getByIdAsyncResult.value;\n    \n    // Add namespaces to the namespace manager. These two calls result in two calls to Word.\n    xmlPart.namespaceManager.addNamespaceAsync(\n        'cp',\n        'http://schemas.openxmlformats.org/package/2006/metadata/core-properties',\n        function () {\n        xmlPart.namespaceManager.addNamespaceAsync(\n            'dc', \n            'http://purl.org/dc/elements/1.1/', \n            function () {\n\n            // Get XML nodes by using an Xpath expression. This results in a call to Word.\n            xmlPart.getNodesAsync(\"/cp:coreProperties/dc:title\", function (getNodesAsyncResult) {\n                \n                // Get the first node returned by using the Xpath expression. \n                var node = getNodesAsyncResult.value[0];\n                \n                // Get the text value of the node and use the asyncContext. This results in a call to Word. \n                // The results are logged to the browser console.\n                node.getTextAsync({asyncContext: \"StateNormal\"}, function (getTextAsyncResult) {\n                  console.log(\"Text of the title element = \" + getTextAsyncResult.value;\n                  console.log(\"The asyncContext value = \" + getTextAsyncResult.asyncContext;\n                });\n            });\n        });\n    });\n});\n```"
  name: getTextAsync(options, callback)
  fullName: office.Office.CustomXmlNode.getTextAsync
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getTextAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<string>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: options
      description: Proporciona una opción para conservar los datos de contexto de cualquier tipo, sin cambios, para su uso en una devolución de llamada.
      type:
      - office.Office.AsyncContextOptions
    - id: callback
      description: Opcional. Una función que se invoca cuando vuelve la devolución de llamada, cuyo único parámetro es del tipo [Office.AsyncResult](xref:office.Office.AsyncResult)<!-- -->. El `value` (propiedad) del resultado es una cadena que contiene el texto interno de los nodos que se hace referencia.
      type:
      - '(result: AsyncResult<string>) => void'
- uid: office.Office.CustomXmlNode.getXmlAsync
  summary: Obtiene el XML del nodo.
  remarks: "<table><tr><td>Conjuntos de requisitos</td><td>CustomXmlParts</td></tr></table>\n#### Ejemplos\n\n```javascript\nfunction showXmlNodeInnerXml() {\n    Office.context.document.customXmlParts.getByIdAsync(\n        \"{3BC85265-09D6-4205-B665-8EB239A8B9A1}\", function (result) {\n        var xmlPart = result.value;\n        xmlPart.getNodesAsync('*', function (nodeResults) {\n            for (i = 0; i < nodeResults.value.length; i++) {\n                var node = nodeResults.value[i];\n                node.getXmlAsync(function (asyncResult) {\n                    write(asyncResult.value);\n                });\n            }\n        });\n    });\n}\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
  name: getXmlAsync(options, callback)
  fullName: office.Office.CustomXmlNode.getXmlAsync
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getXmlAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<string>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: options
      description: Proporciona una opción para conservar los datos de contexto de cualquier tipo, sin cambios, para su uso en una devolución de llamada.
      type:
      - office.Office.AsyncContextOptions
    - id: callback
      description: Opcional. Una función que se invoca cuando vuelve la devolución de llamada, cuyo único parámetro es del tipo [Office.AsyncResult](xref:office.Office.AsyncResult)<!-- -->. El `value` (propiedad) del resultado es una cadena que contiene el XML del nodo que se hace referencia.
      type:
      - '(result: AsyncResult<string>) => void'
- uid: office.Office.CustomXmlNode.namespaceUri
  summary: Recupera el GUID de cadena de CustomXMLPart.
  remarks: "<table><tr><td>Conjuntos de requisitos</td><td>CustomXmlParts</td></tr></table>\n#### Ejemplos\n\n```javascript\nfunction showXmlNamespaceUri() {\n    Office.context.document.customXmlParts.getByIdAsync(\n        \"{3BC85265-09D6-4205-B665-8EB239A8B9A1}\", function (result) {\n        var xmlPart = result.value;\n        xmlPart.getNodesAsync('*/*', function (nodeResults) {\n            for (i = 0; i < nodeResults.value.length; i++) {\n                var node = nodeResults.value[i];\n                write(node.namespaceUri);\n            }\n        });\n    });\n}\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
  name: namespaceUri
  fullName: office.Office.CustomXmlNode.namespaceUri
  langs:
  - typeScript
  type: property
  syntax:
    content: 'namespaceUri: string;'
    return:
      type:
      - string
- uid: office.Office.CustomXmlNode.nodeType
  summary: Obtiene el tipo de CustomXMLNode.
  remarks: "<table><tr><td>Conjuntos de requisitos</td><td>CustomXmlParts</td></tr></table>\n#### Ejemplos\n\n```javascript\nfunction showXmlNodeType() {\n    Office.context.document.customXmlParts.getByIdAsync(\n        \"{3BC85265-09D6-4205-B665-8EB239A8B9A1}\", function (result) {\n        var xmlPart = result.value;\n        xmlPart.getNodesAsync('*/*', function (nodeResults) {\n            for (i = 0; i < nodeResults.value.length; i++) {\n                var node = nodeResults.value[i];\n                write(node.nodeType);\n            }\n        });\n    });\n}\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
  name: nodeType
  fullName: office.Office.CustomXmlNode.nodeType
  langs:
  - typeScript
  type: property
  syntax:
    content: 'nodeType: string;'
    return:
      type:
      - string
- uid: office.Office.CustomXmlNode.setNodeValueAsync
  summary: Establece el valor del nodo.
  remarks: "<table><tr><td>Conjuntos de requisitos</td><td>CustomXmlParts</td></tr></table>\n#### Ejemplos\n\n```javascript\nfunction setXmlNodeValue() {\n    Office.context.document.customXmlParts.getByIdAsync(\n        \"{3BC85265-09D6-4205-B665-8EB239A8B9A1}\", function (result) {\n        var xmlPart = result.value;\n        xmlPart.getNodesAsync('*/*', function (nodeResults) {\n            for (i = 0; i < nodeResults.value.length; i++) {\n                var node = nodeResults.value[i];\n                write(node);\n                node.setNodeValueAsync(\"item number\" + i, {}, function (result) { });\n            }\n        });\n    });\n}\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
  name: setNodeValueAsync(value, options, callback)
  fullName: office.Office.CustomXmlNode.setNodeValueAsync
  langs:
  - typeScript
  type: method
  syntax:
    content: 'setNodeValueAsync(value: string, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: value
      description: El valor que se establecerá en el nodo
      type:
      - string
    - id: options
      description: Proporciona una opción para conservar los datos de contexto de cualquier tipo, sin cambios, para su uso en una devolución de llamada.
      type:
      - office.Office.AsyncContextOptions
    - id: callback
      description: Opcional. Una función que se invoca cuando vuelve la devolución de llamada, cuyo único parámetro es del tipo [Office.AsyncResult](xref:office.Office.AsyncResult)<!-- -->.
      type:
      - '(result: AsyncResult<void>) => void'
- uid: office.Office.CustomXmlNode.setTextAsync
  summary: Define el texto de un nodo XML de forma asincrónica en un elemento XML personalizado.
  remarks: "<table><tr><td>Hosts</td><td>Word</td></tr>\n\n<tr><td>Conjuntos de requisitos</td><td>CustomXmlParts</td></tr></table>\n#### Ejemplos\n\n```javascript\n// Learn how to set the text value of a node in a custom XML part from the following example.\n\n// Get the built-in core properties XML part by using its ID. This results in a call to Word.\nOffice.context.document.customXmlParts.getByIdAsync(\n    \"{6C3C8BC8-F283-45AE-878A-BAB7291924A1}\",\n    function (getByIdAsyncResult) {\n    \n    // Access the XML part.\n    var xmlPart = getByIdAsyncResult.value;\n    \n    // Add namespaces to the namespace manager. These two calls result in two calls to Word.\n    xmlPart.namespaceManager.addNamespaceAsync(\n        'cp', \n        'http://schemas.openxmlformats.org/package/2006/metadata/core-properties', \n        function () {\n        xmlPart.namespaceManager.addNamespaceAsync(\n            'dc', \n            'http://purl.org/dc/elements/1.1/', \n            function () {\n\n            // Get XML nodes by using an Xpath expression. This results in a call to the host.\n            xmlPart.getNodesAsync(\"/cp:coreProperties/dc:subject\", function (getNodesAsyncResult) {\n                \n                // Get the first node returned by using the Xpath expression.\n                // This will be the subject element in this example.\n                var subjectNode = getNodesAsyncResult.value[0];\n                \n                // Set the text value of the subject node and use the asyncContext. \n                // This results in a call to the host.  The results are logged to the browser console.\n                subjectNode.setTextAsync(\n                    \"newSubject\", \n                    {asyncContext: \"StateNormal\"}, \n                    function (setTextAsyncResult) {\n                        console.log(\"The status of the call: \" + setTextAsyncResult.status);\n                        console.log(\"The asyncContext value = \" + setTextAsyncResult.asyncContext);\n                });\n            });\n        });\n    });\n});\n```"
  name: setTextAsync(text, options, callback)
  fullName: office.Office.CustomXmlNode.setTextAsync
  langs:
  - typeScript
  type: method
  syntax:
    content: 'setTextAsync(text: string, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: text
      description: Necesario. El valor de texto del nodo XML.
      type:
      - string
    - id: options
      description: Proporciona una opción para conservar los datos de contexto de cualquier tipo, sin cambios, para su uso en una devolución de llamada.
      type:
      - office.Office.AsyncContextOptions
    - id: callback
      description: Opcional. Una función que se invoca cuando vuelve la devolución de llamada, cuyo único parámetro es del tipo [Office.AsyncResult](xref:office.Office.AsyncResult)<!-- -->.
      type:
      - '(result: AsyncResult<void>) => void'
- uid: office.Office.CustomXmlNode.setXmlAsync
  summary: Establece el nodo XML.
  remarks: >-
    <table><tr><td>Conjuntos de requisitos</td><td>CustomXmlParts</td></tr></table>

    #### Ejemplos


    ```javascript

    function setXmlNodeInnerXml() {
        Office.context.document.customXmlParts.getByIdAsync(
            "{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
            var xmlPart = result.value;
            xmlPart.getNodesAsync('*', function (nodeResults) {
                for (i = 0; i < nodeResults.value.length; i++) {
                    var node = nodeResults.value[i];
                    node.setXmlAsync("<childNode>" + i + "</childNode>");
                }
            });
        });
    }

    ```
  name: setXmlAsync(xml, options, callback)
  fullName: office.Office.CustomXmlNode.setXmlAsync
  langs:
  - typeScript
  type: method
  syntax:
    content: 'setXmlAsync(xml: string, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: xml
      description: El código XML que se establecerá en el nodo
      type:
      - string
    - id: options
      description: Proporciona una opción para conservar los datos de contexto de cualquier tipo, sin cambios, para su uso en una devolución de llamada.
      type:
      - office.Office.AsyncContextOptions
    - id: callback
      description: Opcional. Una función que se invoca cuando vuelve la devolución de llamada, cuyo único parámetro es del tipo [Office.AsyncResult](xref:office.Office.AsyncResult)<!-- -->.
      type:
      - '(result: AsyncResult<void>) => void'
