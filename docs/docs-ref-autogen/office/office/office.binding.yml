### YamlMime:UniversalReference
items:
  - uid: 'office!Office.Binding:interface'
    summary: |-
      Representa un enlace a una sección del documento.

      El objeto Binding expone la funcionalidad que poseen todos los enlaces, independientemente de su tipo.

      No se llama nunca directamente al objeto Binding. Es la clase primaria abstracta de los objetos que representan cada tipo de enlace: [Office. MatrixBinding](xref:office!Office.MatrixBinding:interface)<!-- -->, [Office. TableBinding](xref:office!Office.TableBinding:interface)<!-- -->u [Office. TextBinding](xref:office!Office.TextBinding:interface)<!-- -->. Los tres objetos heredan los métodos getDataAsync y setDataAsync del objeto Binding que le permiten interactuar con los datos en el enlace. También heredan las propiedades id y type para realizar consultas de estos valores de propiedad. Asimismo, los objetos MatrixBinding y TableBinding exponen métodos adicionales para las características específicas de matrices y tablas, como contar el número de filas y columnas.
    remarks: |-
      **Hosts**: Excel, Word

      **Conjuntos de requisitos**:

      - [MatrixBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixbindings)

      - [TableBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablebindings)

      - [TextBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textbindings)
    name: Office.Binding
    fullName: Office.Binding
    langs:
      - typeScript
    type: interface
    package: office!
    children:
      - 'office!Office.Binding#addHandlerAsync:member(1)'
      - 'office!Office.Binding#addHandlerAsync:member(2)'
      - 'office!Office.Binding#document:member'
      - 'office!Office.Binding#getDataAsync:member(1)'
      - 'office!Office.Binding#getDataAsync:member(2)'
      - 'office!Office.Binding#id:member'
      - 'office!Office.Binding#removeHandlerAsync:member(1)'
      - 'office!Office.Binding#removeHandlerAsync:member(2)'
      - 'office!Office.Binding#setDataAsync:member(1)'
      - 'office!Office.Binding#setDataAsync:member(2)'
      - 'office!Office.Binding#type:member'
  - uid: 'office!Office.Binding#addHandlerAsync:member(1)'
    summary: 'Agrega un controlador de eventos al objeto para el [Office. EventType](xref:office!Office.EventType:enum) especificado<!-- -->. EventTypes compatibles `Office.EventType.BindingDataChanged` y`Office.EventType.BindingSelectionChanged`<!-- -->.'
    remarks: |-
      **Conjunto de requisitos**: [BindingEvents](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#bindingevents)

      Puede agregar varios controladores de eventos para el eventType especificado siempre que el nombre de cada función de controlador de eventos sea único.
    name: 'addHandlerAsync(eventType, handler, options, callback)'
    fullName: 'addHandlerAsync(eventType, handler, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addHandlerAsync(eventType: Office.EventType, handler: any, options?: Office.AsyncContextOptions, callback?: (result: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: 'El tipo de evento. Para los enlaces, puede ser `Office.EventType.BindingDataChanged` o`Office.EventType.BindingSelectionChanged`<!-- -->.'
          type:
            - 'office!Office.EventType:enum'
        - id: handler
          description: 'La función del controlador de eventos que se va a agregar, cuyo único parámetro es de tipo [Office. BindingDataChangedEventArgs](xref:office!Office.BindingDataChangedEventArgs:interface) u [Office. BindingSelectionChangedEventArgs.](xref:office!Office.BindingSelectionChangedEventArgs:interface)<!-- -->.'
          type:
            - any
        - id: options
          description: 'Proporciona una opción para conservar los datos de contexto de cualquier tipo, sin cambios, para su uso en una devolución de llamada.'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: 'Opcional. Una función que se invoca cuando se devuelve la devolución de llamada, cuyo único parámetro es de tipo [Office. asyncResult](xref:office!Office.AsyncResult:interface)<!-- -->.'
          type:
            - 'office!Office.Binding#addHandlerAsync~0:complex'
  - uid: 'office!Office.Binding#addHandlerAsync:member(2)'
    summary: 'Agrega un controlador de eventos al objeto para el [Office. EventType](xref:office!Office.EventType:enum) especificado<!-- -->. EventTypes compatibles `Office.EventType.BindingDataChanged` y`Office.EventType.BindingSelectionChanged`<!-- -->.'
    remarks: |-
      **Conjunto de requisitos**: [BindingEvents](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#bindingevents)

      Puede agregar varios controladores de eventos para el eventType especificado siempre que el nombre de cada función de controlador de eventos sea único.

      #### <a name="examples"></a>Ejemplos

      ```javascript
      // The following code sample calls the select method of the Office object to access the binding
      // with ID "MyBinding", and then calls the addHandlerAsync method to add a handler function 
      // for the bindingDataChanged event of that binding.
      function addEventHandlerToBinding() {
          Office.select("bindings#MyBinding").addHandlerAsync(
              Office.EventType.BindingDataChanged, onBindingDataChanged);
      }

      function onBindingDataChanged(eventArgs) {
          write("Data has changed in binding: " + eventArgs.binding.id);
      }

      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }
      ```
      ```javascript
      // To add an event handler for the BindingSelectionChanged event of a binding, 
      // use the addHandlerAsync method of the Binding object.
      // The event handler receives an argument of type BindingSelectionChangedEventArgs.
      function addEventHandlerToBinding() {
          Office.select("bindings#MyBinding").addHandlerAsync(
              Office.EventType.BindingSelectionChanged, onBindingSelectionChanged);
      }

      function onBindingSelectionChanged(eventArgs) {
          write(eventArgs.binding.id + " has been selected.");
      }
      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }
      ```
    name: 'addHandlerAsync(eventType, handler, callback)'
    fullName: 'addHandlerAsync(eventType, handler, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addHandlerAsync(eventType: Office.EventType, handler: any, callback?: (result: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: 'El tipo de evento. Para los enlaces, puede ser `Office.EventType.BindingDataChanged` o`Office.EventType.BindingSelectionChanged`<!-- -->.'
          type:
            - 'office!Office.EventType:enum'
        - id: handler
          description: 'La función del controlador de eventos que se va a agregar, cuyo único parámetro es de tipo [Office. BindingDataChangedEventArgs](xref:office!Office.BindingDataChangedEventArgs:interface) u [Office. BindingSelectionChangedEventArgs.](xref:office!Office.BindingSelectionChangedEventArgs:interface)<!-- -->.'
          type:
            - any
        - id: callback
          description: 'Opcional. Una función que se invoca cuando se devuelve la devolución de llamada, cuyo único parámetro es de tipo [Office. asyncResult](xref:office!Office.AsyncResult:interface)<!-- -->.'
          type:
            - 'office!Office.Binding#addHandlerAsync~1:complex'
  - uid: 'office!Office.Binding#document:member'
    summary: Obtenga el objeto Document asociado al enlace.
    name: document
    fullName: document
    langs:
      - typeScript
    type: property
    syntax:
      content: 'document: Office.Document;'
      return:
        type:
          - 'office!Office.Document:interface'
        description: |-


          #### <a name="examples"></a>Ejemplos

          ```javascript
          Office.context.document.bindings.getByIdAsync("myBinding", function (asyncResult) {
              write(asyncResult.value.document.url);
          });

          // Function that writes to a div with id='message' on the page.
          function write(message){
              document.getElementById('message').innerText += message; 
          }
          ```
  - uid: 'office!Office.Binding#getDataAsync:member(1)'
    summary: Devuelve los datos que contiene el enlace.
    remarks: |-
      **Conjuntos de requisitos**:

      - [HtmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#htmlcoercion) (cuando se usa`Office.CoercionType.Html`<!-- -->)

      - [MatrixBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixbindings)

      - [MatrixCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixcoercion) (cuando se usa`Office.CoercionType.Matrix`<!-- -->)

      - [OoxmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#ooxmlcoercion) (cuando se usa`Office.CoercionType.Ooxml`<!-- -->)

      - [TableBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablebindings)

      - [TableCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablecoercion) (cuando se usa`Office.CoercionType.Table`<!-- -->)

      - [TextBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textbindings)

      - [TextCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textcoercion) (cuando se usa`Office.CoercionType.Text`<!-- -->)

      Cuando se llama desde un MatrixBinding o TableBinding, el método getDataAsync devolverá un subconjunto de los valores enlazados si se especifican los parámetros opcionales startRow, Columnainicio, rowCount y columnCount (y especifican un intervalo contiguo y válido).
    name: 'getDataAsync(options, callback)'
    fullName: 'getDataAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getDataAsync<T>(options?: GetBindingDataOptions, callback?: (result: AsyncResult<T>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: Proporciona opciones para obtener información sobre cómo obtener los datos en un enlace.
          type:
            - 'office!Office.GetBindingDataOptions:interface'
        - id: callback
          description: 'Opcional. Una función que se invoca cuando se devuelve la devolución de llamada, cuyo único parámetro es de tipo [Office. asyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. La `value` propiedad del resultado son los valores en el enlace especificado. Si `coercionType` se especifica el parámetro (y la llamada es correcta), los datos se devuelven en el formato que se describe en el tema de enumeración CoercionType.'
          type:
            - 'office!Office.Binding#getDataAsync~0:complex'
      typeParameters:
        - id: T
  - uid: 'office!Office.Binding#getDataAsync:member(2)'
    summary: Devuelve los datos que contiene el enlace.
    remarks: |-
      **Conjuntos de requisitos**:

      - [HtmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#htmlcoercion) (cuando se usa`Office.CoercionType.Html`<!-- -->)

      - [MatrixBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixbindings)

      - [MatrixCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixcoercion) (cuando se usa`Office.CoercionType.Matrix`<!-- -->)

      - [OoxmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#ooxmlcoercion) (cuando se usa`Office.CoercionType.Ooxml`<!-- -->)

      - [TableBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablebindings)

      - [TableCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablecoercion) (cuando se usa`Office.CoercionType.Table`<!-- -->)

      - [TextBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textbindings)

      - [TextCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textcoercion) (cuando se usa`Office.CoercionType.Text`<!-- -->)

      Cuando se llama desde un MatrixBinding o TableBinding, el método getDataAsync devolverá un subconjunto de los valores enlazados si se especifican los parámetros opcionales startRow, Columnainicio, rowCount y columnCount (y especifican un intervalo contiguo y válido).

      #### <a name="examples"></a>Ejemplos

      ```javascript
      function showBindingData() {
          Office.select("bindings#MyBinding").getDataAsync(function (asyncResult) {
              write(asyncResult.value)
          });
      }

      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }

      // There is an important difference in behavior between using the "table" and "matrix" coercionType with the
      // Binding.getDataAsync method, with respect to data formatted with header rows, as shown in the following
      // two examples. These code examples show event handler functions for the Binding.SelectionChanged event.

      // If you specify the "table" coercionType, the TableData.rows property ( result.value.rows in the following
      // code example) returns an array that contains only the body rows of the table. So, its 0th row will be the
      // first non-header row in the table.
      function selectionChanged(evtArgs) { 
          Office.select("bindings#TableTranslate").getDataAsync(
              { coercionType: 'table', 
                startRow: evtArgs.startRow, 
                startCol: 0, 
                rowCount: 1, 
                columnCount: 1 },  
              function (result) { 
                  if (result.status == 'succeeded') { 
                      write("Image to find: " + result.value.rows[0][0]); 
                  } 
                  else 
                      write(result.error.message); 
          }); 
      }     
      // Function that writes to a div with id='message' on the page. 
      function write(message){ 
          document.getElementById('message').innerText += message; 
      }

      // However, if you specify the "matrix" coercionType, result.value in the following code example returns an array
      // that contains the table header in the 0th row. If the table header contains multiple rows, then these are all
      // included in the result.value matrix as separate rows before the table body rows are included.
      function selectionChanged(evtArgs) { 
          Office.select("bindings#TableTranslate").getDataAsync(
              { coercionType: 'matrix', 
                startRow: evtArgs.startRow, 
                startCol: 0, 
                rowCount: 1, 
                columnCount: 1 },  
              function (result) { 
                  if (result.status == 'succeeded') { 
                      write("Image to find: " + result.value[1][0]); 
                  } 
                  else 
                      write(result.error.message); 
          }); 
      }     
      // Function that writes to a div with id='message' on the page. 
      function write(message){ 
          document.getElementById('message').innerText += message; 
      }
      ```
    name: getDataAsync(callback)
    fullName: getDataAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getDataAsync<T>(callback?: (result: AsyncResult<T>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: 'Opcional. Una función que se invoca cuando se devuelve la devolución de llamada, cuyo único parámetro es de tipo [Office. asyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. La `value` propiedad del resultado son los valores en el enlace especificado. Si `coercionType` se especifica el parámetro (y la llamada es correcta), los datos se devuelven en el formato que se describe en el tema de enumeración CoercionType.'
          type:
            - 'office!Office.Binding#getDataAsync~1:complex'
      typeParameters:
        - id: T
  - uid: 'office!Office.Binding#id:member'
    summary: 'Una cadena que identifica de forma exclusiva A este enlace entre los enlaces que se encuentran en el mismo [Office.Docobjeto ument](xref:office!Office.Document:interface) .'
    name: id
    fullName: id
    langs:
      - typeScript
    type: property
    syntax:
      content: 'id: string;'
      return:
        type:
          - string
        description: |-


          #### <a name="examples"></a>Ejemplos

          ```javascript
          Office.context.document.bindings.getByIdAsync("myBinding", function (asyncResult) {
              write(asyncResult.value.id);
          });

          // Function that writes to a div with id='message' on the page.
          function write(message){
              document.getElementById('message').innerText += message; 
          }
          ```
  - uid: 'office!Office.Binding#removeHandlerAsync:member(1)'
    summary: Quita del enlace el controlador que se especifica para el tipo de evento determinado.
    remarks: '**Conjunto de requisitos**: [BindingEvents](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#bindingevents)'
    name: 'removeHandlerAsync(eventType, options, callback)'
    fullName: 'removeHandlerAsync(eventType, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeHandlerAsync(eventType: Office.EventType, options?: RemoveHandlerOptions, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: 'El tipo de evento. Para los enlaces, puede ser `Office.EventType.BindingDataChanged` o`Office.EventType.BindingSelectionChanged`<!-- -->.'
          type:
            - 'office!Office.EventType:enum'
        - id: options
          description: Proporciona opciones para determinar qué controlador o controladores de eventos se quitan.
          type:
            - 'office!Office.RemoveHandlerOptions:interface'
        - id: callback
          description: 'Opcional. Una función que se invoca cuando se devuelve la devolución de llamada, cuyo único parámetro es de tipo [Office. asyncResult](xref:office!Office.AsyncResult:interface)<!-- -->.'
          type:
            - 'office!Office.Binding#removeHandlerAsync~0:complex'
  - uid: 'office!Office.Binding#removeHandlerAsync:member(2)'
    summary: Quita del enlace el controlador que se especifica para el tipo de evento determinado.
    remarks: |-
      **Conjunto de requisitos**: [BindingEvents](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#bindingevents)

      #### <a name="examples"></a>Ejemplos

      ```javascript
      function removeEventHandlerFromBinding() {
          Office.select("bindings#MyBinding").removeHandlerAsync(
              Office.EventType.BindingDataChanged, {handler:onBindingDataChanged});
      }
      ```
    name: 'removeHandlerAsync(eventType, callback)'
    fullName: 'removeHandlerAsync(eventType, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeHandlerAsync(eventType: Office.EventType, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: 'El tipo de evento. Para los enlaces, puede ser `Office.EventType.BindingDataChanged` o`Office.EventType.BindingSelectionChanged`<!-- -->.'
          type:
            - 'office!Office.EventType:enum'
        - id: callback
          description: 'Opcional. Una función que se invoca cuando se devuelve la devolución de llamada, cuyo único parámetro es de tipo [Office. asyncResult](xref:office!Office.AsyncResult:interface)<!-- -->.'
          type:
            - 'office!Office.Binding#removeHandlerAsync~1:complex'
  - uid: 'office!Office.Binding#setDataAsync:member(1)'
    summary: Escribe datos en la sección enlazada del documento que representa el objeto de enlace que se ha especificado.
    remarks: |-
      **Conjuntos de requisitos**:

      - [HtmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#htmlcoercion) (cuando se usa`Office.CoercionType.Html`<!-- -->)

      - [MatrixBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixbindings)

      - [MatrixCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixcoercion) (cuando se usa`Office.CoercionType.Matrix`<!-- -->)

      - [OoxmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#ooxmlcoercion) (cuando se usa`Office.CoercionType.Ooxml`<!-- -->)

      - [TableBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablebindings)

      - [TableCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablecoercion) (cuando se usa`Office.CoercionType.Table`<!-- -->)

      - [TextBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textbindings)

      - [TextCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textcoercion) (cuando se usa`Office.CoercionType.Text`<!-- -->)

      El valor que se pasa para los datos contiene los datos que se van a escribir en el enlace. El tipo de valor que se pasa determina qué se escribirá, tal como se describe en la tabla siguiente.

      <table> <tr> <th>`data`Value</th> <th>Datos escritos</th> </tr> <tr> <td>Una cadena</td> <td>Se escribirá texto sin formato o cualquier cosa que pueda convertirse en una cadena.</td> </tr> <tr> <td>Una matriz de matrices ("matriz")</td> <td>Tabular data without headers will be written. For example, to write data to three rows in two columns, you can pass an array like this: `[["R1C1", "R1C2"], ["R2C1", "R2C2"], ["R3C1", "R3C2"]]`<!-- -->. Para escribir una sola columna de tres filas, pase una matriz como la siguiente:`[["R1C1"], ["R2C1"], ["R3C1"]]`<!-- -->.</td> </tr> <tr> <td>Un `TableData` objeto</td> <td>Se escribirá una tabla con encabezados.</td> </tr> </table>

      Estas acciones específicas de aplicaciones también se pueden realizar al escribir datos en un enlace. Para Word, los datos especificados se escriben en el enlace de la siguiente manera:

      <table> <tr> <th>`data`Value</th> <th>Datos escritos</th> </tr> <tr> <td>Una cadena</td> <td>Se escribe el texto que se ha especificado.</td> </tr> <tr> <td>Una matriz de matrices ("matriz") o un `TableData` objeto</td> <td>Se escribe una tabla de Word.</td> </tr> <tr> <td>HTML</td> <td>Se escribe el contenido HTML que se ha especificado. Si alguno de los HTML que escribe no es válido, Word no generará un error. Word will write as much of the HTML as it can and will omit any invalid data.</td> </tr> <tr> <td>Office Open XML ("Open XML")</td> <td>Se escribe el contenido XML que se ha especificado.</td> </tr> </table>

      Para Excel, el parámetro data se escribe en el enlace del siguiente modo:

      <table> <tr> <th>`data`Value</th> <th>Datos escritos</th> </tr> <tr> <td>Una cadena</td> <td>El texto especificado se inserta como el valor de la primera celda enlazada. También puede especificar una fórmula válida para agregar esa fórmula a la celda enlazada. Por ejemplo, establecer data en `"=SUM(A1:A5)"` totalizará los valores en el rango especificado. Pero cuando se establece una fórmula en la celda dependiente, después de hacerlo, no se puede leer desde la celda dependiente la fórmula agregada (o cualquier fórmula preexistente). Si llama al método Binding.getDataAsync en la celda enlazada para leer sus datos, el método puede devolver solo los datos que se muestra en la celda (resultado de la fórmula).</td> </tr> <tr> <td>Una matriz de matrices ("matrix") y la forma coincide exactamente con la forma del enlace que se ha especificado</td> <td>Se escribe el conjunto de filas y columnas. También puede especificar una matriz de matrices que contenga fórmulas válidas para agregarlas a las celdas enlazadas. Por ejemplo, al establecer los datos, `[["=SUM(A1:A5)","=AVERAGE(A1:A5)"]]` se agregarán esas dos fórmulas a un enlace que contenga dos celdas. Al igual que cuando se establece una fórmula en una celda enlazada única, no se pueden leer las fórmulas agregadas (ni las fórmulas preexistentes) desde el enlace con el `Binding.getDataAsync` método-it devuelve sólo los datos que se muestran en las celdas enlazadas.</td> </tr> <tr> <td>Un `TableData` objeto y la forma de la tabla coincide con la tabla enlazada.</td> <td>Se escribe el conjunto especificado de filas o encabezados si no se van a sobrescribir otros datos de las celdas contiguas. **Nota**: Si especifica fórmulas en el objeto TableData que pasa para el parámetro *Data* , es posible que no obtenga los resultados esperados debido a la característica "columnas calculadas" de Excel, que duplica automáticamente las fórmulas en una columna. Para solucionar esto cuando quiere escribir *data* que contienen fórmulas a una tabla enlazada, pruebe a especificar los datos como una matriz de matrices (en lugar de un objeto TableData) y especifique *coercionType* como Microsoft.Office.Matrix o "matriz".</td> </tr> </table>

      Para Excel en la web:

      - El número total de celdas en el valor pasado al parámetro Data no puede ser superior a 20.000 en una sola llamada a este método.

      - El número de grupos de formato pasados al parámetro cellFormat no puede ser superior a 100. Un único grupo de formato consta de un conjunto de formato aplicado a un rango de celdas especificado.

      En todos los casos restantes, se devolverá un error.

      El método setDataAsync escribirá los datos en un subconjunto de un enlace de matriz o tabla si se especifican los parámetros opcionales startRow y startColumn, y especifican un rango válido.

      En la función de devolución de llamada que se ha pasado al método setDataAsync, puede usar las propiedades del objeto AsyncResult para devolver la siguiente información.

      <table> <tr> <th>Propiedad</th> <th>Usar para...</th> </tr> <tr> <td>AsyncResult.value</td> <td>Devuelve siempre undefined porque no hay ningún objeto o dato que recuperar.</td> </tr> <tr> <td>AsyncResult.status</td> <td>Determinar si la operación se ha completado correctamente o no.</td> </tr> <tr> <td>AsyncResult.error</td> <td>Tener acceso a un objeto Error que proporcione información sobre el error si no se ha completado correctamente la operación.</td> </tr> <tr> <td>AsyncResult.asyncContext</td> <td>Un elemento de cualquier tipo definido por el usuario que se devuelve en el objeto AsyncResult sin sufrir modificaciones.</td> </tr> </table>
    name: 'setDataAsync(data, options, callback)'
    fullName: 'setDataAsync(data, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setDataAsync(data: TableData | any, options?: SetBindingDataOptions, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: data
          description: |-
            Los datos que se definirán en la selección actual. Posibles tipos de datos por host:

            String: Excel en la web y Windows, y Word en la web y solo Windows

            matriz de matrices: solo en Excel y Word

            [Office. TableData](xref:office!Office.TableData:class)<!-- -->: Solo en Excel y Word

            HTML: Word en la web y solo en Windows

            Office Open XML: solo en Word
          type:
            - 'office!Office.Binding#setDataAsync~0:complex'
        - id: options
          description: Proporciona opciones para establecer los datos en un enlace.
          type:
            - 'office!Office.SetBindingDataOptions:interface'
        - id: callback
          description: 'Opcional. Una función que se invoca cuando se devuelve la devolución de llamada, cuyo único parámetro es de tipo [Office. asyncResult](xref:office!Office.AsyncResult:interface)<!-- -->.'
          type:
            - 'office!Office.Binding#setDataAsync~1:complex'
  - uid: 'office!Office.Binding#setDataAsync:member(2)'
    summary: Escribe datos en la sección enlazada del documento que representa el objeto de enlace que se ha especificado.
    remarks: |-
      **Conjuntos de requisitos**:

      - [HtmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#htmlcoercion) (cuando se usa`Office.CoercionType.Html`<!-- -->)

      - [MatrixBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixbindings)

      - [MatrixCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixcoercion) (cuando se usa`Office.CoercionType.Matrix`<!-- -->)

      - [OoxmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#ooxmlcoercion) (cuando se usa`Office.CoercionType.Ooxml`<!-- -->)

      - [TableBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablebindings)

      - [TableCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablecoercion) (cuando se usa`Office.CoercionType.Table`<!-- -->)

      - [TextBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textbindings)

      - [TextCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textcoercion) (cuando se usa`Office.CoercionType.Text`<!-- -->)

      El valor que se pasa para los datos contiene los datos que se van a escribir en el enlace. El tipo de valor que se pasa determina qué se escribirá, tal como se describe en la tabla siguiente.

      <table> <tr> <th>`data`Value</th> <th>Datos escritos</th> </tr> <tr> <td>Una cadena</td> <td>Se escribirá texto sin formato o cualquier cosa que pueda convertirse en una cadena.</td> </tr> <tr> <td>Una matriz de matrices ("matriz")</td> <td>Tabular data without headers will be written. For example, to write data to three rows in two columns, you can pass an array like this: `[["R1C1", "R1C2"], ["R2C1", "R2C2"], ["R3C1", "R3C2"]]`<!-- -->. Para escribir una sola columna de tres filas, pase una matriz como la siguiente:`[["R1C1"], ["R2C1"], ["R3C1"]]`<!-- -->.</td> </tr> <tr> <td>Un `TableData` objeto</td> <td>Se escribirá una tabla con encabezados.</td> </tr> </table>

      Estas acciones específicas de aplicaciones también se pueden realizar al escribir datos en un enlace. Para Word, los datos especificados se escriben en el enlace de la siguiente manera:

      <table> <tr> <th>`data`Value</th> <th>Datos escritos</th> </tr> <tr> <td>Una cadena</td> <td>Se escribe el texto que se ha especificado.</td> </tr> <tr> <td>Una matriz de matrices ("matriz") o un `TableData` objeto</td> <td>Se escribe una tabla de Word.</td> </tr> <tr> <td>HTML</td> <td>Se escribe el contenido HTML que se ha especificado. Si alguno de los HTML que escribe no es válido, Word no generará un error. Word will write as much of the HTML as it can and will omit any invalid data.</td> </tr> <tr> <td>Office Open XML ("Open XML")</td> <td>Se escribe el contenido XML que se ha especificado.</td> </tr> </table>

      Para Excel, el parámetro data se escribe en el enlace del siguiente modo:

      <table> <tr> <th>`data`Value</th> <th>Datos escritos</th> </tr> <tr> <td>Una cadena</td> <td>El texto especificado se inserta como el valor de la primera celda enlazada. También puede especificar una fórmula válida para agregar esa fórmula a la celda enlazada. Por ejemplo, establecer data en `"=SUM(A1:A5)"` totalizará los valores en el rango especificado. Pero cuando se establece una fórmula en la celda dependiente, después de hacerlo, no se puede leer desde la celda dependiente la fórmula agregada (o cualquier fórmula preexistente). Si llama al método Binding.getDataAsync en la celda enlazada para leer sus datos, el método puede devolver solo los datos que se muestra en la celda (resultado de la fórmula).</td> </tr> <tr> <td>Una matriz de matrices ("matrix") y la forma coincide exactamente con la forma del enlace que se ha especificado</td> <td>Se escribe el conjunto de filas y columnas. También puede especificar una matriz de matrices que contenga fórmulas válidas para agregarlas a las celdas enlazadas. Por ejemplo, al establecer los datos, `[["=SUM(A1:A5)","=AVERAGE(A1:A5)"]]` se agregarán esas dos fórmulas a un enlace que contenga dos celdas. Al igual que cuando se establece una fórmula en una celda enlazada única, no se pueden leer las fórmulas agregadas (ni las fórmulas preexistentes) desde el enlace con el `Binding.getDataAsync` método-it devuelve sólo los datos que se muestran en las celdas enlazadas.</td> </tr> <tr> <td>Un `TableData` objeto y la forma de la tabla coincide con la tabla enlazada.</td> <td>Se escribe el conjunto especificado de filas o encabezados si no se van a sobrescribir otros datos de las celdas contiguas. **Nota**: Si especifica fórmulas en el objeto TableData que pasa para el parámetro *Data* , es posible que no obtenga los resultados esperados debido a la característica "columnas calculadas" de Excel, que duplica automáticamente las fórmulas en una columna. Para solucionar esto cuando quiere escribir *data* que contienen fórmulas a una tabla enlazada, pruebe a especificar los datos como una matriz de matrices (en lugar de un objeto TableData) y especifique *coercionType* como Microsoft.Office.Matrix o "matriz".</td> </tr> </table>

      Para Excel en la web:

      - El número total de celdas en el valor pasado al parámetro Data no puede ser superior a 20.000 en una sola llamada a este método.

      - El número de grupos de formato pasados al parámetro cellFormat no puede ser superior a 100. Un único grupo de formato consta de un conjunto de formato aplicado a un rango de celdas especificado.

      En todos los casos restantes, se devolverá un error.

      El método setDataAsync escribirá los datos en un subconjunto de un enlace de matriz o tabla si se especifican los parámetros opcionales startRow y startColumn, y especifican un rango válido.

      En la función de devolución de llamada que se ha pasado al método setDataAsync, puede usar las propiedades del objeto AsyncResult para devolver la siguiente información.

      <table> <tr> <th>Propiedad</th> <th>Usar para...</th> </tr> <tr> <td>AsyncResult.value</td> <td>Devuelve siempre undefined porque no hay ningún objeto o dato que recuperar.</td> </tr> <tr> <td>AsyncResult.status</td> <td>Determinar si la operación se ha completado correctamente o no.</td> </tr> <tr> <td>AsyncResult.error</td> <td>Tener acceso a un objeto Error que proporcione información sobre el error si no se ha completado correctamente la operación.</td> </tr> <tr> <td>AsyncResult.asyncContext</td> <td>Un elemento de cualquier tipo definido por el usuario que se devuelve en el objeto AsyncResult sin sufrir modificaciones.</td> </tr> </table>

      #### <a name="examples"></a>Ejemplos

      ```javascript
      function setBindingData() {
          Office.select("bindings#MyBinding").setDataAsync('Hello World!', function (asyncResult) { });
      }

      // Specifying the optional coercionType parameter lets you specify the kind of data you want to write to a binding.
      // For example, in Word if you want to write HTML to a text binding, you can specify the coercionType parameter 
      // as "html" as shown in the following example, which uses HTML <b> tags to make "Hello" bold.
      function writeHtmlData() {
          Office.select("bindings#myBinding").setDataAsync(
              "<b>Hello</b> World!", {coercionType: "html"}, function (asyncResult) {
              if (asyncResult.status == "failed") {
                  write('Error: ' + asyncResult.error.message);
              }
          });
      }

      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }

      // In this example, the call to setDataAsync passes the data parameter as an array of arrays
      // (to create a single column of three rows), and specifies the data structure with the 
      // coercionType parameter as a "matrix".
      function writeBoundDataMatrix() {
          Office.select("bindings#myBinding").setDataAsync(
              [['Berlin'],['Munich'],['Duisburg']],{ coercionType: "matrix" }, function (asyncResult) {
              if (asyncResult.status == "failed") {
                  write('Error: ' + asyncResult.error.message);
              } else {
                  write('Bound data: ' + asyncResult.value);
              }
          });
      }
      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }

      // In the writeBoundDataTable function in this example, the call to setDataAsync passes the data parameter 
      // as a TableData object (to write three columns and three rows), and specifies the data structure
      // with the coercionType parameter as a "table".

      // In the updateTableData function, the call to setDataAsync again passes the data parameter as a TableData object,
      // but as a single column with a new header and three rows, to update the values in the last column 
      // of the table created with the writeBoundDataTable function. The optional zero-based startColumn parameter 
      // is specified as 2 to replace the values in the third column of the table.
      function writeBoundDataTable() {
          // Create a TableData object.
          var myTable = new Office.TableData();
          myTable.headers = ['First Name', 'Last Name', 'Grade'];
          myTable.rows = [['Kim', 'Abercrombie', 'A'], ['Junmin','Hao', 'C'],['Toni','Poe','B']];

          // Set myTable in the binding.
          Office.select("bindings#myBinding").setDataAsync(myTable, { coercionType: "table" }, 
              function (asyncResult) {
                  if (asyncResult.status == Office.AsyncResultStatus.Failed) {
                      write('Error: '+ asyncResult.error.message);
              } else {
                  write('Bound data: ' + asyncResult.value);
              }
          });
      }

      // Replace last column with different data.
      function updateTableData() {
          var newTable = new Office.TableData();
          newTable.headers = ["Gender"];
          newTable.rows = [["M"],["M"],["F"]];
          Office.select("bindings#myBinding").setDataAsync(newTable, { coercionType: "table", startColumn:2 }, 
              function (asyncResult) {
                  if (asyncResult.status == Office.AsyncResultStatus.Failed) {
                      write('Error: '+ asyncResult.error.message);
              } else {
                  write('Bound data: ' + asyncResult.value);
              }     
          });   
      }

      // In this example, the following call passes two formatting groups to cellFormat.
      Office.select("bindings#myBinding").setDataAsync([['Berlin'],['Munich'],['Duisburg']],
        {cellFormat:[{cells: {row: 1}, format: {fontColor: "yellow"}}, 
            {cells: {row: 3, column: 4}, format: {borderColor: "white", fontStyle: "bold"}}]}, 
        function (asyncResult){});
      ```
    name: 'setDataAsync(data, callback)'
    fullName: 'setDataAsync(data, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setDataAsync(data: TableData | any, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: data
          description: |-
            Los datos que se definirán en la selección actual. Posibles tipos de datos por host:

            String: Excel en la web y Windows, y Word en la web y solo Windows

            matriz de matrices: solo en Excel y Word

            `TableData`<!-- -->: Solo en Excel y Word

            HTML: Word en la web y solo en Windows

            Office Open XML: solo en Word
          type:
            - 'office!Office.Binding#setDataAsync~2:complex'
        - id: callback
          description: 'Opcional. Una función que se invoca cuando se devuelve la devolución de llamada, cuyo único parámetro es de tipo [Office. asyncResult](xref:office!Office.AsyncResult:interface)<!-- -->.'
          type:
            - 'office!Office.Binding#setDataAsync~3:complex'
  - uid: 'office!Office.Binding#type:member'
    summary: Obtiene el tipo del enlace.
    name: type
    fullName: type
    langs:
      - typeScript
    type: property
    syntax:
      content: 'type: Office.BindingType;'
      return:
        type:
          - 'office!Office.BindingType:enum'
        description: |-


          #### <a name="examples"></a>Ejemplos

          ```javascript
          Office.context.document.bindings.getByIdAsync("MyBinding", function (asyncResult) { 
              write(asyncResult.value.type); 
          }) 

          // Function that writes to a div with id='message' on the page. 
          function write(message){ 
              document.getElementById('message').innerText += message;  
          }
          ```
references:
  - uid: 'office!Office.EventType:enum'
    name: Office.EventType
  - uid: 'office!Office.AsyncContextOptions:interface'
    name: Office.AsyncContextOptions
  - uid: 'office!Office.Binding#addHandlerAsync~0:complex'
    name: '(result: Office.AsyncResult<void>) => void'
    fullName: '(result: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'office!Office.Binding#addHandlerAsync~1:complex'
    name: '(result: Office.AsyncResult<void>) => void'
    fullName: '(result: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'office!Office.Document:interface'
    name: Office.Document
  - uid: 'office!Office.GetBindingDataOptions:interface'
    name: GetBindingDataOptions
  - uid: 'office!Office.Binding#getDataAsync~0:complex'
    name: '(result: AsyncResult<T>) => void'
    fullName: '(result: Office.AsyncResult<T>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <T>) => void
        fullName: <T>) => void
  - uid: 'office!Office.Binding#getDataAsync~1:complex'
    name: '(result: AsyncResult<T>) => void'
    fullName: '(result: Office.AsyncResult<T>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <T>) => void
        fullName: <T>) => void
  - uid: 'office!Office.RemoveHandlerOptions:interface'
    name: RemoveHandlerOptions
  - uid: 'office!Office.Binding#removeHandlerAsync~0:complex'
    name: '(result: AsyncResult<void>) => void'
    fullName: '(result: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'office!Office.Binding#removeHandlerAsync~1:complex'
    name: '(result: AsyncResult<void>) => void'
    fullName: '(result: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'office!Office.Binding#setDataAsync~0:complex'
    name: TableData | any
    fullName: Office.TableData | any
    spec.typeScript:
      - uid: 'office!Office.TableData:class'
        name: TableData
        fullName: Office.TableData
      - name: ' | any'
        fullName: ' | any'
  - uid: 'office!Office.SetBindingDataOptions:interface'
    name: SetBindingDataOptions
  - uid: 'office!Office.Binding#setDataAsync~1:complex'
    name: '(result: AsyncResult<void>) => void'
    fullName: '(result: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'office!Office.Binding#setDataAsync~2:complex'
    name: TableData | any
    fullName: Office.TableData | any
    spec.typeScript:
      - uid: 'office!Office.TableData:class'
        name: TableData
        fullName: Office.TableData
      - name: ' | any'
        fullName: ' | any'
  - uid: 'office!Office.Binding#setDataAsync~3:complex'
    name: '(result: AsyncResult<void>) => void'
    fullName: '(result: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'office!Office.BindingType:enum'
    name: Office.BindingType