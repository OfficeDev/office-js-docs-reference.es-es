### YamlMime:UniversalReference
items:
  - uid: office.OfficeExtension.LoadOption
    summary: <span data-ttu-id="db5e4-101">Especifica qué propiedades de un objeto deben cargarse.</span><span class="sxs-lookup"><span data-stu-id="db5e4-101">Specifies which properties of an object should be loaded.</span></span> <span data-ttu-id="db5e4-102">Esta carga se produce cuando se ejecuta el método Sync ().</span><span class="sxs-lookup"><span data-stu-id="db5e4-102">This load happens when the sync() method is executed.</span></span> <span data-ttu-id="db5e4-103">Esto sincroniza los Estados entre los objetos de Office y los objetos proxy de JavaScript correspondientes.</span><span class="sxs-lookup"><span data-stu-id="db5e4-103">This synchronizes the states between Office objects and corresponding JavaScript proxy objects.</span></span>
    remarks: |-
      <span data-ttu-id="db5e4-104">Para Word, el método preferido para especificar las propiedades y la información de paginación es mediante un literal de cadena.</span><span class="sxs-lookup"><span data-stu-id="db5e4-104">For Word, the preferred method for specifying the properties and paging information is by using a string literal.</span></span> <span data-ttu-id="db5e4-105">Los dos primeros ejemplos muestran la forma preferida para solicitar las propiedades de tamaño de fuente y texto de los párrafos en una colección de párrafo:</span><span class="sxs-lookup"><span data-stu-id="db5e4-105">The first two examples show the preferred way to request the text and font size properties for paragraphs in a paragraph collection:</span></span>

      `context.load(paragraphs, 'text, font/size');`

      `paragraphs.load('text, font/size');`

      <span data-ttu-id="db5e4-106">Aquí hay un ejemplo parecido que usa la notación de objetos (incluye la paginación):</span><span class="sxs-lookup"><span data-stu-id="db5e4-106">Here is a similar example using object notation (includes paging):</span></span>

      `context.load(paragraphs, {select: 'text, font/size', expand: 'font', top: 50, skip: 0});`

      `paragraphs.load({select: 'text, font/size', expand: 'font', top: 50, skip: 0});`

      <span data-ttu-id="db5e4-107">Tenga en cuenta que si no especificamos las propiedades específicas del objeto de fuente en la instrucción Select, la instrucción Expand indicaría que están cargadas todas las propiedades de fuente.</span><span class="sxs-lookup"><span data-stu-id="db5e4-107">Note that if we don't specify the specific properties on the font object in the select statement, the expand statement by itself would indicate that all of the font properties are loaded.</span></span>

      #### <a name="examples"></a><span data-ttu-id="db5e4-108">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="db5e4-108">Examples</span></span>

      ```javascript
      // This example shows how to get the paragraphs in the Word document
      // along with their text and font size properties.

      // Run a batch operation against the Word object model.
      Word.run(function (context) {
          // Create a proxy object for the paragraphs collection.
          var paragraphs = context.document.body.paragraphs;

          // Queue a commmand to load the text and font properties.
          // It is best practice to always specify the property set.
          // Otherwise, all properties are returned on the object.
          context.load(paragraphs, 'text, font/size');

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          return context.sync().then(function () {
              // Insert code that works with the paragraphs loaded by context.load().
          })
      })
      .catch(function (error) {
          console.log('Error: ' + JSON.stringify(error));
          if (error instanceof OfficeExtension.Error) {
              console.log('Debug info: ' + JSON.stringify(error.debugInfo));
          }
      });
      ```
    name: OfficeExtension.LoadOption
    fullName: OfficeExtension.LoadOption
    langs:
      - typeScript
    type: interface
    package: office
    children:
      - office.OfficeExtension.LoadOption.expand
      - office.OfficeExtension.LoadOption.select
      - office.OfficeExtension.LoadOption.skip
      - office.OfficeExtension.LoadOption.top
  - uid: office.OfficeExtension.LoadOption.expand
    summary: '<span data-ttu-id="db5e4-109">Una cadena delimitada por comas o una matriz de cadenas que especifica las propiedades de navegación que se deben cargar.</span><span class="sxs-lookup"><span data-stu-id="db5e4-109">A comma-delimited string, or array of strings, that specifies the navigation properties to load.</span></span>'
    name: expand
    fullName: expand
    langs:
      - typeScript
    type: property
    syntax:
      content: 'expand?: string | string[];'
      return:
        type:
          - 'string | string[]'
  - uid: office.OfficeExtension.LoadOption.select
    summary: '<span data-ttu-id="db5e4-110">Una cadena delimitada por comas o una matriz de cadenas que especifica las propiedades que se van a cargar.</span><span class="sxs-lookup"><span data-stu-id="db5e4-110">A comma-delimited string, or array of strings, that specifies the properties to load.</span></span>'
    name: select
    fullName: select
    langs:
      - typeScript
    type: property
    syntax:
      content: 'select?: string | string[];'
      return:
        type:
          - 'string | string[]'
  - uid: office.OfficeExtension.LoadOption.skip
    summary: '<span data-ttu-id="db5e4-111">Solo se puede usar en tipos de colección.</span><span class="sxs-lookup"><span data-stu-id="db5e4-111">Only usable on collection types.</span></span> <span data-ttu-id="db5e4-112">Especifica el número de elementos de la colección que se omitirán y no se incluirán en el resultado.</span><span class="sxs-lookup"><span data-stu-id="db5e4-112">Specifies the number of items in the collection that are to be skipped and not included in the result.</span></span> <span data-ttu-id="db5e4-113">Si se especifica Top, el conjunto de resultados se iniciará después de omitir el número de elementos especificado.</span><span class="sxs-lookup"><span data-stu-id="db5e4-113">If top is specified, the result set will start after skipping the specified number of items.</span></span>'
    name: skip
    fullName: skip
    langs:
      - typeScript
    type: property
    syntax:
      content: 'skip?: number;'
      return:
        type:
          - number
  - uid: office.OfficeExtension.LoadOption.top
    summary: <span data-ttu-id="db5e4-114">Solo se puede usar en tipos de colección.</span><span class="sxs-lookup"><span data-stu-id="db5e4-114">Only usable on collection types.</span></span> <span data-ttu-id="db5e4-115">Especifica el número máximo de elementos de colección que pueden incluirse en el resultado.</span><span class="sxs-lookup"><span data-stu-id="db5e4-115">Specifies the maximum number of collection items that can be included in the result.</span></span>
    name: top
    fullName: top
    langs:
      - typeScript
    type: property
    syntax:
      content: 'top?: number;'
      return:
        type:
          - number
        description: |-


          #### <a name="examples"></a><span data-ttu-id="db5e4-116">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="db5e4-116">Examples</span></span>

          ```javascript
          // This OneNote example shows how to get the page title and indentation level
          // of the top five pages in the current section.
          OneNote.run(function (context) {
              // Get the pages in the current section.
              var pages = context.application.getActiveSection().pages;

              // Queue a command to load the pages.           
              pages.load({ "select":"title,pageLevel", "top":5, "skip":0 });
              return context.sync()
                  .then(function() {
                      // Iterate through the collection of pages.    
                      $.each(pages.items, function(index, page) {
                          // Show some properties.
                          console.log("Page title: " + page.title);
                          console.log("Indentation level: " + page.pageLevel);
                      });
                  }).catch(function(error) {
                      console.log("Error: " + error);
                      if (error instanceof OfficeExtension.Error) {
                          console.log("Debug info: " + JSON.stringify(error.debugInfo));
                      }
                  })
              });
          ```