### YamlMime:UniversalReference
items:
  - uid: office.Office.Document
    summary: Una clase abstracta que representa el documento con el que interactúa el complemento.
    remarks: '**Hosts**: Excel, PowerPoint, Project y Word'
    name: Office.Document
    fullName: Office.Document
    langs:
      - typeScript
    type: interface
    package: office
    children:
      - office.Office.Document.addHandlerAsync
      - office.Office.Document.addHandlerAsync_1
      - office.Office.Document.getActiveViewAsync
      - office.Office.Document.getActiveViewAsync_1
      - office.Office.Document.getFileAsync
      - office.Office.Document.getFileAsync_1
      - office.Office.Document.getFilePropertiesAsync
      - office.Office.Document.getFilePropertiesAsync_1
      - office.Office.Document.getMaxResourceIndexAsync
      - office.Office.Document.getMaxResourceIndexAsync_1
      - office.Office.Document.getMaxTaskIndexAsync
      - office.Office.Document.getMaxTaskIndexAsync_1
      - office.Office.Document.getProjectFieldAsync
      - office.Office.Document.getProjectFieldAsync_1
      - office.Office.Document.getResourceByIndexAsync
      - office.Office.Document.getResourceByIndexAsync_1
      - office.Office.Document.getResourceFieldAsync
      - office.Office.Document.getResourceFieldAsync_1
      - office.Office.Document.getSelectedDataAsync
      - office.Office.Document.getSelectedDataAsync_1
      - office.Office.Document.getSelectedResourceAsync
      - office.Office.Document.getSelectedResourceAsync_1
      - office.Office.Document.getSelectedTaskAsync
      - office.Office.Document.getSelectedTaskAsync_1
      - office.Office.Document.getSelectedViewAsync
      - office.Office.Document.getSelectedViewAsync_1
      - office.Office.Document.getTaskAsync
      - office.Office.Document.getTaskAsync_1
      - office.Office.Document.getTaskByIndexAsync
      - office.Office.Document.getTaskByIndexAsync_1
      - office.Office.Document.getTaskFieldAsync
      - office.Office.Document.getTaskFieldAsync_1
      - office.Office.Document.getWSSUrlAsync
      - office.Office.Document.getWSSUrlAsync_1
      - office.Office.Document.goToByIdAsync
      - office.Office.Document.goToByIdAsync_1
      - office.Office.Document.removeHandlerAsync
      - office.Office.Document.removeHandlerAsync_1
      - office.Office.Document.setResourceFieldAsync
      - office.Office.Document.setResourceFieldAsync_1
      - office.Office.Document.setSelectedDataAsync
      - office.Office.Document.setSelectedDataAsync_1
      - office.Office.Document.setTaskFieldAsync
      - office.Office.Document.setTaskFieldAsync_1
      - office.Office.Document.bindings
      - office.Office.Document.customXmlParts
      - office.Office.Document.mode
      - office.Office.Document.settings
      - office.Office.Document.url
  - uid: office.Office.Document.addHandlerAsync
    summary: Agrega un controlador de eventos para un evento de objeto de documento.
    remarks: |-
      **Conjunto de requisitos**: [DocumentEvents](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#documentevents)

      Puede agregar varios controladores de eventos para el eventType especificado siempre que el nombre de cada función de controlador de eventos sea único.
    name: 'addHandlerAsync(eventType, handler, options, callback)'
    fullName: 'addHandlerAsync(eventType, handler, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addHandlerAsync(eventType: Office.EventType, handler: any, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: 'Para un evento de objeto Document, el parámetro eventType se puede especificar `Office.EventType.Document.SelectionChanged` como o`Office.EventType.Document.ActiveViewChanged`<!-- -->o el valor de texto correspondiente de esta enumeración.'
          type:
            - office.Office.EventType
        - id: handler
          description: 'La función del controlador de eventos que se va a agregar, cuyo único parámetro es de tipo [Office. propiedad documentselectionchangedeventargs](xref:office.Office.DocumentSelectionChangedEventArgs)<!-- -->. Necesario.'
          type:
            - any
        - id: options
          description: 'Proporciona una opción para conservar los datos de contexto de cualquier tipo, sin cambios, para su uso en una devolución de llamada.'
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: 'Opcional. Una función que se invoca cuando se devuelve la devolución de llamada, cuyo único parámetro es de tipo [Office. asyncResult](xref:office.Office.AsyncResult)<!-- -->.'
          type:
            - '(result: AsyncResult<void>) => void'
  - uid: office.Office.Document.addHandlerAsync_1
    summary: Agrega un controlador de eventos para un evento de objeto de documento.
    remarks: |-
      **Conjunto de requisitos**: [DocumentEvents](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#documentevents)

      Puede agregar varios controladores de eventos para el eventType especificado siempre que el nombre de cada función de controlador de eventos sea único.

      #### <a name="examples"></a>Ejemplos

      ```javascript
      // The following example adds an event handler for the SelectionChanged event of a document
      function addSelectionChangedEventHandler() {
          Office.context.document.addHandlerAsync(Office.EventType.DocumentSelectionChanged, MyHandler);
      }

      function MyHandler(eventArgs) {
          write('Event raised: ' + eventArgs.type);
          doSomethingWithDocument(eventArgs.document);
      }

      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }
      ```
      ```javascript
      // The following code example adds a handler for the ResourceSelectionChanged event.
      // When the resource selection changes in the document, it gets the GUID of the selected resource.
      // The example assumes your add-in has a reference to the jQuery library and that the
      // following page control is defined in the content div in the page body:
      // <span id="message"></span>

      (function () {
          "use strict";

          // The initialize function must be run each time a new page is loaded.
          Office.initialize = function (reason) {
              $(document).ready(function () {

                  // After the DOM is loaded, add-in-specific code can run.
                  Office.context.document.addHandlerAsync(
                      Office.EventType.ResourceSelectionChanged,
                      getResourceGuid);
              });
          };

          // Get the GUID of the selected resource and display it in the add-in.
          function getResourceGuid() {
              Office.context.document.getSelectedResourceAsync(
                  function (result) {
                      if (result.status === Office.AsyncResultStatus.Failed) {
                          onError(result.error);
                      }
                      else {
                          $('#message').html(result.value);
                      }
                  }
              );
          }

          function onError(error) {
              $('#message').html(error.name + ' ' + error.code + ': ' + error.message);
          }
      })();

      // For a complete code sample that shows how to use a ResourceSelectionChanged
      // event handler in a Project add-in, see "Create your first task pane add-in
      // for Project 2013 by using a text editor."
      // https://docs.microsoft.com/office/dev/add-ins/project/create-your-first-task-pane-add-in-for-project-by-using-a-text-editor
      ```
      ```javascript
      // The following code example adds a handler for the TaskSelectionChanged event.
      // When the task selection changes in the document, it gets the GUID of the
      // selected task.
      // The example assumes your add-in has a reference to the jQuery library and that
      // the following page control is defined in the content div in the page body:
      // <span id="message"></span>

      (function () {
          "use strict";

          // The initialize function must be run each time a new page is loaded.
          Office.initialize = function (reason) {
              $(document).ready(function () {

                  // After the DOM is loaded, add-in-specific code can run.
                  Office.context.document.addHandlerAsync(
                      Office.EventType.TaskSelectionChanged,
                      getTaskGuid);
                  getTaskGuid();
              });
          };

          // Get the GUID of the selected task and display it in the add-in.
          function getTaskGuid() {
              Office.context.document.getSelectedTaskAsync(
                  function (result) {
                      if (result.status === Office.AsyncResultStatus.Failed) {
                          onError(result.error);
                      }
                      else {
                          $('#message').html(result.value);
                      }
                  }
              );
          }

          function onError(error) {
              $('#message').html(error.name + ' ' + error.code + ': ' + error.message);
          }
      })();
      ```
      ```javascript
      // The following code example adds a handler for the ViewSelectionChanged
      // event. When the active view changes, it gets the name and type of the active view.
      // The example assumes your add-in has a reference to the jQuery library and that
      // the following page control is defined in the content div in the page body:
      // <span id="message"></span>

      (function () {
          "use strict";

          // The initialize function must be run each time a new page is loaded.
          Office.initialize = function (reason) {
              $(document).ready(function () {

                  // After the DOM is loaded, add-in-specific code can run.
                  Office.context.document.addHandlerAsync(
                      Office.EventType.ViewSelectionChanged,
                      getActiveView);
                  getActiveView();
              });
          };

          // Get the name and type of the active view and display it in the add-in.
          function getActiveView() {
              Office.context.document.getSelectedViewAsync(
                  function (result) {
                      if (result.status === Office.AsyncResultStatus.Failed) {
                          onError(result.error);
                      }
                      else {
                          var output = String.format(
                              'View name: {0}<br/>View type: {1}',
                              result.value.viewName, result.value.viewType);
                          $('#message').html(output);
                      }
                  }
              );
          }

          function onError(error) {
              $('#message').html(error.name + ' ' + error.code + ': ' + error.message);
          }
      })();

      // For an example that shows how to use a ViewSelectionChanged event handler in a
      // Project add-in, see "Create your first task pane add-in for Project 2013 by
      // using a text editor."
      // https://docs.microsoft.com/office/dev/add-ins/project/create-your-first-task-pane-add-in-for-project-by-using-a-text-editor
      ```
      ```javascript
      // The following code example uses addHandlerAsync to add an event handler for the ViewSelectionChanged event.
      // When the active view changes, the handler checks the view type. It enables a button if the view is a resource
      // view and disables the button if it isn't a resource view. Choosing the button gets the GUID of the selected
      // resource and displays it in the add-in.
      // The example assumes that your add-in has a reference to the jQuery library and that the following page controls
      // are defined in the content div in the page body:
      // <input id="get-info" type="button" value="Get info" disabled="disabled" /><br />
      // <span id="message"></span>

      (function () {
          "use strict";

          // The initialize function must be run each time a new page is loaded.
          Office.initialize = function (reason) {
              $(document).ready(function () {

                  // After the DOM is loaded, add-in-specific code can run.
                  // Add a ViewSelectionChanged event handler.
                  Office.context.document.addHandlerAsync(
                      Office.EventType.ViewSelectionChanged,
                      getActiveView);
                  $('#get-info').click(getResourceGuid);

                  // This example calls the handler on page load to get the active view
                  // of the default page.
                  getActiveView();
              });
          };

          // Activate the button based on the active view type of the document.
          // This is the ViewSelectionChanged event handler.
          function getActiveView() {
              Office.context.document.getSelectedViewAsync(
                  function (result) {
                      if (result.status === Office.AsyncResultStatus.Failed) {
                          onError(result.error);
                      }
                      else {
                          var viewType = result.value.viewType;
                          if (viewType == 6 ||   // ResourceForm
                              viewType == 7 ||   // ResourceSheet
                              viewType == 8 ||   // ResourceGraph
                              viewType == 15) {  // ResourceUsage
                              $('#get-info').removeAttr('disabled');
                          }
                          else {
                              $('#get-info').attr('disabled', 'disabled');
                          }
                          var output = String.format(
                              'View name: {0}<br/>View type: {1}',
                              result.value.viewName, viewType);
                          $('#message').html(output);
                      }
                  }
              );
          }

          // Get the GUID of the currently selected resource and display it in the add-in.
          function getResourceGuid() {
              Office.context.document.getSelectedResourceAsync(
                  function (result) {
                      if (result.status === Office.AsyncResultStatus.Failed) {
                          onError(result.error);
                      }
                      else {
                          $('#message').html('Resource GUID: ' + result.value);
                      }
                  }
              );
          }

          function onError(error) {
              $('#message').html(error.name + ' ' + error.code + ': ' + error.message);
          }
      })();

      // For a complete code sample that shows how to use a ViewSelectionChanged event handler in a Project add-in,
      // see "Create your first task pane add-in for Project by using a text editor."
      // https://docs.microsoft.com/office/dev/add-ins/project/create-your-first-task-pane-add-in-for-project-by-using-a-text-editor
      ```
    name: 'addHandlerAsync(eventType, handler, callback)'
    fullName: 'addHandlerAsync(eventType, handler, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addHandlerAsync(eventType: Office.EventType, handler: any, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: 'Para un evento de objeto Document, el parámetro eventType se puede especificar `Office.EventType.Document.SelectionChanged` como o`Office.EventType.Document.ActiveViewChanged`<!-- -->o el valor de texto correspondiente de esta enumeración.'
          type:
            - office.Office.EventType
        - id: handler
          description: 'La función del controlador de eventos que se va a agregar, cuyo único parámetro es de tipo [Office. propiedad documentselectionchangedeventargs](xref:office.Office.DocumentSelectionChangedEventArgs)<!-- -->. Necesario.'
          type:
            - any
        - id: callback
          description: 'Opcional. Una función que se invoca cuando se devuelve la devolución de llamada, cuyo único parámetro es de tipo [Office. asyncResult](xref:office.Office.AsyncResult)<!-- -->.'
          type:
            - '(result: AsyncResult<void>) => void'
  - uid: office.Office.Document.getActiveViewAsync
    summary: Devuelve el estado de la vista actual de la presentación (edición o lectura).
    remarks: |-
      **Conjunto de requisitos**: [ActiveView](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#activeview)

      Puede desencadenar un evento al cambiar la vista.
    name: 'getActiveViewAsync(options, callback)'
    fullName: 'getActiveViewAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getActiveViewAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<"edit" | "read">) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: 'Proporciona una opción para conservar los datos de contexto de cualquier tipo, sin cambios, para su uso en una devolución de llamada.'
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: 'Opcional. Una función que se invoca cuando se devuelve la devolución de llamada, cuyo único parámetro es de tipo [Office. asyncResult](xref:office.Office.AsyncResult)<!-- -->. La `value` propiedad del resultado es el estado de la vista actual de la presentación. El valor devuelto puede ser "Edit" o "Read". "Editar" corresponde a cualquiera de las vistas en las que puede editar diapositivas, como la vista normal o de esquema. "lectura" corresponde a la presentación con diapositivas o a la vista de lectura.'
          type:
            - '(result: AsyncResult<"edit" | "read">) => void'
  - uid: office.Office.Document.getActiveViewAsync_1
    summary: Devuelve el estado de la vista actual de la presentación (edición o lectura).
    remarks: |-
      **Conjunto de requisitos**: [ActiveView](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#activeview)

      Puede desencadenar un evento al cambiar la vista.

      #### <a name="examples"></a>Ejemplos

      ```javascript
      function getFileView() {
          // Get whether the current view is edit or read.
          Office.context.document.getActiveViewAsync(function (asyncResult) {
              if (asyncResult.status == "failed") {
                  showMessage("Action failed with error: " + asyncResult.error.message);
              }
              else {
                  showMessage(asyncResult.value);
              }
          });
      }
      ```
    name: getActiveViewAsync(callback)
    fullName: getActiveViewAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getActiveViewAsync(callback?: (result: AsyncResult<"edit" | "read">) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: 'Opcional. Una función que se invoca cuando se devuelve la devolución de llamada, cuyo único parámetro es de tipo [Office. asyncResult](xref:office.Office.AsyncResult)<!-- -->. La `value` propiedad del resultado es el estado de la vista actual de la presentación. El valor devuelto puede ser "Edit" o "Read". "Editar" corresponde a cualquiera de las vistas en las que puede editar diapositivas, como la vista normal o de esquema. "lectura" corresponde a la presentación con diapositivas o a la vista de lectura.'
          type:
            - '(result: AsyncResult<"edit" | "read">) => void'
  - uid: office.Office.Document.getFileAsync
    summary: "Devuelve el archivo de documento entero en segmentos de hasta 4194304 bytes (4\_MB). Para los complementos en iOS, el segmento de archivo se admite hasta 65536 (64 KB). Tenga en cuenta que, si especifica un tamaño del segmento del archivo superior al límite permitido, se producirá el error \"Error interno\"."
    remarks: |-
      **Conjuntos de requisitos**:

      - [CompressedFile](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#compressedfile) (cuando se usa`Office.FileType.Compressed`<!-- -->)

      - [Archivo](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#file)

      - [TextFile](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textfile) (cuando se usa`Office.FileType.Text`<!-- -->)

      Para los complementos que se ejecutan en aplicaciones host de Office distintas de Office en iOS, el método getFileAsync admite la obtención de archivos en segmentos de hasta 4194304 bytes (4 MB). Para complementos que se ejecutan en aplicaciones de Office en iOS, el método getFileAsync admite la obtención de archivos en segmentos de hasta 65536 (64 KB).

      El parámetro fileType puede especificarse mediante los valores de texto o la enumeración [Office. filetype](xref:office.Office.FileType) . Pero los valores posibles varían según el host:

      Excel en la web y escritorio de Windows:`Office.FileType.Compressed`

      Excel en Mac:`Office.FileType.Compressed`<!-- -->, `Office.FileType.Pdf`

      PowerPoint en la web, escritorio de Windows, Mac y iPad:`Office.FileType.Compressed`<!-- -->, `Office.FileType.Pdf`

      Word en la web, escritorio de Windows, Mac y iPad:`Office.FileType.Compressed`<!-- -->, `Office.FileType.Pdf`<!-- -->, `Office.FileType.Text`

      #### <a name="examples"></a>Ejemplos

      ```javascript
      // The following example gets the document in Office Open XML ("compressed") format in 65536 bytes (64 KB) slices.
      // Note: The implementation of app.showNotification in this example is from the Visual Studio template for Office Add-ins.
      function getDocumentAsCompressed() {
          Office.context.document.getFileAsync(Office.FileType.Compressed, { sliceSize: 65536 /*64 KB*/ }, 
              function (result) {
                  if (result.status == "succeeded") {
                  // If the getFileAsync call succeeded, then
                  // result.value will return a valid File Object.
                  var myFile = result.value;
                  var sliceCount = myFile.sliceCount;
                  var slicesReceived = 0, gotAllSlices = true, docdataSlices = [];
                  app.showNotification("File size:" + myFile.size + " #Slices: " + sliceCount);

                  // Get the file slices.
                  getSliceAsync(myFile, 0, sliceCount, gotAllSlices, docdataSlices, slicesReceived);
                  }
                  else {
                  app.showNotification("Error:", result.error.message);
                  }
          });
      }

      function getSliceAsync(file, nextSlice, sliceCount, gotAllSlices, docdataSlices, slicesReceived) {
          file.getSliceAsync(nextSlice, function (sliceResult) {
              if (sliceResult.status == "succeeded") {
                  if (!gotAllSlices) { // Failed to get all slices, no need to continue.
                      return;
                  }

                  // Got one slice, store it in a temporary array.
                  // (Or you can do something else, such as
                  // send it to a third-party server.)
                  docdataSlices[sliceResult.value.index] = sliceResult.value.data;
                  if (++slicesReceived == sliceCount) {
                    // All slices have been received.
                    file.closeAsync();
                    onGotAllSlices(docdataSlices);
                  }
                  else {
                      getSliceAsync(file, ++nextSlice, sliceCount, gotAllSlices, docdataSlices, slicesReceived);
                  }
              }
                  else {
                      gotAllSlices = false;
                      file.closeAsync();
                      app.showNotification("getSliceAsync Error:", sliceResult.error.message);
                  }
          });
      }

      function onGotAllSlices(docdataSlices) {
          var docdata = [];
          for (var i = 0; i < docdataSlices.length; i++) {
              docdata = docdata.concat(docdataSlices[i]);
          }

          var fileContent = new String();
          for (var j = 0; j < docdata.length; j++) {
              fileContent += String.fromCharCode(docdata[j]);
          }

          // Now all the file content is stored in 'fileContent' variable,
          // you can do something with it, such as print, fax...
      }

      // The following example gets the document in PDF format.
      Office.context.document.getFileAsync(Office.FileType.Pdf,
          function(result) {
              if (result.status == "succeeded") {
                  var myFile = result.value;
                  var sliceCount = myFile.sliceCount;
                  app.showNotification("File size:" + myFile.size + " #Slices: " + sliceCount);
                  // Now, you can call getSliceAsync to download the files,
                  // as described in the previous code segment (compressed format).
                  
                  myFile.closeAsync();
              }
              else {
                  app.showNotification("Error:", result.error.message);
              }
      }
      );
      ```
    name: 'getFileAsync(fileType, options, callback)'
    fullName: 'getFileAsync(fileType, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getFileAsync(fileType: FileType, options?: GetFileOptions, callback?: (result: AsyncResult<Office.File>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: fileType
          description: El formato en el que se devolverá el archivo
          type:
            - office.Office.FileType
        - id: options
          description: Proporciona opciones para establecer el tamaño de las divisiones en las que se dividirá el documento.
          type:
            - office.Office.GetFileOptions
        - id: callback
          description: 'Opcional. Una función que se invoca cuando se devuelve la devolución de llamada, cuyo único parámetro es de tipo [Office. asyncResult](xref:office.Office.AsyncResult)<!-- -->. La `value` propiedad del resultado es el objeto de archivo.'
          type:
            - '(result: AsyncResult<Office.File>) => void'
  - uid: office.Office.Document.getFileAsync_1
    summary: "Devuelve el archivo de documento entero en segmentos de hasta 4194304 bytes (4\_MB). Para los complementos en iOS, el segmento de archivo se admite hasta 65536 (64 KB). Tenga en cuenta que, si especifica un tamaño del segmento del archivo superior al límite permitido, se producirá el error \"Error interno\"."
    remarks: |-
      **Conjuntos de requisitos**:

      - [CompressedFile](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#compressedfile) (cuando se usa`Office.FileType.Compressed`<!-- -->)

      - [Archivo](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#file)

      - [TextFile](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textfile) (cuando se usa`Office.FileType.Text`<!-- -->)

      Para los complementos que se ejecutan en aplicaciones host de Office distintas de Office en iOS, el método getFileAsync admite la obtención de archivos en segmentos de hasta 4194304 bytes (4 MB). Para complementos que se ejecutan en aplicaciones de Office en iOS, el método getFileAsync admite la obtención de archivos en segmentos de hasta 65536 (64 KB).

      El parámetro fileType puede especificarse mediante los valores de texto o la enumeración [Office. filetype](xref:office.Office.FileType) . Pero los valores posibles varían según el host:

      Excel en la web y escritorio de Windows:`Office.FileType.Compressed`

      Excel en Mac:`Office.FileType.Compressed`<!-- -->, `Office.FileType.Pdf`

      PowerPoint en la web, escritorio de Windows, Mac y iPad:`Office.FileType.Compressed`<!-- -->, `Office.FileType.Pdf`

      Word en la web, escritorio de Windows, Mac y iPad:`Office.FileType.Compressed`<!-- -->, `Office.FileType.Pdf`<!-- -->, `Office.FileType.Text`
    name: 'getFileAsync(fileType, callback)'
    fullName: 'getFileAsync(fileType, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getFileAsync(fileType: FileType, callback?: (result: AsyncResult<Office.File>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: fileType
          description: El formato en el que se devolverá el archivo
          type:
            - office.Office.FileType
        - id: callback
          description: 'Opcional. Una función que se invoca cuando se devuelve la devolución de llamada, cuyo único parámetro es de tipo [Office. asyncResult](xref:office.Office.AsyncResult)<!-- -->. La `value` propiedad del resultado es el objeto de archivo.'
          type:
            - '(result: AsyncResult<Office.File>) => void'
  - uid: office.Office.Document.getFilePropertiesAsync
    summary: Obtiene las propiedades de archivo del documento actual.
    remarks: |-
      **Conjuntos de requisitos**: [no está en un conjunto](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#methods-that-arent-part-of-a-requirement-set)

      Obtiene la dirección URL del archivo con la propiedad URL`asyncResult.value.url`<!-- -->.
    name: 'getFilePropertiesAsync(options, callback)'
    fullName: 'getFilePropertiesAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getFilePropertiesAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<Office.FileProperties>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: 'Proporciona una opción para conservar los datos de contexto de cualquier tipo, sin cambios, para su uso en una devolución de llamada.'
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: 'Una función que se invoca cuando se devuelve la devolución de llamada, cuyo único parámetro es de tipo [Office. asyncResult](xref:office.Office.AsyncResult)<!-- -->. La `value` propiedad del resultado son las propiedades del archivo (con la dirección URL que se encuentra en`asyncResult.value.url`<!-- -->).'
          type:
            - '(result: AsyncResult<Office.FileProperties>) => void'
  - uid: office.Office.Document.getFilePropertiesAsync_1
    summary: Obtiene las propiedades de archivo del documento actual.
    remarks: |-
      **Conjuntos de requisitos**: [no está en un conjunto](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#methods-that-arent-part-of-a-requirement-set)

      Obtiene la dirección URL del archivo con la propiedad URL`asyncResult.value.url`<!-- -->.

      #### <a name="examples"></a>Ejemplos

      ```javascript
      // To read the URL of the current file, you need to write a callback function that returns the URL.
      // The following example shows how to:
      // 1. Pass an anonymous callback function that returns the value of the file's URL
      //    to the callback parameter of the getFilePropertiesAsync method.
      // 2. Display the value on the add-in's page.
      function getFileUrl() {
          // Get the URL of the current file.
          Office.context.document.getFilePropertiesAsync(function (asyncResult) {
              var fileUrl = asyncResult.value.url;
              if (fileUrl == "") {
                  showMessage("The file hasn't been saved yet. Save the file and try again");
              }
              else {
                  showMessage(fileUrl);
              }
          });
      }
      ```
    name: getFilePropertiesAsync(callback)
    fullName: getFilePropertiesAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getFilePropertiesAsync(callback?: (result: AsyncResult<Office.FileProperties>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: 'Una función que se invoca cuando se devuelve la devolución de llamada, cuyo único parámetro es de tipo [Office. asyncResult](xref:office.Office.AsyncResult)<!-- -->. La `value` propiedad del resultado son las propiedades del archivo (con la dirección URL que se encuentra en`asyncResult.value.url`<!-- -->).'
          type:
            - '(result: AsyncResult<Office.FileProperties>) => void'
  - uid: office.Office.Document.getMaxResourceIndexAsync
    summary: |-
      Solo documentos de proyecto. Obtiene el índice máximo de la colección de recursos del proyecto actual.

      **Importante**: esta API solo funciona en el proyecto 2016 en el escritorio de Windows.
    name: 'getMaxResourceIndexAsync(options, callback)'
    fullName: 'getMaxResourceIndexAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getMaxResourceIndexAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<number>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: 'Proporciona una opción para conservar los datos de contexto de cualquier tipo, sin cambios, para su uso en una devolución de llamada.'
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: 'Opcional. Una función que se invoca cuando se devuelve la devolución de llamada, cuyo único parámetro es de tipo [Office. asyncResult](xref:office.Office.AsyncResult)<!-- -->. La `value` propiedad del resultado es el número de índice más alto de la colección de recursos del proyecto actual.'
          type:
            - '(result: AsyncResult<number>) => void'
  - uid: office.Office.Document.getMaxResourceIndexAsync_1
    summary: |-
      Solo documentos de proyecto. Obtiene el índice máximo de la colección de recursos del proyecto actual.

      **Importante**: esta API solo funciona en el proyecto 2016 en el escritorio de Windows.
    name: getMaxResourceIndexAsync(callback)
    fullName: getMaxResourceIndexAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getMaxResourceIndexAsync(callback?: (result: AsyncResult<number>) => void): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>Ejemplos

          ```javascript
          // The following code example calls getResourceTaskIndexAsync to get the maximum index of the collection 
          // of resources in the current project. Then it uses the returned value and the getResourceByIndexAsync
          // method to get each resource GUID. The example assumes that your add-in has a reference to the 
          // jQuery library and that the following page controls are defined in the content div in the page body:
          // <input id="get-info" type="button" value="Get info" /><br />
          // <span id="message"></span>

          (function () {
              "use strict";
              var resourceGuids = ;

              // The initialize function must be run each time a new page is loaded.
              Office.initialize = function (reason) {
                  $(document).ready(function () {

                      // After the DOM is loaded, add-in-specific code can run.
                      app.initialize();
                      $('#get-info').click(getResourceInfo);
                  });
              };

              // Get the maximum resource index, and then get the resource GUIDs.
              function getResourceInfo() {
                  getMaxResourceIndex().then(
                      function (data) {
                          getResourceGuids(data);
                      }
                  );
              }

              // Get the maximum index of the resources for the current project.
              function getMaxResourceIndex() {
                  var defer = $.Deferred();
                  Office.context.document.getMaxResourceIndexAsync(
                      function (result) {
                          if (result.status === Office.AsyncResultStatus.Failed) {
                              onError(result.error);
                          }
                          else {
                              defer.resolve(result.value);
                          }
                      }
                  );
                  return defer.promise();
              }

              // Get each resource GUID, and then display the GUIDs in the add-in.
              // There is no 0 index for resources, so start with index 1.
              function getResourceGuids(maxResourceIndex) {
                  var defer = $.Deferred();
                  for (var i = 1; i <= maxResourceIndex; i++) {
                      getResourceGuid(i);
                  }
                  return defer.promise();
                  function getResourceGuid(index) {
                      Office.context.document.getResourceByIndexAsync(index,
                          function (result) {
                              if (result.status === Office.AsyncResultStatus.Succeeded) {
                                  resourceGuids.push(result.value);
                                  if (index == maxResourceIndex) {
                                      defer.resolve();
                                      $('#message').html(resourceGuids.toString());
                                  }
                              }
                              else {
                                  onError(result.error);
                              }
                          }
                      );
                  }
              }
              function onError(error) {
                  app.showNotification(error.name + ' ' + error.code + ': ' + error.message);
              }
          })();
          ```
      parameters:
        - id: callback
          description: 'Opcional. Una función que se invoca cuando se devuelve la devolución de llamada, cuyo único parámetro es de tipo [Office. asyncResult](xref:office.Office.AsyncResult)<!-- -->. La `value` propiedad del resultado es el número de índice más alto de la colección de recursos del proyecto actual.'
          type:
            - '(result: AsyncResult<number>) => void'
  - uid: office.Office.Document.getMaxTaskIndexAsync
    summary: |-
      Solo documentos de proyecto. Obtiene el índice máximo de la colección de tareas del proyecto actual.

      **Importante**: esta API solo funciona en el proyecto 2016 en el escritorio de Windows.
    name: 'getMaxTaskIndexAsync(options, callback)'
    fullName: 'getMaxTaskIndexAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getMaxTaskIndexAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<number>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: 'Proporciona una opción para conservar los datos de contexto de cualquier tipo, sin cambios, para su uso en una devolución de llamada.'
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: 'Opcional. Una función que se invoca cuando se devuelve la devolución de llamada, cuyo único parámetro es de tipo [Office. asyncResult](xref:office.Office.AsyncResult)<!-- -->. La `value` propiedad del resultado es el número de índice más alto de la colección de tareas del proyecto actual.'
          type:
            - '(result: AsyncResult<number>) => void'
  - uid: office.Office.Document.getMaxTaskIndexAsync_1
    summary: |-
      Solo documentos de proyecto. Obtiene el índice máximo de la colección de tareas del proyecto actual.

      **Importante**: esta API solo funciona en el proyecto 2016 en el escritorio de Windows.
    name: getMaxTaskIndexAsync(callback)
    fullName: getMaxTaskIndexAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getMaxTaskIndexAsync(callback?: (result: AsyncResult<number>) => void): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>Ejemplos

          ```javascript
          // The following code example calls getMaxTaskIndexAsync to get the maximum index
          // of the collection of tasks in the current project. Then it uses the returned value
          // with the getTaskByIndexAsync method to get each task GUID.
          // The example assumes your add-in has a reference to the jQuery library and that the
          // following page controls are defined in the content div in the page body:
          // <input id="get-info" type="button" value="Get info" /><br />
          // <span id="message"></span>

          (function () {
              "use strict";
              var taskGuids = ;

              // The initialize function must be run each time a new page is loaded.
              Office.initialize = function (reason) {
                  $(document).ready(function () {

                      // After the DOM is loaded, add-in-specific code can run.
                      app.initialize();
                      $('#get-info').click(getTaskInfo);
                  });
              };

              // Get the maximum task index, and then get the task GUIDs.
              function getTaskInfo() {
                  getMaxTaskIndex().then(
                      function (data) {
                          getTaskGuids(data);
                      }
                  );
              }

              // Get the maximum index of the tasks for the current project.
              function getMaxTaskIndex() {
                  var defer = $.Deferred();
                  Office.context.document.getMaxTaskIndexAsync(
                      function (result) {
                          if (result.status === Office.AsyncResultStatus.Failed) {
                              onError(result.error);
                          }
                          else {
                              defer.resolve(result.value);
                          }
                      }
                  );
                  return defer.promise();
              }

              // Get each task GUID, and then display the GUIDs in the add-in.
              function getTaskGuids(maxTaskIndex) {
                  var defer = $.Deferred();
                  for (var i = 0; i <= maxTaskIndex; i++) {
                      getTaskGuid(i);
                  }
                  return defer.promise();
                  function getTaskGuid(index) {
                      Office.context.document.getTaskByIndexAsync(index,
                          function (result) {
                              if (result.status === Office.AsyncResultStatus.Succeeded) {
                                  taskGuids.push(result.value);
                                  if (index == maxTaskIndex) {
                                      defer.resolve();
                                      $('#message').html(taskGuids.toString());
                                  }
                              }
                              else {
                                  onError(result.error);
                              }
                          }
                      );
                  }
              }
              function onError(error) {
                  app.showNotification(error.name + ' ' + error.code + ': ' + error.message);
              }
          })();
          ```
      parameters:
        - id: callback
          description: 'Opcional. Una función que se invoca cuando se devuelve la devolución de llamada, cuyo único parámetro es de tipo [Office. asyncResult](xref:office.Office.AsyncResult)<!-- -->. La `value` propiedad del resultado es el número de índice más alto de la colección de tareas del proyecto actual.'
          type:
            - '(result: AsyncResult<number>) => void'
  - uid: office.Office.Document.getProjectFieldAsync
    summary: Solo documentos de proyecto. Obtener campo de proyecto (p. ej. ProjectWebAccessURL).
    name: 'getProjectFieldAsync(fieldId, options, callback)'
    fullName: 'getProjectFieldAsync(fieldId, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getProjectFieldAsync(fieldId: number, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<any>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: fieldId
          description: Campos de nivel de proyecto.
          type:
            - number
        - id: options
          description: 'Proporciona una opción para conservar los datos de contexto de cualquier tipo, sin cambios, para su uso en una devolución de llamada.'
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: 'Opcional. Una función que se invoca cuando se devuelve la devolución de llamada, cuyo único parámetro es de tipo [Office. asyncResult](xref:office.Office.AsyncResult)<!-- -->. La `value` propiedad del resultado contiene la `fieldValue` propiedad, que representa el valor del campo especificado.'
          type:
            - '(result: AsyncResult<any>) => void'
  - uid: office.Office.Document.getProjectFieldAsync_1
    summary: Solo documentos de proyecto. Obtener campo de proyecto (p. ej. ProjectWebAccessURL).
    name: 'getProjectFieldAsync(fieldId, callback)'
    fullName: 'getProjectFieldAsync(fieldId, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getProjectFieldAsync(fieldId: number, callback?: (result: AsyncResult<any>) => void): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>Ejemplos

          ```javascript
          // The following code example gets the values of three specified fields for the active project, 
          // and then displays the values in the add-in.
          // The example calls getProjectFieldAsync recursively, after the previous call returns successfully.
          // It also tracks the calls to determine when all calls are sent.
          // The example assumes your add-in has a reference to the jQuery library and that the 
          // following page control is defined in the content div in the page body:
          // <span id="message"></span>

          (function () {
              "use strict";

              // The initialize function must be run each time a new page is loaded.
              Office.initialize = function (reason) {
                  $(document).ready(function () {

                      // Get information for the active project.
                      getProjectInformation();
                  });
              };

              // Get the specified fields for the active project.
              function getProjectInformation() {
                  var fields =
                      [Office.ProjectProjectFields.Start, 
                       Office.ProjectProjectFields.Finish, 
                       Office.ProjectProjectFields.GUID];
                  var fieldValues = ['Start: ', 'Finish: ', 'GUID: '];
                  var index = 0; 
                  getField();

                  // Get each field, and then display the field values in the add-in.
                  function getField() {
                      if (index == fields.length) {
                          var output = '';
                          for (var i = 0; i < fieldValues.length; i++) {
                              output += fieldValues[i] + '<br />';
                          }
                          $('#message').html(output);
                      }
                      else {
                          Office.context.document.getProjectFieldAsync(
                              fields[index],
                              function (result) {

                                  // If the call is successful, get the field value and then get the next field.
                                  if (result.status === Office.AsyncResultStatus.Succeeded) {
                                      fieldValues[index] += result.value.fieldValue;
                                      getField(index++);
                                  }
                                  else {
                                      onError(result.error);
                                  }
                              }
                          );
                      }
                  }
              }

              function onError(error) {
                  $('#message').html(error.name + ' ' + error.code + ': ' + error.message);
              }
          })();
          ```
      parameters:
        - id: fieldId
          description: Campos de nivel de proyecto.
          type:
            - number
        - id: callback
          description: 'Opcional. Una función que se invoca cuando se devuelve la devolución de llamada, cuyo único parámetro es de tipo [Office. asyncResult](xref:office.Office.AsyncResult)<!-- -->. La `value` propiedad del resultado contiene la `fieldValue` propiedad, que representa el valor del campo especificado.'
          type:
            - '(result: AsyncResult<any>) => void'
  - uid: office.Office.Document.getResourceByIndexAsync
    summary: |-
      Solo documentos de proyecto. Obtiene el GUID del recurso que tiene el índice especificado en la colección de recursos.

      **Importante**: esta API solo funciona en el proyecto 2016 en el escritorio de Windows.
    name: 'getResourceByIndexAsync(resourceIndex, options, callback)'
    fullName: 'getResourceByIndexAsync(resourceIndex, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getResourceByIndexAsync(resourceIndex: number, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: resourceIndex
          description: Índice del recurso en la colección de recursos del proyecto.
          type:
            - number
        - id: options
          description: 'Proporciona una opción para conservar los datos de contexto de cualquier tipo, sin cambios, para su uso en una devolución de llamada.'
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: 'Opcional. Una función que se invoca cuando se devuelve la devolución de llamada, cuyo único parámetro es de tipo [Office. asyncResult](xref:office.Office.AsyncResult)<!-- -->. La `value` propiedad del resultado es el GUID del recurso como una cadena.'
          type:
            - '(result: AsyncResult<string>) => void'
  - uid: office.Office.Document.getResourceByIndexAsync_1
    summary: |-
      Solo documentos de proyecto. Obtiene el GUID del recurso que tiene el índice especificado en la colección de recursos.

      **Importante**: esta API solo funciona en el proyecto 2016 en el escritorio de Windows.
    name: 'getResourceByIndexAsync(resourceIndex, callback)'
    fullName: 'getResourceByIndexAsync(resourceIndex, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getResourceByIndexAsync(resourceIndex: number, callback?: (result: AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>Ejemplos

          ```javascript
          // The following code example calls getMaxResourceIndexAsync to get the maximum index in the project's resource
          // collection, and then calls getResourceByIndexAsync to get the GUID for each resource.
          // The example assumes that your add-in has a reference to the jQuery library and that the following 
          // page controls are defined in the content div in the page body:
          // <input id="get-info" type="button" value="Get info" /><br />
          // <span id="message"></span>

          (function () {
              "use strict";
              var resourceGuids = ;

              // The initialize function must be run each time a new page is loaded.
              Office.initialize = function (reason) {
                  $(document).ready(function () {

                      // After the DOM is loaded, add-in-specific code can run.
                      app.initialize();
                      $('#get-info').click(getResourceInfo);
                  });
              };

              // Get the maximum resource index, and then get the resource GUIDs.
              function getResourceInfo() {
                  getMaxResourceIndex().then(
                      function (data) {
                          getResourceGuids(data);
                      }
                  );
              }

              // Get the maximum index of the resources for the current project.
              function getMaxResourceIndex() {
                  var defer = $.Deferred();
                  Office.context.document.getMaxResourceIndexAsync(
                      function (result) {
                          if (result.status === Office.AsyncResultStatus.Failed) {
                              onError(result.error);
                          }
                          else {
                              defer.resolve(result.value);
                          }
                      }
                  );
                  return defer.promise();
              }

              // Get each resource GUID, and then display the GUIDs in the add-in.
              // There is no 0 index for resources, so start with index 1.
              function getResourceGuids(maxResourceIndex) {
                  var defer = $.Deferred();
                  for (var i = 1; i <= maxResourceIndex; i++) {
                      getResourceGuid(i);
                  }
                  return defer.promise();
                  function getResourceGuid(index) {
                      Office.context.document.getResourceByIndexAsync(index,
                          function (result) {
                              if (result.status === Office.AsyncResultStatus.Succeeded) {
                                  resourceGuids.push(result.value);
                                  if (index == maxResourceIndex) {
                                      defer.resolve();
                                      $('#message').html(resourceGuids.toString());
                                  }
                              }
                              else {
                                  onError(result.error);
                              }
                          }
                      );
                  }
              }
              function onError(error) {
                  app.showNotification(error.name + ' ' + error.code + ': ' + error.message);
              }
          })();
          ```
      parameters:
        - id: resourceIndex
          description: Índice del recurso en la colección de recursos del proyecto.
          type:
            - number
        - id: callback
          description: 'Opcional. Una función que se invoca cuando se devuelve la devolución de llamada, cuyo único parámetro es de tipo [Office. asyncResult](xref:office.Office.AsyncResult)<!-- -->. La `value` propiedad del resultado es el GUID del recurso como una cadena.'
          type:
            - '(result: AsyncResult<string>) => void'
  - uid: office.Office.Document.getResourceFieldAsync
    summary: 'Solo documentos de proyecto. Obtener campo de recurso para el identificador de recurso proporcionado. (por ejemplo,. ResourceName)'
    name: 'getResourceFieldAsync(resourceId, fieldId, options, callback)'
    fullName: 'getResourceFieldAsync(resourceId, fieldId, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getResourceFieldAsync(resourceId: string, fieldId: number, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: resourceId
          description: Puede ser una cadena o un valor del identificador de recurso.
          type:
            - string
        - id: fieldId
          description: Campos de recursos.
          type:
            - number
        - id: options
          description: 'Proporciona una opción para conservar los datos de contexto de cualquier tipo, sin cambios, para su uso en una devolución de llamada.'
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: 'Opcional. Una función que se invoca cuando se devuelve la devolución de llamada, cuyo único parámetro es de tipo [Office. asyncResult](xref:office.Office.AsyncResult)<!-- -->. La `value` propiedad del resultado es el GUID del recurso como una cadena.'
          type:
            - '(result: AsyncResult<string>) => void'
  - uid: office.Office.Document.getResourceFieldAsync_1
    summary: 'Solo documentos de proyecto. Obtener campo de recurso para el identificador de recurso proporcionado. (por ejemplo,. ResourceName)'
    name: 'getResourceFieldAsync(resourceId, fieldId, callback)'
    fullName: 'getResourceFieldAsync(resourceId, fieldId, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getResourceFieldAsync(resourceId: string, fieldId: number, callback?: (result: AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>Ejemplos

          ```javascript
          // The following code example calls getSelectedResourceAsync to get the GUID of the resource
          // that's currently selected in a resource view. Then it gets three resource field values by calling 
          // getResourceFieldAsync recursively.
          // The example assumes your add-in has a reference to the jQuery library and that the following 
          // page controls are defined in the content div in the page body:
          // <input id="get-info" type="button" value="Get info" /><br />
          // <span id="message"></span>

          (function () {
              "use strict";

              // The initialize function must be run each time a new page is loaded.
              Office.initialize = function (reason) {
                  $(document).ready(function () {

                      // After the DOM is loaded, add-in-specific code can run.
                      $('#get-info').click(getResourceInfo);
                  });
              };

              // Get the GUID of the resource and then get the resource fields.
              function getResourceInfo() {
                  getResourceGuid().then(
                      function (data) {
                          getResourceFields(data);
                      }
                  );
              }

              // Get the GUID of the selected resource.
              function getResourceGuid() {
                  var defer = $.Deferred();
                  Office.context.document.getSelectedResourceAsync(
                      function (result) {
                          if (result.status === Office.AsyncResultStatus.Failed) {
                              onError(result.error);
                          }
                          else {
                              defer.resolve(result.value);
                          }
                      }
                  );
                  return defer.promise();
              }

              // Get the specified fields for the selected resource.
              function getResourceFields(resourceGuid) {
                  var targetFields =
                      [Office.ProjectResourceFields.Name,
                       Office.ProjectResourceFields.Units, 
                       Office.ProjectResourceFields.BaseCalendar];
                  var fieldValues = ['Name: ', 'Units: ', 'Base calendar: '];
                  var index = 0; 
                  getField();

                  // Get each field, and then display the field values in the add-in.
                  function getField() {
                      if (index == targetFields.length) {
                          var output = '';
                          for (var i = 0; i < fieldValues.length; i++) {
                              output += fieldValues[i] + '<br />';
                          }
                          $('#message').html(output);
                      }

                      // If the call is successful, get the field value and then get the next field.
                      else {
                          Office.context.document.getResourceFieldAsync(
                              resourceGuid,
                              targetFields[index],
                              function (result) {
                                  if (result.status === Office.AsyncResultStatus.Succeeded) {
                                      fieldValues[index] += result.value.fieldValue;
                                      getField(index++);
                                  }
                                  else {
                                      onError(result.error);
                                  }
                              }
                          );
                      }
                  }
              }

              function onError(error) {
                  $('#message').html(error.name + ' ' + error.code + ': ' + error.message);
              }
          })();
          ```
      parameters:
        - id: resourceId
          description: Puede ser una cadena o un valor del identificador de recurso.
          type:
            - string
        - id: fieldId
          description: Campos de recursos.
          type:
            - number
        - id: callback
          description: 'Opcional. Una función que se invoca cuando se devuelve la devolución de llamada, cuyo único parámetro es de tipo [Office. asyncResult](xref:office.Office.AsyncResult)<!-- -->. La `value` propiedad del resultado es el GUID del recurso como una cadena.'
          type:
            - '(result: AsyncResult<string>) => void'
  - uid: office.Office.Document.getSelectedDataAsync
    summary: Lee los datos incluidos en la selección actual del documento.
    remarks: |-
      **Conjuntos de requisitos**:

      - [HtmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#htmlcoercion) (cuando se usa`Office.CoercionType.Html`<!-- -->)

      - [MatrixCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixcoercion) (cuando se usa`Office.CoercionType.Matrix`<!-- -->)

      - [OoxmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#ooxmlcoercion) (cuando se usa`Office.CoercionType.Ooxml`<!-- -->)

      - [Selection](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#selection)

      - [TableCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablecoercion) (cuando se usa`Office.CoercionType.Table`<!-- -->)

      - [TextCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textcoercion) (cuando se usa`Office.CoercionType.Text`<!-- -->)

      En la función de devolución de llamada que se pasa al método getSelectedDataAsync, puede usar las propiedades del objeto AsyncResult para devolver la siguiente información.

      <table> <tr> <th>Propiedad</th> <th>Usar para...</th> </tr> <tr> <td>AsyncResult.value</td> <td>Devuelve siempre undefined porque no hay ningún objeto o dato que recuperar.</td> </tr> <tr> <td>AsyncResult.status</td> <td>Determinar si la operación se ha completado correctamente o no.</td> </tr> <tr> <td>AsyncResult.error</td> <td>Tener acceso a un objeto Error que proporcione información sobre el error si no se ha completado correctamente la operación.</td> </tr> <tr> <td>AsyncResult.asyncContext</td> <td>Un elemento de cualquier tipo definido por el usuario que se devuelve en el objeto AsyncResult sin sufrir modificaciones.</td> </tr> </table>

      Los valores posibles para el parámetro [Office. CoercionType](xref:office.Office.CoercionType) varían en función del host.

      <table> <tr> <th>Host</th> <th>coercionType admitido</th> </tr> <tr> <td>Excel, PowerPoint, Project y Word</td> <td>`Office.CoercionType.Text`cadena</td> </tr> <tr> <td>Excel y Word</td> <td>`Office.CoercionType.Matrix`(matriz de matrices)</td> </tr> <tr> <td>Excel y Word</td> <td>`Office.CoercionType.Table`(Objeto TableData)</td> </tr> <tr> <td>Word</td> <td>`Office.CoercionType.Html`</td> </tr> <tr> <td>Word</td> <td>`Office.CoercionType.Ooxml`(Office Open XML)</td> </tr> <tr> <td>PowerPoint en la web y Windows</td> <td>`Office.CoercionType.SlideRange`</td> </tr> <tr> <td>Excel, PowerPoint y Word</td> <td>`Office.CoercionType.XmlSvg`</td> </tr> </table>

      #### <a name="examples"></a>Ejemplos

      ```javascript
      // The following example uses the getSelectedDataAsync method of the Document object to retrieve the
      // user's current selection as text, and then display it in the add-in's page.

      // Display the user's current selection.
      function showSelection() {
          Office.context.document.getSelectedDataAsync(
              "text",                        // coercionType
              {valueFormat: "unformatted",   // valueFormat
              filterType: "all"},            // filterType
              function (result) {            // callback
                  var dataValue; 
                  dataValue = result.value;
                  write('Selected data is: ' + dataValue);
              });
      }
      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }
      ```
      ```javascript
      // To read the value of the current selection, you need to write a callback function that reads the selection.
      // The following example shows how to:
      // 1. Pass an anonymous callback function that reads the value of the current selection
      //    to the callback parameter of the getSelectedDataAsync method.
      // 2. Read the selection as text, unformatted, and not filtered.
      // 3. Display the value on the add-in's page.
      function getText() {
          Office.context.document.getSelectedDataAsync(Office.CoercionType.Text, 
              { valueFormat: "unformatted", filterType: "all" },
              function (asyncResult) {
                  var error = asyncResult.error;
                  if (asyncResult.status === Office.AsyncResultStatus.Failed) {
                      write(error.name + ": " + error.message);
                  } 
                  else {
                      // Get selected data.
                      var dataValue = asyncResult.value; 
                      write('Selected data is ' + dataValue);
                  }            
              });
      }

      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }
      ```
      ```javascript
      // The following code example gets the values of the selected cells. It uses the optional
      // asyncContext parameter to pass some text to the callback function.
      // The example assumes your add-in has a reference to the jQuery library and that the
      // following page controls are defined in the content div in the page body:
      // <input id="get-info" type="button" value="Get info" /><br />
      // <span id="message"></span>

      (function () {
          "use strict";

          // The initialize function must be run each time a new page is loaded.
          Office.initialize = function (reason) {
              $(document).ready(function () {

                  // After the DOM is loaded, add-in-specific code can run.
                  $('#get-info').click(getSelectedText);
              });
          };

          // Get the text from the selected cells in the document, and display it in the add-in.
          function getSelectedText() {
              Office.context.document.getSelectedDataAsync(
                  Office.CoercionType.Text,
                  {asyncContext: 'Some related info'},
                  function (result) {
                      if (result.status === Office.AsyncResultStatus.Failed) {
                          onError(result.error);
                      }
                      else {
                          var output = String.format(
                              'Selected text: {0}<br/>Passed info: {1}',
                              result.value, result.asyncContext);
                          $('#message').html(output);
                      }
                  }
              );
          }

          function onError(error) {
              $('#message').html(error.name + ' ' + error.code + ': ' + error.message);
          }
      })();
      ```
    name: 'getSelectedDataAsync(coercionType, options, callback)'
    fullName: 'getSelectedDataAsync(coercionType, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSelectedDataAsync<T>(coercionType: Office.CoercionType, options?: GetSelectedDataOptions, callback?: (result: AsyncResult<T>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: coercionType
          description: El tipo de la estructura de datos que se debe devolver. Vea la sección Comentarios para los tipos de coerción admitidos por cada host.
          type:
            - office.Office.CoercionType
        - id: options
          description: Proporciona opciones para personalizar qué datos se devuelven y cómo se les da formato.
          type:
            - office.Office.GetSelectedDataOptions
        - id: callback
          description: 'Opcional. Una función que se invoca cuando se devuelve la devolución de llamada, cuyo único parámetro es de tipo [Office. asyncResult](xref:office.Office.AsyncResult)<!-- -->. La `value` propiedad del resultado son los datos de la selección actual. Esto se devuelve en el formato o la estructura de datos que especificó con el parámetro coercionType. (Vea la sección de comentarios para más información sobre la coerción de datos).'
          type:
            - '(result: AsyncResult<T>) => void'
      typeParameters:
        - id: T
  - uid: office.Office.Document.getSelectedDataAsync_1
    summary: Lee los datos incluidos en la selección actual del documento.
    remarks: |-
      **Conjuntos de requisitos**:

      - [HtmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#htmlcoercion) (cuando se usa`Office.CoercionType.Html`<!-- -->)

      - [MatrixCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixcoercion) (cuando se usa`Office.CoercionType.Matrix`<!-- -->)

      - [OoxmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#ooxmlcoercion) (cuando se usa`Office.CoercionType.Ooxml`<!-- -->)

      - [Selection](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#selection)

      - [TableCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablecoercion) (cuando se usa`Office.CoercionType.Table`<!-- -->)

      - [TextCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textcoercion) (cuando se usa`Office.CoercionType.Text`<!-- -->)

      En la función de devolución de llamada que se pasa al método getSelectedDataAsync, puede usar las propiedades del objeto AsyncResult para devolver la siguiente información.

      <table> <tr> <th>Propiedad</th> <th>Usar para...</th> </tr> <tr> <td>AsyncResult.value</td> <td>Devuelve siempre undefined porque no hay ningún objeto o dato que recuperar.</td> </tr> <tr> <td>AsyncResult.status</td> <td>Determinar si la operación se ha completado correctamente o no.</td> </tr> <tr> <td>AsyncResult.error</td> <td>Tener acceso a un objeto Error que proporcione información sobre el error si no se ha completado correctamente la operación.</td> </tr> <tr> <td>AsyncResult.asyncContext</td> <td>Un elemento de cualquier tipo definido por el usuario que se devuelve en el objeto AsyncResult sin sufrir modificaciones.</td> </tr> </table>

      Los valores posibles para el parámetro [Office. CoercionType](xref:office.Office.CoercionType) varían en función del host.

      <table> <tr> <th>Host</th> <th>coercionType admitido</th> </tr> <tr> <td>Excel, PowerPoint, Project y Word</td> <td>`Office.CoercionType.Text`cadena</td> </tr> <tr> <td>Excel y Word</td> <td>`Office.CoercionType.Matrix`(matriz de matrices)</td> </tr> <tr> <td>Excel y Word</td> <td>`Office.CoercionType.Table`(Objeto TableData)</td> </tr> <tr> <td>Word</td> <td>`Office.CoercionType.Html`</td> </tr> <tr> <td>Word</td> <td>`Office.CoercionType.Ooxml`(Office Open XML)</td> </tr> <tr> <td>PowerPoint en la web y Windows</td> <td>`Office.CoercionType.SlideRange`</td> </tr> <tr> <td>Excel, PowerPoint y Word</td> <td>`Office.CoercionType.XmlSvg`</td> </tr> </table>
    name: 'getSelectedDataAsync(coercionType, callback)'
    fullName: 'getSelectedDataAsync(coercionType, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSelectedDataAsync<T>(coercionType: Office.CoercionType, callback?: (result: AsyncResult<T>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: coercionType
          description: El tipo de la estructura de datos que se debe devolver. Vea la sección Comentarios para los tipos de coerción admitidos por cada host.
          type:
            - office.Office.CoercionType
        - id: callback
          description: 'Opcional. Una función que se invoca cuando se devuelve la devolución de llamada, cuyo único parámetro es de tipo [Office. asyncResult](xref:office.Office.AsyncResult)<!-- -->. La `value` propiedad del resultado son los datos de la selección actual. Esto se devuelve en el formato o la estructura de datos que especificó con el parámetro coercionType. (Vea la sección de comentarios para más información sobre la coerción de datos).'
          type:
            - '(result: AsyncResult<T>) => void'
      typeParameters:
        - id: T
  - uid: office.Office.Document.getSelectedResourceAsync
    summary: Solo documentos de proyecto. Obtener el identificador del recurso seleccionado actualmente.
    name: 'getSelectedResourceAsync(options, callback)'
    fullName: 'getSelectedResourceAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSelectedResourceAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: 'Proporciona una opción para conservar los datos de contexto de cualquier tipo, sin cambios, para su uso en una devolución de llamada.'
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: 'Opcional. Una función que se invoca cuando se devuelve la devolución de llamada, cuyo único parámetro es de tipo [Office. asyncResult](xref:office.Office.AsyncResult)<!-- -->. La `value` propiedad del resultado es el GUID del recurso como una cadena.'
          type:
            - '(result: AsyncResult<string>) => void'
  - uid: office.Office.Document.getSelectedResourceAsync_1
    summary: Solo documentos de proyecto. Obtener el identificador del recurso seleccionado actualmente.
    name: getSelectedResourceAsync(callback)
    fullName: getSelectedResourceAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSelectedResourceAsync(callback?: (result: AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>Ejemplos

          ```javascript
          // The following code example calls getSelectedResourceAsync to get the GUID of the resource that's 
          // currently selected in a resource view. Then it gets three resource field values by calling 
          // getResourceFieldAsync recursively.
          // The example assumes your add-in has a reference to the jQuery library and that the following page controls are
          // defined in the content div in the page body:
          // <input id="get-info" type="button" value="Get info" /><br />
          // <span id="message"></span>

          (function () {
              "use strict";

              // The initialize function must be run each time a new page is loaded.
              Office.initialize = function (reason) {
                  $(document).ready(function () {

                      // After the DOM is loaded, add-in-specific code can run.
                      $('#get-info').click(getResourceInfo);
                  });
              };

              // Get the GUID of the resource and then get the resource fields.
              function getResourceInfo() {
                  getResourceGuid().then(
                      function (data) {
                          getResourceFields(data);
                      }
                  );
              }

              // Get the GUID of the selected resource.
              function getResourceGuid() {
                  var defer = $.Deferred();
                  Office.context.document.getSelectedResourceAsync(
                      function (result) {
                          if (result.status === Office.AsyncResultStatus.Failed) {
                              onError(result.error);
                          }
                          else {
                              defer.resolve(result.value);
                          }
                      }
                  );
                  return defer.promise();
              }

              // Get the specified fields for the selected resource.
              function getResourceFields(resourceGuid) {
                  var targetFields =
                      [Office.ProjectResourceFields.Name,
                       Office.ProjectResourceFields.Units, 
                       Office.ProjectResourceFields.BaseCalendar];
                  var fieldValues = ['Name: ', 'Units: ', 'Base calendar: '];
                  var index = 0; 
                  getField();

                  // Get each field, and then display the field values in the add-in.
                  function getField() {
                      if (index == targetFields.length) {
                          var output = '';
                          for (var i = 0; i < fieldValues.length; i++) {
                              output += fieldValues[i] + '<br />';
                          }
                          $('#message').html(output);
                      }

                      // If the call is successful, get the field value and then get the next field.
                      else {
                          Office.context.document.getResourceFieldAsync(
                              resourceGuid,
                              targetFields[index],
                              function (result) {
                                  if (result.status === Office.AsyncResultStatus.Succeeded) {
                                      fieldValues[index] += result.value.fieldValue;
                                      getField(index++);
                                  }
                                  else {
                                      onError(result.error);
                                  }
                              }
                          );
                      }
                  }
              }

              function onError(error) {
                  $('#message').html(error.name + ' ' + error.code + ': ' + error.message);
              }
          })();
          ```
      parameters:
        - id: callback
          description: 'Opcional. Una función que se invoca cuando se devuelve la devolución de llamada, cuyo único parámetro es de tipo [Office. asyncResult](xref:office.Office.AsyncResult)<!-- -->. La `value` propiedad del resultado es el GUID del recurso como una cadena.'
          type:
            - '(result: AsyncResult<string>) => void'
  - uid: office.Office.Document.getSelectedTaskAsync
    summary: Solo documentos de proyecto. Obtener el identificador de la tarea seleccionada actualmente.
    name: 'getSelectedTaskAsync(options, callback)'
    fullName: 'getSelectedTaskAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSelectedTaskAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: 'Proporciona una opción para conservar los datos de contexto de cualquier tipo, sin cambios, para su uso en una devolución de llamada.'
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: 'Opcional. Una función que se invoca cuando se devuelve la devolución de llamada, cuyo único parámetro es de tipo [Office. asyncResult](xref:office.Office.AsyncResult)<!-- -->. La `value` propiedad del resultado es el GUID del recurso como una cadena.'
          type:
            - '(result: AsyncResult<string>) => void'
  - uid: office.Office.Document.getSelectedTaskAsync_1
    summary: Solo documentos de proyecto. Obtener el identificador de la tarea seleccionada actualmente.
    name: getSelectedTaskAsync(callback)
    fullName: getSelectedTaskAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSelectedTaskAsync(callback?: (result: AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>Ejemplos

          ```javascript
          // The following code example calls getSelectedTaskAsync to get the GUID of the task that's currently
          // selected in a task view. Then it gets task properties by calling getTaskAsync.
          // The example assumes your add-in has a reference to the jQuery library and that the following page
          // controls are defined in the content div in the page body:
          // <input id="get-info" type="button" value="Get info" /><br />
          // <span id="message"></span>

          (function () {
              "use strict";

              // The initialize function must be run each time a new page is loaded.
              Office.initialize = function (reason) {
                  $(document).ready(function () {

                      // After the DOM is loaded, add-in-specific code can run.
                      $('#get-info').click(getTaskInfo);
                  });
              };

              // // Get the GUID of the task, and then get local task properties.
              function getTaskInfo() {
                  getTaskGuid().then(
                      function (data) {
                          getTaskProperties(data);
                      }
                  );
              }

              // Get the GUID of the selected task.
              function getTaskGuid() {
                  var defer = $.Deferred();
                  Office.context.document.getSelectedTaskAsync(
                      function (result) {
                          if (result.status === Office.AsyncResultStatus.Failed) {
                              onError(result.error);
                          }
                          else {
                              defer.resolve(result.value);
                          }
                      }
                  );
                  return defer.promise();
              }

              // Get local properties for the selected task, and then display it in the add-in.
              function getTaskProperties(taskGuid) {
                  Office.context.document.getTaskAsync(
                      taskGuid,
                      function (result) {
                          if (result.status === Office.AsyncResultStatus.Failed) {
                              onError(result.error);
                          }
                          else {
                              var taskInfo = result.value;
                              var output = String.format(
                                  'Name: {0}<br/>GUID: {1}<br/>SharePoint task ID: {2}<br/>Resource names: {3}',
                                  taskInfo.taskName, taskGuid, taskInfo.wssTaskId, taskInfo.resourceNames);
                              $('#message').html(output);
                          }
                      }
                  );
              }

              function onError(error) {
                  $('#message').html(error.name + ' ' + error.code + ': ' + error.message);
              }
          })();
          ```
      parameters:
        - id: callback
          description: 'Opcional. Una función que se invoca cuando se devuelve la devolución de llamada, cuyo único parámetro es de tipo [Office. asyncResult](xref:office.Office.AsyncResult)<!-- -->. La `value` propiedad del resultado es el GUID del recurso como una cadena.'
          type:
            - '(result: AsyncResult<string>) => void'
  - uid: office.Office.Document.getSelectedViewAsync
    summary: 'Solo documentos de proyecto. Obtener el tipo de vista seleccionado actual (por ejemplo, Gantt) y nombre de vista.'
    name: 'getSelectedViewAsync(options, callback)'
    fullName: 'getSelectedViewAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSelectedViewAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<any>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: 'Proporciona una opción para conservar los datos de contexto de cualquier tipo, sin cambios, para su uso en una devolución de llamada.'
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: 'Opcional. Una función que se invoca cuando se devuelve la devolución de llamada, cuyo único parámetro es de tipo [Office. asyncResult](xref:office.Office.AsyncResult)<!-- -->. La `value` propiedad del resultado contiene las siguientes propiedades: `viewName` -el nombre de la vista, como una constante ProjectViewTypes. `viewType`: El tipo de vista, como valor entero de una constante ProjectViewTypes.'
          type:
            - '(result: AsyncResult<any>) => void'
  - uid: office.Office.Document.getSelectedViewAsync_1
    summary: 'Solo documentos de proyecto. Obtener el tipo de vista seleccionado actual (por ejemplo, Gantt) y nombre de vista.'
    name: getSelectedViewAsync(callback)
    fullName: getSelectedViewAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSelectedViewAsync(callback?: (result: AsyncResult<any>) => void): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>Ejemplos

          ```javascript
          // The following code example calls adds a ViewSelectionChanged event handler that
          // calls getSelectedViewAsync to get the name and type of the active view in the document.
          // The example assumes your add-in has a reference to the jQuery library and that
          // the following page control is defined in the content div in the page body:
          // <span id="message"></span>

          (function () {
              "use strict";

              // The initialize function must be run each time a new page is loaded.
              Office.initialize = function (reason) {
                  $(document).ready(function () {

                      // After the DOM is loaded, add-in-specific code can run.
                      Office.context.document.addHandlerAsync(
                          Office.EventType.ViewSelectionChanged,
                          getActiveView);
                      getActiveView();
                  });
              };

              // Get the active view's name and type.
              function getActiveView() {
                  Office.context.document.getSelectedViewAsync(
                      function (result) {
                          if (result.status === Office.AsyncResultStatus.Failed) {
                              onError(result.error);
                          }
                          else {
                              var output = String.format(
                                  'View name: {0}<br/>View type: {1}',
                                  result.value.viewName, viewType);
                              $('#message').html(output);
                          }
                      }
                  );
              }

              function onError(error) {
                  $('#message').html(error.name + ' ' + error.code + ': ' + error.message);
              }
          })();
          ```
      parameters:
        - id: callback
          description: 'Opcional. Una función que se invoca cuando se devuelve la devolución de llamada, cuyo único parámetro es de tipo [Office. asyncResult](xref:office.Office.AsyncResult)<!-- -->. La `value` propiedad del resultado contiene las siguientes propiedades: `viewName` -el nombre de la vista, como una constante ProjectViewTypes. `viewType`: El tipo de vista, como valor entero de una constante ProjectViewTypes.'
          type:
            - '(result: AsyncResult<any>) => void'
  - uid: office.Office.Document.getTaskAsync
    summary: 'Solo documentos de proyecto. Obtener el nombre de la tarea, el identificador de la tarea de WSS y ResourceNames para el taskId determinado.'
    name: 'getTaskAsync(taskId, options, callback)'
    fullName: 'getTaskAsync(taskId, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTaskAsync(taskId: string, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<any>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: taskId
          description: Puede ser una cadena o un valor del identificador de tarea.
          type:
            - string
        - id: options
          description: 'Proporciona una opción para conservar los datos de contexto de cualquier tipo, sin cambios, para su uso en una devolución de llamada.'
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: 'Opcional. Una función que se invoca cuando se devuelve la devolución de llamada, cuyo único parámetro es de tipo [Office. asyncResult](xref:office.Office.AsyncResult)<!-- -->. La `value` propiedad del resultado contiene las siguientes propiedades: `taskName` el nombre de la tarea. `wssTaskId`: El identificador de la tarea en la lista de tareas sincronizadas de SharePoint. Si el proyecto no está sincronizado con una lista de tareas de SharePoint, el valor es 0. `resourceNames`: Lista separada por comas de los nombres de los recursos asignados a la tarea.'
          type:
            - '(result: AsyncResult<any>) => void'
  - uid: office.Office.Document.getTaskAsync_1
    summary: 'Solo documentos de proyecto. Obtener el nombre de la tarea, el identificador de la tarea de WSS y ResourceNames para el taskId determinado.'
    name: 'getTaskAsync(taskId, callback)'
    fullName: 'getTaskAsync(taskId, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTaskAsync(taskId: string, callback?: (result: AsyncResult<any>) => void): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>Ejemplos

          ```javascript
          // The following code example calls getSelectedTaskAsync to get the task GUID of the currently
          // selected task. Then it calls getTaskAsync to get the properties for the task that are
          // available from the JavaScript API for Office.
          // The example assumes your add-in has a reference to the jQuery library and that the
          // following page controls are defined in the content div in the page body:
          // <input id="get-info" type="button" value="Get info" /><br />
          // <span id="message"></span>

          (function () {
              "use strict";

              // The initialize function must be run each time a new page is loaded.
              Office.initialize = function (reason) {
                  $(document).ready(function () {

                      // After the DOM is loaded, add-in-specific code can run.
                      $('#get-info').click(getTaskInfo);
                  });
              };

              // Get the GUID of the task, and then get local task properties.
              function getTaskInfo() {
                  getTaskGuid().then(
                      function (data) {
                          getTaskProperties(data);
                      }
                  );
              }

              // Get the GUID of the selected task.
              function getTaskGuid() {
                  var defer = $.Deferred();
                  Office.context.document.getSelectedTaskAsync(
                      function (result) {
                          if (result.status === Office.AsyncResultStatus.Failed) {
                              onError(result.error);
                          }
                          else {
                              defer.resolve(result.value);
                          }
                      }
                  );
                  return defer.promise();
              }

              // Get local properties for the selected task, and then display it in the add-in.
              function getTaskProperties(taskGuid) {
                  Office.context.document.getTaskAsync(
                      taskGuid,
                      function (result) {
                          if (result.status === Office.AsyncResultStatus.Failed) {
                              onError(result.error);
                          }
                          else {
                              var taskInfo = result.value;
                              var output = String.format(
                                  'Name: {0}<br/>GUID: {1}<br/>SharePoint task ID: {2}<br/>Resource names: {3}',
                                  taskInfo.taskName, taskGuid, taskInfo.wssTaskId, taskInfo.resourceNames);
                              $('#message').html(output);
                          }
                      }
                  );
              }

              function onError(error) {
                  $('#message').html(error.name + ' ' + error.code + ': ' + error.message);
              }
          })();
          ```
      parameters:
        - id: taskId
          description: Puede ser una cadena o un valor del identificador de tarea.
          type:
            - string
        - id: callback
          description: 'Opcional. Una función que se invoca cuando se devuelve la devolución de llamada, cuyo único parámetro es de tipo [Office. asyncResult](xref:office.Office.AsyncResult)<!-- -->. La `value` propiedad del resultado contiene las siguientes propiedades: `taskName` el nombre de la tarea. `wssTaskId`: El identificador de la tarea en la lista de tareas sincronizadas de SharePoint. Si el proyecto no está sincronizado con una lista de tareas de SharePoint, el valor es 0. `resourceNames`: Lista separada por comas de los nombres de los recursos asignados a la tarea.'
          type:
            - '(result: AsyncResult<any>) => void'
  - uid: office.Office.Document.getTaskByIndexAsync
    summary: |-
      Solo documentos de proyecto. Obtiene el GUID de la tarea que tiene el índice especificado en la colección de tareas.

      **Importante**: esta API solo funciona en el proyecto 2016 en el escritorio de Windows.
    name: 'getTaskByIndexAsync(taskIndex, options, callback)'
    fullName: 'getTaskByIndexAsync(taskIndex, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTaskByIndexAsync(taskIndex: number, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: taskIndex
          description: Índice de la tarea en la colección de tareas del proyecto.
          type:
            - number
        - id: options
          description: 'Proporciona una opción para conservar los datos de contexto de cualquier tipo, sin cambios, para su uso en una devolución de llamada.'
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: 'Opcional. Una función que se invoca cuando se devuelve la devolución de llamada, cuyo único parámetro es de tipo [Office. asyncResult](xref:office.Office.AsyncResult)<!-- -->. La `value` propiedad del resultado es el GUID de la tarea como una cadena.'
          type:
            - '(result: AsyncResult<string>) => void'
  - uid: office.Office.Document.getTaskByIndexAsync_1
    summary: |-
      Solo documentos de proyecto. Obtiene el GUID de la tarea que tiene el índice especificado en la colección de tareas.

      **Importante**: esta API solo funciona en el proyecto 2016 en el escritorio de Windows.
    name: 'getTaskByIndexAsync(taskIndex, callback)'
    fullName: 'getTaskByIndexAsync(taskIndex, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTaskByIndexAsync(taskIndex: number, callback?: (result: AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>Ejemplos

          ```javascript
          // The following code example calls getMaxTaskIndexAsync to get the
          // maximum index in the project's task collection, and then
          // calls getTaskByIndexAsync to get the GUID for each task.
          // The example assumes that your add-in has a reference to the
          // jQuery library and that the following page controls are defined
          // in the content div in the page body:
          // <input id="get-info" type="button" value="Get info" /><br />
          // <span id="message"></span>

          (function () {
              "use strict";
              var taskGuids = ;

              // The initialize function must be run each time a new page is loaded.
              Office.initialize = function (reason) {
                  $(document).ready(function () {

                      // After the DOM is loaded, add-in-specific code can run.
                      app.initialize();
                      $('#get-info').click(getTaskInfo);
                  });
              };

              // Get the maximum task index, and then get the task GUIDs.
              function getTaskInfo() {
                  getMaxTaskIndex().then(
                      function (data) {
                          getTaskGuids(data);
                      }
                  );
              }

              // Get the maximum index of the tasks for the current project.
              function getMaxTaskIndex() {
                  var defer = $.Deferred();
                  Office.context.document.getMaxTaskIndexAsync(
                      function (result) {
                          if (result.status === Office.AsyncResultStatus.Failed) {
                              onError(result.error);
                          }
                          else {
                              defer.resolve(result.value);
                          }
                      }
                  );
                  return defer.promise();
              }

              // Get each task GUID, and then display the GUIDs in the add-in.
              function getTaskGuids(maxTaskIndex) {
                  var defer = $.Deferred();
                  for (var i = 0; i <= maxTaskIndex; i++) {
                      getTaskGuid(i);
                  }
                  return defer.promise();
                  function getTaskGuid(index) {
                      Office.context.document.getTaskByIndexAsync(index,
                          function (result) {
                              if (result.status === Office.AsyncResultStatus.Succeeded) {
                                  taskGuids.push(result.value);
                                  if (index == maxTaskIndex) {
                                      defer.resolve();
                                      $('#message').html(taskGuids.toString());
                                  }
                              }
                              else {
                                  onError(result.error);
                              }
                          }
                      );
                  }
              }
              function onError(error) {
                  app.showNotification(error.name + ' ' + error.code + ': ' + error.message);
              }
          })();
          ```
      parameters:
        - id: taskIndex
          description: Índice de la tarea en la colección de tareas del proyecto.
          type:
            - number
        - id: callback
          description: 'Opcional. Una función que se invoca cuando se devuelve la devolución de llamada, cuyo único parámetro es de tipo [Office. asyncResult](xref:office.Office.AsyncResult)<!-- -->. La `value` propiedad del resultado es el GUID de la tarea como una cadena.'
          type:
            - '(result: AsyncResult<string>) => void'
  - uid: office.Office.Document.getTaskFieldAsync
    summary: Solo documentos de proyecto. Obtener campo de tarea para el identificador de tarea proporcionado. (p. ej. StartDate).
    name: 'getTaskFieldAsync(taskId, fieldId, options, callback)'
    fullName: 'getTaskFieldAsync(taskId, fieldId, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTaskFieldAsync(taskId: string, fieldId: number, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<any>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: taskId
          description: Puede ser una cadena o un valor del identificador de tarea.
          type:
            - string
        - id: fieldId
          description: Campos de tarea.
          type:
            - number
        - id: options
          description: 'Proporciona una opción para conservar los datos de contexto de cualquier tipo, sin cambios, para su uso en una devolución de llamada.'
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: 'Opcional. Una función que se invoca cuando se devuelve la devolución de llamada, cuyo único parámetro es de tipo [Office. asyncResult](xref:office.Office.AsyncResult)<!-- -->. La `value` propiedad del resultado contiene la `fieldValue` propiedad, que representa el valor del campo especificado.'
          type:
            - '(result: AsyncResult<any>) => void'
  - uid: office.Office.Document.getTaskFieldAsync_1
    summary: Solo documentos de proyecto. Obtener campo de tarea para el identificador de tarea proporcionado. (p. ej. StartDate).
    name: 'getTaskFieldAsync(taskId, fieldId, callback)'
    fullName: 'getTaskFieldAsync(taskId, fieldId, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTaskFieldAsync(taskId: string, fieldId: number, callback?: (result: AsyncResult<any>) => void): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>Ejemplos

          ```javascript
          // The following code example calls getSelectedTaskAsync to get the GUID of the task that's currently
          // selected in a task view. Then it gets two task field values by calling getTaskFieldAsync recursively.
          // The example assumes your add-in has a reference to the jQuery library and that the following page
          // controls are defined in the content div in the page body:
          // <input id="get-info" type="button" value="Get info" /><br />
          // <span id="message"></span>

          (function () {
              "use strict";

              // The initialize function must be run each time a new page is loaded.
              Office.initialize = function (reason) {
                  $(document).ready(function () {
                      
                      // After the DOM is loaded, add-in-specific code can run.
                      $('#get-info').click(getTaskInfo);
                  });
              };

              // Get the GUID of the task, and then get the task fields.
              function getTaskInfo() {
                  getTaskGuid().then(
                      function (data) {
                          getTaskFields(data);
                      }
                  );
              }

              // Get the GUID of the selected task.
              function getTaskGuid() {
                  var defer = $.Deferred();
                  Office.context.document.getSelectedTaskAsync(
                      function (result) {
                          if (result.status === Office.AsyncResultStatus.Failed) {
                              onError(result.error);
                          }
                          else {
                              defer.resolve(result.value);
                          }
                      }
                  );
                  return defer.promise();
              }

              // Get the specified fields for the selected task.
              function getTaskFields(taskGuid) {
                  var output = '';
                  var targetFields = [Office.ProjectTaskFields.Priority, Office.ProjectTaskFields.PercentComplete];
                  var fieldValues = ['Priority: ', '% Complete: '];
                  var index = 0;
                  getField();

                  // Get each field, and then display the field values in the add-in.
                  function getField() {
                      if (index == targetFields.length) {
                          for (var i = 0; i < fieldValues.length; i++) {
                              output += fieldValues[i] + '<br />';
                          }
                          $('#message').html(output);
                      }

                      // Get the field value. If the call is successful, then get the next field.
                      else {
                          Office.context.document.getTaskFieldAsync(
                              taskGuid,
                              targetFields[index],
                              function (result) {
                                  if (result.status === Office.AsyncResultStatus.Succeeded) {
                                      fieldValues[index] += result.value.fieldValue;
                                      getField(index++);
                                  }
                                  else {
                                      onError(result.error);
                                  }
                              }
                          );
                      }
                  }
              }

              function onError(error) {
                  $('#message').html(error.name + ' ' + error.code + ': ' + error.message);
              }
          })();
          ```
      parameters:
        - id: taskId
          description: Puede ser una cadena o un valor del identificador de tarea.
          type:
            - string
        - id: fieldId
          description: Campos de tarea.
          type:
            - number
        - id: callback
          description: 'Opcional. Una función que se invoca cuando se devuelve la devolución de llamada, cuyo único parámetro es de tipo [Office. asyncResult](xref:office.Office.AsyncResult)<!-- -->. La `value` propiedad del resultado contiene la `fieldValue` propiedad, que representa el valor del campo especificado.'
          type:
            - '(result: AsyncResult<any>) => void'
  - uid: office.Office.Document.getWSSUrlAsync
    summary: 'Solo documentos de proyecto. Obtener la dirección URL de WSS y el nombre de lista de la lista de tareas, la MPP también se sincroniza.'
    name: 'getWSSUrlAsync(options, callback)'
    fullName: 'getWSSUrlAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getWSSUrlAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<any>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: 'Proporciona una opción para conservar los datos de contexto de cualquier tipo, sin cambios, para su uso en una devolución de llamada.'
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: 'Opcional. Una función que se invoca cuando se devuelve la devolución de llamada, cuyo único parámetro es de tipo [Office. asyncResult](xref:office.Office.AsyncResult)<!-- -->. La `value` propiedad del resultado contiene las siguientes propiedades: `listName` -el nombre de la lista de tareas sincronizadas de SharePoint. `serverUrl`: la dirección URL de la lista sincronizada de tareas de SharePoint.'
          type:
            - '(result: AsyncResult<any>) => void'
  - uid: office.Office.Document.getWSSUrlAsync_1
    summary: 'Solo documentos de proyecto. Obtener la dirección URL de WSS y el nombre de lista de la lista de tareas, la MPP también se sincroniza.'
    name: getWSSUrlAsync(callback)
    fullName: getWSSUrlAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getWSSUrlAsync(callback?: (result: AsyncResult<any>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: 'Opcional. Una función que se invoca cuando se devuelve la devolución de llamada, cuyo único parámetro es de tipo [Office. asyncResult](xref:office.Office.AsyncResult)<!-- -->. La `value` propiedad del resultado contiene las siguientes propiedades: `listName` -el nombre de la lista de tareas sincronizadas de SharePoint. `serverUrl`: la dirección URL de la lista sincronizada de tareas de SharePoint.'
          type:
            - '(result: AsyncResult<any>) => void'
  - uid: office.Office.Document.goToByIdAsync
    summary: Va al objeto o la ubicación que se haya especificado en el documento.
    remarks: |-
      **Conjunto de requisitos**: [no está en un conjunto](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#methods-that-arent-part-of-a-requirement-set)

      PowerPoint no admite el método goToByIdAsync en vistas maestras.

      El comportamiento causado por la opción selectionMode varía en función del host:

      En Excel: `Office.SelectionMode.Selected` selecciona todo el contenido del enlace o elemento con nombre. Office.SelectionMode.None: para los enlaces de texto, se selecciona la celda; para enlaces de matrices, los enlaces de tablas y los elementos con nombre, se selecciona la primera celda de datos (no la primera celda de la fila de encabezado de las tablas).

      En PowerPoint: `Office.SelectionMode.Selected` selecciona el título de la diapositiva o el primer cuadro de texto de la diapositiva. `Office.SelectionMode.None`no selecciona nada.

      En Word: `Office.SelectionMode.Selected` selecciona todo el contenido del enlace. Office.SelectionMode.None para los enlaces de texto; mueve el cursor al principio del texto; para los enlaces de matriz y los enlaces de la tabla, selecciona la primera celda de datos (no la primera celda de la fila de encabezado de las tablas).
    name: 'goToByIdAsync(id, goToType, options, callback)'
    fullName: 'goToByIdAsync(id, goToType, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'goToByIdAsync(id: string | number, goToType: GoToType, options?: GoToByIdOptions, callback?: (result: AsyncResult<any>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: id
          description: El identificador del objeto o la ubicación a la que dirigirse.
          type:
            - string | number
        - id: goToType
          description: El tipo de ubicación a la que dirigirse.
          type:
            - office.Office.GoToType
        - id: options
          description: Proporciona opciones para decidir si se debe seleccionar la ubicación a la que se va a navegar.
          type:
            - office.Office.GoToByIdOptions
        - id: callback
          description: 'Opcional. Una función que se invoca cuando se devuelve la devolución de llamada, cuyo único parámetro es de tipo [Office. asyncResult](xref:office.Office.AsyncResult)<!-- -->. La `value` propiedad del resultado es la vista actual.'
          type:
            - '(result: AsyncResult<any>) => void'
  - uid: office.Office.Document.goToByIdAsync_1
    summary: Va al objeto o la ubicación que se haya especificado en el documento.
    remarks: |-
      **Conjunto de requisitos**: [no está en un conjunto](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#methods-that-arent-part-of-a-requirement-set)

      PowerPoint no admite el método goToByIdAsync en vistas maestras.

      El comportamiento causado por la opción selectionMode varía en función del host:

      En Excel: `Office.SelectionMode.Selected` selecciona todo el contenido del enlace o elemento con nombre. Office.SelectionMode.None: para los enlaces de texto, se selecciona la celda; para enlaces de matrices, los enlaces de tablas y los elementos con nombre, se selecciona la primera celda de datos (no la primera celda de la fila de encabezado de las tablas).

      En PowerPoint: `Office.SelectionMode.Selected` selecciona el título de la diapositiva o el primer cuadro de texto de la diapositiva. `Office.SelectionMode.None`no selecciona nada.

      En Word: `Office.SelectionMode.Selected` selecciona todo el contenido del enlace. Office.SelectionMode.None para los enlaces de texto; mueve el cursor al principio del texto; para los enlaces de matriz y los enlaces de la tabla, selecciona la primera celda de datos (no la primera celda de la fila de encabezado de las tablas).

      #### <a name="examples"></a>Ejemplos

      ```javascript
      // Go to a binding by id (Word and Excel)
      // The following example shows how to:
      // 1. Create a table binding using the addFromSelectionAsync method as a sample binding to work with.
      // 2. Specify that binding as the binding to go to.
      // 3. Pass an anonymous callback function that returns the status of the operation
      //    to the callback parameter of the goToByIdAsync method.
      // 4. Display the value on the add-in's page.
      function gotoBinding() {
          // Create a new table binding for the selected table.
          Office.context.document.bindings.addFromSelectionAsync("table",{ id: "MyTableBinding" }, function (asyncResult) {
          if (asyncResult.status == "failed") {
                    showMessage("Action failed with error: " + asyncResult.error.message);
                }
                else {
                    showMessage("Added new binding with type: " + asyncResult.value.type +" and id: " + asyncResult.value.id);
                }
          });

          // Go to binding by id.
          Office.context.document.goToByIdAsync("MyTableBinding", Office.GoToType.Binding, function (asyncResult) {
              if (asyncResult.status == "failed") {
                  showMessage("Action failed with error: " + asyncResult.error.message);
              }
              else {
                  showMessage("Navigation successful");
              }
          });
      }

      // Go to a table in a spreadsheet (Excel)
      // The following example shows how to:
      // 1. Specify a table by name as the table to go to.
      // 2. Pass an anonymous callback function that returns the status of the operation
      //    to the callback parameter of the goToByIdAsync method.
      // 3. Display the value on the add-in's page.
      function goToTable() {
          Office.context.document.goToByIdAsync("Table1", Office.GoToType.NamedItem, function (asyncResult) {
              if (asyncResult.status == "failed") {
                  showMessage("Action failed with error: " + asyncResult.error.message);
              }
              else {
                  showMessage("Navigation successful");
              }
          });
      }

      // Go to the currently selected slide by id (PowerPoint)
      // The following example shows how to:
      // 1. Get the id of the currently selected slides using the getSelectedDataAsync method.
      // 2. Specify the returned id as the slide to go to.
      // 3. Pass an anonymous callback function that returns the status of the operation
      //    to the callback parameter of the goToByIdAsync method.
      // 4. Display the value of the stringified JSON object returned by asyncResult.value,
      //    which contains information about the selected slides, on the add-in's page.
      var firstSlideId = 0;
      function gotoSelectedSlide() {
          //Get currently selected slide's id
          Office.context.document.getSelectedDataAsync(Office.CoercionType.SlideRange, function (asyncResult) {
              if (asyncResult.status == "failed") {
                  app.showNotification("Action failed with error: " + asyncResult.error.message);
              }
              else {
                  firstSlideId = asyncResult.value.slides[0].id;
                  app.showNotification(JSON.stringify(asyncResult.value));
              }
          });
          //Go to slide by id.
          Office.context.document.goToByIdAsync(firstSlideId, Office.GoToType.Slide, function (asyncResult) {
              if (asyncResult.status == "failed") {
                  app.showNotification("Action failed with error: " + asyncResult.error.message);
              }
              else {
                  app.showNotification("Navigation successful");
              }
          });
      }

      // Go to slide by index (PowerPoint)
      // The following example shows how to:
      // 1. Specify the index of the first, last, previous, or next slide to go to.
      // 2. Pass an anonymous callback function that returns the status of the operation
      //    to the callback parameter of the goToByIdAsync method.
      // 3. Display the value on the add-in's page.
      function goToSlideByIndex() {
          var goToFirst = Office.Index.First;
          var goToLast = Office.Index.Last;
          var goToPrevious = Office.Index.Previous;
          var goToNext = Office.Index.Next;

          Office.context.document.goToByIdAsync(goToNext, Office.GoToType.Index, function (asyncResult) {
              if (asyncResult.status == "failed") {
                  showMessage("Action failed with error: " + asyncResult.error.message);
              }
              else {
                  showMessage("Navigation successful");
              }
          });
      }
      ```
    name: 'goToByIdAsync(id, goToType, callback)'
    fullName: 'goToByIdAsync(id, goToType, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'goToByIdAsync(id: string | number, goToType: GoToType, callback?: (result: AsyncResult<any>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: id
          description: El identificador del objeto o la ubicación a la que dirigirse.
          type:
            - string | number
        - id: goToType
          description: El tipo de ubicación a la que dirigirse.
          type:
            - office.Office.GoToType
        - id: callback
          description: 'Opcional. Una función que se invoca cuando se devuelve la devolución de llamada, cuyo único parámetro es de tipo [Office. asyncResult](xref:office.Office.AsyncResult)<!-- -->. La `value` propiedad del resultado es la vista actual.'
          type:
            - '(result: AsyncResult<any>) => void'
  - uid: office.Office.Document.removeHandlerAsync
    summary: Quita un controlador de eventos para el tipo de evento especificado.
    remarks: '**Conjunto de requisitos**: [DocumentEvents](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#documentevents)'
    name: 'removeHandlerAsync(eventType, options, callback)'
    fullName: 'removeHandlerAsync(eventType, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeHandlerAsync(eventType: Office.EventType, options?: RemoveHandlerOptions, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: El tipo de evento. Para el documento puede ser ' Document. SelectionChanged ' o ' Document. ActiveViewChanged '.
          type:
            - office.Office.EventType
        - id: options
          description: Proporciona opciones para determinar qué controlador o controladores de eventos se quitan.
          type:
            - office.Office.RemoveHandlerOptions
        - id: callback
          description: 'Opcional. Una función que se invoca cuando se devuelve la devolución de llamada, cuyo único parámetro es de tipo [Office. asyncResult](xref:office.Office.AsyncResult)<!-- -->.'
          type:
            - '(result: AsyncResult<void>) => void'
  - uid: office.Office.Document.removeHandlerAsync_1
    summary: Quita un controlador de eventos para el tipo de evento especificado.
    remarks: |-
      **Conjunto de requisitos**: [DocumentEvents](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#documentevents)

      #### <a name="examples"></a>Ejemplos

      ```javascript
      // The following example removes the event handler named 'MyHandler'.
      function removeSelectionChangedEventHandler() {
          Office.context.document.removeHandlerAsync(Office.EventType.DocumentSelectionChanged, {handler:MyHandler});
      }

      function MyHandler(eventArgs) {
          doSomethingWithDocument(eventArgs.document);
      }
      ```
      ```javascript
      // The following code example uses addHandlerAsync to add an event handler for the
      // ResourceSelectionChanged event and removeHandlerAsync to remove the handler.
      // When a resource is selected in a resource view, the handler displays the
      // resource GUID. When the handler is removed, the GUID is not displayed.
      // The example assumes that your add-in has a reference to the jQuery library and
      // that the following page control is defined in the content div in the page body:
      // <input id="remove-handler" type="button" value="Remove handler" /><br />
      // <span id="message"></span>

      (function () {
          "use strict";

          // The initialize function must be run each time a new page is loaded.
          Office.initialize = function (reason) {
              $(document).ready(function () {

                  // After the DOM is loaded, add-in-specific code can run.
                  Office.context.document.addHandlerAsync(
                      Office.EventType.ResourceSelectionChanged,
                      getResourceGuid);
                  $('#remove-handler').click(removeEventHandler);
              });
          };

          // Remove the event handler.
          function removeEventHandler() {
              Office.context.document.removeHandlerAsync(
                  Office.EventType.ResourceSelectionChanged,
                  {handler:getResourceGuid,
                  asyncContext:'The handler is removed.'},
                  function (result) {
                      if (result.status === Office.AsyncResultStatus.Failed) {
                          onError(result.error);
                      }
                      else {
                          $('#remove-handler').attr('disabled', 'disabled');
                          $('#message').html(result.asyncContext);
                      }
                  }
              );
          }

          // Get the GUID of the currently selected resource and display it in the add-in.
          function getResourceGuid() {
              Office.context.document.getSelectedResourceAsync(
                  function (result) {
                      if (result.status === Office.AsyncResultStatus.Failed) {
                          onError(result.error);
                      }
                      else {
                          $('#message').html('Resource GUID: ' + result.value);
                      }
                  }
              );
          }

          function onError(error) {
              $('#message').html(error.name + ' ' + error.code + ': ' + error.message);
          }
      })();
      ```
    name: 'removeHandlerAsync(eventType, callback)'
    fullName: 'removeHandlerAsync(eventType, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeHandlerAsync(eventType: Office.EventType, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: El tipo de evento. Para el documento puede ser ' Document. SelectionChanged ' o ' Document. ActiveViewChanged '.
          type:
            - office.Office.EventType
        - id: callback
          description: 'Opcional. Una función que se invoca cuando se devuelve la devolución de llamada, cuyo único parámetro es de tipo [Office. asyncResult](xref:office.Office.AsyncResult)<!-- -->.'
          type:
            - '(result: AsyncResult<void>) => void'
  - uid: office.Office.Document.setResourceFieldAsync
    summary: |-
      Solo documentos de proyecto. Establezca el campo de recurso para el identificador de recurso especificado.

      **Importante**: esta API solo funciona en el proyecto 2016 en el escritorio de Windows.
    name: 'setResourceFieldAsync(resourceId, fieldId, fieldValue, options, callback)'
    fullName: 'setResourceFieldAsync(resourceId, fieldId, fieldValue, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setResourceFieldAsync(resourceId: string, fieldId: number, fieldValue: string | number | boolean | object, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: resourceId
          description: Puede ser una cadena o un valor del identificador de recurso.
          type:
            - string
        - id: fieldId
          description: Campos de recursos.
          type:
            - number
        - id: fieldValue
          description: Valor del campo de destino.
          type:
            - string | number | boolean | object
        - id: options
          description: 'Proporciona una opción para conservar los datos de contexto de cualquier tipo, sin cambios, para su uso en una devolución de llamada.'
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: 'Opcional. Una función que se invoca cuando se devuelve la devolución de llamada, cuyo único parámetro es de tipo [Office. asyncResult](xref:office.Office.AsyncResult)<!-- -->.'
          type:
            - '(result: AsyncResult<void>) => void'
  - uid: office.Office.Document.setResourceFieldAsync_1
    summary: |-
      Solo documentos de proyecto. Establezca el campo de recurso para el identificador de recurso especificado.

      **Importante**: esta API solo funciona en el proyecto 2016 en el escritorio de Windows.
    name: 'setResourceFieldAsync(resourceId, fieldId, fieldValue, callback)'
    fullName: 'setResourceFieldAsync(resourceId, fieldId, fieldValue, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setResourceFieldAsync(resourceId: string, fieldId: number, fieldValue: string | number | boolean | object, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>Ejemplos

          ```javascript
          // The following code example calls getSelectedResourceAsync to get the GUID of the resource that's
          // currently selected in a resource view. Then it sets two resource field values by calling
          // setResourceFieldAsync recursively.
          // The getSelectedTaskAsync method used in the example requires that a task view
          // (for example, Task Usage) is the active view and that a task is selected. See the addHandlerAsync
          // method for an example that activates a button based on the active view type.
          // The example assumes your add-in has a reference to the jQuery library and that the
          // following page controls are defined in the content div in the page body:
          // <input id="set-info" type="button" value="Set info" /><br />
          // <span id="message"></span>

          (function () {
              "use strict";

              // The initialize function must be run each time a new page is loaded.
              Office.initialize = function (reason) {
                  $(document).ready(function () {

                      // After the DOM is loaded, add-in-specific code can run.
                      app.initialize();
                      $('#set-info').click(setResourceInfo);
                  });
              };

              // Get the GUID of the resource, and then get the resource fields.
              function setResourceInfo() {
                  getResourceGuid().then(
                      function (data) {
                          setResourceFields(data);
                      }
                  );
              }

              // Get the GUID of the selected resource.
              function getResourceGuid() {
                  var defer = $.Deferred();
                  Office.context.document.getSelectedResourceAsync(
                      function (result) {
                          if (result.status === Office.AsyncResultStatus.Failed) {
                              onError(result.error);
                          }
                          else {
                              defer.resolve(result.value);
                          }
                      }
                  );
                  return defer.promise();
              }

              // Set the specified fields for the selected resource.
              function setResourceFields(resourceGuid) {
                  var targetFields = [Office.ProjectResourceFields.StandardRate, Office.ProjectResourceFields.Notes];
                  var fieldValues = [.28, 'Notes for the resource.'];

                  // Set the field value. If the call is successful, set the next field.
                  for (var i = 0; i < targetFields.length; i++) {
                      Office.context.document.setResourceFieldAsync(
                          resourceGuid,
                          targetFields[i],
                          fieldValues[i],
                          function (result) {
                              if (result.status === Office.AsyncResultStatus.Succeeded) {
                                  i++;
                              }
                              else {
                                  onError(result.error);
                              }
                          }
                      );
                  }
                  $('#message').html('Field values set');
              }

              function onError(error) {
                  app.showNotification(error.name + ' ' + error.code + ': ' + error.message);
              }
          })();
          ```
      parameters:
        - id: resourceId
          description: Puede ser una cadena o un valor del identificador de recurso.
          type:
            - string
        - id: fieldId
          description: Campos de recursos.
          type:
            - number
        - id: fieldValue
          description: Valor del campo de destino.
          type:
            - string | number | boolean | object
        - id: callback
          description: 'Opcional. Una función que se invoca cuando se devuelve la devolución de llamada, cuyo único parámetro es de tipo [Office. asyncResult](xref:office.Office.AsyncResult)<!-- -->.'
          type:
            - '(result: AsyncResult<void>) => void'
  - uid: office.Office.Document.setSelectedDataAsync
    summary: Escribe los datos especificados en la selección actual.
    remarks: |-
      **Conjuntos de requisitos**:

      - [HtmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#htmlcoercion)<!-- -->, (al usar`Office.CoercionType.Html`<!-- -->)

      - [ImageCoercion 1,1](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/image-coercion-requirement-sets) (cuando se usa`Office.CoercionType.Image`<!-- -->)

      - [MatrixCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixcoercion) (cuando se usa`Office.CoercionType.Matrix`<!-- -->)

      - [OoxmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#ooxmlcoercion) (cuando se usa`Office.CoercionType.Ooxml`<!-- -->)

      - [Selection](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#selection)

      - [TableCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablecoercion) (cuando se usa`Office.CoercionType.Table`<!-- -->)

      - [TextCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textcoercion) (cuando se usa`Office.CoercionType.Text`<!-- -->)

      - [ImageCoercion 1,2](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/image-coercion-requirement-sets#imagecoercion-12) (cuando se usa`Office.CoercionType.XmlSvg`<!-- -->)

      **Comportamientos específicos de la aplicación**

      Al escribir datos en una selección, se aplican las siguientes acciones específicas de la aplicación.

      <table> <tr> <td>Word</td> <td>Si no hay ninguna selección y el punto de inserción está en una ubicación válida, el `data` especificado se inserta en el punto de inserción.</td> <td>Si `data` es una cadena, se inserta el texto especificado.</td> </tr> <tr> <td></td> <td></td> <td>Si `data` es una matriz de matrices ("Matrix") o un objeto TableData, se inserta una tabla de Word nueva.</td> </tr> <tr> <td></td> <td></td> <td>Si `data` es HTML, se inserta el HTML especificado. (**Importante**: Si alguno de los HTML insertados no es válido, Word no generará un error. Word insertará tantos elementos HTML como pueda y omitirá datos no válidos.</td> </tr> <tr> <td></td> <td></td> <td>Si `data` es Office Open XML, se inserta el XML especificado.</td> </tr> <tr> <td></td> <td></td> <td>Si `data` es una secuencia de imágenes codificada en Base64, se inserta la imagen especificada.</td> </tr> <tr> <td></td> <td>Si hay una selección</td> <td>Se reemplazará con el especificado `data` siguiendo las mismas reglas descritas anteriormente.</td> </tr> <tr> <td></td> <td>Insertar imágenes</td> <td>Las imágenes insertadas se colocan en línea. Los parámetros imageLeft e imageTop se ignoran. La relación de aspecto de la imagen siempre está bloqueada. Si solo se indica uno de los parámetros imageWidth e imageHeight, el otro valor se escalará automáticamente para conservar la relación de aspecto original.</td> </tr>

      <tr> <td>Excel</td> <td>Si se selecciona una sola celda</td> <td>Si `data` es una cadena, se inserta el texto especificado como valor de la celda actual.</td> </tr> <tr> <td></td> <td></td> <td>Si `data` es una matriz de matrices ("Matrix"), se inserta el conjunto de filas y columnas especificado, si no se sobrescribirán otros datos de las celdas circundantes.</td> </tr> <tr> <td></td> <td></td> <td>Si `data` es un objeto TableData, se inserta una tabla de Excel nueva con el conjunto de filas y encabezados especificado, si no se sobrescribirán otros datos de las celdas circundantes.</td> </tr> <tr> <td></td> <td>Si se seleccionan varias celdas</td> <td>If the shape does not match the shape of `data`<!-- -->, se devuelve un error.</td> </tr> <tr> <td></td> <td></td> <td>If the shape of the selection exactly matches the shape of `data`<!-- -->, los valores de las celdas seleccionadas se actualizan en función de los valores de`data`<!-- -->.</td> </tr> <tr> <td></td> <td>Insertar imágenes</td> <td>Las imágenes insertadas son flotantes. Los parámetros de posición imageLeft e imageTop dependen de las celdas seleccionadas actualmente. Los valores negativos imageLeft e imageTop están permitidos y es posible que Excel los reajuste para colocar la imagen dentro de una hoja de cálculo. La relación de aspecto de la imagen está bloqueada a menos que se indiquen los parámetros imageWidth e imageHeight. Si solo se indica uno de los parámetros imageWidth e imageHeight, el otro valor se escalará automáticamente para conservar la relación de aspecto original.</td> </tr> <tr> <td></td> <td>Todos los demás casos</td> <td>Se devuelve un error.</td> </tr>

      <tr> <td>Excel en la web</td> <td>Además de los comportamientos descritos para Excel, estos límites se aplican al escribir datos en Excel en la Web.</td> <td>El número total de celdas que puede escribir en una hoja de cálculo `data` con el parámetro no puede exceder de 20.000 en una sola llamada a este método.</td> </tr> <tr> <td></td> <td></td> <td>El número de grupos de formato pasados al `cellFormat` parámetro no puede exceder de 100. Un único grupo de formato consta de un conjunto de formato aplicado a un rango de celdas especificado.</td> </tr>

      <tr> <td>PowerPoint</td> <td>Insertar imagen</td> <td>Las imágenes insertadas son flotantes. Los parámetros de posición imageLeft e imageTop son opcionales, pero si se proporcionan, ambos deben estar presentes. Si solo se proporciona un valor, se ignorará. Los valores negativos imageLeft e imageTop están permitidos y pueden colocar una imagen fuera de una diapositiva. Si no se indica ningún parámetro opcional y la diapositiva tiene un marcador de posición, la imagen reemplazará el marcador de la diapositiva. La relación de aspecto de la imagen se bloqueará a menos que se indiquen los parámetros imageWidth e imageHeight. Si solo se indica uno de los parámetros imageWidth e imageHeight, el otro valor se escalará automáticamente para conservar la relación de aspecto original.</td> </tr> </table>

      Los valores posibles para el parámetro [Office. CoercionType](xref:office.Office.CoercionType) varían en función del host.

      <table> <tr> <th>Host</th> <th>coercionType admitido</th> </tr> <tr> <td>Excel, PowerPoint, Project y Word</td> <td>`Office.CoercionType.Text`cadena</td> </tr> <tr> <td>Excel y Word</td> <td>`Office.CoercionType.Matrix`(matriz de matrices)</td> </tr> <tr> <td>Excel y Word</td> <td>`Office.CoercionType.Table`(Objeto TableData)</td> </tr> <tr> <td>Word</td> <td>`Office.CoercionType.Html`</td> </tr> <tr> <td>Word</td> <td>`Office.CoercionType.Ooxml`(Office Open XML)</td> </tr> <tr> <td>PowerPoint en la web y Windows</td> <td>`Office.CoercionType.SlideRange`</td> </tr> <tr> <td>Excel, PowerPoint y Word</td> <td>`Office.CoercionType.XmlSvg`</td> </tr> </table>

      #### <a name="examples"></a>Ejemplos

      ```javascript
      // The following example sets the selected text or cell to "Hello World!", 
      // and if that fails, displays the value of the error.message property.
      function writeText() {
          Office.context.document.setSelectedDataAsync("Hello World!",
              function (asyncResult) {
                  var error = asyncResult.error;
                  if (asyncResult.status === Office.AsyncResultStatus.Failed){
                      write(error.name + ": " + error.message);
                  }
              });
      }

      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }

      // Specifying the optional coercionType parameter lets you specify the kind of data you want to write
      // to a selection. The following example writes data as an array of three rows of two columns, 
      // specifying the coercionType as `Matrix` for that data structure, and if that fails, 
      // displays the value of the error.message property.
      function writeMatrix() {
          Office.context.document.setSelectedDataAsync(
              [["Red", "Rojo"], ["Green", "Verde"], ["Blue", "Azul"]],
              {coercionType: Office.CoercionType.Matrix}
              function (asyncResult) {
                  var error = asyncResult.error;
                  if (asyncResult.status === Office.AsyncResultStatus.Failed){
                      write(error.name + ": " + error.message);
                  }
              });
      }

      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }

      // The following example writes data as a one column table with a header and four rows, 
      // specifying the coercionType as `Table` for that data structure, and if that fails, 
      // displays the value of the error.message property.
      function writeTable() {
          // Build table.
          var myTable = new Office.TableData();
          myTable.headers = [["Cities"]];
          myTable.rows = [['Berlin'], ['Roma'], ['Tokyo'], ['Seattle']];

          // Write table.
          Office.context.document.setSelectedDataAsync(myTable, {coercionType: Office.CoercionType.Table},
              function (result) {
                  var error = result.error
                  if (result.status === Office.AsyncResultStatus.Failed) {
                      write(error.name + ": " + error.message);
                  }
          });
      }

      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }

      // In Word if you want to write HTML to the selection, you can specify the coercionType parameter as `Html`
      // as shown in the following example, which uses HTML <b> tags to make "Hello" bold.
      function writeHtmlData() {
          Office.context.document.setSelectedDataAsync(
              "<b>Hello</b> World!", {coercionType: Office.CoercionType.Html}, function (asyncResult) {
                  if (asyncResult.status === Office.AsyncResultStatus.Failed) {
                      write('Error: ' + asyncResult.error.message);
                  }
          });
      }

      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }

      // In Word, PowerPoint, or Excel, if you want to write an image to the selection, you can specify the coercionType
      // parameter as `Image` as shown in the following example. Note that imageLeft and imageTop are ignored by Word.
      function insertPictureAtSelection(base64EncodedImageStr) {

          Office.context.document.setSelectedDataAsync(base64EncodedImageStr, {
              coercionType: Office.CoercionType.Image,
              imageLeft: 50,
              imageTop: 50,
              imageWidth: 100,
              imageHeight: 100
          },
          function (asyncResult) {
              if (asyncResult.status === Office.AsyncResultStatus.Failed) {
                  console.log("Action failed with error: " + asyncResult.error.message);
              }
          });
      }

      // In Word, PowerPoint, or Excel, if you want to write an scalable vector graphic (SVG) to the selection, you can specify the 
      // coercionType parameter as `XmlSvg` as shown in the following example. Note that imageLeft and imageTop are ignored by Word.
      function insertSvgAtSelection(base64EncodedImageStr) {
          Office.context.document.setSelectedDataAsync(getImageAsBase64String(), {
              coercionType: Office.CoercionType.XmlSvg,
              imageLeft: 50,
              imageTop: 50,
              imageWidth: 400
          },
              function (asyncResult) {
                  if (asyncResult.status === Office.AsyncResultStatus.Failed) {
                      console.log(asyncResult.error.message);
                  }
              });
      }
      ```
    name: 'setSelectedDataAsync(data, options, callback)'
    fullName: 'setSelectedDataAsync(data, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setSelectedDataAsync(data: string | TableData | any[][], options?: SetSelectedDataOptions, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: data
          description: |-
            Datos que se van a establecer. Un valor String u [Office. CoercionType](xref:office.Office.CoercionType) , una matriz 2D o un objeto TableData.

            Si el valor que se `data` ha pasado es:

            - Una string Se insertará texto sin formato o cualquier cosa que pueda convertirse en una string. En Excel, también puede especificar Data como una fórmula válida para agregar esa fórmula a la celda seleccionada. Por ejemplo, al establecer data en "=SUM(A1:A5)", se calculará el total de los valores en el rango especificado. Pero cuando se establece una fórmula en la celda dependiente, después de hacerlo, no se puede leer desde la celda dependiente la fórmula agregada (o cualquier fórmula preexistente). Si se llama al método Document.getSelectedDataAsync en la celda seleccionada para leer sus datos, el método puede devolver solo los datos que se muestran en la celda (el resultado de la fórmula).

            - Una matriz de matrices ("matriz"): Se insertarán datos tabulares sin encabezados. Por ejemplo, para escribir datos en tres filas de dos columnas, puede pasar una matriz como esta: \[ \[\]"R1C1", "R1C2", \["R2C1", "R2C2"\], \["R3C1", "R3C2".\]\] Para escribir una sola columna de tres filas, pase una matriz como esta: \[ \["R1C1"\], \["R2C1"\], \["R3C1"\]\]

            En Excel, también puede especificar Data como una matriz de matrices que contiene fórmulas válidas para agregarlas a las celdas seleccionadas. Por ejemplo, si no se sobrescribirán otros datos, al establecer \[ \[los datos en "= SUM (a1: A5)", "= Average (a1:\] \] A5)", se agregarán las dos fórmulas a la selección. Igual que cuando se establece una fórmula en una sola celda como "texto", no se pueden leer las fórmulas agregadas (o las fórmulas existentes) después de que se han configurado, solo se pueden leer los resultados de las fórmulas.

            - Un objeto TableData: Se insertará una tabla con encabezados. En Excel, si especifica fórmulas en el objeto TableData que pasa para el parámetro Data, es posible que no obtenga los resultados esperados debido a la característica "columnas calculadas" de Excel, que duplica automáticamente las fórmulas dentro de una columna. Para solucionar este error cuando desee escribir `data` que contenga fórmulas en una tabla seleccionada, intente especificar los datos como una matriz de matrices (en lugar de un objeto TableData) y especifique la CoercionType como Microsoft. Office. Matrix o "Matrix". Sin embargo, esta técnica bloqueará la característica "columnas calculadas" solo cuando se cumpla una de las siguientes condiciones: (1) escribe en todas las celdas de la columna o (2) ya hay al menos dos fórmulas diferentes en la columna.
          type:
            - 'string | TableData | any[][]'
        - id: options
          description: Proporciona opciones sobre cómo insertar datos en la selección.
          type:
            - office.Office.SetSelectedDataOptions
        - id: callback
          description: 'Opcional. Una función que se invoca cuando se devuelve la devolución de llamada, cuyo único parámetro es de tipo [Office. asyncResult](xref:office.Office.AsyncResult)<!-- -->. La propiedad AsyncResult. Value siempre devuelve undefined porque no hay ningún objeto o dato que recuperar.'
          type:
            - '(result: AsyncResult<void>) => void'
  - uid: office.Office.Document.setSelectedDataAsync_1
    summary: Escribe los datos especificados en la selección actual.
    remarks: |-
      **Conjuntos de requisitos**:

      - [HtmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#htmlcoercion)<!-- -->, (al usar`Office.CoercionType.Html`<!-- -->)

      - [ImageCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/image-coercion-requirement-sets) (cuando se usa`Office.CoercionType.Image`<!-- -->)

      - [MatrixCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixcoercion) (cuando se usa`Office.CoercionType.Matrix`<!-- -->)

      - [OoxmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#ooxmlcoercion) (cuando se usa`Office.CoercionType.Ooxml`<!-- -->)

      - [Selection](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#selection)

      - [TableCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablecoercion) (cuando se usa`Office.CoercionType.Table`<!-- -->)

      - [TextCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textcoercion) (cuando se usa`Office.CoercionType.Text`<!-- -->)

      - [ImageCoercion 1,2](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/image-coercion-requirement-sets#imagecoercion-12) (cuando se usa`Office.CoercionType.XmlSvg`<!-- -->)

      **Comportamientos específicos de la aplicación**

      Al escribir datos en una selección, se aplican las siguientes acciones específicas de la aplicación.

      <table> <tr> <td>Word</td> <td>Si no hay ninguna selección y el punto de inserción está en una ubicación válida, el `data` especificado se inserta en el punto de inserción.</td> <td>Si `data` es una cadena, se inserta el texto especificado.</td> </tr> <tr> <td></td> <td></td> <td>Si `data` es una matriz de matrices ("Matrix") o un objeto TableData, se inserta una tabla de Word nueva.</td> </tr> <tr> <td></td> <td></td> <td>Si `data` es HTML, se inserta el HTML especificado. (**Importante**: Si alguno de los HTML insertados no es válido, Word no generará un error. Word insertará tantos elementos HTML como pueda y omitirá datos no válidos.</td> </tr> <tr> <td></td> <td></td> <td>Si `data` es Office Open XML, se inserta el XML especificado.</td> </tr> <tr> <td></td> <td></td> <td>Si `data` es una secuencia de imágenes codificada en Base64, se inserta la imagen especificada.</td></tr></td> </tr> <tr> <td></td> <td>Si hay una selección</td> <td>Se reemplazará con el especificado `data` siguiendo las mismas reglas descritas anteriormente.</td> </tr> <tr> <td></td> <td>Insertar imágenes</td> <td>Las imágenes insertadas se colocan en línea. Los parámetros imageLeft e imageTop se ignoran. La relación de aspecto de la imagen siempre está bloqueada. Si solo se indica uno de los parámetros imageWidth e imageHeight, el otro valor se escalará automáticamente para conservar la relación de aspecto original.</td> </tr>

      <tr> <td>Excel</td> <td>Si se selecciona una sola celda</td> <td>Si `data` es una cadena, se inserta el texto especificado como valor de la celda actual.</td> </tr> <tr> <td></td> <td></td> <td>Si `data` es una matriz de matrices ("Matrix"), se inserta el conjunto de filas y columnas especificado, si no se sobrescribirán otros datos de las celdas circundantes.</td> </tr> <tr> <td></td> <td></td> <td>Si `data` es un objeto TableData, se inserta una tabla de Excel nueva con el conjunto de filas y encabezados especificado, si no se sobrescribirán otros datos de las celdas circundantes.</td> </tr> <tr> <td></td> <td>Si se seleccionan varias celdas</td><td>If the shape does not match the shape of `data`<!-- -->, se devuelve un error.</td> </tr> <tr> <td></td> <td></td> <td>If the shape of the selection exactly matches the shape of `data`<!-- -->, los valores de las celdas seleccionadas se actualizan en función de los valores de`data`<!-- -->.</td> </tr> <tr> <td></td> <td>Insertar imágenes</td> <td>Las imágenes insertadas son flotantes. Los parámetros de posición imageLeft e imageTop dependen de las celdas seleccionadas actualmente. Los valores negativos imageLeft e imageTop están permitidos y es posible que Excel los reajuste para colocar la imagen dentro de una hoja de cálculo. La relación de aspecto de la imagen está bloqueada a menos que se indiquen los parámetros imageWidth e imageHeight. Si solo se indica uno de los parámetros imageWidth e imageHeight, el otro valor se escalará automáticamente para conservar la relación de aspecto original.</td> </tr> <tr> <td></td> <td>Todos los demás casos</td> <td>Se devuelve un error.</td> </tr>

      <tr> <td>Excel en la web</td> <td>Además de los comportamientos descritos para Excel, estos límites se aplican al escribir datos en Excel en la Web.</td> <td>El número total de celdas que puede escribir en una hoja de cálculo `data` con el parámetro no puede exceder de 20.000 en una sola llamada a este método.</td> </tr> <tr> <td></td> <td></td> <td>El número de grupos de formato pasados al `cellFormat` parámetro no puede exceder de 100. Un único grupo de formato consta de un conjunto de formato aplicado a un rango de celdas especificado.</td> </tr>

      <tr> <td>PowerPoint</td> <td>Insertar imagen</td> <td>Las imágenes insertadas son flotantes. Los parámetros de posición imageLeft e imageTop son opcionales, pero si se proporcionan, ambos deben estar presentes. Si solo se proporciona un valor, se ignorará. Los valores negativos imageLeft e imageTop están permitidos y pueden colocar una imagen fuera de una diapositiva. Si no se indica ningún parámetro opcional y la diapositiva tiene un marcador de posición, la imagen reemplazará el marcador de la diapositiva. La relación de aspecto de la imagen se bloqueará a menos que se indiquen los parámetros imageWidth e imageHeight. Si solo se indica uno de los parámetros imageWidth e imageHeight, el otro valor se escalará automáticamente para conservar la relación de aspecto original.</td> </tr> </table>

      Los valores posibles para el parámetro [Office. CoercionType](xref:office.Office.CoercionType) varían en función del host.

      <table> <tr> <th>Host</th> <th>coercionType admitido</th> </tr> <tr> <td>Excel, PowerPoint, Project y Word</td> <td>`Office.CoercionType.Text`cadena</td> </tr> <tr> <td>Excel y Word</td> <td>`Office.CoercionType.Matrix`(matriz de matrices)</td> </tr> <tr> <td>Excel y Word</td> <td>`Office.CoercionType.Table`(Objeto TableData)</td> </tr> <tr> <td>Word</td> <td>`Office.CoercionType.Html`</td> </tr> <tr> <td>Word</td> <td>`Office.CoercionType.Ooxml`(Office Open XML)</td> </tr> <tr> <td>PowerPoint en la web y Windows</td> <td>`Office.CoercionType.SlideRange`</td> </tr> <tr> <td>Excel, PowerPoint y Word</td> <td>`Office.CoercionType.XmlSvg`</td> </tr> </table>
    name: 'setSelectedDataAsync(data, callback)'
    fullName: 'setSelectedDataAsync(data, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setSelectedDataAsync(data: string | TableData | any[][], callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: data
          description: |-
            Datos que se van a establecer. Un valor String u [Office. CoercionType](xref:office.Office.CoercionType) , una matriz 2D o un objeto TableData.

            Si el valor que se `data` ha pasado es:

            - Una string Se insertará texto sin formato o cualquier cosa que pueda convertirse en una string. En Excel, también puede especificar Data como una fórmula válida para agregar esa fórmula a la celda seleccionada. Por ejemplo, al establecer data en "=SUM(A1:A5)", se calculará el total de los valores en el rango especificado. Pero cuando se establece una fórmula en la celda dependiente, después de hacerlo, no se puede leer desde la celda dependiente la fórmula agregada (o cualquier fórmula preexistente). Si se llama al método Document.getSelectedDataAsync en la celda seleccionada para leer sus datos, el método puede devolver solo los datos que se muestran en la celda (el resultado de la fórmula).

            - Una matriz de matrices ("matriz"): Se insertarán datos tabulares sin encabezados. Por ejemplo, para escribir datos en tres filas de dos columnas, puede pasar una matriz como esta: \[ \[\]"R1C1", "R1C2", \["R2C1", "R2C2"\], \["R3C1", "R3C2".\]\] Para escribir una sola columna de tres filas, pase una matriz como esta: \[ \["R1C1"\], \["R2C1"\], \["R3C1"\]\]

            En Excel, también puede especificar Data como una matriz de matrices que contiene fórmulas válidas para agregarlas a las celdas seleccionadas. Por ejemplo, si no se sobrescribirán otros datos, al establecer \[ \[los datos en "= SUM (a1: A5)", "= Average (a1:\] \] A5)", se agregarán las dos fórmulas a la selección. Igual que cuando se establece una fórmula en una sola celda como "texto", no se pueden leer las fórmulas agregadas (o las fórmulas existentes) después de que se han configurado, solo se pueden leer los resultados de las fórmulas.

            - Un objeto TableData: Se insertará una tabla con encabezados. En Excel, si especifica fórmulas en el objeto TableData que pasa para el parámetro Data, es posible que no obtenga los resultados esperados debido a la característica "columnas calculadas" de Excel, que duplica automáticamente las fórmulas dentro de una columna. Para solucionar este error cuando desee escribir `data` que contenga fórmulas en una tabla seleccionada, intente especificar los datos como una matriz de matrices (en lugar de un objeto TableData) y especifique la CoercionType como Microsoft. Office. Matrix o "Matrix". Sin embargo, esta técnica bloqueará la característica "columnas calculadas" solo cuando se cumpla una de las siguientes condiciones: (1) escribe en todas las celdas de la columna o (2) ya hay al menos dos fórmulas diferentes en la columna.
          type:
            - 'string | TableData | any[][]'
        - id: callback
          description: 'Opcional. Una función que se invoca cuando se devuelve la devolución de llamada, cuyo único parámetro es de tipo [Office. asyncResult](xref:office.Office.AsyncResult)<!-- -->. La propiedad AsyncResult. Value siempre devuelve undefined porque no hay ningún objeto o dato que recuperar.'
          type:
            - '(result: AsyncResult<void>) => void'
  - uid: office.Office.Document.setTaskFieldAsync
    summary: |-
      Solo documentos de proyecto. Establece el campo de tarea para el identificador de tarea especificado.

      **Importante**: esta API solo funciona en el proyecto 2016 en el escritorio de Windows.
    name: 'setTaskFieldAsync(taskId, fieldId, fieldValue, options, callback)'
    fullName: 'setTaskFieldAsync(taskId, fieldId, fieldValue, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setTaskFieldAsync(taskId: string, fieldId: number, fieldValue: string | number | boolean | object, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: taskId
          description: Puede ser una cadena o un valor del identificador de tarea.
          type:
            - string
        - id: fieldId
          description: Campos de tarea.
          type:
            - number
        - id: fieldValue
          description: Valor del campo de destino.
          type:
            - string | number | boolean | object
        - id: options
          description: 'Proporciona una opción para conservar los datos de contexto de cualquier tipo, sin cambios, para su uso en una devolución de llamada.'
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: 'Opcional. Una función que se invoca cuando se devuelve la devolución de llamada, cuyo único parámetro es de tipo [Office. asyncResult](xref:office.Office.AsyncResult)<!-- -->.'
          type:
            - '(result: AsyncResult<void>) => void'
  - uid: office.Office.Document.setTaskFieldAsync_1
    summary: |-
      Solo documentos de proyecto. Establece el campo de tarea para el identificador de tarea especificado.

      **Importante**: esta API solo funciona en el proyecto 2016 en el escritorio de Windows.
    name: 'setTaskFieldAsync(taskId, fieldId, fieldValue, callback)'
    fullName: 'setTaskFieldAsync(taskId, fieldId, fieldValue, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setTaskFieldAsync(taskId: string, fieldId: number, fieldValue: string | number | boolean | object, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>Ejemplos

          ```javascript
          // The following code example calls getSelectedTaskAsync to get the GUID of the task that's
          // currently selected in a task view. Then it sets two task field values by calling
          // setTaskFieldAsync recursively.
          // The getSelectedTaskAsync method used in the example requires that a task view
          // (for example, Task Usage) is the active view and that a task is selected. See the
          // addHandlerAsync method for an example that activates a button based on the active view type.
          // The example assumes your add-in has a reference to the jQuery library and that the
          // following page controls are defined in the content div in the page body:
          // <input id="set-info" type="button" value="Set info" /><br />
          // <span id="message"></span>

          (function () {
              "use strict";

              // The initialize function must be run each time a new page is loaded.
              Office.initialize = function (reason) {
                  $(document).ready(function () {
                      
                      // After the DOM is loaded, add-in-specific code can run.
                      app.initialize();
                      $('#set-info').click(setTaskInfo);
                  });
              };

              // Get the GUID of the task, and then get the task fields.
              function setTaskInfo() {
                  getTaskGuid().then(
                      function (data) {
                          setTaskFields(data);
                      }
                  );
              }

              // Get the GUID of the selected task.
              function getTaskGuid() {
                  var defer = $.Deferred();
                  Office.context.document.getSelectedTaskAsync(
                      function (result) {
                          if (result.status === Office.AsyncResultStatus.Failed) {
                              onError(result.error);
                          }
                          else {
                              defer.resolve(result.value);
                          }
                      }
                  );
                  return defer.promise();
              }

              // Set the specified fields for the selected task.
              function setTaskFields(taskGuid) {
                  var targetFields = [Office.ProjectTaskFields.Active, Office.ProjectTaskFields.Notes];
                  var fieldValues = [true, 'Notes for the task.'];

                  // Set the field value. If the call is successful, set the next field.
                  for (var i = 0; i < targetFields.length; i++) {
                      Office.context.document.setTaskFieldAsync(
                          taskGuid,
                          targetFields[i],
                          fieldValues[i],
                          function (result) {
                              if (result.status === Office.AsyncResultStatus.Succeeded) {
                                  i++;
                              }
                              else {
                                  onError(result.error);
                              }
                          }
                      );
                  }
                  $('#message').html('Field values set');
              }

              function onError(error) {
                  app.showNotification(error.name + ' ' + error.code + ': ' + error.message);
              }
          })();
          ```
      parameters:
        - id: taskId
          description: Puede ser una cadena o un valor del identificador de tarea.
          type:
            - string
        - id: fieldId
          description: Campos de tarea.
          type:
            - number
        - id: fieldValue
          description: Valor del campo de destino.
          type:
            - string | number | boolean | object
        - id: callback
          description: 'Opcional. Una función que se invoca cuando se devuelve la devolución de llamada, cuyo único parámetro es de tipo [Office. asyncResult](xref:office.Office.AsyncResult)<!-- -->.'
          type:
            - '(result: AsyncResult<void>) => void'
  - uid: office.Office.Document.bindings
    summary: Obtiene un objeto que proporciona acceso a los enlaces que se han definido en el documento.
    remarks: |-
      No se crea una instancia del objeto Document directamente en el script. Si desea llamar a miembros del objeto Document para que interactúen con la hoja de cálculo o el documento actual, use `Office.context.document` en el script.

      #### <a name="examples"></a>Ejemplos

      ```javascript
      function displayAllBindings() {
          Office.context.document.bindings.getAllAsync(function (asyncResult) {
              var bindingString = '';
              for (var i in asyncResult.value) {
                  bindingString += asyncResult.value[i].id + '\n';
              }
              write('Existing bindings: ' + bindingString);
          });
      }

      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }
      ```
    name: bindings
    fullName: bindings
    langs:
      - typeScript
    type: property
    syntax:
      content: 'bindings: Bindings;'
      return:
        type:
          - office.Office.Bindings
  - uid: office.Office.Document.customXmlParts
    summary: Obtiene un objeto que representa los elementos XML personalizados del documento.
    name: customXmlParts
    fullName: customXmlParts
    langs:
      - typeScript
    type: property
    syntax:
      content: 'customXmlParts: CustomXmlParts;'
      return:
        type:
          - office.Office.CustomXmlParts
        description: |-


          #### <a name="examples"></a>Ejemplos

          ```javascript
          function getCustomXmlParts(){
              Office.context.document.customXmlParts.getByNamespaceAsync('http://tempuri.org', function (asyncResult) {
                  write('Retrieved ' + asyncResult.value.length + ' custom XML parts');
              });
          }

          // Function that writes to a div with id='message' on the page.
          function write(message){
              document.getElementById('message').innerText += message; 
          }
          ```
  - uid: office.Office.Document.mode
    summary: Obtiene el modo en el que se encuentra el documento.
    name: mode
    fullName: mode
    langs:
      - typeScript
    type: property
    syntax:
      content: 'mode: DocumentMode;'
      return:
        type:
          - office.Office.DocumentMode
        description: |-


          #### <a name="examples"></a>Ejemplos

          ```javascript
          function displayDocumentMode() {
              write(Office.context.document.mode);
          }

          // Function that writes to a div with id='message' on the page.
          function write(message){
              document.getElementById('message').innerText += message; 
          }
          ```
          ```javascript
          // The following example initializes the add-in and then gets properties of the
          // Document object that are available in the context of a Project document.
          // A Project document is the opened, active project. To access members of the
          // ProjectDocument object, use the Office.context.document object as shown in
          // the code examples for ProjectDocument methods and events.
          // The example assumes your add-in has a reference to the jQuery library and
          // that the following page control is defined in the content div in the page body:
          // <span id="message"></span>

          (function () {
              "use strict";

              // The initialize function must be run each time a new page is loaded.
              Office.initialize = function (reason) {
                  $(document).ready(function () {

                      // Get information about the document.
                      showDocumentProperties();
                  });
              };

              // Get the document mode and the URL of the active project.
              function showDocumentProperties() {
                  var output = String.format(
                      'The document mode is {0}.<br/>The URL of the active project is {1}.',
                      Office.context.document.mode,
                      Office.context.document.url);
                  $('#message').html(output);
              }
          })();
          ```
  - uid: office.Office.Document.settings
    summary: Obtiene un objeto que representa la configuración personalizada que se ha guardado del complemento de contenido o del panel de tareas para el documento actual.
    name: settings
    fullName: settings
    langs:
      - typeScript
    type: property
    syntax:
      content: 'settings: Settings;'
      return:
        type:
          - office.Office.Settings
  - uid: office.Office.Document.url
    summary: Obtiene la dirección URL del documento que se encuentra abierto actualmente en la aplicación host. Devuelve NULL si la dirección URL no está disponible.
    name: url
    fullName: url
    langs:
      - typeScript
    type: property
    syntax:
      content: 'url: string;'
      return:
        type:
          - string
        description: |-


          #### <a name="examples"></a>Ejemplos

          ```javascript
          function displayDocumentUrl() {
              write(Office.context.document.url);
          }

          // Function that writes to a div with id='message' on the page.
          function write(message){
              document.getElementById('message').innerText += message; 
          }
          ```