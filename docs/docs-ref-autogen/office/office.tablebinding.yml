### YamlMime:UniversalReference
items:
  - uid: office.Office.TableBinding
    summary: 'Representa un enlace en dos dimensiones de filas y columnas, que puede llevar o no encabezados.'
    remarks: |-
      El objeto `id` TableBinding hereda la propiedad, `type` la propiedad, `getDataAsync` el método y `setDataAsync` el método del objeto [Office. Binding](xref:office.Office.Binding) .

      Para Excel, tenga en cuenta que después de establecer un enlace de tabla, cada fila nueva que agregue un usuario a la tabla se incluirá automáticamente en el enlace y el reCuento de filas aumentará.
    name: Office.TableBinding
    fullName: Office.TableBinding
    langs:
      - typeScript
    type: interface
    extends:
      - 'Binding '
    package: office
    children:
      - office.Office.TableBinding.addColumnsAsync
      - office.Office.TableBinding.addColumnsAsync_1
      - office.Office.TableBinding.addRowsAsync
      - office.Office.TableBinding.addRowsAsync_1
      - office.Office.TableBinding.clearFormatsAsync
      - office.Office.TableBinding.clearFormatsAsync_1
      - office.Office.TableBinding.deleteAllDataValuesAsync
      - office.Office.TableBinding.deleteAllDataValuesAsync_1
      - office.Office.TableBinding.getFormatsAsync
      - office.Office.TableBinding.getFormatsAsync_1
      - office.Office.TableBinding.setFormatsAsync
      - office.Office.TableBinding.setFormatsAsync_1
      - office.Office.TableBinding.setTableOptionsAsync
      - office.Office.TableBinding.setTableOptionsAsync_1
      - office.Office.TableBinding.columnCount
      - office.Office.TableBinding.hasHeaders
      - office.Office.TableBinding.rowCount
  - uid: office.Office.TableBinding.addColumnsAsync
    summary: Agrega los datos especificados a la tabla como columnas adicionales.
    remarks: |-
      Para agregar una o más columnas especificando los valores de los datos y los encabezados, pase un objeto TableData como parámetro de datos. Para agregar una o varias columnas a partir únicamente de los datos especificados, envíe una matriz de matrices ("matriz") como parámetro data.

      El éxito o error de una operación addColumnsAsync es atómico. Es decir, toda la acción de adición de columnas tiene que ser correcta o se deshará la acción completamente (y la propiedad AsyncResult.status que se devuelve a la devolución de llamada informará de un fallo):

      - Cada fila de la matriz que pase como argumento de datos debe tener el mismo número de filas que la tabla que se está actualizando. Si no, fallará toda la acción.

      - Todas las filas y las celdas de la matriz tienen que agregar correctamente esa fila o celda a la tabla en las columnas recién agregadas. Si, por cualquier motivo, no se define alguna de las filas o las celdas, fallará toda la acción.

      - Si se pasa un objeto TableData como argumento de datos, el número de filas de encabezado debe coincidir con el de la tabla que se está actualizando.

      Comentario adicional para Excel online: el número total de celdas en el objeto TableData pasado al parámetro Data no puede ser superior a 20.000 en una sola llamada a este método.

      #### <a name="examples"></a>Ejemplos

      ```javascript
      // The following example adds a single column with three rows to a bound table with the id "myTable"
      // by passing a TableData object as the data argument of the addColumnsAsync method. To succeed,
      // the table being updated must have three rows.

      // Add a column to a binding of type table by passing a TableData object.
      function addColumns() {
          var myTable = new Office.TableData();
          myTable.headers = [["Cities"]];
          myTable.rows = [["Berlin"], ["Roma"], ["Tokyo"]];

          Office.context.document.bindings.getByIdAsync("myTable", function (result) {
              result.value.addColumnsAsync(myTable);
          });
      }

      // The following example adds a single column with three rows to a bound table with the id myTable
      // by passing an array of arrays ("matrix") as the data argument of the addColumnsAsync method.
      // To succeed, the table being updated must have three rows.

      // Add a column to a binding of type table by passing an array of arrays.
      function addColumns() {
          var myTable = [["Berlin"], ["Roma"], ["Tokyo"]];

          Office.context.document.bindings.getByIdAsync("myTable", function (result) {
              result.value.addColumnsAsync(myTable);
          });
      }
      ```
    name: 'addColumnsAsync(tableData, options, callback)'
    fullName: 'addColumnsAsync(tableData, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addColumnsAsync(tableData: TableData | any[][], options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: tableData
          description: Una matriz de matrices ("Matrix") o un objeto TableData que contiene una o más columnas de datos para agregar a la tabla. Obligatorio.
          type:
            - 'TableData | any[][]'
        - id: options
          description: 'Proporciona una opción para conservar los datos de contexto de cualquier tipo, sin cambios, para su uso en una devolución de llamada.'
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: 'Opcional. Una función que se invoca cuando se devuelve la devolución de llamada, cuyo único parámetro es de tipo [Office. asyncResult](xref:office.Office.AsyncResult)<!-- -->.'
          type:
            - '(result: AsyncResult<void>) => void'
  - uid: office.Office.TableBinding.addColumnsAsync_1
    summary: Agrega los datos especificados a la tabla como columnas adicionales.
    remarks: |-
      Para agregar una o más columnas especificando los valores de los datos y los encabezados, pase un objeto TableData como parámetro de datos. Para agregar una o varias columnas a partir únicamente de los datos especificados, envíe una matriz de matrices ("matriz") como parámetro data.

      El éxito o error de una operación addColumnsAsync es atómico. Es decir, toda la acción de adición de columnas tiene que ser correcta o se deshará la acción completamente (y la propiedad AsyncResult.status que se devuelve a la devolución de llamada informará de un fallo):

      - Cada fila de la matriz que pase como argumento de datos debe tener el mismo número de filas que la tabla que se está actualizando. Si no, fallará toda la acción.

      - Todas las filas y las celdas de la matriz tienen que agregar correctamente esa fila o celda a la tabla en las columnas recién agregadas. Si, por cualquier motivo, no se define alguna de las filas o las celdas, fallará toda la acción.

      - Si se pasa un objeto TableData como argumento de datos, el número de filas de encabezado debe coincidir con el de la tabla que se está actualizando.

      Comentario adicional para Excel online: el número total de celdas en el objeto TableData pasado al parámetro Data no puede ser superior a 20.000 en una sola llamada a este método.
    name: 'addColumnsAsync(tableData, callback)'
    fullName: 'addColumnsAsync(tableData, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addColumnsAsync(tableData: TableData | any[][], callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: tableData
          description: Una matriz de matrices ("Matrix") o un objeto TableData que contiene una o más columnas de datos para agregar a la tabla. Obligatorio.
          type:
            - 'TableData | any[][]'
        - id: callback
          description: 'Opcional. Una función que se invoca cuando se devuelve la devolución de llamada, cuyo único parámetro es de tipo [Office. asyncResult](xref:office.Office.AsyncResult)<!-- -->.'
          type:
            - '(result: AsyncResult<void>) => void'
  - uid: office.Office.TableBinding.addRowsAsync
    summary: Agrega los datos especificados a la tabla como filas adicionales.
    remarks: |-
      El éxito o error de una operación addRowsAsync es atómico. Es decir, toda la acción de adición de columnas tiene que ser correcta o se deshará la acción completamente (y la propiedad AsyncResult.status que se devuelve a la devolución de llamada informará de un fallo):

      - Cada fila de la matriz que pase como argumento de datos debe tener el mismo número de columnas que la tabla que se va a actualizar. Si no, fallará toda la acción.

      - Cada columna y celda de la matriz debe agregar correctamente esa columna o celda a la tabla de las filas recién agregadas. Si cualquier columna o celda no se puede establecer por algún motivo, se producirá un error en toda la operación.

      - Si se pasa un objeto TableData como argumento de datos, el número de filas de encabezado debe coincidir con el de la tabla que se está actualizando.

      Comentario adicional para Excel online: el número total de celdas en el objeto TableData pasado al parámetro Data no puede ser superior a 20.000 en una sola llamada a este método.

      #### <a name="examples"></a>Ejemplos

      ```javascript
      function addRowsToTable() {
          Office.context.document.bindings.getByIdAsync("myBinding", function (asyncResult) {
              var binding = asyncResult.value;
              binding.addRowsAsync([["6", "k"], ["7", "j"]]);
          });
      }
      ```
    name: 'addRowsAsync(rows, options, callback)'
    fullName: 'addRowsAsync(rows, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addRowsAsync(rows: TableData | any[][], options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: rows
          description: Una matriz de matrices ("Matrix") o un objeto TableData que contiene una o más filas de datos para agregar a la tabla. Obligatorio.
          type:
            - 'TableData | any[][]'
        - id: options
          description: 'Proporciona una opción para conservar los datos de contexto de cualquier tipo, sin cambios, para su uso en una devolución de llamada.'
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: 'Opcional. Una función que se invoca cuando se devuelve la devolución de llamada, cuyo único parámetro es de tipo [Office. asyncResult](xref:office.Office.AsyncResult)<!-- -->.'
          type:
            - '(result: AsyncResult<void>) => void'
  - uid: office.Office.TableBinding.addRowsAsync_1
    summary: Agrega los datos especificados a la tabla como filas adicionales.
    remarks: |-
      El éxito o error de una operación addRowsAsync es atómico. Es decir, toda la acción de adición de columnas tiene que ser correcta o se deshará la acción completamente (y la propiedad AsyncResult.status que se devuelve a la devolución de llamada informará de un fallo):

      - Cada fila de la matriz que pase como argumento de datos debe tener el mismo número de columnas que la tabla que se va a actualizar. Si no, fallará toda la acción.

      - Cada columna y celda de la matriz debe agregar correctamente esa columna o celda a la tabla de las filas recién agregadas. Si cualquier columna o celda no se puede establecer por algún motivo, se producirá un error en toda la operación.

      - Si se pasa un objeto TableData como argumento de datos, el número de filas de encabezado debe coincidir con el de la tabla que se está actualizando.

      Comentario adicional para Excel online: el número total de celdas en el objeto TableData pasado al parámetro Data no puede ser superior a 20.000 en una sola llamada a este método.
    name: 'addRowsAsync(rows, callback)'
    fullName: 'addRowsAsync(rows, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addRowsAsync(rows: TableData | any[][], callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: rows
          description: Una matriz de matrices ("Matrix") o un objeto TableData que contiene una o más filas de datos para agregar a la tabla. Obligatorio.
          type:
            - 'TableData | any[][]'
        - id: callback
          description: 'Opcional. Una función que se invoca cuando se devuelve la devolución de llamada, cuyo único parámetro es de tipo [Office. asyncResult](xref:office.Office.AsyncResult)<!-- -->.'
          type:
            - '(result: AsyncResult<void>) => void'
  - uid: office.Office.TableBinding.clearFormatsAsync
    summary: Borra el formato en la tabla enlazada.
    remarks: |-
      Para obtener más información, vea [Format tables in Add-Ins for Excel](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-tables#format-a-table) .

      #### <a name="examples"></a>Ejemplos

      ```javascript
      // The following example shows how to clear the formatting of the bound table with an ID of "myBinding":
      Office.select("bindings#myBinding").clearFormatsAsync();
      ```
    name: 'clearFormatsAsync(options, callback)'
    fullName: 'clearFormatsAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clearFormatsAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: 'Proporciona una opción para conservar los datos de contexto de cualquier tipo, sin cambios, para su uso en una devolución de llamada.'
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: 'Opcional. Una función que se invoca cuando se devuelve la devolución de llamada, cuyo único parámetro es de tipo [Office. asyncResult](xref:office.Office.AsyncResult)<!-- -->.'
          type:
            - '(result: AsyncResult<void>) => void'
  - uid: office.Office.TableBinding.clearFormatsAsync_1
    summary: Borra el formato en la tabla enlazada.
    remarks: 'Para obtener más información, vea [Format tables in Add-Ins for Excel](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-tables#format-a-table) .'
    name: clearFormatsAsync(callback)
    fullName: clearFormatsAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clearFormatsAsync(callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: 'Opcional. Una función que se invoca cuando se devuelve la devolución de llamada, cuyo único parámetro es de tipo [Office. asyncResult](xref:office.Office.AsyncResult)<!-- -->.'
          type:
            - '(result: AsyncResult<void>) => void'
  - uid: office.Office.TableBinding.deleteAllDataValuesAsync
    summary: 'Suprime de la tabla todas las filas que no sean encabezados y sus valores, y cambia de forma adecuada a la aplicación host.'
    remarks: |-
      En Excel, si la tabla no tiene una fila de encabezado, este método suprimirá la propia tabla.

      #### <a name="examples"></a>Ejemplos

      ```javascript
      function deleteAllRowsFromTable() {
          Office.context.document.bindings.getByIdAsync("myBinding", function (asyncResult) {
              var binding = asyncResult.value;
              binding.deleteAllDataValuesAsync();
          });
      }
      ```
    name: 'deleteAllDataValuesAsync(options, callback)'
    fullName: 'deleteAllDataValuesAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'deleteAllDataValuesAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: 'Proporciona una opción para conservar los datos de contexto de cualquier tipo, sin cambios, para su uso en una devolución de llamada.'
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: 'Opcional. Una función que se invoca cuando se devuelve la devolución de llamada, cuyo único parámetro es de tipo [Office. asyncResult](xref:office.Office.AsyncResult)<!-- -->.'
          type:
            - '(result: AsyncResult<void>) => void'
  - uid: office.Office.TableBinding.deleteAllDataValuesAsync_1
    summary: 'Suprime de la tabla todas las filas que no sean encabezados y sus valores, y cambia de forma adecuada a la aplicación host.'
    remarks: 'En Excel, si la tabla no tiene una fila de encabezado, este método suprimirá la propia tabla.'
    name: deleteAllDataValuesAsync(callback)
    fullName: deleteAllDataValuesAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'deleteAllDataValuesAsync(callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: 'Opcional. Una función que se invoca cuando se devuelve la devolución de llamada, cuyo único parámetro es de tipo [Office. asyncResult](xref:office.Office.AsyncResult)<!-- -->.'
          type:
            - '(result: AsyncResult<void>) => void'
  - uid: office.Office.TableBinding.getFormatsAsync
    summary: Obtiene el formato de los elementos especificados en la tabla.
    remarks: |-
      **Estructura de formato deVuelta**

      Cada objeto de JavaScript de la matriz de valores devueltos tiene el siguiente formato:`{cells:{ cell_range }, format:{ format_definition }}`

      La `cells:` propiedad especifica el rango al que desea aplicar el formato mediante uno de los siguientes valores:

      **Rangos admitidos en la propiedad cells**

      <table> <tr> <th>configuración del rango de celdas</th> <th>Descripción</th> </tr> <tr> <td>`{row: n}`</td> <td>Especifica el intervalo que es la fila de datos nth de base cero de datos de la tabla.</td> </tr> <tr> <td>`{column: n}`</td> <td>Especifica el intervalo que es la columna nth de base cero de datos de la tabla.</td> </tr> <tr> <td>`{row: i, column: j}`</td> <td>Especifica la única celda que es la fila i y la columna JTH de la tabla.</td> </tr> <tr> <td>`Office.Table.All`</td> <td>Especifica toda la tabla, incluidos los encabezados de columna, los datos y los totales (si resulta aplicable).</td> </tr> <tr> <td>`Office.Table.Data`</td> <td>Especifica solo los datos de la tabla (no los encabezados ni los totales).</td> </tr> <tr> <td>`Office.Table.Headers`</td> <td>Especifica solo la fila de encabezado.</td> </tr> </table>

      La `format:` propiedad especifica los valores que corresponden a un subconjunto de los valores de configuración disponibles en el cuadro de diálogo formato de celdas &gt; en Excel (haga &gt; clic &gt; con el botón secundario en las celdas con formato de formato principal).
    name: 'getFormatsAsync(cellReference, formats, options, callback)'
    fullName: 'getFormatsAsync(cellReference, formats, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getFormatsAsync(cellReference?: any, formats?: any[], options?: Office.AsyncContextOptions, callback?: (result: AsyncResult< ({ cells: any, format: any})[]>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: cellReference
          description: Un literal de objeto que contiene pares nombre-valor que especifican el rango de celdas del que se va a obtener formato.
          type:
            - any
        - id: formats
          description: Una matriz que especifica las propiedades de formato que se van a obtener.
          type:
            - 'any[]'
        - id: options
          description: 'Proporciona una opción para conservar los datos de contexto de cualquier tipo, sin cambios, para su uso en una devolución de llamada.'
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: 'Opcional. Una función que se invoca cuando se devuelve la devolución de llamada, cuyo único parámetro es de tipo [Office. asyncResult](xref:office.Office.AsyncResult)<!-- -->. La `value` propiedad del resultado es una matriz que contiene uno o más objetos JavaScript que especifican el formato de sus celdas correspondientes.'
          type:
            - '(result: AsyncResult< ({ cells: any, format: any})[]>) => void'
  - uid: office.Office.TableBinding.getFormatsAsync_1
    summary: Obtiene el formato de los elementos especificados en la tabla.
    remarks: |-
      **Estructura de formato deVuelta**

      Cada objeto de JavaScript de la matriz de valores devueltos tiene el siguiente formato:`{cells:{ cell_range }, format:{ format_definition }}`

      La `cells:` propiedad especifica el rango al que desea aplicar el formato mediante uno de los siguientes valores:

      **Rangos admitidos en la propiedad cells**

      <table> <tr> <th>configuración del rango de celdas</th> <th>Descripción</th> </tr> <tr> <td>`{row: n}`</td> <td>Especifica el intervalo que es la fila de datos nth de base cero de datos de la tabla.</td> </tr> <tr> <td>`{column: n}`</td> <td>Especifica el intervalo que es la columna nth de base cero de datos de la tabla.</td> </tr> <tr> <td>`{row: i, column: j}`</td> <td>Especifica la única celda que es la fila i y la columna JTH de la tabla.</td> </tr> <tr> <td>`Office.Table.All`</td> <td>Especifica toda la tabla, incluidos los encabezados de columna, los datos y los totales (si resulta aplicable).</td> </tr> <tr> <td>`Office.Table.Data`</td> <td>Especifica solo los datos de la tabla (no los encabezados ni los totales).</td> </tr> <tr> <td>`Office.Table.Headers`</td> <td>Especifica solo la fila de encabezado.</td> </tr> </table>

      La `format:` propiedad especifica los valores que corresponden a un subconjunto de los valores de configuración disponibles en el cuadro de diálogo formato de celdas &gt; en Excel (haga &gt; clic &gt; con el botón secundario en las celdas con formato de formato principal).
    name: 'getFormatsAsync(cellReference, formats, callback)'
    fullName: 'getFormatsAsync(cellReference, formats, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getFormatsAsync(cellReference?: any, formats?: any[], callback?: (result: AsyncResult< ({ cells: any, format: any})[]>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: cellReference
          description: Un literal de objeto que contiene pares nombre-valor que especifican el rango de celdas del que se va a obtener formato.
          type:
            - any
        - id: formats
          description: Una matriz que especifica las propiedades de formato que se van a obtener.
          type:
            - 'any[]'
        - id: callback
          description: 'Opcional. Una función que se invoca cuando se devuelve la devolución de llamada, cuyo único parámetro es de tipo [Office. asyncResult](xref:office.Office.AsyncResult)<!-- -->. La `value` propiedad del resultado es una matriz que contiene uno o más objetos JavaScript que especifican el formato de sus celdas correspondientes.'
          type:
            - '(result: AsyncResult< ({ cells: any, format: any})[]>) => void'
  - uid: office.Office.TableBinding.setFormatsAsync
    summary: Establece el formato de los elementos y datos especificados en la tabla.
    remarks: |-
      **Especificar el parámetro cellFormat**

      Use el parámetro cellFormat para establecer o cambiar los valores de formato de celda, como el ancho, el alto, la fuente, el fondo, la alineación, etc. El valor que se pasa como el parámetro cellFormat es una matriz que contiene una lista de uno o varios objetos de JavaScript que especifican las celdas a las que se va a dirigir (`cells:`<!-- -->) y los formatos (`format:`<!-- -->) para aplicarlas.

      Cada objeto JavaScript en la matriz cellFormat tiene la siguiente forma:`{cells:{ cell_range }, format:{ format_definition }}`

      La `cells:` propiedad especifica el rango al que desea aplicar el formato mediante uno de los siguientes valores:

      **Rangos admitidos en la propiedad cells**

      <table> <tr> <th>configuración del rango de celdas</th> <th>Descripción</th> </tr> <tr> <td>`{row: n}`</td> <td>Especifica el intervalo que es la fila de datos nth de base cero de datos de la tabla.</td> </tr> <tr> <td>`{column: n}`</td> <td>Especifica el intervalo que es la columna nth de base cero de datos de la tabla.</td> </tr> <tr> <td>`{row: i, column: j}`</td> <td>Especifica la única celda que es la fila i y la columna JTH de la tabla.</td> </tr> <tr> <td>`Office.Table.All`</td> <td>Especifica toda la tabla, incluidos los encabezados de columna, los datos y los totales (si resulta aplicable).</td> </tr> <tr> <td>`Office.Table.Data`</td> <td>Especifica solo los datos de la tabla (no los encabezados ni los totales).</td> </tr> <tr> <td>`Office.Table.Headers`</td> <td>Especifica solo la fila de encabezado.</td> </tr> </table>

      La `format:` propiedad especifica los valores que corresponden a un subconjunto de los valores de configuración disponibles en el cuadro de diálogo formato de celdas &gt; en Excel (haga &gt; clic &gt; con el botón secundario en las celdas con formato de formato principal).

      El valor de la `format:` propiedad se especifica como una lista de uno o más pares nombre-valor de propiedad en un literal de objeto de JavaScript. El nombre de propiedad especifica el nombre de la propiedad de formato que se va a establecer, y valor especifica el valor de dicha propiedad. Se pueden especificar varios valores para un formato concreto, como el color y el tamaño de una fuente.

      A continuación, puede consultar tres ejemplos de valores de la propiedad `format:`:

      `//Set cells: font color to green and size to 15 points.`

      `format: {fontColor : "green", fontSize : 15}`

      `//Set cells: border to dotted blue.`

      `format: {borderStyle: "dotted", borderColor: "blue"}`

      `//Set cells: background to red and alignment to centered.`

      `format: {backgroundColor: "red", alignHorizontal: "center"}`

      Puede especificar formatos de número especificando la cadena "Code" de formato de número en `numberFormat:` la propiedad. Las cadenas de formato numérico que puede especificar se corresponden con las que se pueden establecer en Excel mediante la categoría Personalizada en la pestaña Número del cuadro de diálogo Formato de celdas. El ejemplo siguiente muestra cómo dar formato a un número como porcentaje con dos decimales:

      `format: {numberFormat:"0.00%"}`

      Para obtener más información, consulte Cómo [crear un formato de número personalizado](https://support.office.com/article/create-or-delete-a-custom-number-format-78f2a361-936b-4c03-8772-09fab54be7f4) .<!-- -->.

      Para establecer el formato de las tablas al escribir datos, use los parámetros opcionales tableOptions y cellFormat `Document.setSelectedDataAsync` de `TableBinding.setDataAsync` los métodos o.

      Establecer el formato con los parámetros opcionales de `Document.setSelectedDataAsync` los `TableBinding.setDataAsync` métodos y sólo funciona para establecer el formato al escribir datos por primera vez. Si desea realizar cambios de formato después de escribir los datos, use los métodos siguientes:

      - Para actualizar el formato de las celdas, como el color y el estilo `TableBinding.setFormatsAsync` de la fuente, use el método (este método).

      - Para actualizar las opciones de tabla, como las filas con bandas y los botones de `TableBinding.setTableOptions` filtro, use el método.

      - Para borrar el formato, use `TableBinding.clearFormats` el método.

      Para obtener más detalles y ejemplos, consulte [How to Format tables in Add-Ins for Excel](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-tables#format-a-table)<!-- -->.

      #### <a name="examples"></a>Ejemplos

      ```javascript
      // Specifying a single target
      // The following example shows a cellFormat value that sets the font color of the header row to red.
      Office.select("bindings#myBinding").setFormatsAsync(
          [{cells: Office.Table.Headers, format: {fontColor: "red"}}], 
          function (asyncResult){});

      // Specifying multiple targets
      // The setFormatsAsync method can support formatting multiple targets within the bound table in a 
      // single function call. To do that, you pass a list of objects in the cellFormat array 
      // for each target that you want to format.
      // For example, the following line of code will set the font color of the first row yellow, 
      // and the fourth cell in the third row to have a white border and bold text.
      Office.select("bindings#myBinding").setFormatsAsync(
          [{cells: {row: 1}, format: {fontColor: "yellow"}}, 
              {cells: {row: 3, column: 4}, format: {borderColor: "white", fontStyle: "bold"}}], 
          function (asyncResult){});

      // Additional remarks for Excel Online
      // The number of formatting groups passed to the cellFormat parameter can't exceed 100. 
      // A single formatting group consists of a set of formatting applied to a specified range of cells. 
      // For example, the following call passes two formatting groups to cellFormat.
      Office.select("bindings#myBinding").setFormatsAsync(
          [{cells: {row: 1}, format: {fontColor: "yellow"}}, 
              {cells: {row: 3, column: 4}, format: {borderColor: "white", fontStyle: "bold"}}], 
          function (asyncResult){});
      ```
    name: 'setFormatsAsync(cellFormat, options, callback)'
    fullName: 'setFormatsAsync(cellFormat, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setFormatsAsync(cellFormat: any[], options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: cellFormat
          description: Una matriz que contiene uno o varios objetos de JavaScript que especifican las celdas que deben considerarse celdas de destino y el formato que se les aplicará.
          type:
            - 'any[]'
        - id: options
          description: 'Proporciona una opción para conservar los datos de contexto de cualquier tipo, sin cambios, para su uso en una devolución de llamada.'
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: 'Opcional. Una función que se invoca cuando se devuelve la devolución de llamada, cuyo único parámetro es de tipo [Office. asyncResult](xref:office.Office.AsyncResult)<!-- -->.'
          type:
            - '(result: AsyncResult<void>) => void'
  - uid: office.Office.TableBinding.setFormatsAsync_1
    summary: Establece el formato de los elementos y datos especificados en la tabla.
    remarks: |-
      **Especificar el parámetro cellFormat**

      Use el parámetro cellFormat para establecer o cambiar los valores de formato de celda, como el ancho, el alto, la fuente, el fondo, la alineación, etc. El valor que se pasa como el parámetro cellFormat es una matriz que contiene una lista de uno o varios objetos de JavaScript que especifican las celdas a las que se va a dirigir (`cells:`<!-- -->) y los formatos (`format:`<!-- -->) para aplicarlas.

      Cada objeto JavaScript en la matriz cellFormat tiene la siguiente forma:`{cells:{ cell_range }, format:{ format_definition }}`

      La `cells:` propiedad especifica el rango al que desea aplicar el formato mediante uno de los siguientes valores:

      **Rangos admitidos en la propiedad cells**

      <table> <tr> <th>configuración del rango de celdas</th> <th>Descripción</th> </tr> <tr> <td>`{row: n}`</td> <td>Especifica el intervalo que es la fila de datos nth de base cero de datos de la tabla.</td> </tr> <tr> <td>`{column: n}`</td> <td>Especifica el intervalo que es la columna nth de base cero de datos de la tabla.</td> </tr> <tr> <td>`{row: i, column: j}`</td> <td>Especifica la única celda que es la fila i y la columna JTH de la tabla.</td> </tr> <tr> <td>`Office.Table.All`</td> <td>Especifica toda la tabla, incluidos los encabezados de columna, los datos y los totales (si resulta aplicable).</td> </tr> <tr> <td>`Office.Table.Data`</td> <td>Especifica solo los datos de la tabla (no los encabezados ni los totales).</td> </tr> <tr> <td>`Office.Table.Headers`</td> <td>Especifica solo la fila de encabezado.</td> </tr> </table>

      La `format:` propiedad especifica los valores que corresponden a un subconjunto de los valores de configuración disponibles en el cuadro de diálogo formato de celdas &gt; en Excel (haga &gt; clic &gt; con el botón secundario en las celdas con formato de formato principal).

      El valor de la `format:` propiedad se especifica como una lista de uno o más pares nombre-valor de propiedad en un literal de objeto de JavaScript. El nombre de propiedad especifica el nombre de la propiedad de formato que se va a establecer, y valor especifica el valor de dicha propiedad. Se pueden especificar varios valores para un formato concreto, como el color y el tamaño de una fuente.

      A continuación, puede consultar tres ejemplos de valores de la propiedad `format:`:

      `//Set cells: font color to green and size to 15 points.`

      `format: {fontColor : "green", fontSize : 15}`

      `//Set cells: border to dotted blue.`

      `format: {borderStyle: "dotted", borderColor: "blue"}`

      `//Set cells: background to red and alignment to centered.`

      `format: {backgroundColor: "red", alignHorizontal: "center"}`

      Puede especificar formatos de número especificando la cadena "Code" de formato de número en `numberFormat:` la propiedad. Las cadenas de formato numérico que puede especificar se corresponden con las que se pueden establecer en Excel mediante la categoría Personalizada en la pestaña Número del cuadro de diálogo Formato de celdas. El ejemplo siguiente muestra cómo dar formato a un número como porcentaje con dos decimales:

      `format: {numberFormat:"0.00%"}`

      Para obtener más información, consulte Cómo [crear un formato de número personalizado](https://support.office.com/article/create-or-delete-a-custom-number-format-78f2a361-936b-4c03-8772-09fab54be7f4) .<!-- -->.

      Para establecer el formato de las tablas al escribir datos, use los parámetros opcionales tableOptions y cellFormat `Document.setSelectedDataAsync` de `TableBinding.setDataAsync` los métodos o.

      Establecer el formato con los parámetros opcionales de `Document.setSelectedDataAsync` los `TableBinding.setDataAsync` métodos y sólo funciona para establecer el formato al escribir datos por primera vez. Si desea realizar cambios de formato después de escribir los datos, use los métodos siguientes:

      - Para actualizar el formato de las celdas, como el color y el estilo `TableBinding.setFormatsAsync` de la fuente, use el método (este método).

      - Para actualizar las opciones de tabla, como las filas con bandas y los botones de `TableBinding.setTableOptions` filtro, use el método.

      - Para borrar el formato, use `TableBinding.clearFormats` el método.

      Para obtener más detalles y ejemplos, consulte [How to Format tables in Add-Ins for Excel](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-tables#format-a-table)<!-- -->.
    name: 'setFormatsAsync(cellFormat, callback)'
    fullName: 'setFormatsAsync(cellFormat, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setFormatsAsync(cellFormat: any[], callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: cellFormat
          description: Una matriz que contiene uno o varios objetos de JavaScript que especifican las celdas que deben considerarse celdas de destino y el formato que se les aplicará.
          type:
            - 'any[]'
        - id: callback
          description: 'Opcional. Una función que se invoca cuando se devuelve la devolución de llamada, cuyo único parámetro es de tipo [Office. asyncResult](xref:office.Office.AsyncResult)<!-- -->.'
          type:
            - '(result: AsyncResult<void>) => void'
  - uid: office.Office.TableBinding.setTableOptionsAsync
    summary: Actualiza las opciones de formato de tabla en la tabla enlazada.
    remarks: |-
      **Conjunto de requisitos**: [no está en un conjunto](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#methods-that-arent-part-of-a-requirement-set)

      En la función de devolución de llamada que se ha remitido al método goToByIdAsync, puede usar las propiedades del objeto AsyncResult para devolver la información siguiente.

      <table> <tr> <th>Propiedad</th> <th>Usar para...</th> </tr> <tr> <td>AsyncResult.value</td> <td>Siempre devuelve undefined porque no hay ningún objeto ni datos que recuperar al establecer los formatos.</td> </tr> <tr> <td>AsyncResult.status</td> <td>Determinar si la operación se ha completado correctamente o no.</td> </tr> <tr> <td>AsyncResult.error</td> <td>Tener acceso a un objeto Error que proporcione información sobre el error si no se ha completado correctamente la operación.</td> </tr> <tr> <td>AsyncResult.asyncContext</td> <td>Un elemento de cualquier tipo definido por el usuario que se devuelve en el objeto AsyncResult sin sufrir modificaciones.</td> </tr> </table>

      #### <a name="examples"></a>Ejemplos

      ```javascript
      // The following example shows how to:
      // 1. Create an object literal that specifies the table formatting options to update on the bound table.
      // 2. Call setTableOptions on a previously bound table (with an id of myBinding) passing the object
      //    with formatting setting as the tableOptions parameter.
      function updateTableFormatting(){
          var tableOptions = {bandedRows: true, filterButton: false, style: "TableStyleMedium3"}; 

          Office.select("bindings#myBinding").setTableOptionsAsync(tableOptions, function(asyncResult){});
      }
      ```
    name: 'setTableOptionsAsync(tableOptions, options, callback)'
    fullName: 'setTableOptionsAsync(tableOptions, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setTableOptionsAsync(tableOptions: any, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: tableOptions
          description: Literal de objeto que contiene una lista de pares nombre-valor de propiedad que define las opciones de tabla que se aplicarán.
          type:
            - any
        - id: options
          description: 'Proporciona una opción para conservar los datos de contexto de cualquier tipo, sin cambios, para su uso en una devolución de llamada.'
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: 'Opcional. Una función que se invoca cuando se devuelve la devolución de llamada, cuyo único parámetro es de tipo [Office. asyncResult](xref:office.Office.AsyncResult)<!-- -->.'
          type:
            - '(result: AsyncResult<void>) => void'
  - uid: office.Office.TableBinding.setTableOptionsAsync_1
    summary: Actualiza las opciones de formato de tabla en la tabla enlazada.
    remarks: |-
      **Conjunto de requisitos**: [no está en un conjunto](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#methods-that-arent-part-of-a-requirement-set)

      En la función de devolución de llamada que se ha remitido al método goToByIdAsync, puede usar las propiedades del objeto AsyncResult para devolver la información siguiente.

      <table> <tr> <th>Propiedad</th> <th>Usar para...</th> </tr> <tr> <td>AsyncResult.value</td> <td>Siempre devuelve undefined porque no hay ningún objeto ni datos que recuperar al establecer los formatos.</td> </tr> <tr> <td>AsyncResult.status</td> <td>Determinar si la operación se ha completado correctamente o no.</td> </tr> <tr> <td>AsyncResult.error</td> <td>Tener acceso a un objeto Error que proporcione información sobre el error si no se ha completado correctamente la operación.</td> </tr> <tr> <td>AsyncResult.asyncContext</td> <td>Un elemento de cualquier tipo definido por el usuario que se devuelve en el objeto AsyncResult sin sufrir modificaciones.</td> </tr> </table>
    name: 'setTableOptionsAsync(tableOptions, callback)'
    fullName: 'setTableOptionsAsync(tableOptions, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setTableOptionsAsync(tableOptions: any, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: tableOptions
          description: Literal de objeto que contiene una lista de pares nombre-valor de propiedad que define las opciones de tabla que se aplicarán.
          type:
            - any
        - id: callback
          description: 'Opcional. Una función que se invoca cuando se devuelve la devolución de llamada, cuyo único parámetro es de tipo [Office. asyncResult](xref:office.Office.AsyncResult)<!-- -->.'
          type:
            - '(result: AsyncResult<void>) => void'
  - uid: office.Office.TableBinding.columnCount
    summary: 'Obtiene el número de columnas en el TableBinding, como un valor entero.'
    name: columnCount
    fullName: columnCount
    langs:
      - typeScript
    type: property
    syntax:
      content: 'columnCount: number;'
      return:
        type:
          - number
        description: |-


          #### <a name="examples"></a>Ejemplos

          ```javascript
          function showBindingColumnCount() {
              Office.context.document.bindings.getByIdAsync("myBinding", function (asyncResult) {
                  write("Column: " + asyncResult.value.columnCount);
              });
          }
          // Function that writes to a div with id='message' on the page.
          function write(message){
              document.getElementById('message').innerText += message; 
          }
          ```
  - uid: office.Office.TableBinding.hasHeaders
    summary: 'True si la tabla tiene encabezados; de lo contrario, false.'
    name: hasHeaders
    fullName: hasHeaders
    langs:
      - typeScript
    type: property
    syntax:
      content: 'hasHeaders: boolean;'
      return:
        type:
          - boolean
        description: |-


          #### <a name="examples"></a>Ejemplos

          ```javascript
          function showBindingHasHeaders() {
              Office.context.document.bindings.getByIdAsync("myBinding", function (asyncResult) {
                  write("Binding has headers: " + asyncResult.value.hasHeaders);
              });
          }
          // Function that writes to a div with id='message' on the page.
          function write(message){
              document.getElementById('message').innerText += message; 
          }
          ```
  - uid: office.Office.TableBinding.rowCount
    summary: 'Obtiene el número de filas en el TableBinding, como un valor entero.'
    remarks: |-
      Cuando se inserta una tabla vacía seleccionando una sola fila en Excel 2013 y Excel online (usando tabla en la pestaña insertar), ambas aplicaciones host de Office crean una única fila de encabezados seguida de una única fila en blanco. Sin embargo, si la secuencia de comandos del complemento crea un enlace para esta tabla recién insertada (por ejemplo, mediante el uso de la [oficina. bindings](xref:office.Office.Bindings)<!-- -->método. addFromSelectionAsync) y, a continuación, comprueba el valor de la propiedad rowCount, el valor devuelto será diferente en función de si la hoja de cálculo está abierta en Excel 2013 o Excel online.

      - En Excel en el escritorio, rowCount devolverá 0 (no se cuenta la fila vacía que sigue a los encabezados).

      - En Excel online, rowCount devolverá 1 (se cuenta la fila vacía que sigue a los encabezados).

      Para solucionar esta diferencia en su script, puede comprobar si rowCount == 1 y, en caso afirmativo, comprobar si la fila contiene todas las cadenas vacías.

      En el caso de los complementos de contenido para Access, la propiedad rowCount siempre devuelve-1 por motivos de rendimiento.

      #### <a name="examples"></a>Ejemplos

      ```javascript
      function showBindingRowCount() {
          Office.context.document.bindings.getByIdAsync("myBinding", function (asyncResult) {
              write("Rows: " + asyncResult.value.rowCount);
          });
      }
      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }
      ```
    name: rowCount
    fullName: rowCount
    langs:
      - typeScript
    type: property
    syntax:
      content: 'rowCount: number;'
      return:
        type:
          - number