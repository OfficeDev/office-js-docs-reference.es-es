### YamlMime:UniversalReference
items:
  - uid: 'outlook!Office.Time:interface'
    summary: |-
      El `Time` objeto se devuelve como la propiedad Start o end de una cita en el modo redacción.

      \[[Conjunto de API: buzón de correo 1,1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: redacción
    name: Office.Time
    fullName: Office.Time
    langs:
      - typeScript
    type: interface
    package: outlook!
    children:
      - 'outlook!Office.Time#getAsync:member(1)'
      - 'outlook!Office.Time#getAsync:member(2)'
      - 'outlook!Office.Time#setAsync:member(1)'
      - 'outlook!Office.Time#setAsync:member(2)'
  - uid: 'outlook!Office.Time#getAsync:member(1)'
    summary: |-
      Obtiene la hora de inicio o finalización de una cita.

      La fecha y la hora se proporcionan como `Date` un objeto en `asyncResult.value` la propiedad. El valor se encuentra en la hora UTC (hora universal coordinada). Puede convertir la hora UTC a la hora local del cliente usando el `convertToLocalClientTime` método.

      \[[Conjunto de API: buzón de correo 1,1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: redacción
    name: 'getAsync(options, callback)'
    fullName: 'getAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getAsync(options: Office.AsyncContextOptions, callback: (asyncResult: Office.AsyncResult<Date>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: 'Un objeto literal que contiene una o más de las siguientes propiedades. `asyncContext`<!-- -->: Los desarrolladores pueden proporcionar cualquier objeto al que quieran tener acceso en el método de devolución de llamada.'
          type:
            - 'outlook!Office.AsyncContextOptions:interface'
        - id: callback
          description: 'Cuando el método finaliza, la función que se pasa en `callback` el parámetro se llama con un único parámetro de tipo`Office.AsyncResult`<!-- -->. La `value` propiedad del resultado es un `Date` objeto.'
          type:
            - 'outlook!Office.Time#getAsync~0:complex'
  - uid: 'outlook!Office.Time#getAsync:member(2)'
    summary: |-
      Obtiene la hora de inicio o finalización de una cita.

      La fecha y la hora se proporcionan como `Date` un objeto en `asyncResult.value` la propiedad. El valor se encuentra en la hora UTC (hora universal coordinada). Puede convertir la hora UTC a la hora local del cliente usando el `convertToLocalClientTime` método.

      \[[Conjunto de API: buzón de correo 1,1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: redacción

      #### <a name="examples"></a>Ejemplos

      ```javascript
      Office.context.mailbox.item.start.getAsync((result) => {
        if (result.status !== Office.AsyncResultStatus.Succeeded) {
          console.error(`Action failed with message ${result.error.message}`);
          return;
        }
        console.log(`Appointment starts: ${result.value}`);
      });
      ```
    name: getAsync(callback)
    fullName: getAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getAsync(callback: (asyncResult: Office.AsyncResult<Date>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: 'Cuando el método finaliza, la función que se pasa en el parámetro callback se llama con un único parámetro de tipo`Office.AsyncResult`<!-- -->. La `value` propiedad del resultado es un `Date` objeto.'
          type:
            - 'outlook!Office.Time#getAsync~1:complex'
  - uid: 'outlook!Office.Time#setAsync:member(1)'
    summary: |-
      Establece la hora de inicio o finalización de una cita.

      Si se `setAsync` llama al método en la propiedad Start, la `end` propiedad se ajustará para mantener la duración de la cita como se estableció previamente. Si se llama al método `setAsync` en la propiedad `end`, la duración de la cita se extenderá hasta la nueva hora de finalización.

      La hora debe especificarse conforme al sistema UTC. Puede obtener la hora UTC correcta con el método `convertToUtcClientTime`.

      \[[Conjunto de API: buzón de correo 1,1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadWriteItem`

      **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: redacción

      **Errores**:

      - `InvalidEndTime`<!-- -->: La hora de finalización de la cita es anterior a la hora de inicio de la cita.

      #### <a name="examples"></a>Ejemplos

      ```javascript
      var startTime = new Date("3/14/2015");
      var options = {
          // Pass information that can be used in the callback.
          asyncContext: {verb: "Set"}
      };
      Office.context.mailbox.item.start.setAsync(startTime, options, function(result) {
          if (result.error) {
              console.debug(result.error);
          } else {
              // Access the asyncContext that was passed to the setAsync function.
              console.debug("Start Time " + result.asyncContext.verb);
          }
      });
      ```
    name: 'setAsync(dateTime, options, callback)'
    fullName: 'setAsync(dateTime, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setAsync(dateTime: Date, options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: dateTime
          description: Un objeto date-time en Hora universal coordinada (UTC).
          type:
            - '!Date:interface'
        - id: options
          description: 'Opcional. Un objeto literal que contiene una o más de las siguientes propiedades. `asyncContext`<!-- -->: Los desarrolladores pueden proporcionar cualquier objeto al que quieran tener acceso en el método de devolución de llamada.'
          type:
            - 'outlook!Office.AsyncContextOptions:interface'
        - id: callback
          description: 'Opcional. Cuando el método finaliza, la función que se pasa en `callback` el parámetro se llama con un único parámetro de tipo`Office.AsyncResult`<!-- -->. Si al establecer la fecha y la hora se produce un error, la propiedad `asyncResult.error` contendrá un código de error.'
          type:
            - 'outlook!Office.Time#setAsync~0:complex'
  - uid: 'outlook!Office.Time#setAsync:member(2)'
    summary: |-
      Establece la hora de inicio o finalización de una cita.

      Si se `setAsync` llama al método en la propiedad Start, la `end` propiedad se ajustará para mantener la duración de la cita como se estableció previamente. Si se llama al método `setAsync` en la propiedad `end`, la duración de la cita se extenderá hasta la nueva hora de finalización.

      La hora debe especificarse conforme al sistema UTC. Puede obtener la hora UTC correcta con el método `convertToUtcClientTime`.

      \[[Conjunto de API: buzón de correo 1,1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadWriteItem`

      **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: redacción

      **Errores**:

      - `InvalidEndTime`<!-- -->: La hora de finalización de la cita es anterior a la hora de inicio de la cita.

      #### <a name="examples"></a>Ejemplos

      ```javascript
      var start = new Date(); // Represents current date and time.
      start.setDate(start.getDate() + 2); // Add 2 days to current date.
      Office.context.mailbox.item.start.setAsync(start, (result) => {
        if (result.status !== Office.AsyncResultStatus.Succeeded) {
          console.error(`Action failed with message ${result.error.message}`);
          return;
        }
        console.log(`Successfully set start date and time to ${start}`);
      });
      ```
    name: 'setAsync(dateTime, callback)'
    fullName: 'setAsync(dateTime, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setAsync(dateTime: Date, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: dateTime
          description: Un objeto date-time en Hora universal coordinada (UTC).
          type:
            - '!Date:interface'
        - id: callback
          description: 'Opcional. Cuando el método finaliza, la función que se pasa en `callback` el parámetro se llama con un único parámetro de tipo`Office.AsyncResult`<!-- -->. Si al establecer la fecha y la hora se produce un error, la propiedad `asyncResult.error` contendrá un código de error.'
          type:
            - 'outlook!Office.Time#setAsync~1:complex'
references:
  - uid: 'outlook!Office.AsyncContextOptions:interface'
    name: Office.AsyncContextOptions
  - uid: 'outlook!Office.Time#getAsync~0:complex'
    name: '(asyncResult: Office.AsyncResult<Date>) => void'
    fullName: '(asyncResult: Office.AsyncResult<Date>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <
        fullName: <
      - uid: '!Date:interface'
        name: Date
        fullName: Date
      - name: '>) => void'
        fullName: '>) => void'
  - uid: 'outlook!Office.Time#getAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<Date>) => void'
    fullName: '(asyncResult: Office.AsyncResult<Date>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <
        fullName: <
      - uid: '!Date:interface'
        name: Date
        fullName: Date
      - name: '>) => void'
        fullName: '>) => void'
  - uid: '!Date:interface'
    name: Date
  - uid: 'outlook!Office.Time#setAsync~0:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.Time#setAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void