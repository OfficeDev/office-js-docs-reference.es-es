### YamlMime:UniversalReference
items:
  - uid: onenote.OneNote.TableCell
    summary: |-
      Representa una celda en una tabla de OneNote.

      \[[Conjunto de API: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: OneNote.TableCell
    fullName: OneNote.TableCell
    langs:
      - typeScript
    type: class
    extends:
      - office.OfficeExtension.ClientObject
    package: onenote
    children:
      - onenote.OneNote.TableCell.appendHtml
      - onenote.OneNote.TableCell.appendImage
      - onenote.OneNote.TableCell.appendRichText
      - onenote.OneNote.TableCell.appendTable
      - onenote.OneNote.TableCell.cellIndex
      - onenote.OneNote.TableCell.clear
      - onenote.OneNote.TableCell.context
      - onenote.OneNote.TableCell.id
      - onenote.OneNote.TableCell.load
      - onenote.OneNote.TableCell.load_1
      - onenote.OneNote.TableCell.load_2
      - onenote.OneNote.TableCell.paragraphs
      - onenote.OneNote.TableCell.parentRow
      - onenote.OneNote.TableCell.rowIndex
      - onenote.OneNote.TableCell.set
      - onenote.OneNote.TableCell.set_1
      - onenote.OneNote.TableCell.shadingColor
      - onenote.OneNote.TableCell.toJSON
      - onenote.OneNote.TableCell.track
      - onenote.OneNote.TableCell.untrack
  - uid: onenote.OneNote.TableCell.appendHtml
    summary: |-
      Agrega el HTML especificado en la parte inferior de TableCell.

      \[[Conjunto de API: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: appendHtml(html)
    fullName: appendHtml(html)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'appendHtml(html: string): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>Ejemplos

          ```javascript
          OneNote.run(function(ctx) {
              var app = ctx.application;
              var outline = app.getActiveOutline();
              
              // Queue a command to load outline.paragraphs and their types.
              ctx.load(outline, "paragraphs, paragraphs/type");
              
              // Run the queued commands, and return a promise to indicate task completion.
              return ctx.sync().then(function () {
                  var paragraphs = outline.paragraphs;
                  
                  // for each table, get a table cell at row one and column two and add "Hello".
                  for (var i = 0; i < paragraphs.items.length; i++) {
                      var paragraph = paragraphs.items[i];
                      if (paragraph.type == "Table") {
                          var table = paragraph.table;
                          var cell = table.getCell(1 /*Row Index*/, 2 /*Column Index*/);
                          cell.appendHtml("<p>Hello</p>");
                      }
                  }
                  return ctx.sync();
              })
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: html
          description: 'Cadena HTML que se anexará. Consulte el [HTML compatible](https://docs.microsoft.com/office/dev/add-ins/onenote/onenote-add-ins-page-content#supported-html) para la API de JavaScript de los complementos de OneNote.'
          type:
            - string
  - uid: onenote.OneNote.TableCell.appendImage
    summary: |-
      Agrega la imagen especificada a la celda de la tabla.

      \[[Conjunto de API: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: 'appendImage(base64EncodedImage, width, height)'
    fullName: 'appendImage(base64EncodedImage, width, height)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'appendImage(base64EncodedImage: string, width: number, height: number): OneNote.Image;'
      return:
        type:
          - OneNote.Image
        description: ''
      parameters:
        - id: base64EncodedImage
          description: Cadena HTML que se anexará.
          type:
            - string
        - id: width
          description: 'Opcional. Ancho en la unidad de puntos. El valor predeterminado es null, que respeta el ancho de la imagen.'
          type:
            - number
        - id: height
          description: 'Opcional. Alto en la unidad de puntos. El valor predeterminado es null, que respeta el alto de la imagen.'
          type:
            - number
  - uid: onenote.OneNote.TableCell.appendRichText
    summary: |-
      Agrega el texto especificado a la celda de la tabla.

      \[[Conjunto de API: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: appendRichText(paragraphText)
    fullName: appendRichText(paragraphText)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'appendRichText(paragraphText: string): OneNote.RichText;'
      return:
        type:
          - onenote.OneNote.RichText
        description: |-


          #### <a name="examples"></a>Ejemplos

          ```javascript
          OneNote.run(function(ctx) {
              var app = ctx.application;
              var outline = app.getActiveOutline();
              var appendedRichText = null;
              
              // Queue a command to load outline.paragraphs and their types.
              ctx.load(outline, "paragraphs, paragraphs/type");
              
              // Run the queued commands, and return a promise to indicate task completion.
              return ctx.sync().then(function () {
                  var paragraphs = outline.paragraphs;
                  
                  // for each table, get a table cell at row one and column two and add "Hello".
                  for (var i = 0; i < paragraphs.items.length; i++) {
                      var paragraph = paragraphs.items[i];
                      if (paragraph.type == "Table") {
                          var table = paragraph.table;
                          var cell = table.getCell(1 /*Row Index*/, 2 /*Column Index*/);
                          appendedRichText = cell.appendRichText("Hello");
                      }
                  }
                  return ctx.sync();
              })
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: paragraphText
          description: Cadena HTML que se anexará.
          type:
            - string
  - uid: onenote.OneNote.TableCell.appendTable
    summary: |-
      Agrega una tabla con el número especificado de filas y columnas a la celda de la tabla.

      \[[Conjunto de API: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: 'appendTable(rowCount, columnCount, values)'
    fullName: 'appendTable(rowCount, columnCount, values)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'appendTable(rowCount: number, columnCount: number, values?: string[][]): OneNote.Table;'
      return:
        type:
          - OneNote.Table
        description: ''
      parameters:
        - id: rowCount
          description: Obligatorio. Número de filas de la tabla.
          type:
            - number
        - id: columnCount
          description: Necesario. Número de columnas de la tabla.
          type:
            - number
        - id: values
          description: 'Matriz 2D opcional. Si se especifican las cadenas correspondientes en la matriz, se rellenan las celdas.'
          type:
            - 'string[][]'
  - uid: onenote.OneNote.TableCell.cellIndex
    summary: |-
      Obtiene el índice de la celda de la fila. Solo lectura.

      \[[Conjunto de API: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: cellIndex
    fullName: cellIndex
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly cellIndex: number;'
      return:
        type:
          - number
  - uid: onenote.OneNote.TableCell.clear
    summary: |-
      Borra el contenido de la celda.

      \[[Conjunto de API: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: clear()
    fullName: clear()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clear(): void;'
      return:
        type:
          - void
        description: ''
  - uid: onenote.OneNote.TableCell.context
    summary: Contexto de la solicitud asociado al objeto. Esto conecta el proceso del complemento con el proceso de la aplicación host de Office.
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - RequestContext
  - uid: onenote.OneNote.TableCell.id
    summary: |-
      Obtiene el identificador de la celda. Solo lectura.

      \[[Conjunto de API: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: id
    fullName: id
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly id: string;'
      return:
        type:
          - string
  - uid: onenote.OneNote.TableCell.load
    summary: 'Pone en cola un comando para cargar las propiedades especificadas del objeto. Antes de leer las propiedades, debe llamar a "context.sync()".'
    remarks: |-
      Además de esta firma, este método tiene las siguientes firmas:

      `load(option?: string | string[]): OneNote.TableCell`-Donde opción es una cadena delimitada por comas o una matriz de cadenas que especifican las propiedades que se van a cargar.

      `load(option?: { select?: string; expand?: string; }): OneNote.TableCell`-Where opción. Select es una cadena delimitada por comas que especifica las propiedades que se van a cargar y Options. Expand es una cadena delimitada por comas que especifica las propiedades de navegación que se deben cargar.

      `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): OneNote.TableCell`-Solo disponible en tipos de colección. Es similar a la firma anterior. Option. Top especifica el número máximo de elementos de colección que se pueden incluir en el resultado. La opción. SKIP especifica el número de elementos que se deben omitir y que no se incluyen en el resultado. Si se especifica Option. Top, el conjunto de resultados se iniciará después de omitir el número especificado de elementos.
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: OneNote.Interfaces.TableCellLoadOptions): OneNote.TableCell;'
      return:
        type:
          - onenote.OneNote.TableCell
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - onenote.OneNote.Interfaces.TableCellLoadOptions
  - uid: onenote.OneNote.TableCell.load_1
    summary: Pone en cola un comando para cargar las propiedades especificadas del objeto. Debe llamar `context.sync()` antes de leer las propiedades.
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): OneNote.TableCell;'
      return:
        type:
          - onenote.OneNote.TableCell
        description: |-


          #### <a name="examples"></a>Ejemplos

          ```javascript
          OneNote.run(function(ctx) {
              var app = ctx.application;
              var outline = app.getActiveOutline();
              
              // Queue a command to load outline.paragraphs and their types.
              ctx.load(outline, "paragraphs, paragraphs/type");
              
              // Run the queued commands, and return a promise to indicate task completion.
              return ctx.sync().then(function () {
                  var paragraphs = outline.paragraphs;
                  
                  // for each table, get a table cell at row one and column two.
                  for (var i = 0; i < paragraphs.items.length; i++) {
                      var paragraph = paragraphs.items[i];
                      if (paragraph.type == "Table") {
                          var table = paragraph.table;
                          var cell = table.getCell(1 /*Row Index*/, 2 /*Column Index*/);
                          
                          // Queue a command to load the table cell.
                          ctx.load(cell);
                          ctx.sync().then(function() {
                              console.log("Cell Id: " + cell.id);
                              console.log("Cell Index: " + cell.cellIndex);
                              console.log("Cell's Row Index: " + cell.rowIndex);
                          });
                      }
                  }
                  return ctx.sync();
              })
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          ParentTable, ParentRow, Paragraphs
          OneNote.run(function(ctx) {
              var app = ctx.application;
              var outline = app.getActiveOutline();
              
              // Queue a command to load outline.paragraphs and their types.
              ctx.load(outline, "paragraphs, paragraphs/type");
              
              // Run the queued commands, and return a promise to indicate task completion.
              return ctx.sync().then(function () {
                  var paragraphs = outline.paragraphs;
                  
                  // for each table, get a table cell at row one and column two.
                  for (var i = 0; i < paragraphs.items.length; i++) {
                      var paragraph = paragraphs.items[i];
                      if (paragraph.type == "Table") {
                          var table = paragraph.table;
                          var cell = table.getCell(1 /*Row Index*/, 2 /*Column Index*/);
                          
                          // Queue a command to load parentTable, parentRow and paragraphs of the table cell.
                          ctx.load(cell, "parentTable, parentRow, paragraphs");
                          
                          ctx.sync().then(function() {
                              console.log("Parent Table Id: " + cell.parentTable.id);
                              console.log("Parent Row Id: " + cell.parentRow.id);
                              var paragraphs = cell.paragraphs;
                              
                              for (var i = 0; i < paragraphs.items.length; i++) {
                                  console.log("Paragraph Id: " + paragraphs.items[i].id);
                              }
                          });
                      }
                  }
                  return ctx.sync();
              })
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: propertyNames
          description: Una cadena delimitada por comas o una matriz de cadenas que especifican las propiedades que se van a cargar.
          type:
            - 'string | string[]'
  - uid: onenote.OneNote.TableCell.load_2
    summary: Pone en cola un comando para cargar las propiedades especificadas del objeto. Debe llamar `context.sync()` antes de leer las propiedades.
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): OneNote.TableCell;'
      return:
        type:
          - onenote.OneNote.TableCell
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: Donde propertyNamesAndPaths. Select es una cadena delimitada por comas que especifica las propiedades que se van a cargar y propertyNamesAndPaths. Expand es una cadena delimitada por comas que especifica las propiedades de navegación que se deben cargar.
          type:
            - '{ select?: string; expand?: string; }'
  - uid: onenote.OneNote.TableCell.paragraphs
    summary: |-
      Obtiene la colección de objetos Paragraph en el objeto TableCell. Solo lectura.

      \[[Conjunto de API: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: paragraphs
    fullName: paragraphs
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly paragraphs: OneNote.ParagraphCollection;'
      return:
        type:
          - onenote.OneNote.ParagraphCollection
  - uid: onenote.OneNote.TableCell.parentRow
    summary: |-
      Obtiene la fila primaria de la celda. Solo lectura.

      \[[Conjunto de API: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: parentRow
    fullName: parentRow
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly parentRow: OneNote.TableRow;'
      return:
        type:
          - OneNote.TableRow
  - uid: onenote.OneNote.TableCell.rowIndex
    summary: |-
      Obtiene el índice de fila de la celda en la tabla. Solo lectura.

      \[[Conjunto de API: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: rowIndex
    fullName: rowIndex
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly rowIndex: number;'
      return:
        type:
          - number
  - uid: onenote.OneNote.TableCell.set
    summary: Establece varias propiedades de un objeto al mismo tiempo. Puede pasar un objeto sin formato con las propiedades apropiadas o cualquier otro objeto de la API del mismo tipo.
    remarks: |-
      Este método tiene la siguiente firma adicional:

      `set(properties: OneNote.TableCell): void`
    name: 'set(properties, options)'
    fullName: 'set(properties, options)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Interfaces.TableCellUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: Objeto de JavaScript con propiedades que se estructuran de forma isomórfico a las propiedades del objeto en el que se llama al método.
          type:
            - Interfaces.TableCellUpdateData
        - id: options
          description: Proporciona una opción para suprimir errores si el objeto Properties intenta establecer propiedades de solo lectura.
          type:
            - office.OfficeExtension.UpdateOptions
  - uid: onenote.OneNote.TableCell.set_1
    summary: 'Establece varias propiedades en el objeto al mismo tiempo, basándose en un objeto cargado existente.'
    name: set(properties)
    fullName: set(properties)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: OneNote.TableCell): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - onenote.OneNote.TableCell
  - uid: onenote.OneNote.TableCell.shadingColor
    summary: |-
      Obtiene y establece el color de sombreado de la celda.

      \[[Conjunto de API: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: shadingColor
    fullName: shadingColor
    langs:
      - typeScript
    type: property
    syntax:
      content: 'shadingColor: string;'
      return:
        type:
          - string
  - uid: onenote.OneNote.TableCell.toJSON
    summary: 'Reemplaza el método JavaScript `toJSON()` para proporcionar un resultado más útil cuando se pasa un objeto API a`JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, a su vez, llama `toJSON` al método del objeto que se le pasa.) Mientras que el objeto OneNote. TableCell original es un objeto API, `toJSON` el método devuelve un objeto JavaScript sin formato (escrito como`OneNote.Interfaces.TableCellData`<!-- -->) que contiene copias rasas de las propiedades secundarias cargadas del objeto original.'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): OneNote.Interfaces.TableCellData;'
      return:
        type:
          - onenote.OneNote.Interfaces.TableCellData
        description: ''
  - uid: onenote.OneNote.TableCell.track
    summary: 'Realiza un seguimiento del objeto de ajuste automático según cambios adyacentes en el documento. Esta llamada es una forma abreviada de context.trackedObjects.add(thisObject). Si usa este objeto en llamadas ".sync" y fuera de la ejecución secuencial de un lote de ".run", y obtiene un error "InvalidObjectPath" al establecer una propiedad o invocar un método en el objeto, debería haber agregado el objeto a la colección de objetos de la que realiza un seguimiento cuando se creó el objeto.'
    name: track()
    fullName: track()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'track(): OneNote.TableCell;'
      return:
        type:
          - onenote.OneNote.TableCell
        description: ''
  - uid: onenote.OneNote.TableCell.untrack
    summary: 'Libere la memoria asociada a este objeto, si se ha realizado un seguimiento de él anteriormente. Esta llamada es una forma abreviada de context.trackedObjects.remove(thisObject). Tener muchos objetos marcados ralentiza la aplicación host, así que debe recordar liberar los objetos que agregue cuando haya terminado con ellos. Debe llamar a "context.sync()" antes de que surta efecto la liberación de memoria.'
    name: untrack()
    fullName: untrack()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'untrack(): OneNote.TableCell;'
      return:
        type:
          - onenote.OneNote.TableCell
        description: ''