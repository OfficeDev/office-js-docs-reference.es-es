### YamlMime:UniversalReference
items:
  - uid: onenote.OneNote.ParagraphCollection
    summary: |-
      <span data-ttu-id="f5799-101">Representa una colección de objetos Paragraph.</span><span class="sxs-lookup"><span data-stu-id="f5799-101">Represents a collection of Paragraph objects.</span></span>

      <span data-ttu-id="f5799-102">\[[Conjunto de API: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="f5799-102">\[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]</span></span>
    name: OneNote.ParagraphCollection
    fullName: OneNote.ParagraphCollection
    langs:
      - typeScript
    type: class
    extends:
      - 'OfficeExtension.ClientObject '
    package: onenote
    children:
      - onenote.OneNote.ParagraphCollection.context
      - onenote.OneNote.ParagraphCollection.count
      - onenote.OneNote.ParagraphCollection.getItem
      - onenote.OneNote.ParagraphCollection.getItemAt
      - onenote.OneNote.ParagraphCollection.items
      - onenote.OneNote.ParagraphCollection.load
      - onenote.OneNote.ParagraphCollection.load_1
      - onenote.OneNote.ParagraphCollection.load_2
      - onenote.OneNote.ParagraphCollection.toJSON
      - onenote.OneNote.ParagraphCollection.track
      - onenote.OneNote.ParagraphCollection.untrack
  - uid: onenote.OneNote.ParagraphCollection.context
    summary: <span data-ttu-id="f5799-103">Contexto de la solicitud asociado al objeto.</span><span class="sxs-lookup"><span data-stu-id="f5799-103">The request context associated with the object.</span></span> <span data-ttu-id="f5799-104">Esto conecta el proceso del complemento con el proceso de la aplicación host de Office.</span><span class="sxs-lookup"><span data-stu-id="f5799-104">This connects the add-in's process to the Office host application's process.</span></span>
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - onenote.OneNote.RequestContext
  - uid: onenote.OneNote.ParagraphCollection.count
    summary: |-
      <span data-ttu-id="f5799-105">Devuelve el número de párrafos de una página.</span><span class="sxs-lookup"><span data-stu-id="f5799-105">Returns the number of paragraphs in the page.</span></span> <span data-ttu-id="f5799-106">Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="f5799-106">Read-only.</span></span>

      <span data-ttu-id="f5799-107">\[[Conjunto de API: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="f5799-107">\[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]</span></span>
    name: count
    fullName: count
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly count: number;'
      return:
        type:
          - number
  - uid: onenote.OneNote.ParagraphCollection.getItem
    summary: |-
      <span data-ttu-id="f5799-108">Obtiene un objeto Paragraph por su identificador o por su índice en la colección.</span><span class="sxs-lookup"><span data-stu-id="f5799-108">Gets a Paragraph object by ID or by its index in the collection.</span></span> <span data-ttu-id="f5799-109">Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="f5799-109">Read-only.</span></span>

      <span data-ttu-id="f5799-110">\[[Conjunto de API: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="f5799-110">\[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]</span></span>
    name: getItem(index)
    fullName: getItem(index)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItem(index: number | string): OneNote.Paragraph;'
      return:
        type:
          - onenote.OneNote.Paragraph
        description: ''
      parameters:
        - id: index
          description: '<span data-ttu-id="f5799-111">El id. del objeto Paragraph, o bien la ubicación del índice del bloc de notas en la colección.</span><span class="sxs-lookup"><span data-stu-id="f5799-111">The ID of the Paragraph object, or the index location of the Paragraph object in the collection.</span></span>'
          type:
            - number | string
  - uid: onenote.OneNote.ParagraphCollection.getItemAt
    summary: |-
      <span data-ttu-id="f5799-112">Obtiene un párrafo según su posición en la colección.</span><span class="sxs-lookup"><span data-stu-id="f5799-112">Gets a paragraph on its position in the collection.</span></span>

      <span data-ttu-id="f5799-113">\[[Conjunto de API: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="f5799-113">\[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]</span></span>
    name: getItemAt(index)
    fullName: getItemAt(index)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemAt(index: number): OneNote.Paragraph;'
      return:
        type:
          - onenote.OneNote.Paragraph
        description: |-


          #### <a name="examples"></a><span data-ttu-id="f5799-114">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="f5799-114">Examples</span></span>

          ```javascript
          OneNote.run(function (context) {

              // Get the collection of pageContent items from the page.
              var pageContents = context.application.getActivePage().contents;

              // Get the first PageContent on the page, and then get its Outline's first paragraph.
              var pageContent = pageContents.getItemAt(0);
              var paragraphs = pageContent.outline.paragraphs;

              var firstParagraph = paragraphs.getItemAt(0);

              // Queue a command to load the type and richText.text property of this paragraph.
              firstParagraph.load("id,type");


              // Run the queued commands, and return a promise to indicate task completion.
              return context.sync()
                  .then(function () {
                      // Write text from paragraph to console
                      console.log(
                          "First Paragraph found with id : " + 
                          firstParagraph.id + " and type " + firstParagraph.type);
                  });
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          }); 
          ```
      parameters:
        - id: index
          description: <span data-ttu-id="f5799-115">Valor de índice del objeto que se va a recuperar.</span><span class="sxs-lookup"><span data-stu-id="f5799-115">Index value of the object to be retrieved.</span></span> <span data-ttu-id="f5799-116">Indizado con cero.</span><span class="sxs-lookup"><span data-stu-id="f5799-116">Zero-indexed.</span></span>
          type:
            - number
  - uid: onenote.OneNote.ParagraphCollection.items
    summary: <span data-ttu-id="f5799-117">Obtiene los elementos secundarios cargados en esta colección.</span><span class="sxs-lookup"><span data-stu-id="f5799-117">Gets the loaded child items in this collection.</span></span>
    name: items
    fullName: items
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly items: OneNote.Paragraph[];'
      return:
        type:
          - 'OneNote.Paragraph[]'
  - uid: onenote.OneNote.ParagraphCollection.load
    summary: '<span data-ttu-id="f5799-118">Pone en cola un comando para cargar las propiedades especificadas del objeto.</span><span class="sxs-lookup"><span data-stu-id="f5799-118">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="f5799-119">Antes de leer las propiedades, debe llamar a "context.sync()".</span><span class="sxs-lookup"><span data-stu-id="f5799-119">You must call "context.sync()" before reading the properties.</span></span>'
    remarks: |-
      <span data-ttu-id="f5799-120">Además de esta firma, este método tiene las siguientes firmas:</span><span class="sxs-lookup"><span data-stu-id="f5799-120">In addition to this signature, this method has the following signatures:</span></span>

      <span data-ttu-id="f5799-121">`load(option?: string | string[]): OneNote.ParagraphCollection`-Donde opción es una cadena delimitada por comas o una matriz de cadenas que especifican las propiedades que se van a cargar.</span><span class="sxs-lookup"><span data-stu-id="f5799-121">`load(option?: string | string[]): OneNote.ParagraphCollection` - Where option is a comma-delimited string or an array of strings that specify the properties to load.</span></span>

      <span data-ttu-id="f5799-122">`load(option?: { select?: string; expand?: string; }): OneNote.ParagraphCollection`-Where opción. Select es una cadena delimitada por comas que especifica las propiedades que se van a cargar y Options. Expand es una cadena delimitada por comas que especifica las propiedades de navegación que se deben cargar.</span><span class="sxs-lookup"><span data-stu-id="f5799-122">`load(option?: { select?: string; expand?: string; }): OneNote.ParagraphCollection` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>

      <span data-ttu-id="f5799-123">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): OneNote.ParagraphCollection`-Solo disponible en tipos de colección.</span><span class="sxs-lookup"><span data-stu-id="f5799-123">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): OneNote.ParagraphCollection` - Only available on collection types.</span></span> <span data-ttu-id="f5799-124">Es similar a la firma anterior.</span><span class="sxs-lookup"><span data-stu-id="f5799-124">It is similar to the preceding signature.</span></span> <span data-ttu-id="f5799-125">Option. Top especifica el número máximo de elementos de colección que se pueden incluir en el resultado.</span><span class="sxs-lookup"><span data-stu-id="f5799-125">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="f5799-126">La opción. SKIP especifica el número de elementos que se deben omitir y que no se incluyen en el resultado.</span><span class="sxs-lookup"><span data-stu-id="f5799-126">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="f5799-127">Si se especifica Option. Top, el conjunto de resultados se iniciará después de omitir el número especificado de elementos.</span><span class="sxs-lookup"><span data-stu-id="f5799-127">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: OneNote.Interfaces.ParagraphCollectionLoadOptions & OneNote.Interfaces.CollectionLoadOptions): OneNote.ParagraphCollection;'
      return:
        type:
          - onenote.OneNote.ParagraphCollection
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - OneNote.Interfaces.ParagraphCollectionLoadOptions & OneNote.Interfaces.CollectionLoadOptions
  - uid: onenote.OneNote.ParagraphCollection.load_1
    summary: <span data-ttu-id="f5799-128">Pone en cola un comando para cargar las propiedades especificadas del objeto.</span><span class="sxs-lookup"><span data-stu-id="f5799-128">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="f5799-129">Debe llamar `context.sync()` antes de leer las propiedades.</span><span class="sxs-lookup"><span data-stu-id="f5799-129">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): OneNote.ParagraphCollection;'
      return:
        type:
          - onenote.OneNote.ParagraphCollection
        description: |-


          #### <a name="examples"></a><span data-ttu-id="f5799-130">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="f5799-130">Examples</span></span>

          ```javascript
          OneNote.run(function (context) {

              // Get the collection of pageContent items from the page.
              var pageContents = context.application.getActivePage().contents;

              // Get the first PageContent on the page, and then get its Outline's first paragraph.
              var pageContent = pageContents.getItem(0);
              var paragraphs = pageContent.outline.paragraphs;
              
              // Queue a command to load the id and type of each paragraph.
              paragraphs.load("id,type");

              // Run the queued commands, and return a promise to indicate task completion.
              return context.sync()
                  .then(function () {
                      var firstParagraph = paragraphs.items[0];
                      // Write text from first paragraph to console
                      console.log(
                          "First Paragraph found with id : " + 
                          firstParagraph.id + " and type " + firstParagraph.type);
                  });
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          OneNote.run(function (context) {

              // Get the collection of pageContent items from the page.
              var pageContents = context.application.getActivePage().contents;

              // Get the first PageContent on the page, and then get its outline's paragraphs.
              var outlinePageContents = ;
              var paragraphs = ;
              var richTextParagraphs = ;
              // Queue a command to load the id and type of each page content in the outline.
              pageContents.load("id,type");

              // Run the queued commands, and return a promise to indicate task completion.
              return context.sync()
                  .then(function () {
                      // Load all page contents of type Outline
                      $.each(pageContents.items, function(index, pageContent) {
                          if(pageContent.type == 'Outline')
                          {
                              pageContent.load('outline,outline/paragraphs,outline/paragraphs/type');
                              outlinePageContents.push(pageContent);
                          }
                      });
                      return context.sync();
                  })
                  .then(function () {
                      // Load all rich text paragraphs across outlines
                      $.each(outlinePageContents, function(index, outlinePageContent) {
                          var outline = outlinePageContent.outline;
                          paragraphs = paragraphs.concat(outline.paragraphs.items);
                      });
                      $.each(paragraphs, function(index, paragraph) {
                          if(paragraph.type == 'RichText')
                          {
                              richTextParagraphs.push(paragraph);
                              paragraph.load("id,richText/text");
                          }
                      });
                      return context.sync();
                  })
                  .then(function () {
                      // Display all rich text paragraphs to the console
                      $.each(richTextParagraphs, function(index, richTextParagraph) {
                          var richText = richTextParagraph.richText;
                          console.log(
                              "Paragraph found with richtext content : " + 
                              richText.text + " and richtext id : " + richText.id);
                      });
                      return context.sync();
                  });
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: propertyNames
          description: <span data-ttu-id="f5799-131">Una cadena delimitada por comas o una matriz de cadenas que especifican las propiedades que se van a cargar.</span><span class="sxs-lookup"><span data-stu-id="f5799-131">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
          type:
            - 'string | string[]'
  - uid: onenote.OneNote.ParagraphCollection.load_2
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: OfficeExtension.LoadOption): OneNote.ParagraphCollection;'
      return:
        type:
          - onenote.OneNote.ParagraphCollection
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - OfficeExtension.LoadOption
  - uid: onenote.OneNote.ParagraphCollection.toJSON
    summary: '<span data-ttu-id="f5799-132">Reemplaza el método JavaScript `toJSON()` para proporcionar un resultado más útil cuando se pasa un objeto API a`JSON.stringify()`</span><span class="sxs-lookup"><span data-stu-id="f5799-132">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id="f5799-133">.</span><span class="sxs-lookup"><span data-stu-id="f5799-133"></span></span> <span data-ttu-id="f5799-134">(`JSON.stringify`</span><span class="sxs-lookup"><span data-stu-id="f5799-134"></span></span><!-- --><span data-ttu-id="f5799-135">, a su vez, llama `toJSON` al método del objeto que se le pasa.) Mientras que el `OneNote.ParagraphCollection` objeto original es un objeto API, `toJSON` el método devuelve un objeto JavaScript sin formato (escrito como`OneNote.Interfaces.ParagraphCollectionData`</span><span class="sxs-lookup"><span data-stu-id="f5799-135">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original `OneNote.ParagraphCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `OneNote.Interfaces.ParagraphCollectionData`</span></span><!-- --><span data-ttu-id="f5799-136">) que contiene una matriz "items" con copias rasas de las propiedades cargadas de los elementos de la colección.</span><span class="sxs-lookup"><span data-stu-id="f5799-136">) that contains an "items" array with shallow copies of any loaded properties from the collection''s items.</span></span>'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): OneNote.Interfaces.ParagraphCollectionData;'
      return:
        type:
          - onenote.OneNote.Interfaces.ParagraphCollectionData
        description: ''
  - uid: onenote.OneNote.ParagraphCollection.track
    summary: '<span data-ttu-id="f5799-137">Realiza un seguimiento del objeto de ajuste automático según cambios adyacentes en el documento.</span><span class="sxs-lookup"><span data-stu-id="f5799-137">Track the object for automatic adjustment based on surrounding changes in the document.</span></span> <span data-ttu-id="f5799-138">Esta llamada es una forma abreviada de context.trackedObjects.add(thisObject).</span><span class="sxs-lookup"><span data-stu-id="f5799-138">This call is a shorthand for context.trackedObjects.add(thisObject).</span></span> <span data-ttu-id="f5799-139">Si usa este objeto en llamadas ".sync" y fuera de la ejecución secuencial de un lote de ".run", y obtiene un error "InvalidObjectPath" al establecer una propiedad o invocar un método en el objeto, debería haber agregado el objeto a la colección de objetos de la que realiza un seguimiento cuando se creó el objeto.</span><span class="sxs-lookup"><span data-stu-id="f5799-139">If you are using this object across ".sync" calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you needed to have added the object to the tracked object collection when the object was first created.</span></span>'
    name: track()
    fullName: track()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'track(): OneNote.ParagraphCollection;'
      return:
        type:
          - onenote.OneNote.ParagraphCollection
        description: ''
  - uid: onenote.OneNote.ParagraphCollection.untrack
    summary: '<span data-ttu-id="f5799-140">Libere la memoria asociada a este objeto, si se ha realizado un seguimiento de él anteriormente.</span><span class="sxs-lookup"><span data-stu-id="f5799-140">Release the memory associated with this object, if it has previously been tracked.</span></span> <span data-ttu-id="f5799-141">Esta llamada es una forma abreviada de context.trackedObjects.remove(thisObject).</span><span class="sxs-lookup"><span data-stu-id="f5799-141">This call is shorthand for context.trackedObjects.remove(thisObject).</span></span> <span data-ttu-id="f5799-142">Tener muchos objetos marcados ralentiza la aplicación host, así que debe recordar liberar los objetos que agregue cuando haya terminado con ellos.</span><span class="sxs-lookup"><span data-stu-id="f5799-142">Having many tracked objects slows down the host application, so please remember to free any objects you add, once you''re done using them.</span></span> <span data-ttu-id="f5799-143">Debe llamar a "context.sync()" antes de que surta efecto la liberación de memoria.</span><span class="sxs-lookup"><span data-stu-id="f5799-143">You will need to call "context.sync()" before the memory release takes effect.</span></span>'
    name: untrack()
    fullName: untrack()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'untrack(): OneNote.ParagraphCollection;'
      return:
        type:
          - onenote.OneNote.ParagraphCollection
        description: ''