### YamlMime:UniversalReference
items:
  - uid: onenote.OneNote.SectionGroup
    summary: |-
      Representa un grupo de secciones de OneNote. Los grupos de secciones pueden contener secciones y otros grupos de secciones.

      \[[Conjunto de API: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: OneNote.SectionGroup
    fullName: OneNote.SectionGroup
    langs:
      - typeScript
    type: class
    extends:
      - 'OfficeExtension.ClientObject '
    package: onenote
    children:
      - onenote.OneNote.SectionGroup.addSection
      - onenote.OneNote.SectionGroup.addSectionGroup
      - onenote.OneNote.SectionGroup.clientUrl
      - onenote.OneNote.SectionGroup.context
      - onenote.OneNote.SectionGroup.getRestApiId
      - onenote.OneNote.SectionGroup.id
      - onenote.OneNote.SectionGroup.load
      - onenote.OneNote.SectionGroup.load_1
      - onenote.OneNote.SectionGroup.load_2
      - onenote.OneNote.SectionGroup.name
      - onenote.OneNote.SectionGroup.notebook
      - onenote.OneNote.SectionGroup.parentSectionGroup
      - onenote.OneNote.SectionGroup.parentSectionGroupOrNull
      - onenote.OneNote.SectionGroup.sectionGroups
      - onenote.OneNote.SectionGroup.sections
      - onenote.OneNote.SectionGroup.toJSON
      - onenote.OneNote.SectionGroup.track
      - onenote.OneNote.SectionGroup.untrack
  - uid: onenote.OneNote.SectionGroup.addSection
    summary: |-
      Agrega una nueva sección al final del grupo de secciones.

      \[[Conjunto de API: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: addSection(title)
    fullName: addSection(title)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addSection(title: string): OneNote.Section;'
      return:
        type:
          - onenote.OneNote.Section
        description: |-


          #### <a name="examples"></a>Ejemplos

          ```javascript
          OneNote.run(function (context) {

              // Get the section groups that are direct children of the current notebook.
              var sectionGroups = context.application.getActiveNotebook().sectionGroups;
              
              // Queue a command to load the section groups.
              // For best performance, request specific properties.
              sectionGroups.load("id");

              // Run the queued commands, and return a promise to indicate task completion.
              return context.sync()
                  .then(function() {
                      
                      // Add a section to each section group.
                      $.each(sectionGroups.items, function(index, sectionGroup) {
                          sectionGroup.addSection("Agenda");
                      });
                      
                      // Run the queued commands.
                      return context.sync();
                  });
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: title
          description: Nombre de la nueva sección.
          type:
            - string
  - uid: onenote.OneNote.SectionGroup.addSectionGroup
    summary: |-
      Agrega un nuevo grupo de secciones al final de este sectionGroup.

      \[[Conjunto de API: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: addSectionGroup(name)
    fullName: addSectionGroup(name)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addSectionGroup(name: string): OneNote.SectionGroup;'
      return:
        type:
          - onenote.OneNote.SectionGroup
        description: |-


          #### <a name="examples"></a>Ejemplos

          ```javascript
          OneNote.run(function (context) {
              var sectionGroup;
              var nestedSectionGroup;

              // Gets the active notebook.
              var notebook = context.application.getActiveNotebook();

              // Queue a command to add a new section group.
              var sectionGroups = notebook.sectionGroups;

              // Queue a command to load the new section group.
              sectionGroups.load();

              // Run the queued commands, and return a promise to indicate task completion.
              return context.sync()
                  .then(function(){
                      sectionGroup = sectionGroups.items[0];
                      sectionGroup.load();
                      return context.sync();
                  })
                  .then(function(){
                      nestedSectionGroup = sectionGroup.addSectionGroup("Sample nested section group");
                      nestedSectionGroup.load();
                      return context.sync();
                  })
                  .then(function() {
                      console.log("New nested section group name is " + nestedSectionGroup.name);
                  });
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          }); 
          ```
      parameters:
        - id: name
          description: Nombre de la nueva sección.
          type:
            - string
  - uid: onenote.OneNote.SectionGroup.clientUrl
    summary: |-
      URL del cliente del grupo de secciones. Solo lectura

      \[[Conjunto de API: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: clientUrl
    fullName: clientUrl
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly clientUrl: string;'
      return:
        type:
          - string
  - uid: onenote.OneNote.SectionGroup.context
    summary: Contexto de la solicitud asociado al objeto. Esto conecta el proceso del complemento con el proceso de la aplicación host de Office.
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - onenote.OneNote.RequestContext
  - uid: onenote.OneNote.SectionGroup.getRestApiId
    summary: |-
      Obtiene el identificador de la API de REST.

      \[[Conjunto de API: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: getRestApiId()
    fullName: getRestApiId()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRestApiId(): OfficeExtension.ClientResult<string>;'
      return:
        type:
          - OfficeExtension.ClientResult<string>
        description: ''
  - uid: onenote.OneNote.SectionGroup.id
    summary: |-
      Obtiene el identificador del grupo de secciones. Solo lectura.

      \[[Conjunto de API: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: id
    fullName: id
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly id: string;'
      return:
        type:
          - string
  - uid: onenote.OneNote.SectionGroup.load
    summary: 'Pone en cola un comando para cargar las propiedades especificadas del objeto. Antes de leer las propiedades, debe llamar a "context.sync()".'
    remarks: |-
      Además de esta firma, este método tiene las siguientes firmas:

      `load(option?: string | string[]): OneNote.SectionGroup`-Donde opción es una cadena delimitada por comas o una matriz de cadenas que especifican las propiedades que se van a cargar.

      `load(option?: { select?: string; expand?: string; }): OneNote.SectionGroup`-Where opción. Select es una cadena delimitada por comas que especifica las propiedades que se van a cargar y Options. Expand es una cadena delimitada por comas que especifica las propiedades de navegación que se deben cargar.

      `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): OneNote.SectionGroup`-Solo disponible en tipos de colección. Es similar a la firma anterior. Option. Top especifica el número máximo de elementos de colección que se pueden incluir en el resultado. La opción. SKIP especifica el número de elementos que se deben omitir y que no se incluyen en el resultado. Si se especifica Option. Top, el conjunto de resultados se iniciará después de omitir el número especificado de elementos.
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: OneNote.Interfaces.SectionGroupLoadOptions): OneNote.SectionGroup;'
      return:
        type:
          - onenote.OneNote.SectionGroup
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - onenote.OneNote.Interfaces.SectionGroupLoadOptions
  - uid: onenote.OneNote.SectionGroup.load_1
    summary: Pone en cola un comando para cargar las propiedades especificadas del objeto. Debe llamar `context.sync()` antes de leer las propiedades.
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): OneNote.SectionGroup;'
      return:
        type:
          - onenote.OneNote.SectionGroup
        description: |-


          #### <a name="examples"></a>Ejemplos

          ```javascript
          OneNote.run(function (context) {
                  
              // Get the parent section group that contains the current section.
              var sectionGroup = context.application.getActiveSection().parentSectionGroup;
                      
              // Queue a command to load the section group. 
              // For best performance, request specific properties.           
              sectionGroup.load("id,name");
                      
              // Run the queued commands, and return a promise to indicate task completion.
              return context.sync()
                  .then(function () {
                      
                      // Write the properties.
                      console.log("Section group name: " + sectionGroup.name);
                      console.log("Section group ID: " + sectionGroup.id);
                      
                  });
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          OneNote.run(function (context) {
                  
              // Get the parent section group that contains the current section.
              var sectionGroup = context.application.getActiveSection().parentSectionGroup;
                      
              // Queue a command to load the section group with the specified properties.           
              sectionGroup.load("name,notebook/name"); 
                      
              // Run the queued commands, and return a promise to indicate task completion.
              return context.sync()
                  .then(function () {

                      // Write the properties.
                      console.log("Section group name: " + sectionGroup.name);
                      console.log("Parent notebook name: " + sectionGroup.notebook.name);
                  });
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          OneNote.run(function (context) {

              // Get the section groups that are direct children of the current notebook.
              var sectionGroups = context.application.getActiveNotebook().sectionGroups;

              // Queue a command to load the section groups.
              // For best performance, request specific properties.
              sectionGroups.load("name");
              
              // Get the child section groups of the first section group in the notebook.
              var nestedSectionGroups = sectionGroups._GetItem(0).sectionGroups;
              
              // Queue a command to load the ID and name properties of the child section groups.
              nestedSectionGroups.load("id,name");
              
              // Run the queued commands, and return a promise to indicate task completion.
              return context.sync()
                  .then(function() {
                      
                      // Write the properties for each child section group.
                      $.each(nestedSectionGroups.items, function(index, sectionGroup) {
                          console.log("Section group name: " + sectionGroup.name);  
                          console.log("Section group ID: " + sectionGroup.id);  
                      });
                  });
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          OneNote.run(function (context) {

              // Get the sections that are siblings of the current section.
              var sections = context.application.getActiveSection().parentSectionGroup.sections;

              // Queue a command to load the section groups.
              // For best performance, request specific properties.
              sections.load("id,name");
              
              // Run the queued commands, and return a promise to indicate task completion.
              return context.sync()
                  .then(function() {
                      
                      // Write the properties for each section.
                      $.each(sections.items, function(index, section) {
                          console.log("Section name: " + section.name);  
                          console.log("Section ID: " + section.id);  
                      });
                  });
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: propertyNames
          description: Una cadena delimitada por comas o una matriz de cadenas que especifican las propiedades que se van a cargar.
          type:
            - 'string | string[]'
  - uid: onenote.OneNote.SectionGroup.load_2
    summary: Pone en cola un comando para cargar las propiedades especificadas del objeto. Debe llamar `context.sync()` antes de leer las propiedades.
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): OneNote.SectionGroup;'
      return:
        type:
          - onenote.OneNote.SectionGroup
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: Donde propertyNamesAndPaths. Select es una cadena delimitada por comas que especifica las propiedades que se van a cargar y propertyNamesAndPaths. Expand es una cadena delimitada por comas que especifica las propiedades de navegación que se deben cargar.
          type:
            - '{ select?: string; expand?: string; }'
  - uid: onenote.OneNote.SectionGroup.name
    summary: |-
      Obtiene el nombre del grupo de secciones. Solo lectura.

      \[[Conjunto de API: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: name
    fullName: name
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly name: string;'
      return:
        type:
          - string
  - uid: onenote.OneNote.SectionGroup.notebook
    summary: |-
      Obtiene el bloc de notas que contiene el grupo de secciones. Solo lectura.

      \[[Conjunto de API: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: notebook
    fullName: notebook
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly notebook: OneNote.Notebook;'
      return:
        type:
          - onenote.OneNote.Notebook
  - uid: onenote.OneNote.SectionGroup.parentSectionGroup
    summary: |-
      Obtiene el grupo de secciones que contiene el grupo de secciones. Genera ItemNotFound si el grupo de secciones es un elemento secundario directo del bloc de notas. Solo lectura.

      \[[Conjunto de API: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: parentSectionGroup
    fullName: parentSectionGroup
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly parentSectionGroup: OneNote.SectionGroup;'
      return:
        type:
          - onenote.OneNote.SectionGroup
  - uid: onenote.OneNote.SectionGroup.parentSectionGroupOrNull
    summary: |-
      Obtiene el grupo de secciones que contiene el grupo de secciones. Devuelve nulo si el grupo de secciones no es un elemento secundario directo del bloc de notas. Solo lectura.

      \[[Conjunto de API: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: parentSectionGroupOrNull
    fullName: parentSectionGroupOrNull
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly parentSectionGroupOrNull: OneNote.SectionGroup;'
      return:
        type:
          - onenote.OneNote.SectionGroup
  - uid: onenote.OneNote.SectionGroup.sectionGroups
    summary: |-
      Colección de grupos de secciones en el grupo de secciones. Solo lectura

      \[[Conjunto de API: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: sectionGroups
    fullName: sectionGroups
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly sectionGroups: OneNote.SectionGroupCollection;'
      return:
        type:
          - onenote.OneNote.SectionGroupCollection
  - uid: onenote.OneNote.SectionGroup.sections
    summary: |-
      Colección de secciones en el grupo de secciones. Solo lectura

      \[[Conjunto de API: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: sections
    fullName: sections
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly sections: OneNote.SectionCollection;'
      return:
        type:
          - onenote.OneNote.SectionCollection
  - uid: onenote.OneNote.SectionGroup.toJSON
    summary: 'Reemplaza el método JavaScript `toJSON()` para proporcionar un resultado más útil cuando se pasa un objeto API a`JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, a su vez, llama `toJSON` al método del objeto que se le pasa.) Mientras que el objeto OneNote. SectionGroup original es un objeto API, `toJSON` el método devuelve un objeto JavaScript sin formato (escrito como`OneNote.Interfaces.SectionGroupData`<!-- -->) que contiene copias rasas de las propiedades secundarias cargadas del objeto original.'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): OneNote.Interfaces.SectionGroupData;'
      return:
        type:
          - onenote.OneNote.Interfaces.SectionGroupData
        description: ''
  - uid: onenote.OneNote.SectionGroup.track
    summary: 'Realiza un seguimiento del objeto de ajuste automático según cambios adyacentes en el documento. Esta llamada es una forma abreviada de context.trackedObjects.add(thisObject). Si usa este objeto en llamadas ".sync" y fuera de la ejecución secuencial de un lote de ".run", y obtiene un error "InvalidObjectPath" al establecer una propiedad o invocar un método en el objeto, debería haber agregado el objeto a la colección de objetos de la que realiza un seguimiento cuando se creó el objeto.'
    name: track()
    fullName: track()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'track(): OneNote.SectionGroup;'
      return:
        type:
          - onenote.OneNote.SectionGroup
        description: ''
  - uid: onenote.OneNote.SectionGroup.untrack
    summary: 'Libere la memoria asociada a este objeto, si se ha realizado un seguimiento de él anteriormente. Esta llamada es una forma abreviada de context.trackedObjects.remove(thisObject). Tener muchos objetos marcados ralentiza la aplicación host, así que debe recordar liberar los objetos que agregue cuando haya terminado con ellos. Debe llamar a "context.sync()" antes de que surta efecto la liberación de memoria.'
    name: untrack()
    fullName: untrack()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'untrack(): OneNote.SectionGroup;'
      return:
        type:
          - onenote.OneNote.SectionGroup
        description: ''