### YamlMime:UniversalReference
items:
  - uid: 'onenote!OneNote.Notebook:class'
    summary: |-
      <span data-ttu-id="8d7dd-101">Representa un bloc de notas de OneNote.</span><span class="sxs-lookup"><span data-stu-id="8d7dd-101">Represents a OneNote notebook.</span></span> <span data-ttu-id="8d7dd-102">Los blocs de notas contienen grupos de secciones y secciones.</span><span class="sxs-lookup"><span data-stu-id="8d7dd-102">Notebooks contain section groups and sections.</span></span>

      <span data-ttu-id="8d7dd-103">\[[Conjunto de API: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8d7dd-103">\[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]</span></span>
    name: OneNote.Notebook
    fullName: OneNote.Notebook
    langs:
      - typeScript
    type: class
    extends:
      - 'onenote!OfficeExtension.ClientObject:class'
    package: onenote!
    children:
      - 'onenote!OneNote.Notebook#addSection:member(1)'
      - 'onenote!OneNote.Notebook#addSectionGroup:member(1)'
      - 'onenote!OneNote.Notebook#baseUrl:member'
      - 'onenote!OneNote.Notebook#clientUrl:member'
      - 'onenote!OneNote.Notebook#context:member'
      - 'onenote!OneNote.Notebook#getRestApiId:member(1)'
      - 'onenote!OneNote.Notebook#id:member'
      - 'onenote!OneNote.Notebook#isVirtual:member'
      - 'onenote!OneNote.Notebook#load:member(1)'
      - 'onenote!OneNote.Notebook#load:member(2)'
      - 'onenote!OneNote.Notebook#load:member(3)'
      - 'onenote!OneNote.Notebook#name:member'
      - 'onenote!OneNote.Notebook#sectionGroups:member'
      - 'onenote!OneNote.Notebook#sections:member'
      - 'onenote!OneNote.Notebook#toJSON:member(1)'
      - 'onenote!OneNote.Notebook#track:member(1)'
      - 'onenote!OneNote.Notebook#untrack:member(1)'
  - uid: 'onenote!OneNote.Notebook#addSection:member(1)'
    summary: |-
      <span data-ttu-id="8d7dd-104">Agrega una nueva sección al final del bloc de notas.</span><span class="sxs-lookup"><span data-stu-id="8d7dd-104">Adds a new section to the end of the notebook.</span></span>

      <span data-ttu-id="8d7dd-105">\[[Conjunto de API: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8d7dd-105">\[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]</span></span>
    name: addSection(name)
    fullName: addSection(name)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addSection(name: string): OneNote.Section;'
      return:
        type:
          - 'onenote!OneNote.Section:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="8d7dd-106">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="8d7dd-106">Examples</span></span>

          ```javascript
          OneNote.run(function (context) {

              // Gets the active notebook.
              var notebook = context.application.getActiveNotebook();

              // Queue a command to add a new section. 
              var section = notebook.addSection("Sample section");
              
              // Queue a command to load the new section. This example reads the name property later.
              section.load("name");

              // Run the queued commands, and return a promise to indicate task completion.
              return context.sync()
                  .then(function() {
                      console.log("New section name is " + section.name);
                  });
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          }); 
          ```
      parameters:
        - id: name
          description: <span data-ttu-id="8d7dd-107">Nombre de la nueva sección.</span><span class="sxs-lookup"><span data-stu-id="8d7dd-107">The name of the new section.</span></span>
          type:
            - string
  - uid: 'onenote!OneNote.Notebook#addSectionGroup:member(1)'
    summary: |-
      <span data-ttu-id="8d7dd-108">Agrega un nuevo grupo de secciones al final del bloc de notas.</span><span class="sxs-lookup"><span data-stu-id="8d7dd-108">Adds a new section group to the end of the notebook.</span></span>

      <span data-ttu-id="8d7dd-109">\[[Conjunto de API: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8d7dd-109">\[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]</span></span>
    name: addSectionGroup(name)
    fullName: addSectionGroup(name)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addSectionGroup(name: string): OneNote.SectionGroup;'
      return:
        type:
          - 'onenote!OneNote.SectionGroup:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="8d7dd-110">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="8d7dd-110">Examples</span></span>

          ```javascript
          OneNote.run(function (context) {

              // Gets the active notebook.
              var notebook = context.application.getActiveNotebook();

              // Queue a command to add a new section group.
              var sectionGroup = notebook.addSectionGroup("Sample section group");

              // Queue a command to load the new section group.
              sectionGroup.load();

              // Run the queued commands, and return a promise to indicate task completion.
              return context.sync()
                  .then(function() {
                      console.log("New section group name is " + sectionGroup.name);
                  });
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          }); 
          ```
      parameters:
        - id: name
          description: <span data-ttu-id="8d7dd-111">Nombre de la nueva sección.</span><span class="sxs-lookup"><span data-stu-id="8d7dd-111">The name of the new section.</span></span>
          type:
            - string
  - uid: 'onenote!OneNote.Notebook#baseUrl:member'
    summary: |-
      <span data-ttu-id="8d7dd-112">La dirección URL del sitio en el que se encuentra el Bloc de notas.</span><span class="sxs-lookup"><span data-stu-id="8d7dd-112">The url of the site that this notebook is located.</span></span> <span data-ttu-id="8d7dd-113">Solo lectura</span><span class="sxs-lookup"><span data-stu-id="8d7dd-113">Read only</span></span>

      <span data-ttu-id="8d7dd-114">\[[Conjunto de API: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8d7dd-114">\[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]</span></span>
    name: baseUrl
    fullName: baseUrl
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly baseUrl: string;'
      return:
        type:
          - string
  - uid: 'onenote!OneNote.Notebook#clientUrl:member'
    summary: |-
      <span data-ttu-id="8d7dd-115">La URL del cliente del bloc de notas.</span><span class="sxs-lookup"><span data-stu-id="8d7dd-115">The client url of the notebook.</span></span> <span data-ttu-id="8d7dd-116">Solo lectura</span><span class="sxs-lookup"><span data-stu-id="8d7dd-116">Read only</span></span>

      <span data-ttu-id="8d7dd-117">\[[Conjunto de API: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8d7dd-117">\[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]</span></span>
    name: clientUrl
    fullName: clientUrl
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly clientUrl: string;'
      return:
        type:
          - string
  - uid: 'onenote!OneNote.Notebook#context:member'
    summary: <span data-ttu-id="8d7dd-118">Contexto de la solicitud asociado al objeto.</span><span class="sxs-lookup"><span data-stu-id="8d7dd-118">The request context associated with the object.</span></span> <span data-ttu-id="8d7dd-119">Esto conecta el proceso del complemento con el proceso de la aplicación host de Office.</span><span class="sxs-lookup"><span data-stu-id="8d7dd-119">This connects the add-in's process to the Office host application's process.</span></span>
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'onenote!OneNote.RequestContext:class'
  - uid: 'onenote!OneNote.Notebook#getRestApiId:member(1)'
    summary: |-
      <span data-ttu-id="8d7dd-120">Obtiene el identificador de la API de REST.</span><span class="sxs-lookup"><span data-stu-id="8d7dd-120">Gets the REST API ID.</span></span>

      <span data-ttu-id="8d7dd-121">\[[Conjunto de API: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8d7dd-121">\[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]</span></span>
    name: getRestApiId()
    fullName: getRestApiId()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRestApiId(): OfficeExtension.ClientResult<string>;'
      return:
        type:
          - 'onenote!OneNote.Notebook#getRestApiId~0:complex'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="8d7dd-122">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="8d7dd-122">Examples</span></span>

          ```javascript
          OneNote.run(function(ctx){
              // Get the current notebook.         
              var notebook = ctx.application.getActiveNotebook();
              var restApiId = notebook.getRestApiId();

              return ctx.sync().
                  then(function(){
                      console.log("The REST API ID is " + restApiId.value);
                      // Note that the REST API ID isn't all you need to interact with the OneNote REST API. 
                      // This is only required for SharePoint notebooks. baseUrl will be null for OneDrive notebooks.
                      // For SharePoint notebooks, the notebook baseUrl should be used to talk to the OneNote REST API
                      // according to the OneNote Development Blog.
                      // https://blogs.msdn.microsoft.com/onenotedev/2015/06/11/and-sharepoint-makes-three/
                  });
          });
          ```
  - uid: 'onenote!OneNote.Notebook#id:member'
    summary: |-
      <span data-ttu-id="8d7dd-123">Obtiene el identificador del bloc de notas.</span><span class="sxs-lookup"><span data-stu-id="8d7dd-123">Gets the ID of the notebook.</span></span> <span data-ttu-id="8d7dd-124">Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="8d7dd-124">Read-only.</span></span>

      <span data-ttu-id="8d7dd-125">\[[Conjunto de API: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8d7dd-125">\[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]</span></span>
    name: id
    fullName: id
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly id: string;'
      return:
        type:
          - string
  - uid: 'onenote!OneNote.Notebook#isVirtual:member'
    summary: |-
      <span data-ttu-id="8d7dd-126">True si el usuario no crea el Bloc de notas (es decir, ' secciones mal colocadas ').</span><span class="sxs-lookup"><span data-stu-id="8d7dd-126">True if the Notebook is not created by the user (i.e. 'Misplaced Sections').</span></span> <span data-ttu-id="8d7dd-127">Solo lectura</span><span class="sxs-lookup"><span data-stu-id="8d7dd-127">Read only</span></span>

      <span data-ttu-id="8d7dd-128">\[[Conjunto de API: OneNoteApi 1,2](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8d7dd-128">\[ [API set: OneNoteApi 1.2](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]</span></span>
    name: isVirtual
    fullName: isVirtual
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly isVirtual: boolean;'
      return:
        type:
          - boolean
  - uid: 'onenote!OneNote.Notebook#load:member(1)'
    summary: '<span data-ttu-id="8d7dd-129">Pone en cola un comando para cargar las propiedades especificadas del objeto.</span><span class="sxs-lookup"><span data-stu-id="8d7dd-129">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="8d7dd-130">Antes de leer las propiedades, debe llamar a "context.sync()".</span><span class="sxs-lookup"><span data-stu-id="8d7dd-130">You must call "context.sync()" before reading the properties.</span></span>'
    remarks: |-
      <span data-ttu-id="8d7dd-131">Además de esta firma, este método tiene las siguientes firmas:</span><span class="sxs-lookup"><span data-stu-id="8d7dd-131">In addition to this signature, this method has the following signatures:</span></span>

      <span data-ttu-id="8d7dd-132">`load(option?: string | string[]): OneNote.Notebook`-Donde opción es una cadena delimitada por comas o una matriz de cadenas que especifican las propiedades que se van a cargar.</span><span class="sxs-lookup"><span data-stu-id="8d7dd-132">`load(option?: string | string[]): OneNote.Notebook` - Where option is a comma-delimited string or an array of strings that specify the properties to load.</span></span>

      <span data-ttu-id="8d7dd-133">`load(option?: { select?: string; expand?: string; }): OneNote.Notebook`-Where opción. Select es una cadena delimitada por comas que especifica las propiedades que se van a cargar y Options. Expand es una cadena delimitada por comas que especifica las propiedades de navegación que se deben cargar.</span><span class="sxs-lookup"><span data-stu-id="8d7dd-133">`load(option?: { select?: string; expand?: string; }): OneNote.Notebook` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>

      <span data-ttu-id="8d7dd-134">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): OneNote.Notebook`-Solo disponible en tipos de colección.</span><span class="sxs-lookup"><span data-stu-id="8d7dd-134">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): OneNote.Notebook` - Only available on collection types.</span></span> <span data-ttu-id="8d7dd-135">Es similar a la firma anterior.</span><span class="sxs-lookup"><span data-stu-id="8d7dd-135">It is similar to the preceding signature.</span></span> <span data-ttu-id="8d7dd-136">Option. Top especifica el número máximo de elementos de colección que se pueden incluir en el resultado.</span><span class="sxs-lookup"><span data-stu-id="8d7dd-136">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="8d7dd-137">La opción. SKIP especifica el número de elementos que se deben omitir y que no se incluyen en el resultado.</span><span class="sxs-lookup"><span data-stu-id="8d7dd-137">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="8d7dd-138">Si se especifica Option. Top, el conjunto de resultados se iniciará después de omitir el número especificado de elementos.</span><span class="sxs-lookup"><span data-stu-id="8d7dd-138">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: OneNote.Interfaces.NotebookLoadOptions): OneNote.Notebook;'
      return:
        type:
          - 'onenote!OneNote.Notebook:class'
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - 'onenote!OneNote.Interfaces.NotebookLoadOptions:interface'
  - uid: 'onenote!OneNote.Notebook#load:member(2)'
    summary: <span data-ttu-id="8d7dd-139">Pone en cola un comando para cargar las propiedades especificadas del objeto.</span><span class="sxs-lookup"><span data-stu-id="8d7dd-139">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="8d7dd-140">Debe llamar `context.sync()` antes de leer las propiedades.</span><span class="sxs-lookup"><span data-stu-id="8d7dd-140">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): OneNote.Notebook;'
      return:
        type:
          - 'onenote!OneNote.Notebook:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="8d7dd-141">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="8d7dd-141">Examples</span></span>

          ```javascript
          OneNote.run(function (context) {
                  
              // Get the current notebook.
              var notebook = context.application.getActiveNotebook();
                      
              // Queue a command to load the notebook. 
              // For best performance, request specific properties.           
              notebook.load('baseUrl');
                      
              // Run the queued commands, and return a promise to indicate task completion.
              return context.sync()
                  .then(function () {
                      console.log("Base url: " + notebook.baseUrl);
                      // This is only required for SharePoint notebooks, and will be null for OneDrive notebooks.
                      // This baseUrl should be used to talk to OneNote REST APIs according to the OneNote Development Blog.
                      // https://blogs.msdn.microsoft.com/onenotedev/2015/06/11/and-sharepoint-makes-three/
                  });
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          OneNote.run(function (context) {
                  
              // Get the current notebook.
              var notebook = context.application.getActiveNotebook();
                      
              // Queue a command to load the notebook. 
              // For best performance, request specific properties.           
              notebook.load('id');
                      
              // Run the queued commands, and return a promise to indicate task completion.
              return context.sync()
                  .then(function () {
                      console.log("Notebook ID: " + notebook.id);
                      
                  });
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          OneNote.run(function (context) {
                  
              // Get the current notebook.
              var notebook = context.application.getActiveNotebook();
                      
              // Queue a command to load the notebook. 
              // For best performance, request specific properties.           
              notebook.load('name');
                      
              // Run the queued commands, and return a promise to indicate task completion.
              return context.sync()
                  .then(function () {
                      console.log("Notebook name: " + notebook.name);
                      
                  });
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          OneNote.run(function (context) {

              // Get the section groups in the notebook. 
              var sectionGroups = context.application.getActiveNotebook().sectionGroups;

              // Queue a command to load the sectionGroups. 
              sectionGroups.load("name");

              // Run the queued commands, and return a promise to indicate task completion.
              return context.sync()
                  .then(function() {
                      $.each(sectionGroups.items, function(index, sectionGroup) {
                          console.log("Section group name: " + sectionGroup.name);
                      });
                  });
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          OneNote.run(function (context) {

              // Gets the active notebook.
              var notebook = context.application.getActiveNotebook();
              
              // Queue a command to get immediate child sections of the notebook. 
              var childSections = notebook.sections;

              // Queue a command to load the childSections. 
              context.load(childSections);

              // Run the queued commands, and return a promise to indicate task completion.
              return context.sync()
                  .then(function() {
                      $.each(childSections.items, function(index, childSection) {
                          console.log("Immediate child section name: " + childSection.name);
                      });            
                  });
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });   
          ```
      parameters:
        - id: propertyNames
          description: <span data-ttu-id="8d7dd-142">Una cadena delimitada por comas o una matriz de cadenas que especifican las propiedades que se van a cargar.</span><span class="sxs-lookup"><span data-stu-id="8d7dd-142">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
          type:
            - 'string | string[]'
  - uid: 'onenote!OneNote.Notebook#load:member(3)'
    summary: <span data-ttu-id="8d7dd-143">Pone en cola un comando para cargar las propiedades especificadas del objeto.</span><span class="sxs-lookup"><span data-stu-id="8d7dd-143">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="8d7dd-144">Debe llamar `context.sync()` antes de leer las propiedades.</span><span class="sxs-lookup"><span data-stu-id="8d7dd-144">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): OneNote.Notebook;'
      return:
        type:
          - 'onenote!OneNote.Notebook:class'
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '<span data-ttu-id="8d7dd-145">Donde propertyNamesAndPaths. Select es una cadena delimitada por comas que especifica las propiedades que se van a cargar y propertyNamesAndPaths. Expand es una cadena delimitada por comas que especifica las propiedades de navegación que se deben cargar.</span><span class="sxs-lookup"><span data-stu-id="8d7dd-145">Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>'
          type:
            - '{ select?: string; expand?: string; }'
  - uid: 'onenote!OneNote.Notebook#name:member'
    summary: |-
      <span data-ttu-id="8d7dd-146">Obtiene el nombre del bloc de notas.</span><span class="sxs-lookup"><span data-stu-id="8d7dd-146">Gets the name of the notebook.</span></span> <span data-ttu-id="8d7dd-147">Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="8d7dd-147">Read-only.</span></span>

      <span data-ttu-id="8d7dd-148">\[[Conjunto de API: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8d7dd-148">\[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]</span></span>
    name: name
    fullName: name
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly name: string;'
      return:
        type:
          - string
  - uid: 'onenote!OneNote.Notebook#sectionGroups:member'
    summary: |-
      <span data-ttu-id="8d7dd-149">Los grupos de secciones del bloc de notas.</span><span class="sxs-lookup"><span data-stu-id="8d7dd-149">The section groups in the notebook.</span></span> <span data-ttu-id="8d7dd-150">Solo lectura</span><span class="sxs-lookup"><span data-stu-id="8d7dd-150">Read only</span></span>

      <span data-ttu-id="8d7dd-151">\[[Conjunto de API: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8d7dd-151">\[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]</span></span>
    name: sectionGroups
    fullName: sectionGroups
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly sectionGroups: OneNote.SectionGroupCollection;'
      return:
        type:
          - 'onenote!OneNote.SectionGroupCollection:class'
  - uid: 'onenote!OneNote.Notebook#sections:member'
    summary: |-
      <span data-ttu-id="8d7dd-152">Las secciones del bloc de notas.</span><span class="sxs-lookup"><span data-stu-id="8d7dd-152">The the sections of the notebook.</span></span> <span data-ttu-id="8d7dd-153">Solo lectura</span><span class="sxs-lookup"><span data-stu-id="8d7dd-153">Read only</span></span>

      <span data-ttu-id="8d7dd-154">\[[Conjunto de API: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8d7dd-154">\[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]</span></span>
    name: sections
    fullName: sections
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly sections: OneNote.SectionCollection;'
      return:
        type:
          - 'onenote!OneNote.SectionCollection:class'
  - uid: 'onenote!OneNote.Notebook#toJSON:member(1)'
    summary: '<span data-ttu-id="8d7dd-155">Reemplaza el método JavaScript `toJSON()` para proporcionar un resultado más útil cuando se pasa un objeto API a`JSON.stringify()`</span><span class="sxs-lookup"><span data-stu-id="8d7dd-155">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id="8d7dd-156">.</span><span class="sxs-lookup"><span data-stu-id="8d7dd-156"></span></span> <span data-ttu-id="8d7dd-157">(`JSON.stringify`</span><span class="sxs-lookup"><span data-stu-id="8d7dd-157"></span></span><!-- --><span data-ttu-id="8d7dd-158">, a su vez, llama `toJSON` al método del objeto que se le pasa.) Mientras que el objeto OneNote. Notebook original es un objeto API, `toJSON` el método devuelve un objeto JavaScript sin formato (escrito como`OneNote.Interfaces.NotebookData`</span><span class="sxs-lookup"><span data-stu-id="8d7dd-158">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original OneNote.Notebook object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `OneNote.Interfaces.NotebookData`</span></span><!-- --><span data-ttu-id="8d7dd-159">) que contiene copias rasas de las propiedades secundarias cargadas del objeto original.</span><span class="sxs-lookup"><span data-stu-id="8d7dd-159">) that contains shallow copies of any loaded child properties from the original object.</span></span>'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): OneNote.Interfaces.NotebookData;'
      return:
        type:
          - 'onenote!OneNote.Interfaces.NotebookData:interface'
        description: ''
  - uid: 'onenote!OneNote.Notebook#track:member(1)'
    summary: '<span data-ttu-id="8d7dd-160">Realiza un seguimiento del objeto de ajuste automático según cambios adyacentes en el documento.</span><span class="sxs-lookup"><span data-stu-id="8d7dd-160">Track the object for automatic adjustment based on surrounding changes in the document.</span></span> <span data-ttu-id="8d7dd-161">Esta llamada es una forma abreviada de context.trackedObjects.add(thisObject).</span><span class="sxs-lookup"><span data-stu-id="8d7dd-161">This call is a shorthand for context.trackedObjects.add(thisObject).</span></span> <span data-ttu-id="8d7dd-162">Si usa este objeto en llamadas ".sync" y fuera de la ejecución secuencial de un lote de ".run", y obtiene un error "InvalidObjectPath" al establecer una propiedad o invocar un método en el objeto, debería haber agregado el objeto a la colección de objetos de la que realiza un seguimiento cuando se creó el objeto.</span><span class="sxs-lookup"><span data-stu-id="8d7dd-162">If you are using this object across ".sync" calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you needed to have added the object to the tracked object collection when the object was first created.</span></span>'
    name: track()
    fullName: track()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'track(): OneNote.Notebook;'
      return:
        type:
          - 'onenote!OneNote.Notebook:class'
        description: ''
  - uid: 'onenote!OneNote.Notebook#untrack:member(1)'
    summary: '<span data-ttu-id="8d7dd-163">Libere la memoria asociada a este objeto, si se ha realizado un seguimiento de él anteriormente.</span><span class="sxs-lookup"><span data-stu-id="8d7dd-163">Release the memory associated with this object, if it has previously been tracked.</span></span> <span data-ttu-id="8d7dd-164">Esta llamada es una forma abreviada de context.trackedObjects.remove(thisObject).</span><span class="sxs-lookup"><span data-stu-id="8d7dd-164">This call is shorthand for context.trackedObjects.remove(thisObject).</span></span> <span data-ttu-id="8d7dd-165">Tener muchos objetos marcados ralentiza la aplicación host, así que debe recordar liberar los objetos que agregue cuando haya terminado con ellos.</span><span class="sxs-lookup"><span data-stu-id="8d7dd-165">Having many tracked objects slows down the host application, so please remember to free any objects you add, once you''re done using them.</span></span> <span data-ttu-id="8d7dd-166">Debe llamar a "context.sync()" antes de que surta efecto la liberación de memoria.</span><span class="sxs-lookup"><span data-stu-id="8d7dd-166">You will need to call "context.sync()" before the memory release takes effect.</span></span>'
    name: untrack()
    fullName: untrack()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'untrack(): OneNote.Notebook;'
      return:
        type:
          - 'onenote!OneNote.Notebook:class'
        description: ''
references:
  - uid: 'onenote!OfficeExtension.ClientObject:class'
    name: OfficeExtension.ClientObject
  - uid: 'onenote!OneNote.Section:class'
    name: OneNote.Section
  - uid: 'onenote!OneNote.SectionGroup:class'
    name: OneNote.SectionGroup
  - uid: 'onenote!OneNote.RequestContext:class'
    name: RequestContext
  - uid: 'onenote!OneNote.Notebook#getRestApiId~0:complex'
    name: OfficeExtension.ClientResult<string>
    fullName: OfficeExtension.ClientResult<string>
    spec.typeScript:
      - uid: 'onenote!OfficeExtension.ClientResult:class'
        name: OfficeExtension.ClientResult
        fullName: OfficeExtension.ClientResult
      - name: <string>
        fullName: <string>
  - uid: 'onenote!OneNote.Notebook:class'
    name: OneNote.Notebook
  - uid: 'onenote!OneNote.Interfaces.NotebookLoadOptions:interface'
    name: OneNote.Interfaces.NotebookLoadOptions
  - uid: 'onenote!OneNote.SectionGroupCollection:class'
    name: OneNote.SectionGroupCollection
  - uid: 'onenote!OneNote.SectionCollection:class'
    name: OneNote.SectionCollection
  - uid: 'onenote!OneNote.Interfaces.NotebookData:interface'
    name: OneNote.Interfaces.NotebookData