### YamlMime:UniversalReference
items:
  - uid: 'onenote!OneNote.Application:class'
    summary: |-
      <span data-ttu-id="8329d-101">Representa el objeto de nivel superior que contiene todos los objetos de OneNote a los que se pueden hacer referencia globalmente, como blocs de notas, el bloc de notas activo y la sección activa.</span><span class="sxs-lookup"><span data-stu-id="8329d-101">Represents the top-level object that contains all globally addressable OneNote objects such as notebooks, the active notebook, and the active section.</span></span>

      <span data-ttu-id="8329d-102">\[[Conjunto de API: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8329d-102">\[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]</span></span>
    name: OneNote.Application
    fullName: OneNote.Application
    langs:
      - typeScript
    type: class
    extends:
      - 'onenote!OfficeExtension.ClientObject:class'
    package: onenote!
    children:
      - 'onenote!OneNote.Application#context:member'
      - 'onenote!OneNote.Application#getActiveNotebook:member(1)'
      - 'onenote!OneNote.Application#getActiveNotebookOrNull:member(1)'
      - 'onenote!OneNote.Application#getActiveOutline:member(1)'
      - 'onenote!OneNote.Application#getActiveOutlineOrNull:member(1)'
      - 'onenote!OneNote.Application#getActivePage:member(1)'
      - 'onenote!OneNote.Application#getActivePageOrNull:member(1)'
      - 'onenote!OneNote.Application#getActiveParagraph:member(1)'
      - 'onenote!OneNote.Application#getActiveParagraphOrNull:member(1)'
      - 'onenote!OneNote.Application#getActiveSection:member(1)'
      - 'onenote!OneNote.Application#getActiveSectionOrNull:member(1)'
      - 'onenote!OneNote.Application#getWindowSize:member(1)'
      - 'onenote!OneNote.Application#insertHtmlAtCurrentPosition:member(1)'
      - 'onenote!OneNote.Application#isViewingDeletedNotes:member(1)'
      - 'onenote!OneNote.Application#load:member(1)'
      - 'onenote!OneNote.Application#load:member(2)'
      - 'onenote!OneNote.Application#load:member(3)'
      - 'onenote!OneNote.Application#navigateToPage:member(1)'
      - 'onenote!OneNote.Application#navigateToPageWithClientUrl:member(1)'
      - 'onenote!OneNote.Application#notebooks:member'
      - 'onenote!OneNote.Application#toJSON:member(1)'
  - uid: 'onenote!OneNote.Application#context:member'
    summary: <span data-ttu-id="8329d-103">Contexto de la solicitud asociado al objeto.</span><span class="sxs-lookup"><span data-stu-id="8329d-103">The request context associated with the object.</span></span> <span data-ttu-id="8329d-104">Esto conecta el proceso del complemento con el proceso de la aplicación host de Office.</span><span class="sxs-lookup"><span data-stu-id="8329d-104">This connects the add-in's process to the Office host application's process.</span></span>
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'onenote!OneNote.RequestContext:class'
  - uid: 'onenote!OneNote.Application#getActiveNotebook:member(1)'
    summary: |-
      <span data-ttu-id="8329d-105">Obtiene el bloc de notas activo si existe alguno.</span><span class="sxs-lookup"><span data-stu-id="8329d-105">Gets the active notebook if one exists.</span></span> <span data-ttu-id="8329d-106">Si no hay ningún bloc de notas activo, lanza ItemNotFound.</span><span class="sxs-lookup"><span data-stu-id="8329d-106">If no notebook is active, throws ItemNotFound.</span></span>

      <span data-ttu-id="8329d-107">\[[Conjunto de API: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8329d-107">\[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]</span></span>
    name: getActiveNotebook()
    fullName: getActiveNotebook()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getActiveNotebook(): OneNote.Notebook;'
      return:
        type:
          - 'onenote!OneNote.Notebook:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="8329d-108">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="8329d-108">Examples</span></span>

          ```javascript
          OneNote.run(function (context) {
                  
              // Get the active notebook.
              var notebook = context.application.getActiveNotebook();
                      
              // Queue a command to load the notebook. 
              // For best performance, request specific properties.           
              notebook.load('id,name');
                      
              // Run the queued commands, and return a promise to indicate task completion.
              return context.sync()
                  .then(function () {
                              
                      // Show some properties.
                      console.log("Notebook name: " + notebook.name);
                      console.log("Notebook ID: " + notebook.id);
                      
                  });
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'onenote!OneNote.Application#getActiveNotebookOrNull:member(1)'
    summary: |-
      <span data-ttu-id="8329d-109">Obtiene el bloc de notas activo si existe alguno.</span><span class="sxs-lookup"><span data-stu-id="8329d-109">Gets the active notebook if one exists.</span></span> <span data-ttu-id="8329d-110">Si no hay ningún bloc de notas activo, devuelve NULL.</span><span class="sxs-lookup"><span data-stu-id="8329d-110">If no notebook is active, returns null.</span></span>

      <span data-ttu-id="8329d-111">\[[Conjunto de API: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8329d-111">\[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]</span></span>
    name: getActiveNotebookOrNull()
    fullName: getActiveNotebookOrNull()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getActiveNotebookOrNull(): OneNote.Notebook;'
      return:
        type:
          - 'onenote!OneNote.Notebook:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="8329d-112">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="8329d-112">Examples</span></span>

          ```javascript
          OneNote.run(function (context) {

              // Get the active notebook.
              var notebook = context.application.getActiveNotebookOrNull();

              // Queue a command to load the notebook. 
              // For best performance, request specific properties.           
              notebook.load('id,name');

              // Run the queued commands, and return a promise to indicate task completion.
              return context.sync()
                  .then(function () {

                      // check if active notebook is set.
                      if (!notebook.isNull) {
                          console.log("Notebook name: " + notebook.name);
                          console.log("Notebook ID: " + notebook.id);
                      }
                  });
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'onenote!OneNote.Application#getActiveOutline:member(1)'
    summary: |-
      <span data-ttu-id="8329d-113">Obtiene el esquema activo si existe alguno. Si no hay ninguno, lanza ItemNotFound.</span><span class="sxs-lookup"><span data-stu-id="8329d-113">Gets the active outline if one exists, If no outline is active, throws ItemNotFound.</span></span>

      <span data-ttu-id="8329d-114">\[[Conjunto de API: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8329d-114">\[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]</span></span>
    name: getActiveOutline()
    fullName: getActiveOutline()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getActiveOutline(): OneNote.Outline;'
      return:
        type:
          - 'onenote!OneNote.Outline:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="8329d-115">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="8329d-115">Examples</span></span>

          ```javascript
          OneNote.run(function (context) {

              // get active outline.
              var outline = context.application.getActiveOutline();

              // Queue a command to load the id of the outline.         
              outline.load('id');

              // Run the queued commands, and return a promise to indicate task completion.
              return context.sync()
                  .then(function () {

                      // Show some properties.
                      console.log("outline id: " + outline.id);
                  });
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'onenote!OneNote.Application#getActiveOutlineOrNull:member(1)'
    summary: |-
      <span data-ttu-id="8329d-116">Obtiene el esquema activo si existe. De lo contrario, devuelve NULL.</span><span class="sxs-lookup"><span data-stu-id="8329d-116">Gets the active outline if one exists, otherwise returns null.</span></span>

      <span data-ttu-id="8329d-117">\[[Conjunto de API: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8329d-117">\[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]</span></span>
    name: getActiveOutlineOrNull()
    fullName: getActiveOutlineOrNull()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getActiveOutlineOrNull(): OneNote.Outline;'
      return:
        type:
          - 'onenote!OneNote.Outline:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="8329d-118">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="8329d-118">Examples</span></span>

          ```javascript
          OneNote.run(function (context) {

              // get active outline.
              var outline = context.application.getActiveOutlineOrNull();

              // Queue a command to load the id of the outline.         
              outline.load('id');

              // Run the queued commands, and return a promise to indicate task completion.
              return context.sync()
                  .then(function () {

                      if (!outline.isNull) {
                          console.log("outline id: " + outline.id);
                      }
                  });
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'onenote!OneNote.Application#getActivePage:member(1)'
    summary: |-
      <span data-ttu-id="8329d-119">Obtiene la página activa si existe alguna.</span><span class="sxs-lookup"><span data-stu-id="8329d-119">Gets the active page if one exists.</span></span> <span data-ttu-id="8329d-120">Si no hay ninguna página activa, lanza ItemNotFound.</span><span class="sxs-lookup"><span data-stu-id="8329d-120">If no page is active, throws ItemNotFound.</span></span>

      <span data-ttu-id="8329d-121">\[[Conjunto de API: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8329d-121">\[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]</span></span>
    name: getActivePage()
    fullName: getActivePage()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getActivePage(): OneNote.Page;'
      return:
        type:
          - 'onenote!OneNote.Page:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="8329d-122">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="8329d-122">Examples</span></span>

          ```javascript
          OneNote.run(function (context) {
                  
              // Get the active page.
              var page = context.application.getActivePage();
                      
              // Queue a command to load the page. 
              // For best performance, request specific properties.           
              page.load('id,title');
                      
              // Run the queued commands, and return a promise to indicate task completion.
              return context.sync()
                  .then(function () {
                              
                      // Show some properties.
                      console.log("Page title: " + page.title);
                      console.log("Page ID: " + page.id);
                      
                  });
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'onenote!OneNote.Application#getActivePageOrNull:member(1)'
    summary: |-
      <span data-ttu-id="8329d-123">Obtiene la página activa si existe alguna.</span><span class="sxs-lookup"><span data-stu-id="8329d-123">Gets the active page if one exists.</span></span> <span data-ttu-id="8329d-124">Si no hay ninguna página activa, devuelve NULL.</span><span class="sxs-lookup"><span data-stu-id="8329d-124">If no page is active, returns null.</span></span>

      <span data-ttu-id="8329d-125">\[[Conjunto de API: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8329d-125">\[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]</span></span>
    name: getActivePageOrNull()
    fullName: getActivePageOrNull()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getActivePageOrNull(): OneNote.Page;'
      return:
        type:
          - 'onenote!OneNote.Page:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="8329d-126">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="8329d-126">Examples</span></span>

          ```javascript
          OneNote.run(function (context) {

              // Get the active page.
              var page = context.application.getActivePageOrNull();

              // Queue a command to load the page. 
              // For best performance, request specific properties.           
              page.load('id,title');

              // Run the queued commands, and return a promise to indicate task completion.
              return context.sync()
                  .then(function () {
                      
                      if (!page.isNull) {
                          // Show some properties.
                          console.log("Page title: " + page.title);
                          console.log("Page ID: " + page.id);
                      }
                  });
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'onenote!OneNote.Application#getActiveParagraph:member(1)'
    summary: |-
      <span data-ttu-id="8329d-127">Obtiene el párrafo activo si existe, si no hay ningún párrafo activo, produce ItemNotFound.</span><span class="sxs-lookup"><span data-stu-id="8329d-127">Gets the active Paragraph if one exists, If no Paragraph is active, throws ItemNotFound.</span></span>

      <span data-ttu-id="8329d-128">\[[Conjunto de API: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8329d-128">\[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]</span></span>
    name: getActiveParagraph()
    fullName: getActiveParagraph()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getActiveParagraph(): OneNote.Paragraph;'
      return:
        type:
          - 'onenote!OneNote.Paragraph:class'
        description: ''
  - uid: 'onenote!OneNote.Application#getActiveParagraphOrNull:member(1)'
    summary: |-
      <span data-ttu-id="8329d-129">Obtiene el párrafo activo si existe; de lo contrario, devuelve NULL.</span><span class="sxs-lookup"><span data-stu-id="8329d-129">Gets the active Paragraph if one exists, otherwise returns null.</span></span>

      <span data-ttu-id="8329d-130">\[[Conjunto de API: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8329d-130">\[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]</span></span>
    name: getActiveParagraphOrNull()
    fullName: getActiveParagraphOrNull()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getActiveParagraphOrNull(): OneNote.Paragraph;'
      return:
        type:
          - 'onenote!OneNote.Paragraph:class'
        description: ''
  - uid: 'onenote!OneNote.Application#getActiveSection:member(1)'
    summary: |-
      <span data-ttu-id="8329d-131">Obtiene la sección activa si existe alguna.</span><span class="sxs-lookup"><span data-stu-id="8329d-131">Gets the active section if one exists.</span></span> <span data-ttu-id="8329d-132">Si no hay ninguna sección activa, lanza ItemNotFound.</span><span class="sxs-lookup"><span data-stu-id="8329d-132">If no section is active, throws ItemNotFound.</span></span>

      <span data-ttu-id="8329d-133">\[[Conjunto de API: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8329d-133">\[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]</span></span>
    name: getActiveSection()
    fullName: getActiveSection()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getActiveSection(): OneNote.Section;'
      return:
        type:
          - 'onenote!OneNote.Section:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="8329d-134">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="8329d-134">Examples</span></span>

          ```javascript
          OneNote.run(function (context) {
                  
              // Get the active section.
              var section = context.application.getActiveSection();
                      
              // Queue a command to load the section. 
              // For best performance, request specific properties.           
              section.load('id,name');
                      
              // Run the queued commands, and return a promise to indicate task completion.
              return context.sync()
                  .then(function () {
                              
                      // Show some properties.
                      console.log("Section name: " + section.name);
                      console.log("Section ID: " + section.id);
                      
                  });
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'onenote!OneNote.Application#getActiveSectionOrNull:member(1)'
    summary: |-
      <span data-ttu-id="8329d-135">Obtiene la sección activa si existe alguna.</span><span class="sxs-lookup"><span data-stu-id="8329d-135">Gets the active section if one exists.</span></span> <span data-ttu-id="8329d-136">Si no hay ninguna sección activa, devuelve NULL.</span><span class="sxs-lookup"><span data-stu-id="8329d-136">If no section is active, returns null.</span></span>

      <span data-ttu-id="8329d-137">\[[Conjunto de API: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8329d-137">\[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]</span></span>
    name: getActiveSectionOrNull()
    fullName: getActiveSectionOrNull()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getActiveSectionOrNull(): OneNote.Section;'
      return:
        type:
          - 'onenote!OneNote.Section:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="8329d-138">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="8329d-138">Examples</span></span>

          ```javascript
          OneNote.run(function (context) {

              // Get the active section.
              var section = context.application.getActiveSectionOrNull();

              // Queue a command to load the section. 
              // For best performance, request specific properties.           
              section.load('id,name');

              // Run the queued commands, and return a promise to indicate task completion.
              return context.sync()
                  .then(function () {
                      if (!section.isNull) {
                          // Show some properties.
                          console.log("Section name: " + section.name);
                          console.log("Section ID: " + section.id);
                      }
                  });
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'onenote!OneNote.Application#getWindowSize:member(1)'
    name: getWindowSize()
    fullName: getWindowSize()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getWindowSize(): OfficeExtension.ClientResult<number[]>;'
      return:
        type:
          - 'onenote!OneNote.Application#getWindowSize~0:complex'
        description: ''
  - uid: 'onenote!OneNote.Application#insertHtmlAtCurrentPosition:member(1)'
    name: insertHtmlAtCurrentPosition(html)
    fullName: insertHtmlAtCurrentPosition(html)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertHtmlAtCurrentPosition(html: string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: html
          description: ''
          type:
            - string
  - uid: 'onenote!OneNote.Application#isViewingDeletedNotes:member(1)'
    name: isViewingDeletedNotes()
    fullName: isViewingDeletedNotes()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'isViewingDeletedNotes(): OfficeExtension.ClientResult<boolean>;'
      return:
        type:
          - 'onenote!OneNote.Application#isViewingDeletedNotes~0:complex'
        description: ''
  - uid: 'onenote!OneNote.Application#load:member(1)'
    summary: '<span data-ttu-id="8329d-139">Pone en cola un comando para cargar las propiedades especificadas del objeto.</span><span class="sxs-lookup"><span data-stu-id="8329d-139">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="8329d-140">Antes de leer las propiedades, debe llamar a "context.sync()".</span><span class="sxs-lookup"><span data-stu-id="8329d-140">You must call "context.sync()" before reading the properties.</span></span>'
    remarks: |-
      <span data-ttu-id="8329d-141">Además de esta firma, este método tiene las siguientes firmas:</span><span class="sxs-lookup"><span data-stu-id="8329d-141">In addition to this signature, this method has the following signatures:</span></span>

      <span data-ttu-id="8329d-142">`load(option?: string | string[]): OneNote.Application`-Donde opción es una cadena delimitada por comas o una matriz de cadenas que especifican las propiedades que se van a cargar.</span><span class="sxs-lookup"><span data-stu-id="8329d-142">`load(option?: string | string[]): OneNote.Application` - Where option is a comma-delimited string or an array of strings that specify the properties to load.</span></span>

      <span data-ttu-id="8329d-143">`load(option?: { select?: string; expand?: string; }): OneNote.Application`-Where opción. Select es una cadena delimitada por comas que especifica las propiedades que se van a cargar y Options. Expand es una cadena delimitada por comas que especifica las propiedades de navegación que se deben cargar.</span><span class="sxs-lookup"><span data-stu-id="8329d-143">`load(option?: { select?: string; expand?: string; }): OneNote.Application` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>

      <span data-ttu-id="8329d-144">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): OneNote.Application`-Solo disponible en tipos de colección.</span><span class="sxs-lookup"><span data-stu-id="8329d-144">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): OneNote.Application` - Only available on collection types.</span></span> <span data-ttu-id="8329d-145">Es similar a la firma anterior.</span><span class="sxs-lookup"><span data-stu-id="8329d-145">It is similar to the preceding signature.</span></span> <span data-ttu-id="8329d-146">Option. Top especifica el número máximo de elementos de colección que se pueden incluir en el resultado.</span><span class="sxs-lookup"><span data-stu-id="8329d-146">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="8329d-147">La opción. SKIP especifica el número de elementos que se deben omitir y que no se incluyen en el resultado.</span><span class="sxs-lookup"><span data-stu-id="8329d-147">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="8329d-148">Si se especifica Option. Top, el conjunto de resultados se iniciará después de omitir el número especificado de elementos.</span><span class="sxs-lookup"><span data-stu-id="8329d-148">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: OneNote.Interfaces.ApplicationLoadOptions): OneNote.Application;'
      return:
        type:
          - 'onenote!OneNote.Application:class'
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - 'onenote!OneNote.Interfaces.ApplicationLoadOptions:interface'
  - uid: 'onenote!OneNote.Application#load:member(2)'
    summary: <span data-ttu-id="8329d-149">Pone en cola un comando para cargar las propiedades especificadas del objeto.</span><span class="sxs-lookup"><span data-stu-id="8329d-149">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="8329d-150">Debe llamar `context.sync()` antes de leer las propiedades.</span><span class="sxs-lookup"><span data-stu-id="8329d-150">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): OneNote.Application;'
      return:
        type:
          - 'onenote!OneNote.Application:class'
        description: ''
      parameters:
        - id: propertyNames
          description: <span data-ttu-id="8329d-151">Una cadena delimitada por comas o una matriz de cadenas que especifican las propiedades que se van a cargar.</span><span class="sxs-lookup"><span data-stu-id="8329d-151">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
          type:
            - 'string | string[]'
  - uid: 'onenote!OneNote.Application#load:member(3)'
    summary: <span data-ttu-id="8329d-152">Pone en cola un comando para cargar las propiedades especificadas del objeto.</span><span class="sxs-lookup"><span data-stu-id="8329d-152">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="8329d-153">Debe llamar `context.sync()` antes de leer las propiedades.</span><span class="sxs-lookup"><span data-stu-id="8329d-153">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): OneNote.Application;'
      return:
        type:
          - 'onenote!OneNote.Application:class'
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '<span data-ttu-id="8329d-154">Donde propertyNamesAndPaths. Select es una cadena delimitada por comas que especifica las propiedades que se van a cargar y propertyNamesAndPaths. Expand es una cadena delimitada por comas que especifica las propiedades de navegación que se deben cargar.</span><span class="sxs-lookup"><span data-stu-id="8329d-154">Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>'
          type:
            - '{ select?: string; expand?: string; }'
  - uid: 'onenote!OneNote.Application#navigateToPage:member(1)'
    summary: |-
      <span data-ttu-id="8329d-155">Abre la página especificada en la instancia de la aplicación.</span><span class="sxs-lookup"><span data-stu-id="8329d-155">Opens the specified page in the application instance.</span></span>

      <span data-ttu-id="8329d-156">\[[Conjunto de API: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8329d-156">\[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]</span></span>
    name: navigateToPage(page)
    fullName: navigateToPage(page)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'navigateToPage(page: OneNote.Page): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="8329d-157">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="8329d-157">Examples</span></span>

          ```javascript
          OneNote.run(function (context) {
                  
              // Get the pages in the current section.
              var pages = context.application.getActiveSection().pages;
                      
              // Queue a command to load the pages. 
              // For best performance, request specific properties.           
              pages.load('id');
                      
              // Run the queued commands, and return a promise to indicate task completion.
              return context.sync()
                  .then(function () {
                              
                      // This example loads the first page in the section.
                      var page = pages.items[0];
                                  
                      // Open the page in the application.                    
                      context.application.navigateToPage(page);
                              
                      // Run the queued command.
                      return context.sync();
                  });
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: page
          description: <span data-ttu-id="8329d-158">La página que se abrirá.</span><span class="sxs-lookup"><span data-stu-id="8329d-158">The page to open.</span></span>
          type:
            - 'onenote!OneNote.Page:class'
  - uid: 'onenote!OneNote.Application#navigateToPageWithClientUrl:member(1)'
    summary: |-
      <span data-ttu-id="8329d-159">Obtiene la página especificada y la abre en la instancia de la aplicación.</span><span class="sxs-lookup"><span data-stu-id="8329d-159">Gets the specified page, and opens it in the application instance.</span></span>

      <span data-ttu-id="8329d-160">\[[Conjunto de API: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8329d-160">\[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]</span></span>
    name: navigateToPageWithClientUrl(url)
    fullName: navigateToPageWithClientUrl(url)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'navigateToPageWithClientUrl(url: string): OneNote.Page;'
      return:
        type:
          - 'onenote!OneNote.Page:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="8329d-161">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="8329d-161">Examples</span></span>

          ```javascript
          OneNote.run(function (context) {

              // Get the pages in the current section.
              var pages = context.application.getActiveSection().pages;

              // Queue a command to load the pages. 
              // For best performance, request specific properties.           
              pages.load('clientUrl');

              // Run the queued commands, and return a promise to indicate task completion.
              return context.sync()
                  .then(function () {

                      // This example loads the first page in the section.
                      var page = pages.items[0];

                      // Open the page in the application.                    
                      context.application.navigateToPageWithClientUrl(page.clientUrl);

                      // Run the queued command.
                      return context.sync();
                  });
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: url
          description: <span data-ttu-id="8329d-162">La URL del cliente de la página que se abrirá.</span><span class="sxs-lookup"><span data-stu-id="8329d-162">The client url of the page to open.</span></span>
          type:
            - string
  - uid: 'onenote!OneNote.Application#notebooks:member'
    summary: |-
      <span data-ttu-id="8329d-163">Obtiene la colección de blocs de notas que están abiertos en la instancia de la aplicación de OneNote.</span><span class="sxs-lookup"><span data-stu-id="8329d-163">Gets the collection of notebooks that are open in the OneNote application instance.</span></span> <span data-ttu-id="8329d-164">En OneNote en la web, solo se abre un bloc de notas al mismo tiempo en la instancia de la aplicación.</span><span class="sxs-lookup"><span data-stu-id="8329d-164">In OneNote on the web, only one notebook at a time is open in the application instance.</span></span> <span data-ttu-id="8329d-165">Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="8329d-165">Read-only.</span></span>

      <span data-ttu-id="8329d-166">\[[Conjunto de API: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8329d-166">\[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]</span></span>
    name: notebooks
    fullName: notebooks
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly notebooks: OneNote.NotebookCollection;'
      return:
        type:
          - 'onenote!OneNote.NotebookCollection:class'
  - uid: 'onenote!OneNote.Application#toJSON:member(1)'
    summary: '<span data-ttu-id="8329d-167">Reemplaza el método JavaScript `toJSON()` para proporcionar un resultado más útil cuando se pasa un objeto API a`JSON.stringify()`</span><span class="sxs-lookup"><span data-stu-id="8329d-167">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id="8329d-168">.</span><span class="sxs-lookup"><span data-stu-id="8329d-168"></span></span> <span data-ttu-id="8329d-169">(`JSON.stringify`</span><span class="sxs-lookup"><span data-stu-id="8329d-169"></span></span><!-- --><span data-ttu-id="8329d-170">, a su vez, llama `toJSON` al método del objeto que se le pasa.) Mientras que el objeto OneNote. Application original es un objeto API, `toJSON` el método devuelve un objeto JavaScript sin formato (escrito como`OneNote.Interfaces.ApplicationData`</span><span class="sxs-lookup"><span data-stu-id="8329d-170">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original OneNote.Application object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `OneNote.Interfaces.ApplicationData`</span></span><!-- --><span data-ttu-id="8329d-171">) que contiene copias rasas de las propiedades secundarias cargadas del objeto original.</span><span class="sxs-lookup"><span data-stu-id="8329d-171">) that contains shallow copies of any loaded child properties from the original object.</span></span>'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): OneNote.Interfaces.ApplicationData;'
      return:
        type:
          - 'onenote!OneNote.Interfaces.ApplicationData:interface'
        description: ''
references:
  - uid: 'onenote!OfficeExtension.ClientObject:class'
    name: OfficeExtension.ClientObject
  - uid: 'onenote!OneNote.RequestContext:class'
    name: RequestContext
  - uid: 'onenote!OneNote.Notebook:class'
    name: OneNote.Notebook
  - uid: 'onenote!OneNote.Outline:class'
    name: OneNote.Outline
  - uid: 'onenote!OneNote.Page:class'
    name: OneNote.Page
  - uid: 'onenote!OneNote.Paragraph:class'
    name: OneNote.Paragraph
  - uid: 'onenote!OneNote.Section:class'
    name: OneNote.Section
  - uid: 'onenote!OneNote.Application#getWindowSize~0:complex'
    name: 'OfficeExtension.ClientResult<number[]>'
    fullName: 'OfficeExtension.ClientResult<number[]>'
    spec.typeScript:
      - uid: 'onenote!OfficeExtension.ClientResult:class'
        name: OfficeExtension.ClientResult
        fullName: OfficeExtension.ClientResult
      - name: '<number[]>'
        fullName: '<number[]>'
  - uid: 'onenote!OneNote.Application#isViewingDeletedNotes~0:complex'
    name: OfficeExtension.ClientResult<boolean>
    fullName: OfficeExtension.ClientResult<boolean>
    spec.typeScript:
      - uid: 'onenote!OfficeExtension.ClientResult:class'
        name: OfficeExtension.ClientResult
        fullName: OfficeExtension.ClientResult
      - name: <boolean>
        fullName: <boolean>
  - uid: 'onenote!OneNote.Application:class'
    name: OneNote.Application
  - uid: 'onenote!OneNote.Interfaces.ApplicationLoadOptions:interface'
    name: OneNote.Interfaces.ApplicationLoadOptions
  - uid: 'onenote!OneNote.NotebookCollection:class'
    name: OneNote.NotebookCollection
  - uid: 'onenote!OneNote.Interfaces.ApplicationData:interface'
    name: OneNote.Interfaces.ApplicationData