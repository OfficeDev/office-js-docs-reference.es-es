### YamlMime:UniversalReference
ms.openlocfilehash: 99be0fd3e06119510bfe903d6953053658bc010a
ms.sourcegitcommit: d356f1545c328d4b59ce814fcab8191e4231f1dc
ms.translationtype: MT
ms.contentlocale: es-ES
ms.lasthandoff: 02/13/2019
ms.locfileid: "29981728"
items:
- uid: onenote.OneNote.Application
  summary: >-
    Representa el objeto de nivel superior que contiene todos los objetos de OneNote a los que se puede hacer referencia globalmente, como blocs de notas, el bloc de notas activo y la sección activa.


    \[[Conjunto de API: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  name: OneNote.Application
  fullName: OneNote.Application
  langs:
  - typeScript
  type: class
  extends:
  - office.OfficeExtension.ClientObject
  package: onenote
  children:
  - onenote.OneNote.Application.context
  - onenote.OneNote.Application.getActiveNotebook
  - onenote.OneNote.Application.getActiveNotebookOrNull
  - onenote.OneNote.Application.getActiveOutline
  - onenote.OneNote.Application.getActiveOutlineOrNull
  - onenote.OneNote.Application.getActivePage
  - onenote.OneNote.Application.getActivePageOrNull
  - onenote.OneNote.Application.getActiveParagraph
  - onenote.OneNote.Application.getActiveParagraphOrNull
  - onenote.OneNote.Application.getActiveSection
  - onenote.OneNote.Application.getActiveSectionOrNull
  - onenote.OneNote.Application.getWindowSize
  - onenote.OneNote.Application.insertHtmlAtCurrentPosition
  - onenote.OneNote.Application.isViewingDeletedNotes
  - onenote.OneNote.Application.load
  - onenote.OneNote.Application.load_1
  - onenote.OneNote.Application.load_2
  - onenote.OneNote.Application.navigateToPage
  - onenote.OneNote.Application.navigateToPageWithClientUrl
  - onenote.OneNote.Application.notebooks
  - onenote.OneNote.Application.toJSON
- uid: onenote.OneNote.Application.context
  summary: El contexto de solicitud asociado con el objeto. Este comando conecta proceso del complemento al proceso de la aplicación host de Office.
  name: context
  fullName: context
  langs:
  - typeScript
  type: property
  syntax:
    content: 'context: RequestContext;'
    return:
      type:
      - RequestContext
- uid: onenote.OneNote.Application.getActiveNotebook
  summary: >-
    Obtiene el bloc de notas activo si existe alguno. Si no hay ningún bloc de notas activo, lanza ItemNotFound.


    \[[Conjunto de API: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  name: getActiveNotebook()
  fullName: getActiveNotebook()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getActiveNotebook(): OneNote.Notebook;'
    return:
      type:
      - onenote.OneNote.Notebook
      description: "\n#### <a name=\"examples\"></a>Ejemplos\n\n```javascript\nOneNote.run(function (context) {\n        \n    // Get the active notebook.\n    var notebook = context.application.getActiveNotebook();\n            \n    // Queue a command to load the notebook. \n    // For best performance, request specific properties.           \n    notebook.load('id,name');\n            \n    // Run the queued commands, and return a promise to indicate task completion.\n    return context.sync()\n        .then(function () {\n                    \n            // Show some properties.\n            console.log(\"Notebook name: \" + notebook.name);\n            console.log(\"Notebook ID: \" + notebook.id);\n            \n        });\n})\n.catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: onenote.OneNote.Application.getActiveNotebookOrNull
  summary: >-
    Obtiene el bloc de notas activo si existe alguno. Si no hay ningún bloc de notas activo, devuelve NULL.


    \[[Conjunto de API: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  name: getActiveNotebookOrNull()
  fullName: getActiveNotebookOrNull()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getActiveNotebookOrNull(): OneNote.Notebook;'
    return:
      type:
      - onenote.OneNote.Notebook
      description: "\n#### <a name=\"examples\"></a>Ejemplos\n\n```javascript\nOneNote.run(function (context) {\n\n    // Get the active notebook.\n    var notebook = context.application.getActiveNotebookOrNull();\n\n    // Queue a command to load the notebook. \n    // For best performance, request specific properties.           \n    notebook.load('id,name');\n\n    // Run the queued commands, and return a promise to indicate task completion.\n    return context.sync()\n        .then(function () {\n\n            // check if active notebook is set.\n            if (!notebook.isNull) {\n                console.log(\"Notebook name: \" + notebook.name);\n                console.log(\"Notebook ID: \" + notebook.id);\n            }\n        });\n})\n.catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: onenote.OneNote.Application.getActiveOutline
  summary: >-
    Obtiene el esquema activo si existe alguno. Si no hay ninguno, lanza ItemNotFound.


    \[[Conjunto de API: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  name: getActiveOutline()
  fullName: getActiveOutline()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getActiveOutline(): OneNote.Outline;'
    return:
      type:
      - onenote.OneNote.Outline
      description: "\n#### <a name=\"examples\"></a>Ejemplos\n\n```javascript\nOneNote.run(function (context) {\n\n    // get active outline.\n    var outline = context.application.getActiveOutline();\n\n    // Queue a command to load the id of the outline.         \n    outline.load('id');\n\n    // Run the queued commands, and return a promise to indicate task completion.\n    return context.sync()\n        .then(function () {\n\n            // Show some properties.\n            console.log(\"outline id: \" + outline.id);\n        });\n})\n.catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: onenote.OneNote.Application.getActiveOutlineOrNull
  summary: >-
    Obtiene el esquema activo si existe. De lo contrario, devuelve NULL.


    \[[Conjunto de API: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  name: getActiveOutlineOrNull()
  fullName: getActiveOutlineOrNull()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getActiveOutlineOrNull(): OneNote.Outline;'
    return:
      type:
      - onenote.OneNote.Outline
      description: "\n#### <a name=\"examples\"></a>Ejemplos\n\n```javascript\nOneNote.run(function (context) {\n\n    // get active outline.\n    var outline = context.application.getActiveOutlineOrNull();\n\n    // Queue a command to load the id of the outline.         \n    outline.load('id');\n\n    // Run the queued commands, and return a promise to indicate task completion.\n    return context.sync()\n        .then(function () {\n\n            if (!outline.isNull) {\n                console.log(\"outline id: \" + outline.id);\n            }\n        });\n})\n.catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: onenote.OneNote.Application.getActivePage
  summary: >-
    Obtiene la página activa si existe alguna. Si no hay ninguna página activa, lanza ItemNotFound.


    \[[Conjunto de API: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  name: getActivePage()
  fullName: getActivePage()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getActivePage(): OneNote.Page;'
    return:
      type:
      - onenote.OneNote.Page
      description: "\n#### <a name=\"examples\"></a>Ejemplos\n\n```javascript\nOneNote.run(function (context) {\n        \n    // Get the active page.\n    var page = context.application.getActivePage();\n            \n    // Queue a command to load the page. \n    // For best performance, request specific properties.           \n    page.load('id,title');\n            \n    // Run the queued commands, and return a promise to indicate task completion.\n    return context.sync()\n        .then(function () {\n                    \n            // Show some properties.\n            console.log(\"Page title: \" + page.title);\n            console.log(\"Page ID: \" + page.id);\n            \n        });\n})\n.catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: onenote.OneNote.Application.getActivePageOrNull
  summary: >-
    Obtiene la página activa si existe alguna. Si no hay ninguna página activa, devuelve NULL.


    \[[Conjunto de API: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  name: getActivePageOrNull()
  fullName: getActivePageOrNull()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getActivePageOrNull(): OneNote.Page;'
    return:
      type:
      - onenote.OneNote.Page
      description: "\n#### <a name=\"examples\"></a>Ejemplos\n\n```javascript\nOneNote.run(function (context) {\n\n    // Get the active page.\n    var page = context.application.getActivePageOrNull();\n\n    // Queue a command to load the page. \n    // For best performance, request specific properties.           \n    page.load('id,title');\n\n    // Run the queued commands, and return a promise to indicate task completion.\n    return context.sync()\n        .then(function () {\n            \n            if (!page.isNull) {\n                // Show some properties.\n                console.log(\"Page title: \" + page.title);\n                console.log(\"Page ID: \" + page.id);\n            }\n        });\n})\n.catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: onenote.OneNote.Application.getActiveParagraph
  summary: >-
    Obtiene el párrafo activo si existe uno, si no hay ningún párrafo está activa, produce ItemNotFound.


    \[[Conjunto de API: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  name: getActiveParagraph()
  fullName: getActiveParagraph()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getActiveParagraph(): OneNote.Paragraph;'
    return:
      type:
      - onenote.OneNote.Paragraph
      description: ''
- uid: onenote.OneNote.Application.getActiveParagraphOrNull
  summary: >-
    Obtiene el párrafo activo si lo hay, en caso contrario, devuelve null.


    \[[Conjunto de API: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  name: getActiveParagraphOrNull()
  fullName: getActiveParagraphOrNull()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getActiveParagraphOrNull(): OneNote.Paragraph;'
    return:
      type:
      - onenote.OneNote.Paragraph
      description: ''
- uid: onenote.OneNote.Application.getActiveSection
  summary: >-
    Obtiene la sección activa si existe alguna. Si no hay ninguna sección activa, lanza ItemNotFound.


    \[[Conjunto de API: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  name: getActiveSection()
  fullName: getActiveSection()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getActiveSection(): OneNote.Section;'
    return:
      type:
      - onenote.OneNote.Section
      description: "\n#### <a name=\"examples\"></a>Ejemplos\n\n```javascript\nOneNote.run(function (context) {\n        \n    // Get the active section.\n    var section = context.application.getActiveSection();\n            \n    // Queue a command to load the section. \n    // For best performance, request specific properties.           \n    section.load('id,name');\n            \n    // Run the queued commands, and return a promise to indicate task completion.\n    return context.sync()\n        .then(function () {\n                    \n            // Show some properties.\n            console.log(\"Section name: \" + section.name);\n            console.log(\"Section ID: \" + section.id);\n            \n        });\n})\n.catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: onenote.OneNote.Application.getActiveSectionOrNull
  summary: >-
    Obtiene la sección activa si existe alguna. Si no hay ninguna sección activa, devuelve NULL.


    \[[Conjunto de API: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  name: getActiveSectionOrNull()
  fullName: getActiveSectionOrNull()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getActiveSectionOrNull(): OneNote.Section;'
    return:
      type:
      - onenote.OneNote.Section
      description: "\n#### <a name=\"examples\"></a>Ejemplos\n\n```javascript\nOneNote.run(function (context) {\n\n    // Get the active section.\n    var section = context.application.getActiveSectionOrNull();\n\n    // Queue a command to load the section. \n    // For best performance, request specific properties.           \n    section.load('id,name');\n\n    // Run the queued commands, and return a promise to indicate task completion.\n    return context.sync()\n        .then(function () {\n            if (!section.isNull) {\n                // Show some properties.\n                console.log(\"Section name: \" + section.name);\n                console.log(\"Section ID: \" + section.id);\n            }\n        });\n})\n.catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: onenote.OneNote.Application.getWindowSize
  name: getWindowSize()
  fullName: getWindowSize()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getWindowSize(): OfficeExtension.ClientResult<number[]>;'
    return:
      type:
      - OfficeExtension.ClientResult<number[]>
      description: ''
- uid: onenote.OneNote.Application.insertHtmlAtCurrentPosition
  name: insertHtmlAtCurrentPosition(html)
  fullName: insertHtmlAtCurrentPosition(html)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'insertHtmlAtCurrentPosition(html: string): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: html
      description: ''
      type:
      - string
- uid: onenote.OneNote.Application.isViewingDeletedNotes
  name: isViewingDeletedNotes()
  fullName: isViewingDeletedNotes()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'isViewingDeletedNotes(): OfficeExtension.ClientResult<boolean>;'
    return:
      type:
      - OfficeExtension.ClientResult<boolean>
      description: ''
- uid: onenote.OneNote.Application.load
  summary: Colas de seguridad de un comando que se va a cargar las propiedades del objeto especificadas. Se debe llamar a "context.sync()" antes de leer las propiedades.
  remarks: >-
    Además de esta firma, este método no tiene las siguientes firmas:


    `load(option?: string | string[]): OneNote.Application`-Donde opción es una cadena delimitada por comas o una matriz de cadenas que especifican las propiedades de carga.


    `load(option?: { select?: string; expand?: string; }): OneNote.Application`-Donde option.select es una cadena delimitada por comas que especifica las propiedades para cargar y options.expand es una cadena delimitada por comas que especifica las propiedades de navegación para cargar.


    `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): OneNote.Application`-Sólo está disponible en los tipos de colección. Es similar a la firma precedente. Option.Top especifica el número máximo de elementos de la colección que se puede incluir en el resultado. Option.Skip especifica el número de elementos que se pasan por alto y no se incluyen en el resultado. Si se especifica option.top, se iniciará el conjunto de resultados después de omitir el número especificado de elementos.
  name: load(option)
  fullName: load(option)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: OneNote.Interfaces.ApplicationLoadOptions): OneNote.Application;'
    return:
      type:
      - OneNote.Application
      description: ''
    parameters:
    - id: option
      description: ''
      type:
      - OneNote.Interfaces.ApplicationLoadOptions
- uid: onenote.OneNote.Application.load_1
  summary: Colas de seguridad de un comando que se va a cargar las propiedades del objeto especificadas. Se debe llamar a `context.sync()` antes de leer las propiedades.
  name: load(propertyNames)
  fullName: load(propertyNames)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(propertyNames?: string | string[]): OneNote.Application;'
    return:
      type:
      - OneNote.Application
      description: ''
    parameters:
    - id: propertyNames
      description: Una cadena delimitada por comas o una matriz de cadenas que especifican las propiedades de carga.
      type:
      - string | string[]
- uid: onenote.OneNote.Application.load_2
  summary: Colas de seguridad de un comando que se va a cargar las propiedades del objeto especificadas. Se debe llamar a `context.sync()` antes de leer las propiedades.
  name: load(propertyNamesAndPaths)
  fullName: load(propertyNamesAndPaths)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): OneNote.Application;'
    return:
      type:
      - OneNote.Application
      description: ''
    parameters:
    - id: propertyNamesAndPaths
      description: Donde propertyNamesAndPaths.select es una cadena delimitada por comas que especifica las propiedades para cargar y propertyNamesAndPaths.expand es una cadena delimitada por comas que especifica las propiedades de navegación para cargar.
      type:
      - '{ select?: string; expand?: string; }'
- uid: onenote.OneNote.Application.navigateToPage
  summary: >-
    Abre la página especificada en la instancia de la aplicación.


    \[[Conjunto de API: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  name: navigateToPage(page)
  fullName: navigateToPage(page)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'navigateToPage(page: OneNote.Page): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a>Ejemplos\n\n```javascript\nOneNote.run(function (context) {\n        \n    // Get the pages in the current section.\n    var pages = context.application.getActiveSection().pages;\n            \n    // Queue a command to load the pages. \n    // For best performance, request specific properties.           \n    pages.load('id');\n            \n    // Run the queued commands, and return a promise to indicate task completion.\n    return context.sync()\n        .then(function () {\n                    \n            // This example loads the first page in the section.\n            var page = pages.items[0];\n                        \n            // Open the page in the application.                    \n            context.application.navigateToPage(page);\n                    \n            // Run the queued command.\n            return context.sync();\n        });\n})\n.catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: page
      description: La página que se abrirá.
      type:
      - onenote.OneNote.Page
- uid: onenote.OneNote.Application.navigateToPageWithClientUrl
  summary: >-
    Obtiene la página especificada y la abre en la instancia de la aplicación.


    \[[Conjunto de API: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  name: navigateToPageWithClientUrl(url)
  fullName: navigateToPageWithClientUrl(url)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'navigateToPageWithClientUrl(url: string): OneNote.Page;'
    return:
      type:
      - onenote.OneNote.Page
      description: "\n#### <a name=\"examples\"></a>Ejemplos\n\n```javascript\nOneNote.run(function (context) {\n\n    // Get the pages in the current section.\n    var pages = context.application.getActiveSection().pages;\n\n    // Queue a command to load the pages. \n    // For best performance, request specific properties.           \n    pages.load('clientUrl');\n\n    // Run the queued commands, and return a promise to indicate task completion.\n    return context.sync()\n        .then(function () {\n\n            // This example loads the first page in the section.\n            var page = pages.items[0];\n\n            // Open the page in the application.                    \n            context.application.navigateToPageWithClientUrl(page.clientUrl);\n\n            // Run the queued command.\n            return context.sync();\n        });\n})\n.catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: url
      description: La URL del cliente de la página que se abrirá.
      type:
      - string
- uid: onenote.OneNote.Application.notebooks
  summary: >-
    Obtiene la colección de blocs de notas que están abiertos en la instancia de la aplicación de OneNote. En OneNote Online, solo se abre un bloc de notas en la instancia de la aplicación. Solo lectura.


    \[[Conjunto de API: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  name: notebooks
  fullName: notebooks
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly notebooks: OneNote.NotebookCollection;'
    return:
      type:
      - onenote.OneNote.NotebookCollection
- uid: onenote.OneNote.Application.toJSON
  summary: Invalida el JavaScript `toJSON()` método con el fin de proporcionar resultados más útiles cuando se pasa un objeto de la API a `JSON.stringify()` <!-- -->. (`JSON.stringify`<!-- -->, a su vez, llama a la `toJSON` método del objeto que se pasa a ella.) Mientras que el objeto original de OneNote.Application es un objeto de la API, el `toJSON` método devuelve un objeto de JavaScript sin formato (escrito como `OneNote.Interfaces.ApplicationData` <!-- -->) que contiene copias superficiales de todas las propiedades del objeto original secundario cargado.
  name: toJSON()
  fullName: toJSON()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON(): OneNote.Interfaces.ApplicationData;'
    return:
      type:
      - OneNote.Interfaces.ApplicationData
      description: ''
