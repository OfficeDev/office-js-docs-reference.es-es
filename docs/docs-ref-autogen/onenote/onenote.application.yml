### YamlMime:UniversalReference
items:
  - uid: onenote.OneNote.Application
    summary: |-
      Representa el objeto de nivel superior que contiene todos los objetos de OneNote a los que se pueden hacer referencia globalmente, como blocs de notas, el bloc de notas activo y la sección activa.

      \[[Conjunto de API: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: OneNote.Application
    fullName: OneNote.Application
    langs:
      - typeScript
    type: class
    extends:
      - office.OfficeExtension.ClientObject
    package: onenote
    children:
      - onenote.OneNote.Application.context
      - onenote.OneNote.Application.getActiveNotebook
      - onenote.OneNote.Application.getActiveNotebookOrNull
      - onenote.OneNote.Application.getActiveOutline
      - onenote.OneNote.Application.getActiveOutlineOrNull
      - onenote.OneNote.Application.getActivePage
      - onenote.OneNote.Application.getActivePageOrNull
      - onenote.OneNote.Application.getActiveParagraph
      - onenote.OneNote.Application.getActiveParagraphOrNull
      - onenote.OneNote.Application.getActiveSection
      - onenote.OneNote.Application.getActiveSectionOrNull
      - onenote.OneNote.Application.getWindowSize
      - onenote.OneNote.Application.insertHtmlAtCurrentPosition
      - onenote.OneNote.Application.isViewingDeletedNotes
      - onenote.OneNote.Application.load
      - onenote.OneNote.Application.load_1
      - onenote.OneNote.Application.load_2
      - onenote.OneNote.Application.navigateToPage
      - onenote.OneNote.Application.navigateToPageWithClientUrl
      - onenote.OneNote.Application.notebooks
      - onenote.OneNote.Application.toJSON
  - uid: onenote.OneNote.Application.context
    summary: Contexto de la solicitud asociado al objeto. Esto conecta el proceso del complemento con el proceso de la aplicación host de Office.
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - RequestContext
  - uid: onenote.OneNote.Application.getActiveNotebook
    summary: |-
      Obtiene el bloc de notas activo si existe alguno. Si no hay ningún bloc de notas activo, lanza ItemNotFound.

      \[[Conjunto de API: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: getActiveNotebook()
    fullName: getActiveNotebook()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getActiveNotebook(): OneNote.Notebook;'
      return:
        type:
          - onenote.OneNote.Notebook
        description: |-


          #### <a name="examples"></a>Ejemplos

          ```javascript
          OneNote.run(function (context) {
                  
              // Get the active notebook.
              var notebook = context.application.getActiveNotebook();
                      
              // Queue a command to load the notebook. 
              // For best performance, request specific properties.           
              notebook.load('id,name');
                      
              // Run the queued commands, and return a promise to indicate task completion.
              return context.sync()
                  .then(function () {
                              
                      // Show some properties.
                      console.log("Notebook name: " + notebook.name);
                      console.log("Notebook ID: " + notebook.id);
                      
                  });
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: onenote.OneNote.Application.getActiveNotebookOrNull
    summary: |-
      Obtiene el bloc de notas activo si existe alguno. Si no hay ningún bloc de notas activo, devuelve NULL.

      \[[Conjunto de API: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: getActiveNotebookOrNull()
    fullName: getActiveNotebookOrNull()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getActiveNotebookOrNull(): OneNote.Notebook;'
      return:
        type:
          - onenote.OneNote.Notebook
        description: |-


          #### <a name="examples"></a>Ejemplos

          ```javascript
          OneNote.run(function (context) {

              // Get the active notebook.
              var notebook = context.application.getActiveNotebookOrNull();

              // Queue a command to load the notebook. 
              // For best performance, request specific properties.           
              notebook.load('id,name');

              // Run the queued commands, and return a promise to indicate task completion.
              return context.sync()
                  .then(function () {

                      // check if active notebook is set.
                      if (!notebook.isNull) {
                          console.log("Notebook name: " + notebook.name);
                          console.log("Notebook ID: " + notebook.id);
                      }
                  });
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: onenote.OneNote.Application.getActiveOutline
    summary: |-
      Obtiene el esquema activo si existe alguno. Si no hay ninguno, lanza ItemNotFound.

      \[[Conjunto de API: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: getActiveOutline()
    fullName: getActiveOutline()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getActiveOutline(): OneNote.Outline;'
      return:
        type:
          - onenote.OneNote.Outline
        description: |-


          #### <a name="examples"></a>Ejemplos

          ```javascript
          OneNote.run(function (context) {

              // get active outline.
              var outline = context.application.getActiveOutline();

              // Queue a command to load the id of the outline.         
              outline.load('id');

              // Run the queued commands, and return a promise to indicate task completion.
              return context.sync()
                  .then(function () {

                      // Show some properties.
                      console.log("outline id: " + outline.id);
                  });
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: onenote.OneNote.Application.getActiveOutlineOrNull
    summary: |-
      Obtiene el esquema activo si existe. De lo contrario, devuelve NULL.

      \[[Conjunto de API: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: getActiveOutlineOrNull()
    fullName: getActiveOutlineOrNull()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getActiveOutlineOrNull(): OneNote.Outline;'
      return:
        type:
          - onenote.OneNote.Outline
        description: |-


          #### <a name="examples"></a>Ejemplos

          ```javascript
          OneNote.run(function (context) {

              // get active outline.
              var outline = context.application.getActiveOutlineOrNull();

              // Queue a command to load the id of the outline.         
              outline.load('id');

              // Run the queued commands, and return a promise to indicate task completion.
              return context.sync()
                  .then(function () {

                      if (!outline.isNull) {
                          console.log("outline id: " + outline.id);
                      }
                  });
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: onenote.OneNote.Application.getActivePage
    summary: |-
      Obtiene la página activa si existe alguna. Si no hay ninguna página activa, lanza ItemNotFound.

      \[[Conjunto de API: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: getActivePage()
    fullName: getActivePage()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getActivePage(): OneNote.Page;'
      return:
        type:
          - onenote.OneNote.Page
        description: |-


          #### <a name="examples"></a>Ejemplos

          ```javascript
          OneNote.run(function (context) {
                  
              // Get the active page.
              var page = context.application.getActivePage();
                      
              // Queue a command to load the page. 
              // For best performance, request specific properties.           
              page.load('id,title');
                      
              // Run the queued commands, and return a promise to indicate task completion.
              return context.sync()
                  .then(function () {
                              
                      // Show some properties.
                      console.log("Page title: " + page.title);
                      console.log("Page ID: " + page.id);
                      
                  });
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: onenote.OneNote.Application.getActivePageOrNull
    summary: |-
      Obtiene la página activa si existe alguna. Si no hay ninguna página activa, devuelve NULL.

      \[[Conjunto de API: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: getActivePageOrNull()
    fullName: getActivePageOrNull()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getActivePageOrNull(): OneNote.Page;'
      return:
        type:
          - onenote.OneNote.Page
        description: |-


          #### <a name="examples"></a>Ejemplos

          ```javascript
          OneNote.run(function (context) {

              // Get the active page.
              var page = context.application.getActivePageOrNull();

              // Queue a command to load the page. 
              // For best performance, request specific properties.           
              page.load('id,title');

              // Run the queued commands, and return a promise to indicate task completion.
              return context.sync()
                  .then(function () {
                      
                      if (!page.isNull) {
                          // Show some properties.
                          console.log("Page title: " + page.title);
                          console.log("Page ID: " + page.id);
                      }
                  });
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: onenote.OneNote.Application.getActiveParagraph
    summary: |-
      Obtiene el párrafo activo si existe, si no hay ningún párrafo activo, produce ItemNotFound.

      \[[Conjunto de API: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: getActiveParagraph()
    fullName: getActiveParagraph()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getActiveParagraph(): OneNote.Paragraph;'
      return:
        type:
          - onenote.OneNote.Paragraph
        description: ''
  - uid: onenote.OneNote.Application.getActiveParagraphOrNull
    summary: |-
      Obtiene el párrafo activo si existe; de lo contrario, devuelve NULL.

      \[[Conjunto de API: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: getActiveParagraphOrNull()
    fullName: getActiveParagraphOrNull()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getActiveParagraphOrNull(): OneNote.Paragraph;'
      return:
        type:
          - onenote.OneNote.Paragraph
        description: ''
  - uid: onenote.OneNote.Application.getActiveSection
    summary: |-
      Obtiene la sección activa si existe alguna. Si no hay ninguna sección activa, lanza ItemNotFound.

      \[[Conjunto de API: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: getActiveSection()
    fullName: getActiveSection()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getActiveSection(): OneNote.Section;'
      return:
        type:
          - onenote.OneNote.Section
        description: |-


          #### <a name="examples"></a>Ejemplos

          ```javascript
          OneNote.run(function (context) {
                  
              // Get the active section.
              var section = context.application.getActiveSection();
                      
              // Queue a command to load the section. 
              // For best performance, request specific properties.           
              section.load('id,name');
                      
              // Run the queued commands, and return a promise to indicate task completion.
              return context.sync()
                  .then(function () {
                              
                      // Show some properties.
                      console.log("Section name: " + section.name);
                      console.log("Section ID: " + section.id);
                      
                  });
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: onenote.OneNote.Application.getActiveSectionOrNull
    summary: |-
      Obtiene la sección activa si existe alguna. Si no hay ninguna sección activa, devuelve NULL.

      \[[Conjunto de API: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: getActiveSectionOrNull()
    fullName: getActiveSectionOrNull()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getActiveSectionOrNull(): OneNote.Section;'
      return:
        type:
          - onenote.OneNote.Section
        description: |-


          #### <a name="examples"></a>Ejemplos

          ```javascript
          OneNote.run(function (context) {

              // Get the active section.
              var section = context.application.getActiveSectionOrNull();

              // Queue a command to load the section. 
              // For best performance, request specific properties.           
              section.load('id,name');

              // Run the queued commands, and return a promise to indicate task completion.
              return context.sync()
                  .then(function () {
                      if (!section.isNull) {
                          // Show some properties.
                          console.log("Section name: " + section.name);
                          console.log("Section ID: " + section.id);
                      }
                  });
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: onenote.OneNote.Application.getWindowSize
    name: getWindowSize()
    fullName: getWindowSize()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getWindowSize(): OfficeExtension.ClientResult<number[]>;'
      return:
        type:
          - 'OfficeExtension.ClientResult<number[]>'
        description: ''
  - uid: onenote.OneNote.Application.insertHtmlAtCurrentPosition
    name: insertHtmlAtCurrentPosition(html)
    fullName: insertHtmlAtCurrentPosition(html)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertHtmlAtCurrentPosition(html: string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: html
          description: ''
          type:
            - string
  - uid: onenote.OneNote.Application.isViewingDeletedNotes
    name: isViewingDeletedNotes()
    fullName: isViewingDeletedNotes()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'isViewingDeletedNotes(): OfficeExtension.ClientResult<boolean>;'
      return:
        type:
          - OfficeExtension.ClientResult<boolean>
        description: ''
  - uid: onenote.OneNote.Application.load
    summary: 'Pone en cola un comando para cargar las propiedades especificadas del objeto. Antes de leer las propiedades, debe llamar a "context.sync()".'
    remarks: |-
      Además de esta firma, este método tiene las siguientes firmas:

      `load(option?: string | string[]): OneNote.Application`-Donde opción es una cadena delimitada por comas o una matriz de cadenas que especifican las propiedades que se van a cargar.

      `load(option?: { select?: string; expand?: string; }): OneNote.Application`-Where opción. Select es una cadena delimitada por comas que especifica las propiedades que se van a cargar y Options. Expand es una cadena delimitada por comas que especifica las propiedades de navegación que se deben cargar.

      `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): OneNote.Application`-Solo disponible en tipos de colección. Es similar a la firma anterior. Option. Top especifica el número máximo de elementos de colección que se pueden incluir en el resultado. La opción. SKIP especifica el número de elementos que se deben omitir y que no se incluyen en el resultado. Si se especifica Option. Top, el conjunto de resultados se iniciará después de omitir el número especificado de elementos.
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: OneNote.Interfaces.ApplicationLoadOptions): OneNote.Application;'
      return:
        type:
          - OneNote.Application
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - OneNote.Interfaces.ApplicationLoadOptions
  - uid: onenote.OneNote.Application.load_1
    summary: Pone en cola un comando para cargar las propiedades especificadas del objeto. Debe llamar `context.sync()` antes de leer las propiedades.
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): OneNote.Application;'
      return:
        type:
          - OneNote.Application
        description: ''
      parameters:
        - id: propertyNames
          description: Una cadena delimitada por comas o una matriz de cadenas que especifican las propiedades que se van a cargar.
          type:
            - 'string | string[]'
  - uid: onenote.OneNote.Application.load_2
    summary: Pone en cola un comando para cargar las propiedades especificadas del objeto. Debe llamar `context.sync()` antes de leer las propiedades.
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): OneNote.Application;'
      return:
        type:
          - OneNote.Application
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: Donde propertyNamesAndPaths. Select es una cadena delimitada por comas que especifica las propiedades que se van a cargar y propertyNamesAndPaths. Expand es una cadena delimitada por comas que especifica las propiedades de navegación que se deben cargar.
          type:
            - '{ select?: string; expand?: string; }'
  - uid: onenote.OneNote.Application.navigateToPage
    summary: |-
      Abre la página especificada en la instancia de la aplicación.

      \[[Conjunto de API: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: navigateToPage(page)
    fullName: navigateToPage(page)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'navigateToPage(page: OneNote.Page): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>Ejemplos

          ```javascript
          OneNote.run(function (context) {
                  
              // Get the pages in the current section.
              var pages = context.application.getActiveSection().pages;
                      
              // Queue a command to load the pages. 
              // For best performance, request specific properties.           
              pages.load('id');
                      
              // Run the queued commands, and return a promise to indicate task completion.
              return context.sync()
                  .then(function () {
                              
                      // This example loads the first page in the section.
                      var page = pages.items[0];
                                  
                      // Open the page in the application.                    
                      context.application.navigateToPage(page);
                              
                      // Run the queued command.
                      return context.sync();
                  });
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: page
          description: La página que se abrirá.
          type:
            - onenote.OneNote.Page
  - uid: onenote.OneNote.Application.navigateToPageWithClientUrl
    summary: |-
      Obtiene la página especificada y la abre en la instancia de la aplicación.

      \[[Conjunto de API: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: navigateToPageWithClientUrl(url)
    fullName: navigateToPageWithClientUrl(url)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'navigateToPageWithClientUrl(url: string): OneNote.Page;'
      return:
        type:
          - onenote.OneNote.Page
        description: |-


          #### <a name="examples"></a>Ejemplos

          ```javascript
          OneNote.run(function (context) {

              // Get the pages in the current section.
              var pages = context.application.getActiveSection().pages;

              // Queue a command to load the pages. 
              // For best performance, request specific properties.           
              pages.load('clientUrl');

              // Run the queued commands, and return a promise to indicate task completion.
              return context.sync()
                  .then(function () {

                      // This example loads the first page in the section.
                      var page = pages.items[0];

                      // Open the page in the application.                    
                      context.application.navigateToPageWithClientUrl(page.clientUrl);

                      // Run the queued command.
                      return context.sync();
                  });
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: url
          description: La URL del cliente de la página que se abrirá.
          type:
            - string
  - uid: onenote.OneNote.Application.notebooks
    summary: |-
      Obtiene la colección de blocs de notas que están abiertos en la instancia de la aplicación de OneNote. En OneNote Online, solo se abre un bloc de notas en la instancia de la aplicación. Solo lectura.

      \[[Conjunto de API: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
    name: notebooks
    fullName: notebooks
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly notebooks: OneNote.NotebookCollection;'
      return:
        type:
          - onenote.OneNote.NotebookCollection
  - uid: onenote.OneNote.Application.toJSON
    summary: 'Reemplaza el método JavaScript `toJSON()` para proporcionar un resultado más útil cuando se pasa un objeto API a`JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, a su vez, llama `toJSON` al método del objeto que se le pasa.) Mientras que el objeto OneNote. Application original es un objeto API, `toJSON` el método devuelve un objeto JavaScript sin formato (escrito como`OneNote.Interfaces.ApplicationData`<!-- -->) que contiene copias rasas de las propiedades secundarias cargadas del objeto original.'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): OneNote.Interfaces.ApplicationData;'
      return:
        type:
          - OneNote.Interfaces.ApplicationData
        description: ''