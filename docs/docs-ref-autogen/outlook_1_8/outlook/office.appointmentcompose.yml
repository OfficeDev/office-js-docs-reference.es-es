### YamlMime:UniversalReference
items:
  - uid: 'outlook!Office.AppointmentCompose:interface'
    summary: |-
      El modo de organizador de citas de [Office. Context. Mailbox. Item](xref:outlook!Office.Item:interface)<!-- -->.

      **Importante**: se trata de un objeto interno de Outlook, que no se expone directamente a través de las interfaces existentes. Debe tratarlo como un modo de Office. Context. Mailbox. Item. Consulte la página del [modelo de objetos](https://docs.microsoft.com/office/dev/add-ins/reference/objectmodel/requirement-set-1.8/office.context.mailbox.item) para obtener más información.

      Interfaces principales:

      - [ItemCompose](xref:outlook!Office.ItemCompose:interface)

      - [Appointment](xref:outlook!Office.Appointment:interface)
    name: Office.AppointmentCompose
    fullName: Office.AppointmentCompose
    langs:
      - typeScript
    type: interface
    extends:
      - 'outlook!Office.Appointment:interface'
      - 'outlook!Office.ItemCompose:interface'
    package: outlook!
    children:
      - 'outlook!Office.AppointmentCompose#addFileAttachmentAsync:member(1)'
      - 'outlook!Office.AppointmentCompose#addFileAttachmentAsync:member(2)'
      - 'outlook!Office.AppointmentCompose#addFileAttachmentFromBase64Async:member(1)'
      - 'outlook!Office.AppointmentCompose#addFileAttachmentFromBase64Async:member(2)'
      - 'outlook!Office.AppointmentCompose#addHandlerAsync:member(1)'
      - 'outlook!Office.AppointmentCompose#addHandlerAsync:member(2)'
      - 'outlook!Office.AppointmentCompose#addItemAttachmentAsync:member(1)'
      - 'outlook!Office.AppointmentCompose#addItemAttachmentAsync:member(2)'
      - 'outlook!Office.AppointmentCompose#body:member'
      - 'outlook!Office.AppointmentCompose#categories:member'
      - 'outlook!Office.AppointmentCompose#close:member(1)'
      - 'outlook!Office.AppointmentCompose#end:member'
      - 'outlook!Office.AppointmentCompose#enhancedLocation:member'
      - 'outlook!Office.AppointmentCompose#getAttachmentContentAsync:member(1)'
      - 'outlook!Office.AppointmentCompose#getAttachmentContentAsync:member(2)'
      - 'outlook!Office.AppointmentCompose#getAttachmentsAsync:member(1)'
      - 'outlook!Office.AppointmentCompose#getAttachmentsAsync:member(2)'
      - 'outlook!Office.AppointmentCompose#getItemIdAsync:member(1)'
      - 'outlook!Office.AppointmentCompose#getItemIdAsync:member(2)'
      - 'outlook!Office.AppointmentCompose#getSelectedDataAsync:member(1)'
      - 'outlook!Office.AppointmentCompose#getSelectedDataAsync:member(2)'
      - 'outlook!Office.AppointmentCompose#getSharedPropertiesAsync:member(1)'
      - 'outlook!Office.AppointmentCompose#getSharedPropertiesAsync:member(2)'
      - 'outlook!Office.AppointmentCompose#itemType:member'
      - 'outlook!Office.AppointmentCompose#loadCustomPropertiesAsync:member(1)'
      - 'outlook!Office.AppointmentCompose#location:member'
      - 'outlook!Office.AppointmentCompose#notificationMessages:member'
      - 'outlook!Office.AppointmentCompose#optionalAttendees:member'
      - 'outlook!Office.AppointmentCompose#organizer:member'
      - 'outlook!Office.AppointmentCompose#recurrence:member'
      - 'outlook!Office.AppointmentCompose#removeAttachmentAsync:member(1)'
      - 'outlook!Office.AppointmentCompose#removeAttachmentAsync:member(2)'
      - 'outlook!Office.AppointmentCompose#removeHandlerAsync:member(1)'
      - 'outlook!Office.AppointmentCompose#removeHandlerAsync:member(2)'
      - 'outlook!Office.AppointmentCompose#requiredAttendees:member'
      - 'outlook!Office.AppointmentCompose#saveAsync:member(1)'
      - 'outlook!Office.AppointmentCompose#saveAsync:member(2)'
      - 'outlook!Office.AppointmentCompose#seriesId:member'
      - 'outlook!Office.AppointmentCompose#setSelectedDataAsync:member(1)'
      - 'outlook!Office.AppointmentCompose#setSelectedDataAsync:member(2)'
      - 'outlook!Office.AppointmentCompose#start:member'
      - 'outlook!Office.AppointmentCompose#subject:member'
  - uid: 'outlook!Office.AppointmentCompose#addFileAttachmentAsync:member(1)'
    summary: |-
      Agrega un archivo a un mensaje o cita como datos adjuntos.

      El método addFileAttachmentAsync carga el archivo en el URI especificado y lo asocia al elemento en el formulario de redacción.

      A continuación, puede utilizar el identificador con el método removeAttachmentAsync para quitar los datos adjuntos en la misma sesión.

      **Importante**: en compilaciones recientes de Outlook en Windows, se introdujo un error que anexa incorrectamente un `Authorization: Bearer` encabezado a esta acción (ya sea mediante esta API o la interfaz de usuario de Outlook). Para solucionar este problema, puede probar a usar la API `addFileAttachmentFromBase64` que se presenta con el conjunto de requisitos 1,8.

      \[[Conjunto de API: buzón de correo 1,1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)**: ReadWriteItem

      **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/outlook/add-ins/#extension-points)**: Organizador de citas

      **Errores**:

      - AttachmentSizeExceeded: los datos adjuntos son más grandes de lo permitidos.

      - FileTypeNotSupported: los datos adjuntos tienen una extensión no permitida.

      - NumberOfAttachmentsExceeded: el mensaje o la cita tiene demasiados datos adjuntos.

      #### <a name="examples"></a>Ejemplos

      ```javascript
      function callback(result) {
          if (result.error) {
              console.log(result.error);
          } else {
              console.log("Attachment added");
          }
      }

      function addAttachment() {
          // The values in asyncContext can be accessed in the callback.
          var options = { 'asyncContext': { var1: 1, var2: 2 } };

          var attachmentURL = "https://contoso.com/rtm/icon.png";
          Office.context.mailbox.item.addFileAttachmentAsync(attachmentURL, attachmentURL, options, callback);
      }
      ```
    name: 'addFileAttachmentAsync(uri, attachmentName, options, callback)'
    fullName: 'addFileAttachmentAsync(uri, attachmentName, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addFileAttachmentAsync(uri: string, attachmentName: string, options?: Office.AsyncContextOptions & { isInline: boolean }, callback?: (asyncResult: Office.AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: uri
          description: El URI que proporciona la ubicación del archivo que se va a adjuntar al mensaje o a la cita. La longitud máxima es de 2048 caracteres.
          type:
            - string
        - id: attachmentName
          description: El nombre de los datos adjuntos que se muestra mientras estos se cargan. La longitud máxima es de 255 caracteres.
          type:
            - string
        - id: options
          description: 'Opcional. Un objeto literal que contiene una o más de las siguientes propiedades. asyncContext: los desarrolladores pueden proporcionar cualquier objeto al que quieran tener acceso en el método de devolución de llamada. isInline: si es true, indica que los datos adjuntos se mostrarán en línea en el cuerpo del mensaje y no deben mostrarse en la lista de datos adjuntos.'
          type:
            - 'outlook!Office.AppointmentCompose#addFileAttachmentAsync~0:complex'
        - id: callback
          description: 'Opcional. Cuando el método finaliza, la función que se pasa en el parámetro callback se llama con un único parámetro de tipo Office. AsyncResult. Si se realiza correctamente, se proporcionará el identificador de datos adjuntos en la propiedad asyncResult. Value. Si la carga de los datos adjuntos no se completa correctamente, el objeto asyncResult contendrá otro objeto Error que proporcionará una descripción del error.'
          type:
            - 'outlook!Office.AppointmentCompose#addFileAttachmentAsync~1:complex'
  - uid: 'outlook!Office.AppointmentCompose#addFileAttachmentAsync:member(2)'
    summary: |-
      Agrega un archivo a un mensaje o cita como datos adjuntos.

      El método addFileAttachmentAsync carga el archivo en el URI especificado y lo asocia al elemento en el formulario de redacción.

      A continuación, puede utilizar el identificador con el método removeAttachmentAsync para quitar los datos adjuntos en la misma sesión.

      **Importante**: en compilaciones recientes de Outlook en Windows, se introdujo un error que anexa incorrectamente un `Authorization: Bearer` encabezado a esta acción (ya sea mediante esta API o la interfaz de usuario de Outlook). Para solucionar este problema, puede probar a usar la API `addFileAttachmentFromBase64` que se presenta con el conjunto de requisitos 1,8.

      \[[Conjunto de API: buzón de correo 1,1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)**: ReadWriteItem

      **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/outlook/add-ins/#extension-points)**: Organizador de citas

      **Errores**:

      - AttachmentSizeExceeded: los datos adjuntos son más grandes de lo permitidos.

      - FileTypeNotSupported: los datos adjuntos tienen una extensión no permitida.

      - NumberOfAttachmentsExceeded: el mensaje o la cita tiene demasiados datos adjuntos.
    name: 'addFileAttachmentAsync(uri, attachmentName, callback)'
    fullName: 'addFileAttachmentAsync(uri, attachmentName, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addFileAttachmentAsync(uri: string, attachmentName: string, callback?: (asyncResult: Office.AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: uri
          description: El URI que proporciona la ubicación del archivo que se va a adjuntar al mensaje o a la cita. La longitud máxima es de 2048 caracteres.
          type:
            - string
        - id: attachmentName
          description: El nombre de los datos adjuntos que se muestra mientras estos se cargan. La longitud máxima es de 255 caracteres.
          type:
            - string
        - id: callback
          description: 'Opcional. Cuando el método finaliza, la función que se pasa en el parámetro callback se llama con un único parámetro de tipo Office. AsyncResult. Si se realiza correctamente, se proporcionará el identificador de datos adjuntos en la propiedad asyncResult. Value. Si la carga de los datos adjuntos no se completa correctamente, el objeto asyncResult contendrá otro objeto Error que proporcionará una descripción del error.'
          type:
            - 'outlook!Office.AppointmentCompose#addFileAttachmentAsync~2:complex'
  - uid: 'outlook!Office.AppointmentCompose#addFileAttachmentFromBase64Async:member(1)'
    summary: |-
      Agrega un archivo a un mensaje o cita como datos adjuntos.

      El método addFileAttachmentFromBase64Async carga el archivo desde la codificación Base64 y lo adjunta al elemento en el formulario de redacción. Este método devuelve el identificador de datos adjuntos en el objeto asyncResult. Value.

      A continuación, puede utilizar el identificador con el método removeAttachmentAsync para quitar los datos adjuntos en la misma sesión.

      **Nota**: Si está usando una API de dirección URL de datos (por ejemplo, readAsDataURL), deberá eliminar el prefijo de la dirección URL de datos y, a continuación, enviar el resto de la cadena a esta API. Por ejemplo, si la cadena completa se representa mediante`data:image/svg+xml;base64,<rest of base64 string>`<!-- -->, quitar`data:image/svg+xml;base64,`<!-- -->.

      \[[Conjunto de API: buzón de correo 1,8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)**: ReadWriteItem

      **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/outlook/add-ins/#extension-points)**: Organizador de citas

      **Errores**:

      - AttachmentSizeExceeded: los datos adjuntos son más grandes de lo permitidos.

      - FileTypeNotSupported: los datos adjuntos tienen una extensión no permitida.

      - NumberOfAttachmentsExceeded: el mensaje o la cita tiene demasiados datos adjuntos.

      #### <a name="examples"></a>Ejemplos

      ```javascript
      Office.context.mailbox.item.addFileAttachmentFromBase64Async(
          base64String,
          "cute_bird.png",
          {
              isInline: true
          },
          function (asyncResult) {
              Office.context.mailbox.item.body.setAsync(
                  "<p>Here's a cute bird!</p><img src='cid:cute_bird.png'>",
                  {
                      "coercionType": "html"
                  },
                  function (asyncResult) {
                  });
          });
      ```
    name: 'addFileAttachmentFromBase64Async(base64File, attachmentName, options, callback)'
    fullName: 'addFileAttachmentFromBase64Async(base64File, attachmentName, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addFileAttachmentFromBase64Async(base64File: string, attachmentName: string, options?: Office.AsyncContextOptions &  { isInline: boolean }, callback?: (asyncResult: Office.AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: base64File
          description: Contenido codificado en Base64 de una imagen o archivo que se va a agregar a un correo electrónico o un evento.
          type:
            - string
        - id: attachmentName
          description: El nombre de los datos adjuntos que se muestra mientras estos se cargan. La longitud máxima es de 255 caracteres.
          type:
            - string
        - id: options
          description: 'Opcional. Un objeto literal que contiene una o más de las siguientes propiedades. asyncContext: los desarrolladores pueden proporcionar cualquier objeto al que quieran tener acceso en el método de devolución de llamada. isInline: si es true, indica que los datos adjuntos se mostrarán en línea en el cuerpo del mensaje y no deben mostrarse en la lista de datos adjuntos.'
          type:
            - 'outlook!Office.AppointmentCompose#addFileAttachmentFromBase64Async~0:complex'
        - id: callback
          description: 'Opcional. Cuando el método finaliza, la función que se pasa en el parámetro callback se llama con un único parámetro de tipo Office. AsyncResult. Si se realiza correctamente, se proporcionará el identificador de datos adjuntos en la propiedad asyncResult. Value. Si la carga de los datos adjuntos no se completa correctamente, el objeto asyncResult contendrá otro objeto Error que proporcionará una descripción del error.'
          type:
            - 'outlook!Office.AppointmentCompose#addFileAttachmentFromBase64Async~1:complex'
  - uid: 'outlook!Office.AppointmentCompose#addFileAttachmentFromBase64Async:member(2)'
    summary: |-
      Agrega un archivo a un mensaje o cita como datos adjuntos.

      El método addFileAttachmentFromBase64Async carga el archivo desde la codificación Base64 y lo adjunta al elemento en el formulario de redacción. Este método devuelve el identificador de datos adjuntos en el objeto asyncResult. Value.

      A continuación, puede utilizar el identificador con el método removeAttachmentAsync para quitar los datos adjuntos en la misma sesión.

      **Nota**: Si está usando una API de dirección URL de datos (por ejemplo, readAsDataURL), deberá eliminar el prefijo de la dirección URL de datos y, a continuación, enviar el resto de la cadena a esta API. Por ejemplo, si la cadena completa se representa mediante`data:image/svg+xml;base64,<rest of base64 string>`<!-- -->, quitar`data:image/svg+xml;base64,`<!-- -->.

      \[[Conjunto de API: buzón de correo 1,8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)**: ReadWriteItem

      **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/outlook/add-ins/#extension-points)**: Organizador de citas

      **Errores**:

      - AttachmentSizeExceeded: los datos adjuntos son más grandes de lo permitidos.

      - FileTypeNotSupported: los datos adjuntos tienen una extensión no permitida.

      - NumberOfAttachmentsExceeded: el mensaje o la cita tiene demasiados datos adjuntos.
    name: 'addFileAttachmentFromBase64Async(base64File, attachmentName, callback)'
    fullName: 'addFileAttachmentFromBase64Async(base64File, attachmentName, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addFileAttachmentFromBase64Async(base64File: string, attachmentName: string, callback?: (asyncResult: Office.AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: base64File
          description: Contenido codificado en Base64 de una imagen o archivo que se va a agregar a un correo electrónico o un evento.
          type:
            - string
        - id: attachmentName
          description: El nombre de los datos adjuntos que se muestra mientras estos se cargan. La longitud máxima es de 255 caracteres.
          type:
            - string
        - id: callback
          description: 'Opcional. Cuando el método finaliza, la función que se pasa en el parámetro callback se llama con un único parámetro de tipo Office. AsyncResult. Si se realiza correctamente, se proporcionará el identificador de datos adjuntos en la propiedad asyncResult. Value. Si la carga de los datos adjuntos no se completa correctamente, el objeto asyncResult contendrá otro objeto Error que proporcionará una descripción del error.'
          type:
            - 'outlook!Office.AppointmentCompose#addFileAttachmentFromBase64Async~2:complex'
  - uid: 'outlook!Office.AppointmentCompose#addHandlerAsync:member(1)'
    summary: |-
      Agrega un controlador de eventos para un evento admitido. **Nota**: los eventos solo están disponibles con el panel de tareas.

      Para ver qué tipos de eventos son compatibles, `Office.EventType` consulte para obtener más información.

      \[[Conjunto de API: buzón de correo 1,7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)**: ReadItem

      **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/outlook/add-ins/#extension-points)**: Organizador de citas
    name: 'addHandlerAsync(eventType, handler, options, callback)'
    fullName: 'addHandlerAsync(eventType, handler, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addHandlerAsync(eventType: Office.EventType | string, handler: any, options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: El evento que debe invocar el controlador.
          type:
            - 'outlook!Office.AppointmentCompose#addHandlerAsync~0:complex'
        - id: handler
          description: 'La función que va a controlar el evento. La función debe aceptar un único parámetro, que es un literal de objeto. La propiedad Type en el parámetro coincidirá con el parámetro eventType que se pasa a addHandlerAsync.'
          type:
            - any
        - id: options
          description: 'Opcional. Un objeto literal que contiene una o más de las siguientes propiedades. asyncContext: los desarrolladores pueden proporcionar cualquier objeto al que quieran tener acceso en el método de devolución de llamada.'
          type:
            - 'outlook!Office.AsyncContextOptions:interface'
        - id: callback
          description: 'Opcional. Cuando el método finaliza, la función que se pasa en el parámetro callback se llama con un único parámetro, asyncResult, que es un objeto Office. AsyncResult.'
          type:
            - 'outlook!Office.AppointmentCompose#addHandlerAsync~1:complex'
  - uid: 'outlook!Office.AppointmentCompose#addHandlerAsync:member(2)'
    summary: |-
      Agrega un controlador de eventos para un evento admitido. **Nota**: los eventos solo están disponibles con el panel de tareas.

      Para ver qué tipos de eventos son compatibles, `Office.EventType` consulte para obtener más información.

      \[[Conjunto de API: buzón de correo 1,7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)**: ReadItem

      **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/outlook/add-ins/#extension-points)**: Organizador de citas

      #### <a name="examples"></a>Ejemplos

      ```javascript
      function myHandlerFunction(eventarg) {
          if (eventarg.attachmentStatus === Office.MailboxEnums.AttachmentStatus.Added) {
              var attachment = eventarg.attachmentDetails;
              console.log("Event Fired and Attachment Added!");
              getAttachmentContentAsync(attachment.id, options, callback);
          }
      }

      Office.context.mailbox.item.addHandlerAsync(Office.EventType.AttachmentsChanged, myHandlerFunction, myCallback);
      ```
    name: 'addHandlerAsync(eventType, handler, callback)'
    fullName: 'addHandlerAsync(eventType, handler, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addHandlerAsync(eventType: Office.EventType | string, handler: any, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: El evento que debe invocar el controlador.
          type:
            - 'outlook!Office.AppointmentCompose#addHandlerAsync~2:complex'
        - id: handler
          description: 'La función que va a controlar el evento. La función debe aceptar un único parámetro, que es un literal de objeto. La propiedad Type en el parámetro coincidirá con el parámetro eventType que se pasa a addHandlerAsync.'
          type:
            - any
        - id: callback
          description: 'Opcional. Cuando el método finaliza, la función que se pasa en el parámetro callback se llama con un único parámetro, asyncResult, que es un objeto Office. AsyncResult.'
          type:
            - 'outlook!Office.AppointmentCompose#addHandlerAsync~3:complex'
  - uid: 'outlook!Office.AppointmentCompose#addItemAttachmentAsync:member(1)'
    summary: |-
      Agrega un elemento de Exchange (por ejemplo, un mensaje) como datos adjuntos al mensaje o a la cita.

      El método addItemAttachmentAsync adjunta el elemento con el identificador de Exchange especificado al elemento en el formulario de redacción. Si especifica un método de devolución de llamada, se llamará a este con un parámetro (asyncResult) que contiene el identificador de datos adjuntos o un código que indica cualquier error que se haya generado al adjuntar el elemento. Con el parámetro options puede pasar información de estado al método de devolución de llamada, si lo considera necesario.

      A continuación, puede utilizar el identificador con el método removeAttachmentAsync para quitar los datos adjuntos en la misma sesión.

      Si el complemento de Office se está ejecutando en Outlook en la web, el método addItemAttachmentAsync puede adjuntar elementos a elementos que no sean el elemento que está editando; sin embargo, esto no se admite y no se recomienda.

      \[[Conjunto de API: buzón de correo 1,1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)**: ReadWriteItem

      **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/outlook/add-ins/#extension-points)**: Organizador de citas

      **Errores**:

      - NumberOfAttachmentsExceeded: el mensaje o la cita tiene demasiados datos adjuntos.

      #### <a name="examples"></a>Ejemplos

      ```javascript
      // The following example adds an existing Outlook item as an attachment
      // with the name `My Attachment`.
      function callback(result) {
          if (result.error) {
              console.log(result.error);
          } else {
              console.log("Attachment added");
          }
      }

      function addAttachment() {
          // EWS ID of item to attach (shortened for readability).
          var itemId = "AAMkADI1...AAA=";

          // The values in asyncContext can be accessed in the callback.
          var options = { 'asyncContext': { var1: 1, var2: 2 } };

          Office.context.mailbox.item.addItemAttachmentAsync(itemId, "My Attachment", options, callback);
      }
      ```
    name: 'addItemAttachmentAsync(itemId, attachmentName, options, callback)'
    fullName: 'addItemAttachmentAsync(itemId, attachmentName, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addItemAttachmentAsync(itemId: any, attachmentName: string, options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: itemId
          description: El identificador de Exchange del elemento que debe adjuntarse. La longitud máxima es de 100 caracteres.
          type:
            - any
        - id: attachmentName
          description: El nombre de los datos adjuntos que se muestra mientras estos se cargan. La longitud máxima es de 255 caracteres.
          type:
            - string
        - id: options
          description: 'Opcional. Un objeto literal que contiene una o más de las siguientes propiedades. asyncContext: los desarrolladores pueden proporcionar cualquier objeto al que quieran tener acceso en el método de devolución de llamada.'
          type:
            - 'outlook!Office.AsyncContextOptions:interface'
        - id: callback
          description: 'Opcional. Cuando el método finaliza, la función que se pasa en el parámetro callback se llama con un único parámetro de tipo Office. AsyncResult. Si se realiza correctamente, se proporcionará el identificador de datos adjuntos en la propiedad asyncResult. Value. Si se produce un error al agregar los datos adjuntos, el objeto asyncResult contendrá un objeto error que proporciona una descripción del error.'
          type:
            - 'outlook!Office.AppointmentCompose#addItemAttachmentAsync~0:complex'
  - uid: 'outlook!Office.AppointmentCompose#addItemAttachmentAsync:member(2)'
    summary: |-
      Agrega un elemento de Exchange (por ejemplo, un mensaje) como datos adjuntos al mensaje o a la cita.

      El método addItemAttachmentAsync adjunta el elemento con el identificador de Exchange especificado al elemento en el formulario de redacción. Si especifica un método de devolución de llamada, se llamará a este con un parámetro (asyncResult) que contiene el identificador de datos adjuntos o un código que indica cualquier error que se haya generado al adjuntar el elemento. Con el parámetro options puede pasar información de estado al método de devolución de llamada, si lo considera necesario.

      A continuación, puede utilizar el identificador con el método removeAttachmentAsync para quitar los datos adjuntos en la misma sesión.

      Si el complemento de Office se está ejecutando en Outlook en la web, el método addItemAttachmentAsync puede adjuntar elementos a elementos que no sean el elemento que está editando; sin embargo, esto no se admite y no se recomienda.

      \[[Conjunto de API: buzón de correo 1,1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)**: ReadWriteItem

      **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/outlook/add-ins/#extension-points)**: Organizador de citas

      **Errores**:

      - NumberOfAttachmentsExceeded: el mensaje o la cita tiene demasiados datos adjuntos.
    name: 'addItemAttachmentAsync(itemId, attachmentName, callback)'
    fullName: 'addItemAttachmentAsync(itemId, attachmentName, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addItemAttachmentAsync(itemId: any, attachmentName: string, callback?: (asyncResult: Office.AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: itemId
          description: El identificador de Exchange del elemento que debe adjuntarse. La longitud máxima es de 100 caracteres.
          type:
            - any
        - id: attachmentName
          description: El nombre de los datos adjuntos que se muestra mientras estos se cargan. La longitud máxima es de 255 caracteres.
          type:
            - string
        - id: callback
          description: 'Opcional. Cuando el método finaliza, la función que se pasa en el parámetro callback se llama con un único parámetro de tipo Office. AsyncResult. Si se realiza correctamente, se proporcionará el identificador de datos adjuntos en la propiedad asyncResult. Value. Si se produce un error al agregar los datos adjuntos, el objeto asyncResult contendrá un objeto error que proporciona una descripción del error.'
          type:
            - 'outlook!Office.AppointmentCompose#addItemAttachmentAsync~1:complex'
  - uid: 'outlook!Office.AppointmentCompose#body:member'
    summary: |-
      Obtiene un objeto que proporciona métodos para manipular el cuerpo de un elemento.

      \[[Conjunto de API: buzón de correo 1,1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)**: ReadItem

      **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/outlook/add-ins/#extension-points)**: Organizador de citas

      #### <a name="examples"></a>Ejemplos

      ```javascript
      // This example gets the body of the item as plain text.
      Office.context.mailbox.item.body.getAsync(
          "text",
          { asyncContext: "This is passed to the callback" },
          function callback(result) {
              // Do something with the result.
          });

      // The following is an example of an object that is passed as the result parameter to the callback function.
      {
          "value": "TEXT of whole body (including threads below)",
          "status": "succeeded",
          "asyncContext": "This is passed to the callback"
      }
      ```
    name: body
    fullName: body
    langs:
      - typeScript
    type: property
    syntax:
      content: 'body: Body;'
      return:
        type:
          - 'outlook!Office.Body:interface'
  - uid: 'outlook!Office.AppointmentCompose#categories:member'
    summary: |-
      Obtiene un objeto que proporciona métodos para administrar las categorías del elemento.

      \[[Conjunto de API: buzón de correo 1,8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)**: ReadItem

      **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/outlook/add-ins/#extension-points)**: Organizador de citas

      #### <a name="examples"></a>Ejemplos

      ```javascript
      Office.context.mailbox.item.categories.getAsync(function (asyncResult) {
          if (asyncResult.status === Office.AsyncResultStatus.Failed) {
              console.log("Action failed with error: " + asyncResult.error.message);
          } else {
              console.log("Categories: " + JSON.stringify(asyncResult.value));
          }
      });
      ```
    name: categories
    fullName: categories
    langs:
      - typeScript
    type: property
    syntax:
      content: 'categories: Categories;'
      return:
        type:
          - 'outlook!Office.Categories:interface'
  - uid: 'outlook!Office.AppointmentCompose#close:member(1)'
    summary: |-
      Cierra el elemento actual que se está redactando

      Los comportamientos del método Close dependen del estado actual del elemento que se está redactando. Si el elemento tiene cambios sin guardar, el cliente solicita al usuario que guarde, descarte o cierre la acción.

      En el cliente de escritorio de Outlook, si el mensaje es una respuesta en línea, el método Close no tiene ningún efecto.

      **Nota**: en Outlook en la web, si el elemento es una cita y se ha guardado anteriormente con saveAsync, se pide al usuario que guarde, descarte o cancele incluso si no se han producido cambios desde la última vez que se guardó el elemento.

      \[[Conjunto de API: buzón de correo 1,3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)**: restringido

      **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/outlook/add-ins/#extension-points)**: Organizador de citas
    name: close()
    fullName: close()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'close(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'outlook!Office.AppointmentCompose#end:member'
    summary: |-
      Obtiene o establece la fecha y la hora de finalización de la cita.

      La propiedad end es un objeto [Time](xref:outlook!Office.Time:interface) expresado como un valor de fecha y hora de la hora universal coordinada (UTC). Puede usar el método convertToLocalClientTime para convertir el valor de la propiedad end en la fecha y hora local del cliente.

      Cuando use el método Time. setAsync para establecer la hora de finalización, debe usar el método convertToUtcClientTime para convertir la hora local del cliente en un valor UTC para el servidor.
    remarks: |-
      **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)**: ReadItem

      **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/outlook/add-ins/#extension-points)**: Organizador de citas

      #### <a name="examples"></a>Ejemplos

      ```javascript
      // The following example sets the end time of an appointment in compose mode by
      // using the `setAsync` method of the `Time` object.
      var endTime = new Date("3/14/2015");
      var options = {
          // Pass information that can be used in the callback.
          asyncContext: {verb: "Set"}
      };
      Office.context.mailbox.item.end.setAsync(endTime, options, function(result) {
          if (result.error) {
              console.debug(result.error);
          } else {
              // Access the asyncContext that was passed to the setAsync function.
              console.debug("End Time " + result.asyncContext.verb);
          }
      });
      ```
    name: end
    fullName: end
    langs:
      - typeScript
    type: property
    syntax:
      content: 'end: Time;'
      return:
        type:
          - 'outlook!Office.Time:interface'
  - uid: 'outlook!Office.AppointmentCompose#enhancedLocation:member'
    summary: |-
      Obtiene o establece las ubicaciones de la cita. La `enhancedLocation` propiedad devuelve un objeto [EnhancedLocation](xref:outlook!Office.EnhancedLocation:interface) que proporciona métodos para obtener, quitar o agregar ubicaciones en un elemento.

      \[[Conjunto de API: buzón de correo 1,8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)**: ReadItem

      **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/outlook/add-ins/#extension-points)**: Organizador de citas

      #### <a name="examples"></a>Ejemplos

      ```javascript
      var locations = [
          {
              "id": "Contoso",
              "type": Office.MailboxEnums.LocationType.Custom
          }
      ];
      Office.context.mailbox.item.enhancedLocation.addAsync(locations);

      Office.context.mailbox.item.enhancedLocation.getAsync(callbackFunction);

      function callbackFunction(asyncResult) {
          asyncResult.value.forEach(function (place) {
              console.log("Display name: " + place.displayName);
              console.log("Type: " + place.locationIdentifier.type);
              if (place.locationIdentifier.type === Office.MailboxEnums.LocationType.Room) {
                  console.log("Email address: " + place.emailAddress);
              }
          });
      }
      ```
      ```javascript
      Office.context.mailbox.item.enhancedLocation.getAsync(callbackFunction);

      function callbackFunction(asyncResult) {
          asyncResult.value.forEach(function (currentValue) {
              Office.context.mailbox.item.enhancedLocation.removeAsync([currentValue.locationIdentifier]);
          });
      }
      ```
    name: enhancedLocation
    fullName: enhancedLocation
    langs:
      - typeScript
    type: property
    syntax:
      content: 'enhancedLocation: EnhancedLocation;'
      return:
        type:
          - 'outlook!Office.EnhancedLocation:interface'
  - uid: 'outlook!Office.AppointmentCompose#getAttachmentContentAsync:member(1)'
    summary: |-
      Obtiene datos adjuntos de un mensaje o cita y los devuelve como un objeto **AttachmentContent** .

      El `getAttachmentContentAsync` método obtiene los datos adjuntos con el identificador especificado del elemento. Como práctica recomendada, debe usar el identificador para recuperar datos adjuntos en la misma sesión que identificadores se recuperaron con la `getAttachmentsAsync` llamada o `item.attachments` . En Outlook en la Web y dispositivos móviles, el identificador de datos adjuntos solo es válido en la misma sesión. Una sesión es superior a cuando el usuario cierra la aplicación o si el usuario comienza a redactar un formulario en línea y, a continuación, el formulario continúa en una ventana independiente.

      \[[Conjunto de API: buzón de correo 1,8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)**: ReadItem

      **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/outlook/add-ins/#extension-points)**: Organizador de citas

      **Errores**:

      - InvalidAttachmentId: el identificador de datos adjuntos no existe.

      #### <a name="examples"></a>Ejemplos

      ```javascript
      var item = Office.context.mailbox.item;
      var options = {asyncContext: {currentItem: item}};
      item.getAttachmentsAsync(options, callback);

      function callback(result) {
          if (result.value.length > 0) {
              for (i = 0 ; i < result.value.length ; i++) {
                  result.asyncContext.currentItem.getAttachmentContentAsync(result.value[i].id, handleAttachmentsCallback);
              }
          }
      }

      function handleAttachmentsCallback(result) {
          // Parse string to be a url, an .eml file, a base64-encoded string, or an .icalendar file.
          switch (result.value.format) {
              case Office.MailboxEnums.AttachmentContentFormat.Base64:
                  // Handle file attachment.
                  break;
              case Office.MailboxEnums.AttachmentContentFormat.Eml:
                  // Handle email item attachment.
                  break;
              case Office.MailboxEnums.AttachmentContentFormat.ICalendar:
                  // Handle .icalender attachment.
                  break;
              case Office.MailboxEnums.AttachmentContentFormat.Url:
                  // Handle cloud attachment.
                  break;
              default:
                  // Handle attachment formats that are not supported.
          }
      }
      ```
    name: 'getAttachmentContentAsync(attachmentId, options, callback)'
    fullName: 'getAttachmentContentAsync(attachmentId, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getAttachmentContentAsync(attachmentId: string, options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<AttachmentContent>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: attachmentId
          description: El identificador de los datos adjuntos que desea obtener.
          type:
            - string
        - id: options
          description: 'Opcional. Un objeto literal que contiene una o más de las siguientes propiedades. asyncContext: los desarrolladores pueden proporcionar cualquier objeto al que quieran tener acceso en el método de devolución de llamada.'
          type:
            - 'outlook!Office.AsyncContextOptions:interface'
        - id: callback
          description: 'Opcional. Cuando el método finaliza, la función que se pasa en el parámetro callback se llama con un único parámetro, asyncResult, que es un objeto Office. AsyncResult. Si se produce un error en la llamada, la propiedad asyncResult. error contendrá y código de error con el motivo del error.'
          type:
            - 'outlook!Office.AppointmentCompose#getAttachmentContentAsync~0:complex'
  - uid: 'outlook!Office.AppointmentCompose#getAttachmentContentAsync:member(2)'
    summary: |-
      Obtiene datos adjuntos de un mensaje o cita y los devuelve como un objeto **AttachmentContent** .

      El `getAttachmentContentAsync` método obtiene los datos adjuntos con el identificador especificado del elemento. Como práctica recomendada, debe usar el identificador para recuperar datos adjuntos en la misma sesión que identificadores se recuperaron con la `getAttachmentsAsync` llamada o `item.attachments` . En Outlook en la Web y dispositivos móviles, el identificador de datos adjuntos solo es válido en la misma sesión. Una sesión es superior a cuando el usuario cierra la aplicación o si el usuario comienza a redactar un formulario en línea y, a continuación, el formulario continúa en una ventana independiente.

      \[[Conjunto de API: buzón de correo 1,8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)**: ReadItem

      **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/outlook/add-ins/#extension-points)**: Organizador de citas

      **Errores**:

      - InvalidAttachmentId: el identificador de datos adjuntos no existe.
    name: 'getAttachmentContentAsync(attachmentId, callback)'
    fullName: 'getAttachmentContentAsync(attachmentId, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getAttachmentContentAsync(attachmentId: string, callback?: (asyncResult: Office.AsyncResult<AttachmentContent>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: attachmentId
          description: El identificador de los datos adjuntos que desea obtener.
          type:
            - string
        - id: callback
          description: 'Opcional. Cuando el método finaliza, la función que se pasa en el parámetro callback se llama con un único parámetro, asyncResult, que es un objeto Office. AsyncResult. Si se produce un error en la llamada, la propiedad asyncResult. error contendrá y código de error con el motivo del error.'
          type:
            - 'outlook!Office.AppointmentCompose#getAttachmentContentAsync~1:complex'
  - uid: 'outlook!Office.AppointmentCompose#getAttachmentsAsync:member(1)'
    summary: |-
      Obtiene los datos adjuntos del elemento como una matriz.

      \[[Conjunto de API: buzón de correo 1,8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)**: ReadItem

      **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/outlook/add-ins/#extension-points)**: Organizador de citas
    name: 'getAttachmentsAsync(options, callback)'
    fullName: 'getAttachmentsAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getAttachmentsAsync(options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<AttachmentDetails[]>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: 'Opcional. Un objeto literal que contiene una o más de las siguientes propiedades. asyncContext: los desarrolladores pueden proporcionar cualquier objeto al que quieran tener acceso en el método de devolución de llamada.'
          type:
            - 'outlook!Office.AsyncContextOptions:interface'
        - id: callback
          description: 'Opcional. Cuando el método finaliza, la función que se pasa en el parámetro callback se llama con un único parámetro de tipo Office. AsyncResult. Si se produce un error en la llamada, la propiedad asyncResult. error contendrá y código de error con el motivo del error.'
          type:
            - 'outlook!Office.AppointmentCompose#getAttachmentsAsync~0:complex'
  - uid: 'outlook!Office.AppointmentCompose#getAttachmentsAsync:member(2)'
    summary: |-
      Obtiene los datos adjuntos del elemento como una matriz.

      \[[Conjunto de API: buzón de correo 1,8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)**: ReadItem

      **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/outlook/add-ins/#extension-points)**: Organizador de citas

      #### <a name="examples"></a>Ejemplos

      ```javascript
      var item = Office.context.mailbox.item;
      var outputString = "";
      item.getAttachmentsAsync(callback);

      function callback(result) {
          if (result.value.length > 0) {
              for (i = 0 ; i < result.value.length ; i++) {
                  var attachment = result.value [i];
                  outputString += "<BR>" + i + ". Name: ";
                  outputString += attachment.name;
                  outputString += "<BR>ID: " + attachment.id;
                  outputString += "<BR>contentType: " + attachment.contentType;
                  outputString += "<BR>size: " + attachment.size;
                  outputString += "<BR>attachmentType: " + attachment.attachmentType;
                  outputString += "<BR>isInline: " + attachment.isInline;
              }
          }
      }
      ```
    name: getAttachmentsAsync(callback)
    fullName: getAttachmentsAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getAttachmentsAsync(callback?: (asyncResult: Office.AsyncResult<AttachmentDetails[]>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: 'Opcional. Cuando el método finaliza, la función que se pasa en el parámetro callback se llama con un único parámetro de tipo Office. AsyncResult. Si se produce un error en la llamada, la propiedad asyncResult. error contendrá y código de error con el motivo del error.'
          type:
            - 'outlook!Office.AppointmentCompose#getAttachmentsAsync~1:complex'
  - uid: 'outlook!Office.AppointmentCompose#getItemIdAsync:member(1)'
    summary: |-
      Obtiene de forma asíncrona el identificador de un elemento guardado.

      Cuando se invoca, este método devuelve el identificador de elemento a través del método de devolución de llamada.

      **Nota**: Si el complemento llama `getItemIdAsync` a un elemento en el modo de redacción (por ejemplo, para obtener un `itemId` para usarlo con EWS o la API de REST), tenga en cuenta que cuando Outlook está en modo de caché, puede tardar algún tiempo antes de que el elemento se sincronice con el servidor. Hasta que el elemento se sincronice, el `itemId` no se reconoce y el uso devuelve un error.

      \[[Conjunto de API: buzón de correo 1,8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)**: ReadItem

      **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/outlook/add-ins/#extension-points)**: Organizador de citas

      **Errores**:

      - `ItemNotSaved`<!-- -->: El identificador no se puede recuperar hasta que se guarde el elemento.
    name: 'getItemIdAsync(options, callback)'
    fullName: 'getItemIdAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemIdAsync(options: Office.AsyncContextOptions, callback: (asyncResult: Office.AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: 'Un objeto literal que contiene una o más de las siguientes propiedades. asyncContext: los desarrolladores pueden proporcionar cualquier objeto al que quieran tener acceso en el método de devolución de llamada.'
          type:
            - 'outlook!Office.AsyncContextOptions:interface'
        - id: callback
          description: 'Cuando el método finaliza, la función que se pasa en el parámetro callback se llama con un único parámetro de tipo Office. AsyncResult.'
          type:
            - 'outlook!Office.AppointmentCompose#getItemIdAsync~0:complex'
  - uid: 'outlook!Office.AppointmentCompose#getItemIdAsync:member(2)'
    summary: |-
      Obtiene de forma asíncrona el identificador de un elemento guardado.

      Cuando se invoca, este método devuelve el identificador de elemento a través del método de devolución de llamada.

      **Nota**: Si el complemento llama `getItemIdAsync` a un elemento en el modo de redacción (por ejemplo, para obtener un `itemId` para usarlo con EWS o la API de REST), tenga en cuenta que cuando Outlook está en modo de caché, puede tardar algún tiempo antes de que el elemento se sincronice con el servidor. Hasta que el elemento se sincronice, el `itemId` no se reconoce y el uso devuelve un error.

      \[[Conjunto de API: buzón de correo 1,8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)**: ReadItem

      **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/outlook/add-ins/#extension-points)**: Organizador de citas

      **Errores**:

      - `ItemNotSaved`<!-- -->: El identificador no se puede recuperar hasta que se guarde el elemento.
    name: getItemIdAsync(callback)
    fullName: getItemIdAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemIdAsync(callback: (asyncResult: Office.AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: 'Cuando el método finaliza, la función que se pasa en el parámetro callback se llama con un único parámetro de tipo Office. AsyncResult.'
          type:
            - 'outlook!Office.AppointmentCompose#getItemIdAsync~1:complex'
  - uid: 'outlook!Office.AppointmentCompose#getSelectedDataAsync:member(1)'
    summary: |-
      Devuelve asincrónicamente datos seleccionados desde el asunto o el cuerpo de un mensaje.

      Si no hay ninguna selección pero el cursor está en el cuerpo o el asunto, el método devuelve una cadena vacía para los datos seleccionados. Si se selecciona un campo que no sea el asunto o el cuerpo, el método devuelve el error InvalidSelection.

      Para obtener acceso a los datos seleccionados desde el método de devolución de llamada, llame a asyncResult.value.data. Para obtener acceso a la propiedad de origen de la que proviene la selección, llame a asyncResult. Value. sourceProperty, que será el cuerpo o el asunto.

      \[[Conjunto de API: buzón de correo 1,2](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)**: ReadItem

      **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/outlook/add-ins/#extension-points)**: Organizador de citas

      #### <a name="examples"></a>Ejemplos

      ```javascript
      // Get selected data.
      Office.initialize = function () {
          Office.context.mailbox.item.getSelectedDataAsync(Office.CoercionType.Text, {}, getCallback);
      };

      function getCallback(asyncResult) {
          var text = asyncResult.value.data;
          var prop = asyncResult.value.sourceProperty;

          console.log("Selected text in " + prop + ": " + text);
      }
      ```
    name: 'getSelectedDataAsync(coercionType, options, callback)'
    fullName: 'getSelectedDataAsync(coercionType, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSelectedDataAsync(coercionType: Office.CoercionType | string, options: Office.AsyncContextOptions, callback: (asyncResult: Office.AsyncResult<any>) => void): void;'
      return:
        type:
          - void
        description: Los datos seleccionados como cadena con formato determinado por coercionType.
      parameters:
        - id: coercionType
          description: 'Solicita un formato para los datos. Si es Texto, el método devuelve el texto sin formato como cadena, quitando toda etiqueta HTML que hubiera. Si es HTML, el método devuelve el texto seleccionado, ya sea texto sin formato o HTML.'
          type:
            - 'outlook!Office.AppointmentCompose#getSelectedDataAsync~0:complex'
        - id: options
          description: 'Un objeto literal que contiene una o más de las siguientes propiedades. asyncContext: los desarrolladores pueden proporcionar cualquier objeto al que quieran tener acceso en el método de devolución de llamada.'
          type:
            - 'outlook!Office.AsyncContextOptions:interface'
        - id: callback
          description: 'Cuando el método finaliza, la función que se pasa en el parámetro callback se llama con un único parámetro de tipo Office. AsyncResult.'
          type:
            - 'outlook!Office.AppointmentCompose#getSelectedDataAsync~1:complex'
  - uid: 'outlook!Office.AppointmentCompose#getSelectedDataAsync:member(2)'
    summary: |-
      Devuelve asincrónicamente datos seleccionados desde el asunto o el cuerpo de un mensaje.

      Si no hay ninguna selección pero el cursor está en el cuerpo o el asunto, el método devuelve una cadena vacía para los datos seleccionados. Si se selecciona un campo que no sea el asunto o el cuerpo, el método devuelve el error InvalidSelection.

      Para obtener acceso a los datos seleccionados desde el método de devolución de llamada, llame a asyncResult.value.data. Para obtener acceso a la propiedad de origen de la que proviene la selección, llame a asyncResult. Value. sourceProperty, que será el cuerpo o el asunto.

      \[[Conjunto de API: buzón de correo 1,2](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)**: ReadItem

      **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/outlook/add-ins/#extension-points)**: Organizador de citas
    name: 'getSelectedDataAsync(coercionType, callback)'
    fullName: 'getSelectedDataAsync(coercionType, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSelectedDataAsync(coercionType: Office.CoercionType | string, callback: (asyncResult: Office.AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: Los datos seleccionados como cadena con formato determinado por coercionType.
      parameters:
        - id: coercionType
          description: 'Solicita un formato para los datos. Si es Texto, el método devuelve el texto sin formato como cadena, quitando toda etiqueta HTML que hubiera. Si es HTML, el método devuelve el texto seleccionado, ya sea texto sin formato o HTML.'
          type:
            - 'outlook!Office.AppointmentCompose#getSelectedDataAsync~2:complex'
        - id: callback
          description: 'Cuando el método finaliza, la función que se pasa en el parámetro callback se llama con un único parámetro de tipo Office. AsyncResult.'
          type:
            - 'outlook!Office.AppointmentCompose#getSelectedDataAsync~3:complex'
  - uid: 'outlook!Office.AppointmentCompose#getSharedPropertiesAsync:member(1)'
    summary: |-
      Obtiene las propiedades de una cita o un mensaje en una carpeta compartida, calendario o buzón.

      **Nota**: este método no es compatible con Outlook en Mac, iOS o Android.

      \[[Conjunto de API: buzón de correo 1,8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)**: ReadItem

      **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/outlook/add-ins/#extension-points)**: Organizador de citas
    name: 'getSharedPropertiesAsync(options, callback)'
    fullName: 'getSharedPropertiesAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSharedPropertiesAsync(options: Office.AsyncContextOptions, callback: (asyncResult: Office.AsyncResult<SharedProperties>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: 'Un objeto literal que contiene una o más de las siguientes propiedades. asyncContext: los desarrolladores pueden proporcionar cualquier objeto al que quieran tener acceso en el método de devolución de llamada.'
          type:
            - 'outlook!Office.AsyncContextOptions:interface'
        - id: callback
          description: 'Cuando el método finaliza, la función que se pasa en el parámetro callback se llama con un único parámetro de tipo Office. AsyncResult. La `value` propiedad del resultado son las propiedades del elemento compartido.'
          type:
            - 'outlook!Office.AppointmentCompose#getSharedPropertiesAsync~0:complex'
  - uid: 'outlook!Office.AppointmentCompose#getSharedPropertiesAsync:member(2)'
    summary: |-
      Obtiene las propiedades de una cita o un mensaje en una carpeta compartida, calendario o buzón.

      **Nota**: este método no es compatible con Outlook en Mac, iOS o Android.

      \[[Conjunto de API: buzón de correo 1,8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)**: ReadItem

      **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/outlook/add-ins/#extension-points)**: Organizador de citas

      #### <a name="examples"></a>Ejemplos

      ```javascript
      Office.context.mailbox.item.getSharedPropertiesAsync(callback);

      function callback (asyncResult) {
          var context = asyncResult.context;
          var sharedProperties = asyncResult.value;
      }
      ```
    name: getSharedPropertiesAsync(callback)
    fullName: getSharedPropertiesAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSharedPropertiesAsync(callback: (asyncResult: Office.AsyncResult<SharedProperties>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: 'Cuando el método finaliza, la función que se pasa en el parámetro callback se llama con un único parámetro de tipo Office. AsyncResult. La `value` propiedad del resultado son las propiedades del elemento compartido.'
          type:
            - 'outlook!Office.AppointmentCompose#getSharedPropertiesAsync~1:complex'
  - uid: 'outlook!Office.AppointmentCompose#itemType:member'
    summary: |-
      Obtiene el tipo de elemento que representa una instancia.

      La propiedad itemType devuelve uno de los valores de enumeración de ItemType, lo que indica si la instancia de objeto de elemento es un mensaje o una cita.
    remarks: |-
      **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)**: ReadItem

      **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/outlook/add-ins/#extension-points)**: Organizador de citas

      #### <a name="examples"></a>Ejemplos

      ```javascript
      if (Office.context.mailbox.item.itemType === Office.MailboxEnums.ItemType.Appointment) {
          // Do something.
      } else {
          // Do something else.
      }
      ```
    name: itemType
    fullName: itemType
    langs:
      - typeScript
    type: property
    syntax:
      content: 'itemType: MailboxEnums.ItemType | string;'
      return:
        type:
          - 'outlook!Office.AppointmentCompose#itemType~0:complex'
  - uid: 'outlook!Office.AppointmentCompose#loadCustomPropertiesAsync:member(1)'
    summary: |-
      Carga de forma asincrónica las propiedades personalizadas de este complemento en el elemento seleccionado.

      Las propiedades personalizadas se almacenan como pares de clave/valor según la aplicación y el elemento. Este método devuelve un objeto CustomProperties en la devolución de llamada, que proporciona métodos para tener acceso a las propiedades personalizadas específicas del elemento actual y del complemento actual. Las propiedades personalizadas no están cifradas en el elemento, por lo que no debería usarse como almacenamiento seguro.

      Las propiedades personalizadas se proporcionan como un objeto CustomProperties en la propiedad asyncResult. Value. Este objeto puede usarse para obtener, establecer y quitar las propiedades personalizadas del elemento, así como para guardar los cambios en la propiedad personalizada que se vuelve a establecer en el servidor.
    remarks: |-
      **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)**: ReadItem

      **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/outlook/add-ins/#extension-points)**: Organizador de citas

      #### <a name="examples"></a>Ejemplos

      ```javascript
      // The following example shows how to use the loadCustomPropertiesAsync method
      // to asynchronously load custom properties that are specific to the current item.
      // The example also shows how to use the saveAsync method to save these properties
      // back to the server. After loading the custom properties, the example uses the
      // get method to read the custom property myProp, the set method to write the
      // custom property otherProp, and then finally calls the saveAsync method to save
      // the custom properties.
      Office.initialize = function () {
          // Checks for the DOM to load using the jQuery ready function.
          $(document).ready(function () {
              // After the DOM is loaded, add-in-specific code can run.
              var mailbox = Office.context.mailbox;
              mailbox.item.loadCustomPropertiesAsync(customPropsCallback);
          });
      };

      function customPropsCallback(asyncResult) {
          var customProps = asyncResult.value;
          var myProp = customProps.get("myProp");

          customProps.set("otherProp", "value");
          customProps.saveAsync(saveCallback);
      }

      function saveCallback(asyncResult) {
      }
      ```
    name: 'loadCustomPropertiesAsync(callback, userContext)'
    fullName: 'loadCustomPropertiesAsync(callback, userContext)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'loadCustomPropertiesAsync(callback: (asyncResult: Office.AsyncResult<CustomProperties>) => void, userContext?: any): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: 'Cuando el método finaliza, la función que se pasa en el parámetro callback se llama con un único parámetro de tipo Office. AsyncResult.'
          type:
            - 'outlook!Office.AppointmentCompose#loadCustomPropertiesAsync~0:complex'
        - id: userContext
          description: Opcional. Los desarrolladores pueden proporcionar cualquier objeto al que quieran obtener acceso en la función de devolución de llamada. Se puede obtener acceso a este objeto mediante la propiedad asyncResult. asyncContext en la función de devolución de llamada.
          type:
            - any
  - uid: 'outlook!Office.AppointmentCompose#location:member'
    summary: 'Obtiene o establece la ubicación de una cita. La propiedad Location devuelve un objeto [Location](xref:outlook!Office.Location:interface) que proporciona métodos que se usan para obtener y establecer la ubicación de la cita.'
    remarks: |-
      **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)**: ReadItem

      **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/outlook/add-ins/#extension-points)**: Organizador de citas

      #### <a name="examples"></a>Ejemplos

      ```javascript
      var userContext = { value : 1 };
      Office.context.mailbox.item.location.getAsync( { context: userContext}, callback);

      function callback(asyncResult) {
          var context = asyncResult.context;
          var location = asyncResult.value;
      }
      ```
    name: location
    fullName: location
    langs:
      - typeScript
    type: property
    syntax:
      content: 'location: Location;'
      return:
        type:
          - 'outlook!Office.Location:interface'
  - uid: 'outlook!Office.AppointmentCompose#notificationMessages:member'
    summary: |-
      Obtiene los mensajes de notificación de un elemento.

      \[[Conjunto de API: buzón de correo 1,3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)**: ReadItem

      **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/outlook/add-ins/#extension-points)**: Organizador de citas

      #### <a name="examples"></a>Ejemplos

      ```javascript
      // Get all notifications.
      Office.context.mailbox.item.notificationMessages.getAllAsync(
          function (asyncResult) {
              console.log(JSON.stringify(asyncResult));
          }
      );
      ```
    name: notificationMessages
    fullName: notificationMessages
    langs:
      - typeScript
    type: property
    syntax:
      content: 'notificationMessages: NotificationMessages;'
      return:
        type:
          - 'outlook!Office.NotificationMessages:interface'
  - uid: 'outlook!Office.AppointmentCompose#optionalAttendees:member'
    summary: |-
      Proporciona acceso a los asistentes opcionales de un evento. El tipo de objeto y el nivel de acceso dependen del modo del elemento actual.

      La propiedad optionalAttendees devuelve un objeto [Recipients](xref:outlook!Office.Recipients:interface) que proporciona métodos para obtener o actualizar los asistentes opcionales para una reunión. Por defecto, la colección está limitada a un máximo de 100 miembros. Sin embargo, en Windows y Mac, se aplican los siguientes límites.

      - Obtenga un máximo de 500 miembros.

      - Establezca un máximo de 100 miembros por llamada, hasta un total de 500 miembros.
    remarks: |-
      **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)**: ReadItem

      **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/outlook/add-ins/#extension-points)**: Organizador de citas

      #### <a name="examples"></a>Ejemplos

      ```javascript
      Office.context.mailbox.item.optionalAttendees.setAsync( ['alice@contoso.com', 'bob@contoso.com'] );
      Office.context.mailbox.item.optionalAttendees.addAsync( ['jason@contoso.com'] );
      Office.context.mailbox.item.optionalAttendees.getAsync(callback);

      function callback(asyncResult) {
          var arrayOfOptionalAttendeesRecipients = asyncResult.value;
      }
      ```
    name: optionalAttendees
    fullName: optionalAttendees
    langs:
      - typeScript
    type: property
    syntax:
      content: 'optionalAttendees: Recipients;'
      return:
        type:
          - 'outlook!Office.Recipients:interface'
  - uid: 'outlook!Office.AppointmentCompose#organizer:member'
    summary: |-
      Obtiene el organizador de la reunión especificada.

      La propiedad Organizer devuelve un objeto [Organizer](xref:outlook!Office.Organizer:interface) que proporciona un método para obtener el valor de organizador.

      \[[Conjunto de API: buzón de correo 1,7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)**: ReadItem

      **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/outlook/add-ins/#extension-points)**: Organizador de citas

      #### <a name="examples"></a>Ejemplos

      ```javascript
      Office.context.mailbox.item.organizer.getAsync(
          function(asyncResult) {
              console.log(JSON.stringify(asyncResult));
          }
      );
      ```
    name: organizer
    fullName: organizer
    langs:
      - typeScript
    type: property
    syntax:
      content: 'organizer: Organizer;'
      return:
        type:
          - 'outlook!Office.Organizer:interface'
  - uid: 'outlook!Office.AppointmentCompose#recurrence:member'
    summary: |-
      Obtiene o establece el patrón de periodicidad de una cita.

      La propiedad recurrence devuelve un objeto recurrence para las solicitudes de citas o reuniones periódicas si un elemento es una serie o una instancia de una serie. `null`se devuelve para citas únicas y convocatorias de reunión de citas únicas.

      **Nota**: las convocatorias de reunión tienen un valor ITEMCLASS de IPM. Schedule. Meeting. request.

      **Nota**: Si el objeto de periodicidad es null, indica que el objeto es una cita única o una convocatoria de reunión de una sola cita y no forma parte de una serie.

      \[[Conjunto de API: buzón de correo 1,7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)**: ReadItem

      **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/outlook/add-ins/#extension-points)**: Organizador de citas

      #### <a name="examples"></a>Ejemplos

      ```javascript
      // This example gets the Recurrence object of an appointment item.
      Office.context.mailbox.item.recurrence.getAsync(callback);

      function callback(asyncResult) {
          var context = asyncResult.context;
          var recurrence = asyncResult.value;
          if (!recurrence) {
              console.log("One-time appointment or meeting");
          } else {
              console.log(JSON.stringify(recurrence));
          }
      }

      // The following example shows the results of the getAsync call that retrieves the recurrence for a series.
      // NOTE: In this example, seriesTimeObject is a placeholder for the JSON representing the
      // recurrence.seriesTime property. You should use the SeriesTime object's methods to get the
      // recurrence date and time properties.
      Recurrence = {
          "recurrenceType": "weekly",
          "recurrenceProperties": {"interval": 2, "days": ["mon","thu","fri"], "firstDayOfWeek": "sun"},
          "seriesTime": {seriesTimeObject},
          "recurrenceTimeZone": {"name": "Pacific Standard Time", "offset": -480}
      }
      ```
    name: recurrence
    fullName: recurrence
    langs:
      - typeScript
    type: property
    syntax:
      content: 'recurrence: Recurrence;'
      return:
        type:
          - 'outlook!Office.Recurrence:interface'
  - uid: 'outlook!Office.AppointmentCompose#removeAttachmentAsync:member(1)'
    summary: |-
      Quita los datos adjuntos de un mensaje o cita.

      El método removeAttachmentAsync quita los datos adjuntos con el identificador especificado del elemento. Como práctica recomendada, debe usar el identificador de datos adjuntos para quitar datos adjuntos solo si la misma aplicación de correo ha agregado los datos adjuntos en la misma sesión. En Outlook en la Web y dispositivos móviles, el identificador de datos adjuntos solo es válido en la misma sesión. Una sesión es superior a cuando el usuario cierra la aplicación o si el usuario comienza a redactar un formulario en línea y, a continuación, el formulario continúa en una ventana independiente.

      \[[Conjunto de API: buzón de correo 1,1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)**: ReadWriteItem

      **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/outlook/add-ins/#extension-points)**: Organizador de citas

      **Errores**:

      - InvalidAttachmentId: el identificador de datos adjuntos no existe.

      #### <a name="examples"></a>Ejemplos

      ```javascript
      // The following code removes an attachment with an identifier of '0'.
      Office.context.mailbox.item.removeAttachmentAsync(
          '0',
          { asyncContext : null },
          function (asyncResult)
          {
              console.log(asyncResult.status);
          }
      );
      ```
    name: 'removeAttachmentAsync(attachmentId, options, callback)'
    fullName: 'removeAttachmentAsync(attachmentId, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeAttachmentAsync(attachmentId: string, options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: attachmentId
          description: El identificador de los datos adjuntos para quitar.
          type:
            - string
        - id: options
          description: 'Opcional. Un objeto literal que contiene una o más de las siguientes propiedades. asyncContext: los desarrolladores pueden proporcionar cualquier objeto al que quieran tener acceso en el método de devolución de llamada.'
          type:
            - 'outlook!Office.AsyncContextOptions:interface'
        - id: callback
          description: 'Opcional. Cuando el método finaliza, la función que se pasa en el parámetro callback se llama con un único parámetro de tipo Office. AsyncResult. Si se produce un error en la eliminación de los datos adjuntos, la propiedad asyncResult. error contendrá un código de error con el motivo del error.'
          type:
            - 'outlook!Office.AppointmentCompose#removeAttachmentAsync~0:complex'
  - uid: 'outlook!Office.AppointmentCompose#removeAttachmentAsync:member(2)'
    summary: |-
      Quita los datos adjuntos de un mensaje o cita.

      El método removeAttachmentAsync quita los datos adjuntos con el identificador especificado del elemento. Como práctica recomendada, debe usar el identificador de datos adjuntos para quitar datos adjuntos solo si la misma aplicación de correo ha agregado los datos adjuntos en la misma sesión. En Outlook en la Web y dispositivos móviles, el identificador de datos adjuntos solo es válido en la misma sesión. Una sesión es superior a cuando el usuario cierra la aplicación o si el usuario comienza a redactar un formulario en línea y, a continuación, el formulario continúa en una ventana independiente.

      \[[Conjunto de API: buzón de correo 1,1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)**: ReadWriteItem

      **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/outlook/add-ins/#extension-points)**: Organizador de citas

      **Errores**:

      - InvalidAttachmentId: el identificador de datos adjuntos no existe.
    name: 'removeAttachmentAsync(attachmentId, callback)'
    fullName: 'removeAttachmentAsync(attachmentId, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeAttachmentAsync(attachmentId: string, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: attachmentId
          description: El identificador de los datos adjuntos para quitar.
          type:
            - string
        - id: callback
          description: 'Opcional. Cuando el método finaliza, la función que se pasa en el parámetro callback se llama con un único parámetro de tipo Office. AsyncResult. Si se produce un error en la eliminación de los datos adjuntos, la propiedad asyncResult. error contendrá un código de error con el motivo del error.'
          type:
            - 'outlook!Office.AppointmentCompose#removeAttachmentAsync~1:complex'
  - uid: 'outlook!Office.AppointmentCompose#removeHandlerAsync:member(1)'
    summary: |-
      Elimina el controlador de eventos de un tpo de evento admitido. **Nota**: los eventos solo están disponibles con el panel de tareas.

      Para ver qué tipos de eventos son compatibles, `Office.EventType` consulte para obtener más información.

      \[[Conjunto de API: buzón de correo 1,7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)**: ReadItem

      **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/outlook/add-ins/#extension-points)**: Organizador de citas
    name: 'removeHandlerAsync(eventType, options, callback)'
    fullName: 'removeHandlerAsync(eventType, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeHandlerAsync(eventType: Office.EventType | string, options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: El evento que debe revocar el controlador.
          type:
            - 'outlook!Office.AppointmentCompose#removeHandlerAsync~0:complex'
        - id: options
          description: 'Opcional. Un objeto literal que contiene una o más de las siguientes propiedades. asyncContext: los desarrolladores pueden proporcionar cualquier objeto al que quieran tener acceso en el método de devolución de llamada.'
          type:
            - 'outlook!Office.AsyncContextOptions:interface'
        - id: callback
          description: 'Opcional. Cuando el método finaliza, la función que se pasa en el parámetro callback se llama con un único parámetro, asyncResult, que es un objeto Office. AsyncResult.'
          type:
            - 'outlook!Office.AppointmentCompose#removeHandlerAsync~1:complex'
  - uid: 'outlook!Office.AppointmentCompose#removeHandlerAsync:member(2)'
    summary: |-
      Elimina el controlador de eventos de un tpo de evento admitido. **Nota**: los eventos solo están disponibles con el panel de tareas.

      Para ver qué tipos de eventos son compatibles, `Office.EventType` consulte para obtener más información.

      \[[Conjunto de API: buzón de correo 1,7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)**: ReadItem

      **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/outlook/add-ins/#extension-points)**: Organizador de citas
    name: 'removeHandlerAsync(eventType, callback)'
    fullName: 'removeHandlerAsync(eventType, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeHandlerAsync(eventType: Office.EventType | string, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: El evento que debe revocar el controlador.
          type:
            - 'outlook!Office.AppointmentCompose#removeHandlerAsync~2:complex'
        - id: callback
          description: 'Opcional. Cuando el método finaliza, la función que se pasa en el parámetro callback se llama con un único parámetro, asyncResult, que es un objeto Office. AsyncResult.'
          type:
            - 'outlook!Office.AppointmentCompose#removeHandlerAsync~3:complex'
  - uid: 'outlook!Office.AppointmentCompose#requiredAttendees:member'
    summary: |-
      Proporciona acceso a los asistentes necesarios de un evento. El tipo de objeto y el nivel de acceso dependen del modo del elemento actual.

      La propiedad requiredAttendees devuelve un objeto [Recipients](xref:outlook!Office.Recipients:interface) que proporciona métodos para obtener o actualizar los asistentes necesarios para una reunión. Por defecto, la colección está limitada a un máximo de 100 miembros. Sin embargo, en Windows y Mac, se aplican los siguientes límites.

      - Obtenga un máximo de 500 miembros.

      - Establezca un máximo de 100 miembros por llamada, hasta un total de 500 miembros.
    remarks: |-
      **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)**: ReadItem

      **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/outlook/add-ins/#extension-points)**: Organizador de citas

      #### <a name="examples"></a>Ejemplos

      ```javascript
      Office.context.mailbox.item.requiredAttendees.setAsync( ['alice@contoso.com', 'bob@contoso.com'] );
      Office.context.mailbox.item.requiredAttendees.addAsync( ['jason@contoso.com'] );
      Office.context.mailbox.item.requiredAttendees.getAsync(callback);

      function callback(asyncResult) {
          var arrayOfRequiredAttendeesRecipients = asyncResult.value;
          console.log(JSON.stringify(arrayOfRequiredAttendeesRecipients));
      }
      ```
    name: requiredAttendees
    fullName: requiredAttendees
    langs:
      - typeScript
    type: property
    syntax:
      content: 'requiredAttendees: Recipients;'
      return:
        type:
          - 'outlook!Office.Recipients:interface'
  - uid: 'outlook!Office.AppointmentCompose#saveAsync:member(1)'
    summary: |-
      Guarda un elemento de forma asincrónica.

      Cuando se invoca, este método guarda el mensaje actual como un borrador y devuelve el identificador de elemento a través del método de devolución de llamada. En el modo en línea de Outlook o en Outlook en la web, el elemento se guarda en el servidor. En modo en caché de Outlook, se guarda el elemento en la caché local.

      Dado que las citas no tienen el estado de borrador, si se llama a saveAsync en una cita en modo de redacción, el elemento se guardará como una cita normal en el calendario del usuario. Para las citas nuevas que no se han guardado antes, no se enviará ninguna invitación. Al guardar una cita existente, se enviará una actualización a los asistentes agregados o eliminados.

      **Nota**: Si el complemento llama a saveAsync en un elemento en modo de redacción para obtener un Itemid para usar con EWS o la API de REST, tenga en cuenta que cuando Outlook está en modo de almacenamiento en caché, puede tardar algún tiempo antes de que el elemento se sincronice realmente con el servidor. Hasta que el elemento se sincronice, al usar itemId se devolverá un error.

      **Nota**: los siguientes clientes tienen un comportamiento diferente para saveAsync en las citas en el modo de redacción:

      - Outlook para Mac no permite guardar una reunión. El método saveAsync produce un error cuando se llama desde una reunión en el modo de redacción. Consulte [No se puede guardar una reunión como borrador en Outlook para Mac mediante la API de Office JS](https://support.microsoft.com/help/4505745) para obtener una solución alternativa.

      - Outlook en la web siempre envía una invitación o actualización cuando se llama al método saveAsync en una cita en el modo redacción.

      \[[Conjunto de API: buzón de correo 1,3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)**: ReadWriteItem

      **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/outlook/add-ins/#extension-points)**: Organizador de citas

      **Errores**:

      - InvalidAttachmentId: el identificador de datos adjuntos no existe.
    name: 'saveAsync(options, callback)'
    fullName: 'saveAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'saveAsync(options: Office.AsyncContextOptions, callback: (asyncResult: Office.AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: 'Un objeto literal que contiene una o más de las siguientes propiedades. asyncContext: los desarrolladores pueden proporcionar cualquier objeto al que quieran tener acceso en el método de devolución de llamada.'
          type:
            - 'outlook!Office.AsyncContextOptions:interface'
        - id: callback
          description: 'Cuando el método finaliza, la función que se pasa en el parámetro callback se llama con un único parámetro de tipo Office. AsyncResult.'
          type:
            - 'outlook!Office.AppointmentCompose#saveAsync~0:complex'
  - uid: 'outlook!Office.AppointmentCompose#saveAsync:member(2)'
    summary: |-
      Guarda un elemento de forma asincrónica.

      Cuando se invoca, este método guarda el mensaje actual como un borrador y devuelve el identificador de elemento a través del método de devolución de llamada. En el modo en línea de Outlook o en Outlook en la web, el elemento se guarda en el servidor. En modo en caché de Outlook, se guarda el elemento en la caché local.

      Dado que las citas no tienen el estado de borrador, si se llama a saveAsync en una cita en modo de redacción, el elemento se guardará como una cita normal en el calendario del usuario. Para las citas nuevas que no se han guardado antes, no se enviará ninguna invitación. Al guardar una cita existente, se enviará una actualización a los asistentes agregados o eliminados.

      **Nota**: Si el complemento llama a saveAsync en un elemento en modo de redacción para obtener un Itemid para usar con EWS o la API de REST, tenga en cuenta que cuando Outlook está en modo de almacenamiento en caché, puede tardar algún tiempo antes de que el elemento se sincronice realmente con el servidor. Hasta que el elemento se sincronice, al usar itemId se devolverá un error.

      **Nota**: los siguientes clientes tienen un comportamiento diferente para saveAsync en las citas en el modo de redacción:

      - Outlook para Mac no permite guardar una reunión. El método saveAsync produce un error cuando se llama desde una reunión en el modo de redacción. Consulte [No se puede guardar una reunión como borrador en Outlook para Mac mediante la API de Office JS](https://support.microsoft.com/help/4505745) para obtener una solución alternativa.

      - Outlook en la web siempre envía una invitación o actualización cuando se llama al método saveAsync en una cita en el modo redacción.

      \[[Conjunto de API: buzón de correo 1,3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)**: ReadWriteItem

      **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/outlook/add-ins/#extension-points)**: Organizador de citas

      **Errores**:

      - InvalidAttachmentId: el identificador de datos adjuntos no existe.

      #### <a name="examples"></a>Ejemplos

      ```javascript
      Office.context.mailbox.item.saveAsync(
          function callback(result) {
              // Process the result.
          });

      // The following is an example of the
      // `result` parameter passed to the
      // callback function. The `value`
      // property contains the item ID of
      // the item.
      {
          "value": "AAMkADI5...AAA=",
          "status": "succeeded"
      }
      ```
    name: saveAsync(callback)
    fullName: saveAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'saveAsync(callback: (asyncResult: Office.AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: 'Cuando el método finaliza, la función que se pasa en el parámetro callback se llama con un único parámetro de tipo Office. AsyncResult.'
          type:
            - 'outlook!Office.AppointmentCompose#saveAsync~1:complex'
  - uid: 'outlook!Office.AppointmentCompose#seriesId:member'
    summary: |-
      Obtiene el identificador de la serie a la que pertenece una instancia.

      En los clientes de Outlook en la web y de escritorio, seriesId devuelve el identificador de los servicios web Exchange (EWS) del elemento primario (serie) al que pertenece este elemento. Sin embargo, en iOS y Android, seriesId devuelve el identificador de REST del elemento primario.

      **Nota**: el identificador devuelto por la propiedad seriesId es el mismo que el identificador de elemento de servicios web Exchange. La propiedad seriesId no es idéntica a los identificadores de Outlook usados por la API de REST de Outlook. Para realizar llamadas API de REST con este valor, hay que convertirlo con Office.context.mailbox.convertToRestId. Para obtener más información, vea [usar las API de REST de Outlook desde un complemento de Outlook](https://docs.microsoft.com/outlook/add-ins/use-rest-api) .<!-- -->.

      La propiedad seriesId devuelve null para los elementos que no tienen elementos primarios, como citas únicas, elementos de serie o convocatorias de reunión, y devuelve undefined para cualquier otro elemento que no sea una solicitud de reunión.

      \[[Conjunto de API: buzón de correo 1,7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)**: ReadItem

      **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/outlook/add-ins/#extension-points)**: Organizador de citas

      #### <a name="examples"></a>Ejemplos

      ```javascript
      var seriesId = Office.context.mailbox.item.seriesId;

      // The seriesId property returns null for items that do
      // not have parent items (such as single appointments,
      // series items, or meeting requests) and returns
      // undefined for messages that are not meeting requests.
      var isSeriesInstance = (seriesId != null);
      console.log("SeriesId is " + seriesId 
          + " and isSeriesInstance is " + isSeriesInstance);
      ```
    name: seriesId
    fullName: seriesId
    langs:
      - typeScript
    type: property
    syntax:
      content: 'seriesId: string;'
      return:
        type:
          - string
  - uid: 'outlook!Office.AppointmentCompose#setSelectedDataAsync:member(1)'
    summary: |-
      Inserta asincrónicamente datos en el cuerpo o el asunto de un mensaje.

      El método setSelectedDataAsync inserta la cadena especificada en la ubicación del cursor en el asunto o el cuerpo del elemento, o bien, si se selecciona texto en el editor, reemplaza el texto seleccionado. Si el cursor no está en el campo Body o Subject, se devuelve un error. Después de insertarlo, el cursor se coloca al final del contenido insertado.

      \[[Conjunto de API: buzón de correo 1,2](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)**: ReadWriteItem

      **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/outlook/add-ins/#extension-points)**: Organizador de citas

      **Errores**:

      - InvalidAttachmentId: el identificador de datos adjuntos no existe.

      #### <a name="examples"></a>Ejemplos

      ```javascript
      Office.context.mailbox.item.setSelectedDataAsync("<b>Hello World!</b>", { coercionType : "html" });
      ```
    name: 'setSelectedDataAsync(data, options, callback)'
    fullName: 'setSelectedDataAsync(data, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setSelectedDataAsync(data: string, options?: Office.AsyncContextOptions & CoercionTypeOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: data
          description: 'Datos que se van a insertar. Los datos no deben superar 1.000.000 de caracteres. Si se pasan más de 1.000.000 de caracteres, se produce una excepción ArgumentOutOfRange.'
          type:
            - string
        - id: options
          description: 'Opcional. Un objeto literal que contiene una o más de las siguientes propiedades. asyncContext: los desarrolladores pueden proporcionar cualquier objeto al que quieran tener acceso en el método de devolución de llamada. coercionType: si Text, el estilo actual se aplica en Outlook en la web y Windows. Si el campo es un editor de HTML, se insertan solo los datos de texto, aunque los datos sean HTML. Si HTML y el campo admiten HTML (el asunto no), el estilo actual se aplica en Outlook en la web y el estilo predeterminado se aplica en los clientes de Outlook en escritorio. Si el campo es un campo de texto, se devuelve un error InvalidDataFormat. Si no se estableció coercionType, el resultado depende del campo: si el campo es HTML, se usa HTML; si el campo es de texto, se usa texto sin formato.'
          type:
            - 'outlook!Office.AppointmentCompose#setSelectedDataAsync~0:complex'
        - id: callback
          description: 'Opcional. Cuando el método finaliza, la función que se pasa en el parámetro callback se llama con un único parámetro de tipo Office. AsyncResult.'
          type:
            - 'outlook!Office.AppointmentCompose#setSelectedDataAsync~1:complex'
  - uid: 'outlook!Office.AppointmentCompose#setSelectedDataAsync:member(2)'
    summary: |-
      Inserta asincrónicamente datos en el cuerpo o el asunto de un mensaje.

      El método setSelectedDataAsync inserta la cadena especificada en la ubicación del cursor en el asunto o el cuerpo del elemento, o bien, si se selecciona texto en el editor, reemplaza el texto seleccionado. Si el cursor no está en el campo Body o Subject, se devuelve un error. Después de insertarlo, el cursor se coloca al final del contenido insertado.

      \[[Conjunto de API: buzón de correo 1,2](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)**: ReadWriteItem

      **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/outlook/add-ins/#extension-points)**: Organizador de citas

      **Errores**:

      - InvalidAttachmentId: el identificador de datos adjuntos no existe.

      #### <a name="examples"></a>Ejemplos

      ```javascript
      Office.context.mailbox.item.setSelectedDataAsync("Hello World!");
      ```
    name: 'setSelectedDataAsync(data, callback)'
    fullName: 'setSelectedDataAsync(data, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setSelectedDataAsync(data: string, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: data
          description: 'Datos que se van a insertar. Los datos no deben superar 1.000.000 de caracteres. Si se pasan más de 1.000.000 de caracteres, se produce una excepción ArgumentOutOfRange.'
          type:
            - string
        - id: callback
          description: 'Opcional. Cuando el método finaliza, la función que se pasa en el parámetro callback se llama con un único parámetro de tipo Office. AsyncResult.'
          type:
            - 'outlook!Office.AppointmentCompose#setSelectedDataAsync~2:complex'
  - uid: 'outlook!Office.AppointmentCompose#start:member'
    summary: |-
      Obtiene o establece la fecha y la hora de inicio de la cita.

      La propiedad Start es un objeto [Time](xref:outlook!Office.Time:interface) expresado como un valor de fecha y hora de la hora universal coordinada (UTC). Puede usar el método convertToLocalClientTime para convertir el valor a la fecha y hora local del cliente.

      Cuando use el método Time. setAsync para establecer la hora de inicio, debe usar el método convertToUtcClientTime para convertir la hora local del cliente en un valor UTC para el servidor.
    remarks: |-
      **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)**: ReadItem

      **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/outlook/add-ins/#extension-points)**: Organizador de citas

      #### <a name="examples"></a>Ejemplos

      ```javascript
      // The following example sets the start time of an appointment in compose mode by
      // using the `setAsync` method of the `Time` object.
      var startTime = new Date("3/14/2015");
      var options = {
          // Pass information that can be used in the callback.
          asyncContext: {verb: "Set"}
      };
      Office.context.mailbox.item.start.setAsync(startTime, options, function(result) {
          if (result.error) {
              console.debug(result.error);
          } else {
              // Access the asyncContext that was passed to the setAsync function.
              console.debug("Start Time " + result.asyncContext.verb);
          }
      });
      ```
    name: start
    fullName: start
    langs:
      - typeScript
    type: property
    syntax:
      content: 'start: Time;'
      return:
        type:
          - 'outlook!Office.Time:interface'
  - uid: 'outlook!Office.AppointmentCompose#subject:member'
    summary: |-
      Obtiene o establece la descripción que se muestra en el campo de asunto de un elemento.

      La propiedad Subject obtiene o establece el asunto completo del elemento, como lo ha enviado el servidor de correo electrónico.

      La propiedad Subject devuelve un objeto Subject que proporciona métodos para obtener y establecer el asunto.
    remarks: |-
      **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)**: ReadItem

      **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/outlook/add-ins/#extension-points)**: Organizador de citas

      #### <a name="examples"></a>Ejemplos

      ```javascript
      Office.context.mailbox.item.subject.getAsync(callback);

      function callback(asyncResult) {
          var subject = asyncResult.value;
      }
      ```
    name: subject
    fullName: subject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'subject: Subject;'
      return:
        type:
          - 'outlook!Office.Subject:interface'
references:
  - uid: 'outlook!Office.Appointment:interface'
    name: Appointment
  - uid: 'outlook!Office.ItemCompose:interface'
    name: ItemCompose
  - uid: 'outlook!Office.AppointmentCompose#addFileAttachmentAsync~0:complex'
    name: 'Office.AsyncContextOptions & { isInline: boolean }'
    fullName: 'Office.AsyncContextOptions & { isInline: boolean }'
    spec.typeScript:
      - uid: 'outlook!Office.AsyncContextOptions:interface'
        name: Office.AsyncContextOptions
        fullName: Office.AsyncContextOptions
      - name: ' & { isInline: boolean }'
        fullName: ' & { isInline: boolean }'
  - uid: 'outlook!Office.AppointmentCompose#addFileAttachmentAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<string>) => void'
    fullName: '(asyncResult: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'outlook!Office.AppointmentCompose#addFileAttachmentAsync~2:complex'
    name: '(asyncResult: Office.AsyncResult<string>) => void'
    fullName: '(asyncResult: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'outlook!Office.AppointmentCompose#addFileAttachmentFromBase64Async~0:complex'
    name: 'Office.AsyncContextOptions &  { isInline: boolean }'
    fullName: 'Office.AsyncContextOptions &  { isInline: boolean }'
    spec.typeScript:
      - uid: 'outlook!Office.AsyncContextOptions:interface'
        name: Office.AsyncContextOptions
        fullName: Office.AsyncContextOptions
      - name: ' &  { isInline: boolean }'
        fullName: ' &  { isInline: boolean }'
  - uid: 'outlook!Office.AppointmentCompose#addFileAttachmentFromBase64Async~1:complex'
    name: '(asyncResult: Office.AsyncResult<string>) => void'
    fullName: '(asyncResult: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'outlook!Office.AppointmentCompose#addFileAttachmentFromBase64Async~2:complex'
    name: '(asyncResult: Office.AsyncResult<string>) => void'
    fullName: '(asyncResult: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'outlook!Office.AppointmentCompose#addHandlerAsync~0:complex'
    name: Office.EventType | string
    fullName: Office.EventType | string
    spec.typeScript:
      - uid: 'outlook!Office.EventType:enum'
        name: Office.EventType
        fullName: Office.EventType
      - name: ' | string'
        fullName: ' | string'
  - uid: 'outlook!Office.AsyncContextOptions:interface'
    name: Office.AsyncContextOptions
  - uid: 'outlook!Office.AppointmentCompose#addHandlerAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.AppointmentCompose#addHandlerAsync~2:complex'
    name: Office.EventType | string
    fullName: Office.EventType | string
    spec.typeScript:
      - uid: 'outlook!Office.EventType:enum'
        name: Office.EventType
        fullName: Office.EventType
      - name: ' | string'
        fullName: ' | string'
  - uid: 'outlook!Office.AppointmentCompose#addHandlerAsync~3:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.AppointmentCompose#addItemAttachmentAsync~0:complex'
    name: '(asyncResult: Office.AsyncResult<string>) => void'
    fullName: '(asyncResult: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'outlook!Office.AppointmentCompose#addItemAttachmentAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<string>) => void'
    fullName: '(asyncResult: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'outlook!Office.Body:interface'
    name: Body
  - uid: 'outlook!Office.Categories:interface'
    name: Categories
  - uid: 'outlook!Office.Time:interface'
    name: Time
  - uid: 'outlook!Office.EnhancedLocation:interface'
    name: EnhancedLocation
  - uid: 'outlook!Office.AppointmentCompose#getAttachmentContentAsync~0:complex'
    name: '(asyncResult: Office.AsyncResult<AttachmentContent>) => void'
    fullName: '(asyncResult: Office.AsyncResult<Office.AttachmentContent>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <
        fullName: <
      - uid: 'outlook!Office.AttachmentContent:interface'
        name: AttachmentContent
        fullName: Office.AttachmentContent
      - name: '>) => void'
        fullName: '>) => void'
  - uid: 'outlook!Office.AppointmentCompose#getAttachmentContentAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<AttachmentContent>) => void'
    fullName: '(asyncResult: Office.AsyncResult<Office.AttachmentContent>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <
        fullName: <
      - uid: 'outlook!Office.AttachmentContent:interface'
        name: AttachmentContent
        fullName: Office.AttachmentContent
      - name: '>) => void'
        fullName: '>) => void'
  - uid: 'outlook!Office.AppointmentCompose#getAttachmentsAsync~0:complex'
    name: '(asyncResult: Office.AsyncResult<AttachmentDetails[]>) => void'
    fullName: '(asyncResult: Office.AsyncResult<Office.AttachmentDetails[]>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <
        fullName: <
      - uid: 'outlook!Office.AttachmentDetails:interface'
        name: AttachmentDetails
        fullName: Office.AttachmentDetails
      - name: '[]>) => void'
        fullName: '[]>) => void'
  - uid: 'outlook!Office.AppointmentCompose#getAttachmentsAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<AttachmentDetails[]>) => void'
    fullName: '(asyncResult: Office.AsyncResult<Office.AttachmentDetails[]>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <
        fullName: <
      - uid: 'outlook!Office.AttachmentDetails:interface'
        name: AttachmentDetails
        fullName: Office.AttachmentDetails
      - name: '[]>) => void'
        fullName: '[]>) => void'
  - uid: 'outlook!Office.AppointmentCompose#getItemIdAsync~0:complex'
    name: '(asyncResult: Office.AsyncResult<string>) => void'
    fullName: '(asyncResult: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'outlook!Office.AppointmentCompose#getItemIdAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<string>) => void'
    fullName: '(asyncResult: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'outlook!Office.AppointmentCompose#getSelectedDataAsync~0:complex'
    name: Office.CoercionType | string
    fullName: Office.CoercionType | string
    spec.typeScript:
      - uid: 'outlook!Office.CoercionType:enum'
        name: Office.CoercionType
        fullName: Office.CoercionType
      - name: ' | string'
        fullName: ' | string'
  - uid: 'outlook!Office.AppointmentCompose#getSelectedDataAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<any>) => void'
    fullName: '(asyncResult: Office.AsyncResult<any>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <any>) => void
        fullName: <any>) => void
  - uid: 'outlook!Office.AppointmentCompose#getSelectedDataAsync~2:complex'
    name: Office.CoercionType | string
    fullName: Office.CoercionType | string
    spec.typeScript:
      - uid: 'outlook!Office.CoercionType:enum'
        name: Office.CoercionType
        fullName: Office.CoercionType
      - name: ' | string'
        fullName: ' | string'
  - uid: 'outlook!Office.AppointmentCompose#getSelectedDataAsync~3:complex'
    name: '(asyncResult: Office.AsyncResult<string>) => void'
    fullName: '(asyncResult: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'outlook!Office.AppointmentCompose#getSharedPropertiesAsync~0:complex'
    name: '(asyncResult: Office.AsyncResult<SharedProperties>) => void'
    fullName: '(asyncResult: Office.AsyncResult<Office.SharedProperties>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <
        fullName: <
      - uid: 'outlook!Office.SharedProperties:interface'
        name: SharedProperties
        fullName: Office.SharedProperties
      - name: '>) => void'
        fullName: '>) => void'
  - uid: 'outlook!Office.AppointmentCompose#getSharedPropertiesAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<SharedProperties>) => void'
    fullName: '(asyncResult: Office.AsyncResult<Office.SharedProperties>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <
        fullName: <
      - uid: 'outlook!Office.SharedProperties:interface'
        name: SharedProperties
        fullName: Office.SharedProperties
      - name: '>) => void'
        fullName: '>) => void'
  - uid: 'outlook!Office.AppointmentCompose#itemType~0:complex'
    name: MailboxEnums.ItemType | string
    fullName: Office.MailboxEnums.ItemType | string
    spec.typeScript:
      - uid: 'outlook!Office.MailboxEnums.ItemType:enum'
        name: MailboxEnums.ItemType
        fullName: Office.MailboxEnums.ItemType
      - name: ' | string'
        fullName: ' | string'
  - uid: 'outlook!Office.AppointmentCompose#loadCustomPropertiesAsync~0:complex'
    name: '(asyncResult: Office.AsyncResult<CustomProperties>) => void'
    fullName: '(asyncResult: Office.AsyncResult<Office.CustomProperties>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <
        fullName: <
      - uid: 'outlook!Office.CustomProperties:interface'
        name: CustomProperties
        fullName: Office.CustomProperties
      - name: '>) => void'
        fullName: '>) => void'
  - uid: 'outlook!Office.Location:interface'
    name: Location
  - uid: 'outlook!Office.NotificationMessages:interface'
    name: NotificationMessages
  - uid: 'outlook!Office.Recipients:interface'
    name: Recipients
  - uid: 'outlook!Office.Organizer:interface'
    name: Organizer
  - uid: 'outlook!Office.Recurrence:interface'
    name: Recurrence
  - uid: 'outlook!Office.AppointmentCompose#removeAttachmentAsync~0:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.AppointmentCompose#removeAttachmentAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.AppointmentCompose#removeHandlerAsync~0:complex'
    name: Office.EventType | string
    fullName: Office.EventType | string
    spec.typeScript:
      - uid: 'outlook!Office.EventType:enum'
        name: Office.EventType
        fullName: Office.EventType
      - name: ' | string'
        fullName: ' | string'
  - uid: 'outlook!Office.AppointmentCompose#removeHandlerAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.AppointmentCompose#removeHandlerAsync~2:complex'
    name: Office.EventType | string
    fullName: Office.EventType | string
    spec.typeScript:
      - uid: 'outlook!Office.EventType:enum'
        name: Office.EventType
        fullName: Office.EventType
      - name: ' | string'
        fullName: ' | string'
  - uid: 'outlook!Office.AppointmentCompose#removeHandlerAsync~3:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.AppointmentCompose#saveAsync~0:complex'
    name: '(asyncResult: Office.AsyncResult<string>) => void'
    fullName: '(asyncResult: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'outlook!Office.AppointmentCompose#saveAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<string>) => void'
    fullName: '(asyncResult: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'outlook!Office.AppointmentCompose#setSelectedDataAsync~0:complex'
    name: Office.AsyncContextOptions & CoercionTypeOptions
    fullName: Office.AsyncContextOptions & Office.CoercionTypeOptions
    spec.typeScript:
      - uid: 'outlook!Office.AsyncContextOptions:interface'
        name: Office.AsyncContextOptions
        fullName: Office.AsyncContextOptions
      - name: ' & '
        fullName: ' & '
      - uid: 'outlook!Office.CoercionTypeOptions:interface'
        name: CoercionTypeOptions
        fullName: Office.CoercionTypeOptions
  - uid: 'outlook!Office.AppointmentCompose#setSelectedDataAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.AppointmentCompose#setSelectedDataAsync~2:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.Subject:interface'
    name: Subject