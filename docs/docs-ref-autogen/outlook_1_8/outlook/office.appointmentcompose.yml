### YamlMime:UniversalReference
items:
  - uid: 'outlook!Office.AppointmentCompose:interface'
    summary: |-
      El modo de organizador de citas de [Office. Context. Mailbox. Item](xref:outlook!Office.Item:interface)<!-- -->.

      **Importante**: se trata de un objeto interno de Outlook, que no se expone directamente a través de las interfaces existentes. Debe tratarlo como un modo de`Office.context.mailbox.item`<!-- -->. Consulte la página del [modelo de objetos](https://docs.microsoft.com/office/dev/add-ins/reference/objectmodel/requirement-set-1.8/office.context.mailbox.item) para obtener más información.

      Interfaces principales:

      - [ItemCompose](xref:outlook!Office.ItemCompose:interface)

      - [Appointment](xref:outlook!Office.Appointment:interface)
    name: Office.AppointmentCompose
    fullName: Office.AppointmentCompose
    langs:
      - typeScript
    type: interface
    extends:
      - 'outlook!Office.Appointment:interface'
      - 'outlook!Office.ItemCompose:interface'
    package: outlook!
    children:
      - 'outlook!Office.AppointmentCompose#addFileAttachmentAsync:member(1)'
      - 'outlook!Office.AppointmentCompose#addFileAttachmentAsync:member(2)'
      - 'outlook!Office.AppointmentCompose#addFileAttachmentFromBase64Async:member(1)'
      - 'outlook!Office.AppointmentCompose#addFileAttachmentFromBase64Async:member(2)'
      - 'outlook!Office.AppointmentCompose#addHandlerAsync:member(1)'
      - 'outlook!Office.AppointmentCompose#addHandlerAsync:member(2)'
      - 'outlook!Office.AppointmentCompose#addItemAttachmentAsync:member(1)'
      - 'outlook!Office.AppointmentCompose#addItemAttachmentAsync:member(2)'
      - 'outlook!Office.AppointmentCompose#body:member'
      - 'outlook!Office.AppointmentCompose#categories:member'
      - 'outlook!Office.AppointmentCompose#close:member(1)'
      - 'outlook!Office.AppointmentCompose#end:member'
      - 'outlook!Office.AppointmentCompose#enhancedLocation:member'
      - 'outlook!Office.AppointmentCompose#getAttachmentContentAsync:member(1)'
      - 'outlook!Office.AppointmentCompose#getAttachmentContentAsync:member(2)'
      - 'outlook!Office.AppointmentCompose#getAttachmentsAsync:member(1)'
      - 'outlook!Office.AppointmentCompose#getAttachmentsAsync:member(2)'
      - 'outlook!Office.AppointmentCompose#getItemIdAsync:member(1)'
      - 'outlook!Office.AppointmentCompose#getItemIdAsync:member(2)'
      - 'outlook!Office.AppointmentCompose#getSelectedDataAsync:member(1)'
      - 'outlook!Office.AppointmentCompose#getSelectedDataAsync:member(2)'
      - 'outlook!Office.AppointmentCompose#getSharedPropertiesAsync:member(1)'
      - 'outlook!Office.AppointmentCompose#getSharedPropertiesAsync:member(2)'
      - 'outlook!Office.AppointmentCompose#itemType:member'
      - 'outlook!Office.AppointmentCompose#loadCustomPropertiesAsync:member(1)'
      - 'outlook!Office.AppointmentCompose#location:member'
      - 'outlook!Office.AppointmentCompose#notificationMessages:member'
      - 'outlook!Office.AppointmentCompose#optionalAttendees:member'
      - 'outlook!Office.AppointmentCompose#organizer:member'
      - 'outlook!Office.AppointmentCompose#recurrence:member'
      - 'outlook!Office.AppointmentCompose#removeAttachmentAsync:member(1)'
      - 'outlook!Office.AppointmentCompose#removeAttachmentAsync:member(2)'
      - 'outlook!Office.AppointmentCompose#removeHandlerAsync:member(1)'
      - 'outlook!Office.AppointmentCompose#removeHandlerAsync:member(2)'
      - 'outlook!Office.AppointmentCompose#requiredAttendees:member'
      - 'outlook!Office.AppointmentCompose#saveAsync:member(1)'
      - 'outlook!Office.AppointmentCompose#saveAsync:member(2)'
      - 'outlook!Office.AppointmentCompose#seriesId:member'
      - 'outlook!Office.AppointmentCompose#setSelectedDataAsync:member(1)'
      - 'outlook!Office.AppointmentCompose#setSelectedDataAsync:member(2)'
      - 'outlook!Office.AppointmentCompose#start:member'
      - 'outlook!Office.AppointmentCompose#subject:member'
  - uid: 'outlook!Office.AppointmentCompose#addFileAttachmentAsync:member(1)'
    summary: |-
      Agrega un archivo a un mensaje o cita como datos adjuntos.

      El método `addFileAttachmentAsync` carga el archivo en el URI especificado y lo asocia al elemento en el formulario de redacción.

      Después, puede usar el identificador con el método `removeAttachmentAsync` para quitar los datos adjuntos en la misma sesión.

      **Importante**: en compilaciones recientes de Outlook en Windows, se introdujo un error que anexa incorrectamente un `Authorization: Bearer` encabezado a esta acción (ya sea mediante esta API o la interfaz de usuario de Outlook). Para solucionar este problema, puede probar a usar la API `addFileAttachmentFromBase64` que se presenta con el conjunto de requisitos 1,8.

      \[[Conjunto de API: buzón de correo 1,1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadWriteItem`

      **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: Organizador de citas

      **Errores**:

      - `AttachmentSizeExceeded`<!-- -->: Los datos adjuntos son más grandes de lo permitidos.

      - `FileTypeNotSupported`<!-- -->: Los datos adjuntos tienen una extensión no permitida.

      - `NumberOfAttachmentsExceeded`<!-- -->: El mensaje o la cita tiene demasiados datos adjuntos.

      #### <a name="examples"></a>Ejemplos

      ```javascript
      function callback(result) {
          if (result.error) {
              console.log(result.error);
          } else {
              console.log("Attachment added");
          }
      }

      function addAttachment() {
          // The values in asyncContext can be accessed in the callback.
          var options = { 'asyncContext': { var1: 1, var2: 2 } };

          var attachmentURL = "https://contoso.com/rtm/icon.png";
          Office.context.mailbox.item.addFileAttachmentAsync(attachmentURL, attachmentURL, options, callback);
      }
      ```
      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/40-attachments/attachments-compose.yaml
      var attachmentUrl = $("#attachmentUrl").val();
      Office.context.mailbox.item.addFileAttachmentAsync(
          attachmentUrl,
          getFileName(attachmentUrl),
          { "asyncContext" : { var1: 1, var2: true } },
          function(result) { console.log(result); });
      ```
    name: 'addFileAttachmentAsync(uri, attachmentName, options, callback)'
    fullName: 'addFileAttachmentAsync(uri, attachmentName, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addFileAttachmentAsync(uri: string, attachmentName: string, options?: Office.AsyncContextOptions & { isInline: boolean }, callback?: (asyncResult: Office.AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: uri
          description: El URI que proporciona la ubicación del archivo que se va a adjuntar al mensaje o a la cita. La longitud máxima es de 2048 caracteres.
          type:
            - string
        - id: attachmentName
          description: El nombre de los datos adjuntos que se muestra mientras estos se cargan. La longitud máxima es de 255 caracteres.
          type:
            - string
        - id: options
          description: 'Opcional. Un objeto literal que contiene una o más de las siguientes propiedades. `asyncContext`<!-- -->: Los desarrolladores pueden proporcionar cualquier objeto al que quieran tener acceso en el método de devolución de llamada. `isInline`<!-- -->: Si es true, indica que los datos adjuntos se mostrarán en línea en el cuerpo del mensaje y no deben mostrarse en la lista de datos adjuntos.'
          type:
            - 'outlook!Office.AppointmentCompose#addFileAttachmentAsync~0:complex'
        - id: callback
          description: 'Opcional. Cuando el método finaliza, la función que se pasa en `callback` el parámetro se llama con un único parámetro de tipo`Office.AsyncResult`<!-- -->. Si se realiza correctamente, se proporcionará el identificador de los datos adjuntos en la propiedad `asyncResult.value`. Si se produce un error en la carga de los datos adjuntos, el objeto `asyncResult` contendrá un objeto `Error` que proporciona una descripción del error.'
          type:
            - 'outlook!Office.AppointmentCompose#addFileAttachmentAsync~1:complex'
  - uid: 'outlook!Office.AppointmentCompose#addFileAttachmentAsync:member(2)'
    summary: |-
      Agrega un archivo a un mensaje o cita como datos adjuntos.

      El método `addFileAttachmentAsync` carga el archivo en el URI especificado y lo asocia al elemento en el formulario de redacción.

      Después, puede usar el identificador con el método `removeAttachmentAsync` para quitar los datos adjuntos en la misma sesión.

      **Importante**: en compilaciones recientes de Outlook en Windows, se introdujo un error que anexa incorrectamente un `Authorization: Bearer` encabezado a esta acción (ya sea mediante esta API o la interfaz de usuario de Outlook). Para solucionar este problema, puede probar a usar la API `addFileAttachmentFromBase64` que se presenta con el conjunto de requisitos 1,8.

      \[[Conjunto de API: buzón de correo 1,1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadWriteItem`

      **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: Organizador de citas

      **Errores**:

      - `AttachmentSizeExceeded`<!-- -->: Los datos adjuntos son más grandes de lo permitidos.

      - `FileTypeNotSupported`<!-- -->: Los datos adjuntos tienen una extensión no permitida.

      - `NumberOfAttachmentsExceeded`<!-- -->: El mensaje o la cita tiene demasiados datos adjuntos.
    name: 'addFileAttachmentAsync(uri, attachmentName, callback)'
    fullName: 'addFileAttachmentAsync(uri, attachmentName, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addFileAttachmentAsync(uri: string, attachmentName: string, callback?: (asyncResult: Office.AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: uri
          description: El URI que proporciona la ubicación del archivo que se va a adjuntar al mensaje o a la cita. La longitud máxima es de 2048 caracteres.
          type:
            - string
        - id: attachmentName
          description: El nombre de los datos adjuntos que se muestra mientras estos se cargan. La longitud máxima es de 255 caracteres.
          type:
            - string
        - id: callback
          description: 'Opcional. Cuando el método finaliza, la función que se pasa en `callback` el parámetro se llama con un único parámetro de tipo`Office.AsyncResult`<!-- -->. Si se realiza correctamente, se proporcionará el identificador de los datos adjuntos en la propiedad `asyncResult.value`. Si se produce un error en la carga de los datos adjuntos, el objeto `asyncResult` contendrá un objeto `Error` que proporciona una descripción del error.'
          type:
            - 'outlook!Office.AppointmentCompose#addFileAttachmentAsync~2:complex'
  - uid: 'outlook!Office.AppointmentCompose#addFileAttachmentFromBase64Async:member(1)'
    summary: |-
      Agrega un archivo a un mensaje o cita como datos adjuntos.

      El `addFileAttachmentFromBase64Async` método carga el archivo desde la codificación Base64 y lo adjunta al elemento en el formulario de redacción. Este método devuelve el identificador de datos adjuntos en el `asyncResult.value` objeto.

      Después, puede usar el identificador con el método `removeAttachmentAsync` para quitar los datos adjuntos en la misma sesión.

      **Nota**: Si está usando una API de dirección URL de datos (por ejemplo,`readAsDataURL`<!-- -->), debe eliminar el prefijo de la dirección URL de los datos y, a continuación, enviar el resto de la cadena a esta API. Por ejemplo, si la cadena completa se representa mediante`data:image/svg+xml;base64,<rest of base64 string>`<!-- -->, quitar`data:image/svg+xml;base64,`<!-- -->.

      \[[Conjunto de API: buzón de correo 1,8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadWriteItem`

      **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: Organizador de citas

      **Errores**:

      - `AttachmentSizeExceeded`<!-- -->: Los datos adjuntos son más grandes de lo permitidos.

      - `FileTypeNotSupported`<!-- -->: Los datos adjuntos tienen una extensión no permitida.

      - `NumberOfAttachmentsExceeded`<!-- -->: El mensaje o la cita tiene demasiados datos adjuntos.

      #### <a name="examples"></a>Ejemplos

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/40-attachments/attachments-compose.yaml
      base64String = "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAACXBIWXMAAAsSAAALEgHS3X78AAACRUlEQVRYw82XzXHbMBCFP2F8tzsQc8Ixyh0zoiuIXIGdCsxUYKqC0B04FdiuwMoM7mGOOIXqQGoAymXhgSX+itJM9kIRFLAP+3YXD5Pdbscx5oxaAIW8Ztr6l2PWmQwF4IyaieP53qdfAqQ8CwBn1JU4vpWhrbxXQA5MZfynANmcDIAzKgcy4FKGXsVJFf3nLgKyBQptfT4KQMRz2N0fcbxqmRMDWXflx0VPnrdArq0vekQ1Dv0UeHZGNebHhwjU8AzwKM43RyZnbAf58Q6ghudeWd0Aus0+5EcMIIRi3beua0D3Nm39BEAx3i7HTK4DEBJn5YxKOnaRA5+ErpMBWMpzDvx1RuXCcxOISlufAjfC7zgAsqsvUvMAD0ApPaEtGi9AIlUzKgJo60tt/SyKRkzLrAXERluf7W1gOICWaMyB386oooOWsIHvXbSoHuUSFovtHqicUVnH3EJoeT0aQEf5/XBGlc6otIOWBXAtPeZkAIJ9Bt6cUU9tZautX2nrk3MACHYr1ZKProKRtDw4o8pzAPjWo+NtpXTTvoteDDg8noDAcwbcRedAkGdFXyk2GEDcegVAFp2gyVDHjRQ4o6q2smoqtR5Hd+qMqtoALCWUUymr1m43QMZfOaMK4C0SrMsDANJ2E5FNcbdbjHC+ENl+H0myJFbLtaq4Rt8dyPBYRQV1E40nMv9rl7xrOw3DGb+Whcqu3i/OM6CUOWvgRlufNmnLYy4m77uJI7AXtdNcTDrU71LEyv7v01/N/ovL6bmu5/8A1tNWZldH0W4AAAAASUVORK5CYII=";
      Office.context.mailbox.item.addFileAttachmentFromBase64Async(
          base64String,
          "logo.png",
          { isInline: false },
          function(result) { console.log(result); });
      ```
    name: 'addFileAttachmentFromBase64Async(base64File, attachmentName, options, callback)'
    fullName: 'addFileAttachmentFromBase64Async(base64File, attachmentName, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addFileAttachmentFromBase64Async(base64File: string, attachmentName: string, options?: Office.AsyncContextOptions &  { isInline: boolean }, callback?: (asyncResult: Office.AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: base64File
          description: Contenido codificado en Base64 de una imagen o archivo que se va a agregar a un correo electrónico o un evento.
          type:
            - string
        - id: attachmentName
          description: El nombre de los datos adjuntos que se muestra mientras estos se cargan. La longitud máxima es de 255 caracteres.
          type:
            - string
        - id: options
          description: 'Opcional. Un objeto literal que contiene una o más de las siguientes propiedades. `asyncContext`<!-- -->: Los desarrolladores pueden proporcionar cualquier objeto al que quieran tener acceso en el método de devolución de llamada. `isInline`<!-- -->: Si es true, indica que los datos adjuntos se mostrarán en línea en el cuerpo del mensaje y no deben mostrarse en la lista de datos adjuntos.'
          type:
            - 'outlook!Office.AppointmentCompose#addFileAttachmentFromBase64Async~0:complex'
        - id: callback
          description: 'Opcional. Cuando el método finaliza, la función que se pasa en `callback` el parámetro se llama con un único parámetro de tipo`Office.AsyncResult`<!-- -->. Si se realiza correctamente, se proporcionará el identificador de los datos adjuntos en la propiedad `asyncResult.value`. Si se produce un error en la carga de los datos adjuntos, el objeto `asyncResult` contendrá un objeto `Error` que proporciona una descripción del error.'
          type:
            - 'outlook!Office.AppointmentCompose#addFileAttachmentFromBase64Async~1:complex'
  - uid: 'outlook!Office.AppointmentCompose#addFileAttachmentFromBase64Async:member(2)'
    summary: |-
      Agrega un archivo a un mensaje o cita como datos adjuntos.

      El `addFileAttachmentFromBase64Async` método carga el archivo desde la codificación Base64 y lo adjunta al elemento en el formulario de redacción. Este método devuelve el identificador de datos adjuntos en el `asyncResult.value` objeto.

      Después, puede usar el identificador con el método `removeAttachmentAsync` para quitar los datos adjuntos en la misma sesión.

      **Nota**: Si está usando una API de dirección URL de datos (por ejemplo,`readAsDataURL`<!-- -->), debe eliminar el prefijo de la dirección URL de los datos y, a continuación, enviar el resto de la cadena a esta API. Por ejemplo, si la cadena completa se representa mediante`data:image/svg+xml;base64,<rest of base64 string>`<!-- -->, quitar`data:image/svg+xml;base64,`<!-- -->.

      \[[Conjunto de API: buzón de correo 1,8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadWriteItem`

      **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: Organizador de citas

      **Errores**:

      - `AttachmentSizeExceeded`<!-- -->: Los datos adjuntos son más grandes de lo permitidos.

      - `FileTypeNotSupported`<!-- -->: Los datos adjuntos tienen una extensión no permitida.

      - `NumberOfAttachmentsExceeded`<!-- -->: El mensaje o la cita tiene demasiados datos adjuntos.
    name: 'addFileAttachmentFromBase64Async(base64File, attachmentName, callback)'
    fullName: 'addFileAttachmentFromBase64Async(base64File, attachmentName, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addFileAttachmentFromBase64Async(base64File: string, attachmentName: string, callback?: (asyncResult: Office.AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: base64File
          description: Contenido codificado en Base64 de una imagen o archivo que se va a agregar a un correo electrónico o un evento.
          type:
            - string
        - id: attachmentName
          description: El nombre de los datos adjuntos que se muestra mientras estos se cargan. La longitud máxima es de 255 caracteres.
          type:
            - string
        - id: callback
          description: 'Opcional. Cuando el método finaliza, la función que se pasa en `callback` el parámetro se llama con un único parámetro de tipo`Office.AsyncResult`<!-- -->. Si se realiza correctamente, se proporcionará el identificador de los datos adjuntos en la propiedad `asyncResult.value`. Si se produce un error en la carga de los datos adjuntos, el objeto `asyncResult` contendrá un objeto `Error` que proporciona una descripción del error.'
          type:
            - 'outlook!Office.AppointmentCompose#addFileAttachmentFromBase64Async~2:complex'
  - uid: 'outlook!Office.AppointmentCompose#addHandlerAsync:member(1)'
    summary: |-
      Agrega un controlador de eventos para un evento admitido. **Nota**: los eventos solo están disponibles con el panel de tareas.

      Para ver qué tipos de eventos son compatibles, `Office.EventType` consulte para obtener más información.

      \[[Conjunto de API: buzón de correo 1,7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: Organizador de citas
    name: 'addHandlerAsync(eventType, handler, options, callback)'
    fullName: 'addHandlerAsync(eventType, handler, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addHandlerAsync(eventType: Office.EventType | string, handler: any, options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: El evento que debe invocar el controlador.
          type:
            - 'outlook!Office.AppointmentCompose#addHandlerAsync~0:complex'
        - id: handler
          description: 'La función que va a controlar el evento. La función debe aceptar un único parámetro, que es un literal de objeto. La propiedad Type del parámetro coincidirá con el `eventType` parámetro que se ha pasado a`addHandlerAsync`<!-- -->.'
          type:
            - any
        - id: options
          description: 'Opcional. Un objeto literal que contiene una o más de las siguientes propiedades. `asyncContext`<!-- -->: Los desarrolladores pueden proporcionar cualquier objeto al que quieran tener acceso en el método de devolución de llamada.'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: 'Opcional. Cuando el método finaliza, la función que se pasa en `callback` el parámetro se llama con un único parámetro,`asyncResult`<!-- -->, que es un `Office.AsyncResult` objeto.'
          type:
            - 'outlook!Office.AppointmentCompose#addHandlerAsync~1:complex'
  - uid: 'outlook!Office.AppointmentCompose#addHandlerAsync:member(2)'
    summary: |-
      Agrega un controlador de eventos para un evento admitido. **Nota**: los eventos solo están disponibles con el panel de tareas.

      Para ver qué tipos de eventos son compatibles, `Office.EventType` consulte para obtener más información.

      \[[Conjunto de API: buzón de correo 1,7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: Organizador de citas

      #### <a name="examples"></a>Ejemplos

      ```javascript
      function myHandlerFunction(eventarg) {
          if (eventarg.attachmentStatus === Office.MailboxEnums.AttachmentStatus.Added) {
              var attachment = eventarg.attachmentDetails;
              console.log("Event Fired and Attachment Added!");
              getAttachmentContentAsync(attachment.id, options, callback);
          }
      }

      Office.context.mailbox.item.addHandlerAsync(Office.EventType.AttachmentsChanged, myHandlerFunction, myCallback);
      ```
    name: 'addHandlerAsync(eventType, handler, callback)'
    fullName: 'addHandlerAsync(eventType, handler, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addHandlerAsync(eventType: Office.EventType | string, handler: any, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: El evento que debe invocar el controlador.
          type:
            - 'outlook!Office.AppointmentCompose#addHandlerAsync~2:complex'
        - id: handler
          description: 'La función que va a controlar el evento. La función debe aceptar un único parámetro, que es un literal de objeto. La propiedad Type del parámetro coincidirá con el `eventType` parámetro que se ha pasado a`addHandlerAsync`<!-- -->.'
          type:
            - any
        - id: callback
          description: 'Opcional. Cuando el método finaliza, la función que se pasa en `callback` el parámetro se llama con un único parámetro,`asyncResult`<!-- -->, que es un `Office.AsyncResult` objeto.'
          type:
            - 'outlook!Office.AppointmentCompose#addHandlerAsync~3:complex'
  - uid: 'outlook!Office.AppointmentCompose#addItemAttachmentAsync:member(1)'
    summary: |-
      Agrega un elemento de Exchange (por ejemplo, un mensaje) como datos adjuntos al mensaje o a la cita.

      El método `addItemAttachmentAsync` asocia el elemento con el identificador especificado de Exchange al elemento en el formulario de redacción. Si se especifica un método de devolución de llamada, se llama al método con un parámetro`asyncResult`<!-- -->, que contiene el identificador de datos adjuntos o un código que indica los errores que se produjeron al adjuntar el elemento. Si es necesario, puede usar el parámetro `options` para pasar información de estado al método de devolución de llamada.

      Después, puede usar el identificador con el método `removeAttachmentAsync` para quitar los datos adjuntos en la misma sesión.

      Si el complemento de Office se ejecuta en Outlook en la Web, el método `addItemAttachmentAsync` puede adjuntar elementos a otros elementos distintos del que quiere editar. No obstante, esta acción no es compatible y no se recomienda.

      \[[Conjunto de API: buzón de correo 1,1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadWriteItem`

      **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: Organizador de citas

      **Errores**:

      - `NumberOfAttachmentsExceeded`<!-- -->: El mensaje o la cita tiene demasiados datos adjuntos.

      #### <a name="examples"></a>Ejemplos

      ```javascript
      // The following example adds an existing Outlook item as an attachment
      // with the name `My Attachment`.
      function callback(result) {
          if (result.error) {
              console.log(result.error);
          } else {
              console.log("Attachment added");
          }
      }

      function addAttachment() {
          // EWS ID of item to attach (shortened for readability).
          var itemId = "AAMkADI1...AAA=";

          // The values in asyncContext can be accessed in the callback.
          var options = { 'asyncContext': { var1: 1, var2: 2 } };

          Office.context.mailbox.item.addItemAttachmentAsync(itemId, "My Attachment", options, callback);
      }
      ```
      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/40-attachments/attachments-compose.yaml
      var attachmentItemId = $("#attachmentItemId").val();
      Office.context.mailbox.item.addItemAttachmentAsync(
          attachmentItemId,
          "My attachment",
          { "asyncContext" : { var3: 3, var4: false } },
          function(result) { console.log(result); });
      ```
    name: 'addItemAttachmentAsync(itemId, attachmentName, options, callback)'
    fullName: 'addItemAttachmentAsync(itemId, attachmentName, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addItemAttachmentAsync(itemId: any, attachmentName: string, options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: itemId
          description: El identificador de Exchange del elemento que debe adjuntarse. La longitud máxima es de 100 caracteres.
          type:
            - any
        - id: attachmentName
          description: El nombre de los datos adjuntos que se muestra mientras estos se cargan. La longitud máxima es de 255 caracteres.
          type:
            - string
        - id: options
          description: 'Opcional. Un objeto literal que contiene una o más de las siguientes propiedades. `asyncContext`<!-- -->: Los desarrolladores pueden proporcionar cualquier objeto al que quieran tener acceso en el método de devolución de llamada.'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: 'Opcional. Cuando el método finaliza, la función que se pasa en el parámetro callback se llama con un único parámetro de tipo`Office.AsyncResult`<!-- -->. Si se realiza correctamente, se proporcionará el identificador de los datos adjuntos en la propiedad `asyncResult.value`. Si se produce un error al agregar los datos adjuntos, el objeto `asyncResult` contendrá un objeto `Error` que proporciona una descripción del error.'
          type:
            - 'outlook!Office.AppointmentCompose#addItemAttachmentAsync~0:complex'
  - uid: 'outlook!Office.AppointmentCompose#addItemAttachmentAsync:member(2)'
    summary: |-
      Agrega un elemento de Exchange (por ejemplo, un mensaje) como datos adjuntos al mensaje o a la cita.

      El método `addItemAttachmentAsync` asocia el elemento con el identificador especificado de Exchange al elemento en el formulario de redacción. Si se especifica un método de devolución de llamada, se llama al método con un parámetro`asyncResult`<!-- -->, que contiene el identificador de datos adjuntos o un código que indica los errores que se produjeron al adjuntar el elemento. Si es necesario, puede usar el parámetro `options` para pasar información de estado al método de devolución de llamada.

      Después, puede usar el identificador con el método `removeAttachmentAsync` para quitar los datos adjuntos en la misma sesión.

      Si el complemento de Office se ejecuta en Outlook en la Web, el método `addItemAttachmentAsync` puede adjuntar elementos a otros elementos distintos del que quiere editar. No obstante, esta acción no es compatible y no se recomienda.

      \[[Conjunto de API: buzón de correo 1,1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadWriteItem`

      **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: Organizador de citas

      **Errores**:

      - `NumberOfAttachmentsExceeded`<!-- -->: El mensaje o la cita tiene demasiados datos adjuntos.
    name: 'addItemAttachmentAsync(itemId, attachmentName, callback)'
    fullName: 'addItemAttachmentAsync(itemId, attachmentName, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addItemAttachmentAsync(itemId: any, attachmentName: string, callback?: (asyncResult: Office.AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: itemId
          description: El identificador de Exchange del elemento que debe adjuntarse. La longitud máxima es de 100 caracteres.
          type:
            - any
        - id: attachmentName
          description: El nombre de los datos adjuntos que se muestra mientras estos se cargan. La longitud máxima es de 255 caracteres.
          type:
            - string
        - id: callback
          description: 'Opcional. Cuando el método finaliza, la función que se pasa en `callback` el parámetro se llama con un único parámetro de tipo`Office.AsyncResult`<!-- -->. Si se realiza correctamente, se proporcionará el identificador de los datos adjuntos en la propiedad `asyncResult.value`. Si se produce un error al agregar los datos adjuntos, el objeto `asyncResult` contendrá un objeto `Error` que proporciona una descripción del error.'
          type:
            - 'outlook!Office.AppointmentCompose#addItemAttachmentAsync~1:complex'
  - uid: 'outlook!Office.AppointmentCompose#body:member'
    summary: |-
      Obtiene un objeto que proporciona métodos para manipular el cuerpo de un elemento.

      \[[Conjunto de API: buzón de correo 1,1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: Organizador de citas

      #### <a name="examples"></a>Ejemplos

      ```javascript
      // This example gets the body of the item as plain text.
      Office.context.mailbox.item.body.getAsync(
          "text",
          { asyncContext: "This is passed to the callback" },
          function callback(result) {
              // Do something with the result.
          });

      // The following is an example of an object that is passed as the result parameter to the callback function.
      {
          "value": "TEXT of whole body (including threads below)",
          "status": "succeeded",
          "asyncContext": "This is passed to the callback"
      }
      ```
    name: body
    fullName: body
    langs:
      - typeScript
    type: property
    syntax:
      content: 'body: Body;'
      return:
        type:
          - 'outlook!Office.Body:interface'
  - uid: 'outlook!Office.AppointmentCompose#categories:member'
    summary: |-
      Obtiene un objeto que proporciona métodos para administrar las categorías del elemento.

      \[[Conjunto de API: buzón de correo 1,8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: Organizador de citas

      #### <a name="examples"></a>Ejemplos

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/45-categories/work-with-categories.yaml
      Office.context.mailbox.item.categories.getAsync(function(asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
          var categories = asyncResult.value;
          if (categories && categories.length > 0) {
            console.log("Categories assigned to this item:");
            console.log(JSON.stringify(categories));
          } else {
            console.log("There are no categories assigned to this item.");
          }
        } else {
          console.error(asyncResult.error);
        }
      });
      ```
      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/45-categories/work-with-categories.yaml
      // Note: In order for you to successfully add a category,
      // it must be in the mailbox categories master list.

      Office.context.mailbox.masterCategories.getAsync(function(asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
          var masterCategories = asyncResult.value;
          if (masterCategories && masterCategories.length > 0) {
            // Grab the first category from the master list.
            var categoryToAdd = [masterCategories[0].displayName];
            Office.context.mailbox.item.categories.addAsync(categoryToAdd, function(asyncResult) {
              if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
                console.log(`Successfully assigned category '${categoryToAdd}' to item.`);
              } else {
                console.log("categories.addAsync call failed with error: " + asyncResult.error.message);
              }
            });
          } else {
            console.log("There are no categories in the master list on this mailbox. You can add categories using Office.context.mailbox.masterCategories.addAsync.");
          }
        } else {
          console.error(asyncResult.error);
        }
      });
      ```
      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/45-categories/work-with-categories.yaml
      Office.context.mailbox.item.categories.getAsync(function(asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
          var categories = asyncResult.value;
          if (categories && categories.length > 0) {
            // Grab the first category assigned to this item.
            var categoryToRemove = [categories[0].displayName];
            Office.context.mailbox.item.categories.removeAsync(categoryToRemove, function(asyncResult) {
              if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
                console.log(`Successfully unassigned category '${categoryToRemove}' from this item.`);
              } else {
                console.log("categories.removeAsync call failed with error: " + asyncResult.error.message);
              }
            });
          } else {
            console.log("There are no categories assigned to this item.");
          }
        } else {
          console.error(asyncResult.error);
        }
      });
      ```
    name: categories
    fullName: categories
    langs:
      - typeScript
    type: property
    syntax:
      content: 'categories: Categories;'
      return:
        type:
          - 'outlook!Office.Categories:interface'
  - uid: 'outlook!Office.AppointmentCompose#close:member(1)'
    summary: |-
      Cierra el elemento actual que se está redactando

      Los comportamientos del `close` método dependen del estado actual del elemento que se está redactando. Si el elemento tiene cambios sin guardar, el cliente solicita al usuario que guarde, descarte o cierre la acción.

      En el cliente de escritorio de Outlook, si el mensaje es una respuesta directa, el método `close` no tiene ningún efecto.

      **Nota**: en Outlook en la web, si el elemento es una cita y se ha guardado previamente con`saveAsync`<!-- -->, se pide al usuario que guarde, descarte o cancele incluso si no se han producido cambios desde la última vez que se guardó el elemento.

      \[[Conjunto de API: buzón de correo 1,3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`Restricted`

      **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: Organizador de citas

      #### <a name="examples"></a>Ejemplos

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/25-item-save-and-close/close.yaml
      Office.context.mailbox.item.close();
      ```
    name: close()
    fullName: close()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'close(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'outlook!Office.AppointmentCompose#end:member'
    summary: |-
      Obtiene o establece la fecha y la hora de finalización de la cita.

      La `end` propiedad es un objeto [Time](xref:outlook!Office.Time:interface) expresado como un valor de fecha y hora de la hora universal coordinada (UTC). Puede usar el `convertToLocalClientTime` método para convertir el valor `end` de la propiedad en la fecha y hora local del cliente.

      Si usa el método `Time.setAsync` para establecer la hora de finalización, use el método `convertToUtcClientTime` para convertir la hora local del cliente en un valor UTC para el servidor.
    remarks: |-
      **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: Organizador de citas

      #### <a name="examples"></a>Ejemplos

      ```javascript
      // The following example sets the end time of an appointment in compose mode by
      // using the `setAsync` method of the `Time` object.
      var endTime = new Date("3/14/2015");
      var options = {
          // Pass information that can be used in the callback.
          asyncContext: {verb: "Set"}
      };
      Office.context.mailbox.item.end.setAsync(endTime, options, function(result) {
          if (result.error) {
              console.debug(result.error);
          } else {
              // Access the asyncContext that was passed to the setAsync function.
              console.debug("End Time " + result.asyncContext.verb);
          }
      });
      ```
      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-set-end-appointment-organizer.yaml
      Office.context.mailbox.item.end.getAsync((result) => {
        if (result.status !== Office.AsyncResultStatus.Succeeded) {
          console.error(`Action failed with message ${result.error.message}`);
          return;
        }
        console.log(`Appointment ends: ${result.value}`);
      });
      ```
      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-set-end-appointment-organizer.yaml
      Office.context.mailbox.item.start.getAsync((result) => {
        if (result.status !== Office.AsyncResultStatus.Succeeded) {
          console.error(`Get start date failed with message ${result.error.message}`);
          return;
        }

        var end = result.value; // Set end to current start date and time.
        end.setDate(end.getDate() + 1); // Set end as 1 day later than start date.
        Office.context.mailbox.item.end.setAsync(end, (result) => {
          if (result.status !== Office.AsyncResultStatus.Succeeded) {
            console.error(`Set end date failed with message ${result.error.message}`);
            return;
          }
          console.log(`Successfully set end date and time to ${end}`);
        });
      });
      ```
    name: end
    fullName: end
    langs:
      - typeScript
    type: property
    syntax:
      content: 'end: Time;'
      return:
        type:
          - 'outlook!Office.Time:interface'
  - uid: 'outlook!Office.AppointmentCompose#enhancedLocation:member'
    summary: |-
      Obtiene o establece las ubicaciones de la cita. La `enhancedLocation` propiedad devuelve un objeto [EnhancedLocation](xref:outlook!Office.EnhancedLocation:interface) que proporciona métodos para obtener, quitar o agregar ubicaciones en un elemento.

      \[[Conjunto de API: buzón de correo 1,8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: Organizador de citas

      #### <a name="examples"></a>Ejemplos

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-add-remove-enhancedlocation-appointment.yaml
      Office.context.mailbox.item.enhancedLocation.getAsync((result) => {
        if (result.status !== Office.AsyncResultStatus.Succeeded) {
          console.error(`Failed to get locations. Error message: ${result.error.message}`);
          return;
        }
        var places = result.value;
        if (places && places.length > 0) {
          result.value.forEach(function(place) {
            console.log(`Location: ${place.displayName} (type: ${place.locationIdentifier.type})`);
            if (place.locationIdentifier.type === Office.MailboxEnums.LocationType.Room) {
              console.log("Email address: " + place.emailAddress);
            }
          });
        } else {
          console.log("There are no locations.");
        }
      });
      ```
      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-add-remove-enhancedlocation-appointment.yaml
      var locations = [
        {
          id: "Contoso",
          type: Office.MailboxEnums.LocationType.Custom
        },
        {
          id: "room500@test.com",
          type: Office.MailboxEnums.LocationType.Room
        }
      ];
      Office.context.mailbox.item.enhancedLocation.addAsync(locations, (result) => {
        if (result.status === Office.AsyncResultStatus.Succeeded) {
          console.log(`Successfully added locations ${JSON.stringify(locations)}`);
        } else {
          console.error(`Failed to add locations. Error message: ${result.error.message}`);
        }
      });
      ```
      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-add-remove-enhancedlocation-appointment.yaml
      var locations = [
        {
          id: "Contoso",
          type: Office.MailboxEnums.LocationType.Custom
        },
        {
          id: "room500@test.com",
          type: Office.MailboxEnums.LocationType.Room
        }
      ];
      Office.context.mailbox.item.enhancedLocation.removeAsync(locations, (result) => {
        if (result.status === Office.AsyncResultStatus.Succeeded) {
          console.log(`Successfully removed locations ${JSON.stringify(locations)}`);
        } else {
          console.error(`Failed to remove locations. Error message: ${result.error.message}`);
        }
      });
      ```
    name: enhancedLocation
    fullName: enhancedLocation
    langs:
      - typeScript
    type: property
    syntax:
      content: 'enhancedLocation: EnhancedLocation;'
      return:
        type:
          - 'outlook!Office.EnhancedLocation:interface'
  - uid: 'outlook!Office.AppointmentCompose#getAttachmentContentAsync:member(1)'
    summary: |-
      Obtiene datos adjuntos de un mensaje o cita y los devuelve `AttachmentContent` como un objeto.

      El `getAttachmentContentAsync` método obtiene los datos adjuntos con el identificador especificado del elemento. Como práctica recomendada, debe usar el identificador para recuperar datos adjuntos en la misma sesión que identificadores se recuperaron con la `getAttachmentsAsync` llamada o `item.attachments` . En Outlook en la Web y dispositivos móviles, el identificador de datos adjuntos solo es válido en la misma sesión. Una sesión es superior a cuando el usuario cierra la aplicación o si el usuario comienza a redactar un formulario en línea y, a continuación, el formulario continúa en una ventana independiente.

      \[[Conjunto de API: buzón de correo 1,8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: Organizador de citas

      **Errores**:

      - `AttachmentTypeNotSupported`<!-- -->: No se admite el tipo de datos adjuntos. Los tipos no admitidos incluyen imágenes insertadas en formato de texto enriquecido o tipos de datos adjuntos que no sean de correo electrónico o de calendario (como un elemento de contacto o tarea).

      - `InvalidAttachmentId`<!-- -->: El identificador de los datos adjuntos no existe.

      #### <a name="examples"></a>Ejemplos

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/40-attachments/get-attachment-content.yaml
      var item = Office.context.mailbox.item;
      var options = {asyncContext: {currentItem: item}};
      item.getAttachmentsAsync(options, callback);

      function callback(result) {
          if (result.value.length > 0) {
              for (i = 0 ; i < result.value.length ; i++) {
                  result.asyncContext.currentItem.getAttachmentContentAsync(result.value[i].id, handleAttachmentsCallback);
              }
          }
      }

      function handleAttachmentsCallback(result) {
          // Parse string to be a url, an .eml file, a base64-encoded string, or an .icalendar file.
          switch (result.value.format) {
              case Office.MailboxEnums.AttachmentContentFormat.Base64:
                  // Handle file attachment.
                  console.log(result.value.content);
                  break;
              case Office.MailboxEnums.AttachmentContentFormat.Eml:
                  // Handle email item attachment.
                  console.log("Attachment is a message.");
                  break;
              case Office.MailboxEnums.AttachmentContentFormat.ICalendar:
                  // Handle .icalender attachment.
                  console.log("Attachment is a calendar item.");
                  break;
              case Office.MailboxEnums.AttachmentContentFormat.Url:
                  // Handle cloud attachment.
                  console.log("Attachment is a cloud attachment.");
                  break;
              default:
                  // Handle attachment formats that are not supported.
          }
      }
      ```
    name: 'getAttachmentContentAsync(attachmentId, options, callback)'
    fullName: 'getAttachmentContentAsync(attachmentId, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getAttachmentContentAsync(attachmentId: string, options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<AttachmentContent>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: attachmentId
          description: El identificador de los datos adjuntos que desea obtener.
          type:
            - string
        - id: options
          description: 'Opcional. Un objeto literal que contiene una o más de las siguientes propiedades. `asyncContext`<!-- -->: Los desarrolladores pueden proporcionar cualquier objeto al que quieran tener acceso en el método de devolución de llamada.'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: 'Opcional. Cuando el método finaliza, la función que se pasa en `callback` el parámetro se llama con un único parámetro,`asyncResult`<!-- -->, que es un `Office.AsyncResult` objeto. Si se produce un error en `asyncResult.error` la llamada, la propiedad contendrá un código de error con el motivo del error.'
          type:
            - 'outlook!Office.AppointmentCompose#getAttachmentContentAsync~0:complex'
  - uid: 'outlook!Office.AppointmentCompose#getAttachmentContentAsync:member(2)'
    summary: |-
      Obtiene datos adjuntos de un mensaje o cita y los devuelve `AttachmentContent` como un objeto.

      El `getAttachmentContentAsync` método obtiene los datos adjuntos con el identificador especificado del elemento. Como práctica recomendada, debe usar el identificador para recuperar datos adjuntos en la misma sesión que identificadores se recuperaron con la `getAttachmentsAsync` llamada o `item.attachments` . En Outlook en la Web y dispositivos móviles, el identificador de datos adjuntos solo es válido en la misma sesión. Una sesión es superior a cuando el usuario cierra la aplicación o si el usuario comienza a redactar un formulario en línea y, a continuación, el formulario continúa en una ventana independiente.

      \[[Conjunto de API: buzón de correo 1,8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: Organizador de citas

      **Errores**:

      - `AttachmentTypeNotSupported`<!-- -->: No se admite el tipo de datos adjuntos. Los tipos no admitidos incluyen imágenes insertadas en formato de texto enriquecido o tipos de datos adjuntos que no sean de correo electrónico o de calendario (como un elemento de contacto o tarea).

      - `InvalidAttachmentId`<!-- -->: El identificador de los datos adjuntos no existe.
    name: 'getAttachmentContentAsync(attachmentId, callback)'
    fullName: 'getAttachmentContentAsync(attachmentId, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getAttachmentContentAsync(attachmentId: string, callback?: (asyncResult: Office.AsyncResult<AttachmentContent>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: attachmentId
          description: El identificador de los datos adjuntos que desea obtener.
          type:
            - string
        - id: callback
          description: 'Opcional. Cuando el método finaliza, la función que se pasa en `callback` el parámetro se llama con un único parámetro,`asyncResult`<!-- -->, que es un `Office.AsyncResult` objeto. Si se produce un error en `asyncResult.error` la llamada, la propiedad contendrá un código de error con el motivo del error.'
          type:
            - 'outlook!Office.AppointmentCompose#getAttachmentContentAsync~1:complex'
  - uid: 'outlook!Office.AppointmentCompose#getAttachmentsAsync:member(1)'
    summary: |-
      Obtiene los datos adjuntos del elemento como una matriz.

      \[[Conjunto de API: buzón de correo 1,8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: Organizador de citas
    name: 'getAttachmentsAsync(options, callback)'
    fullName: 'getAttachmentsAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getAttachmentsAsync(options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<AttachmentDetails[]>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: 'Opcional. Un objeto literal que contiene una o más de las siguientes propiedades. `asyncContext`<!-- -->: Los desarrolladores pueden proporcionar cualquier objeto al que quieran tener acceso en el método de devolución de llamada.'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: 'Opcional. Cuando el método finaliza, la función que se pasa en `callback` el parámetro se llama con un único parámetro de tipo`Office.AsyncResult`<!-- -->. Si se produce un error en `asyncResult.error` la llamada, la propiedad contendrá un código de error con el motivo del error.'
          type:
            - 'outlook!Office.AppointmentCompose#getAttachmentsAsync~0:complex'
  - uid: 'outlook!Office.AppointmentCompose#getAttachmentsAsync:member(2)'
    summary: |-
      Obtiene los datos adjuntos del elemento como una matriz.

      \[[Conjunto de API: buzón de correo 1,8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: Organizador de citas

      #### <a name="examples"></a>Ejemplos

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/40-attachments/attachments-compose.yaml
      Office.context.mailbox.item.getAttachmentsAsync(function (result) {
          if (result.status !== Office.AsyncResultStatus.Succeeded) {
              console.error(result.error.message);
          } else {
              if (result.value.length > 0) {
                  for (var i = 0; i < result.value.length; i++) {
                      var attachment = result.value[i];
                      console.log(`${attachment.id}. Name: ${attachment.name}, size: ${attachment.size}, isInline: ${attachment.isInline}`);
                  }
              }
              else {
                  console.log("No attachments on this message.");
              }
          }
      });
      ```
    name: getAttachmentsAsync(callback)
    fullName: getAttachmentsAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getAttachmentsAsync(callback?: (asyncResult: Office.AsyncResult<AttachmentDetails[]>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: 'Opcional. Cuando el método finaliza, la función que se pasa en `callback` el parámetro se llama con un único parámetro de tipo`Office.AsyncResult`<!-- -->. Si se produce un error en `asyncResult.error` la llamada, la propiedad contendrá un código de error con el motivo del error.'
          type:
            - 'outlook!Office.AppointmentCompose#getAttachmentsAsync~1:complex'
  - uid: 'outlook!Office.AppointmentCompose#getItemIdAsync:member(1)'
    summary: |-
      Obtiene de forma asíncrona el identificador de un elemento guardado.

      Cuando se invoca, este método devuelve el identificador de elemento a través del método de devolución de llamada.

      **Nota**: Si el complemento llama `getItemIdAsync` a un elemento en el modo de redacción (por ejemplo, para obtener un `itemId` para usarlo con EWS o la API de REST), tenga en cuenta que cuando Outlook está en modo de caché, puede tardar algún tiempo antes de que el elemento se sincronice con el servidor. Hasta que el elemento se sincronice, el `itemId` no se reconoce y el uso devuelve un error.

      \[[Conjunto de API: buzón de correo 1,8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: Organizador de citas

      **Errores**:

      - `ItemNotSaved`<!-- -->: El identificador no se puede recuperar hasta que se guarde el elemento.
    name: 'getItemIdAsync(options, callback)'
    fullName: 'getItemIdAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemIdAsync(options: Office.AsyncContextOptions, callback: (asyncResult: Office.AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: 'Un objeto literal que contiene una o más de las siguientes propiedades. `asyncContext`<!-- -->: Los desarrolladores pueden proporcionar cualquier objeto al que quieran tener acceso en el método de devolución de llamada.'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: 'Cuando el método finaliza, la función que se pasa en `callback` el parámetro se llama con un único parámetro de tipo`Office.AsyncResult`<!-- -->.'
          type:
            - 'outlook!Office.AppointmentCompose#getItemIdAsync~0:complex'
  - uid: 'outlook!Office.AppointmentCompose#getItemIdAsync:member(2)'
    summary: |-
      Obtiene de forma asíncrona el identificador de un elemento guardado.

      Cuando se invoca, este método devuelve el identificador de elemento a través del método de devolución de llamada.

      **Nota**: Si el complemento llama `getItemIdAsync` a un elemento en el modo de redacción (por ejemplo, para obtener un `itemId` para usarlo con EWS o la API de REST), tenga en cuenta que cuando Outlook está en modo de caché, puede tardar algún tiempo antes de que el elemento se sincronice con el servidor. Hasta que el elemento se sincronice, el `itemId` no se reconoce y el uso devuelve un error.

      \[[Conjunto de API: buzón de correo 1,8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: Organizador de citas

      **Errores**:

      - `ItemNotSaved`<!-- -->: El identificador no se puede recuperar hasta que se guarde el elemento.

      #### <a name="examples"></a>Ejemplos

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/85-tokens-and-service-calls/item-id-compose.yaml
      Office.context.mailbox.item.getItemIdAsync(function (result) {
          if (result.status !== Office.AsyncResultStatus.Succeeded) {
              console.error(`getItemIdAsync failed with message: ${result.error.message}`);
          } else {
              console.log(result.value);
          }
      });
      ```
    name: getItemIdAsync(callback)
    fullName: getItemIdAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemIdAsync(callback: (asyncResult: Office.AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: 'Cuando el método finaliza, la función que se pasa en `callback` el parámetro se llama con un único parámetro de tipo`Office.AsyncResult`<!-- -->.'
          type:
            - 'outlook!Office.AppointmentCompose#getItemIdAsync~1:complex'
  - uid: 'outlook!Office.AppointmentCompose#getSelectedDataAsync:member(1)'
    summary: |-
      Devuelve asincrónicamente datos seleccionados desde el asunto o el cuerpo de un mensaje.

      Si no hay ninguna selección, pero el cursor está en el cuerpo o el asunto, el método devuelve una cadena vacía para los datos seleccionados. Si se selecciona un campo que no sea el cuerpo o el asunto, el método devuelve el error `InvalidSelection`.

      Para obtener acceso a los datos seleccionados desde el método de devolución de llamada, llame a`asyncResult.value.data`<!-- -->. Para obtener acceso `source` a la propiedad de la que proviene la selección, llame al`asyncResult.value.sourceProperty`<!-- -->, que será `body` o`subject`<!-- -->.

      \[[Conjunto de API: buzón de correo 1,2](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: Organizador de citas

      #### <a name="examples"></a>Ejemplos

      ```javascript
      // Get selected data.
      Office.initialize = function () {
          Office.context.mailbox.item.getSelectedDataAsync(Office.CoercionType.Text, {}, getCallback);
      };

      function getCallback(asyncResult) {
          var text = asyncResult.value.data;
          var prop = asyncResult.value.sourceProperty;

          console.log("Selected text in " + prop + ": " + text);
      }
      ```
    name: 'getSelectedDataAsync(coercionType, options, callback)'
    fullName: 'getSelectedDataAsync(coercionType, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSelectedDataAsync(coercionType: Office.CoercionType | string, options: Office.AsyncContextOptions, callback: (asyncResult: Office.AsyncResult<any>) => void): void;'
      return:
        type:
          - void
        description: Los datos seleccionados como una cadena con formato determinado por`coercionType`<!-- -->.
      parameters:
        - id: coercionType
          description: 'Solicita un formato para los datos. Aun`Text`<!-- -->, el método devuelve el texto sin formato como una cadena, quitando las etiquetas HTML presentes. Aun`HTML`<!-- -->, el método devuelve el texto seleccionado, ya sea texto sin formato o HTML.'
          type:
            - 'outlook!Office.AppointmentCompose#getSelectedDataAsync~0:complex'
        - id: options
          description: 'Un objeto literal que contiene una o más de las siguientes propiedades. `asyncContext`<!-- -->: Los desarrolladores pueden proporcionar cualquier objeto al que quieran tener acceso en el método de devolución de llamada.'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: 'Cuando el método finaliza, la función que se pasa en `callback` el parámetro se llama con un único parámetro de tipo`Office.AsyncResult`<!-- -->.'
          type:
            - 'outlook!Office.AppointmentCompose#getSelectedDataAsync~1:complex'
  - uid: 'outlook!Office.AppointmentCompose#getSelectedDataAsync:member(2)'
    summary: |-
      Devuelve asincrónicamente datos seleccionados desde el asunto o el cuerpo de un mensaje.

      Si no hay ninguna selección, pero el cursor está en el cuerpo o el asunto, el método devuelve una cadena vacía para los datos seleccionados. Si se selecciona un campo que no sea el cuerpo o el asunto, el método devuelve el error `InvalidSelection`.

      Para obtener acceso a los datos seleccionados desde el método de devolución de llamada, llame a`asyncResult.value.data`<!-- -->. Para obtener acceso `source` a la propiedad de la que proviene la selección, llame al`asyncResult.value.sourceProperty`<!-- -->, que será `body` o`subject`<!-- -->.

      \[[Conjunto de API: buzón de correo 1,2](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: Organizador de citas

      #### <a name="examples"></a>Ejemplos

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/20-item-body/get-selected-data.yaml
      Office.context.mailbox.item.getSelectedDataAsync(Office.CoercionType.Text, function(asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
          var text = asyncResult.value.data;
          var prop = asyncResult.value.sourceProperty;
          console.log("Selected text in " + prop + ": " + text);
        } else {
          console.error(asyncResult.error);
        }
      });
      ```
    name: 'getSelectedDataAsync(coercionType, callback)'
    fullName: 'getSelectedDataAsync(coercionType, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSelectedDataAsync(coercionType: Office.CoercionType | string, callback: (asyncResult: Office.AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: Los datos seleccionados como una cadena con formato determinado por`coercionType`<!-- -->.
      parameters:
        - id: coercionType
          description: 'Solicita un formato para los datos. Aun`Text`<!-- -->, el método devuelve el texto sin formato como una cadena, quitando las etiquetas HTML presentes. Aun`HTML`<!-- -->, el método devuelve el texto seleccionado, ya sea texto sin formato o HTML.'
          type:
            - 'outlook!Office.AppointmentCompose#getSelectedDataAsync~2:complex'
        - id: callback
          description: 'Cuando el método finaliza, la función que se pasa en `callback` el parámetro se llama con un único parámetro de tipo`Office.AsyncResult`<!-- -->.'
          type:
            - 'outlook!Office.AppointmentCompose#getSelectedDataAsync~3:complex'
  - uid: 'outlook!Office.AppointmentCompose#getSharedPropertiesAsync:member(1)'
    summary: |-
      Obtiene las propiedades de una cita o un mensaje en una carpeta compartida, calendario o buzón.

      **Nota**: este método no es compatible con Outlook en Mac, iOS o Android.

      \[[Conjunto de API: buzón de correo 1,8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: Organizador de citas

      #### <a name="examples"></a>Ejemplos

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/65-delegates-and-shared-folders/get-shared-properties.yaml
      if (!Office.context.mailbox.item.getSharedPropertiesAsync) {
        console.error("Try this sample on a message from a shared folder.");
        return;
      }

      Office.context.mailbox.getCallbackTokenAsync({ isRest: true }, function(result) {
        if (result.status === Office.AsyncResultStatus.Succeeded && result.value !== "") {
          Office.context.mailbox.item.getSharedPropertiesAsync(
            {
              // Pass auth token along.
              asyncContext: result.value
            },
            function(result2) {
              let sharedProperties = result2.value;
              let delegatePermissions = sharedProperties.delegatePermissions;

              // Determine if user can do the expected operation, e.g., do they have Write permission?
              if ((delegatePermissions & Office.MailboxEnums.DelegatePermissions.Read) != 0) {
                var ewsId = Office.context.mailbox.item.itemId;
                var restId = Office.context.mailbox.convertToRestId(ewsId, Office.MailboxEnums.RestVersion.v2_0);
                let rest_url =
                  sharedProperties.targetRestUrl + "/v2.0/users/" + sharedProperties.targetMailbox + "/messages/" + restId;

                $.ajax({
                  url: rest_url,
                  dataType: "json",
                  headers: { Authorization: "Bearer " + result2.asyncContext }
                })
                  .done(function(response) {
                    console.log(response);
                  })
                  .fail(function(error) {
                    console.error(error);
                  });
              }
            }
          );
        }
      });
      ```
    name: 'getSharedPropertiesAsync(options, callback)'
    fullName: 'getSharedPropertiesAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSharedPropertiesAsync(options: Office.AsyncContextOptions, callback: (asyncResult: Office.AsyncResult<SharedProperties>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: 'Un objeto literal que contiene una o más de las siguientes propiedades. `asyncContext`<!-- -->: Los desarrolladores pueden proporcionar cualquier objeto al que quieran tener acceso en el método de devolución de llamada.'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: 'Cuando el método finaliza, la función que se pasa en `callback` el parámetro se llama con un único parámetro de tipo`Office.AsyncResult`<!-- -->. La `value` propiedad del resultado son las propiedades del elemento compartido.'
          type:
            - 'outlook!Office.AppointmentCompose#getSharedPropertiesAsync~0:complex'
  - uid: 'outlook!Office.AppointmentCompose#getSharedPropertiesAsync:member(2)'
    summary: |-
      Obtiene las propiedades de una cita o un mensaje en una carpeta compartida, calendario o buzón.

      **Nota**: este método no es compatible con Outlook en Mac, iOS o Android.

      \[[Conjunto de API: buzón de correo 1,8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: Organizador de citas

      #### <a name="examples"></a>Ejemplos

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/65-delegates-and-shared-folders/get-shared-properties.yaml
      if (!Office.context.mailbox.item.getSharedPropertiesAsync) {
        console.error("Try this sample on a message from a shared folder.");
        return;
      }

      Office.context.mailbox.item.getSharedPropertiesAsync(function(result) {
        console.log(result.value);
      });
      ```
    name: getSharedPropertiesAsync(callback)
    fullName: getSharedPropertiesAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSharedPropertiesAsync(callback: (asyncResult: Office.AsyncResult<SharedProperties>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: 'Cuando el método finaliza, la función que se pasa en el parámetro callback se llama con un único parámetro de tipo`Office.AsyncResult`<!-- -->. La `value` propiedad del resultado son las propiedades del elemento compartido.'
          type:
            - 'outlook!Office.AppointmentCompose#getSharedPropertiesAsync~1:complex'
  - uid: 'outlook!Office.AppointmentCompose#itemType:member'
    summary: |-
      Obtiene el tipo de elemento que representa una instancia.

      La propiedad `itemType` devuelve uno de los valores de enumeración de `ItemType`, lo que indica si la instancia del objeto `item` es un mensaje o una cita.
    remarks: |-
      **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: Organizador de citas

      #### <a name="examples"></a>Ejemplos

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-item-type.yaml
      console.log(`Item type: ${Office.context.mailbox.item.itemType}`);
      ```
    name: itemType
    fullName: itemType
    langs:
      - typeScript
    type: property
    syntax:
      content: 'itemType: MailboxEnums.ItemType | string;'
      return:
        type:
          - 'outlook!Office.AppointmentCompose#itemType~0:complex'
  - uid: 'outlook!Office.AppointmentCompose#loadCustomPropertiesAsync:member(1)'
    summary: |-
      Carga de forma asincrónica las propiedades personalizadas de este complemento en el elemento seleccionado.

      Las propiedades personalizadas se almacenan como pares de clave/valor según la aplicación y el elemento. Este método devuelve un objeto `CustomProperties` en la devolución de llamada, que proporciona métodos para tener acceso a las propiedades personalizadas específicas del elemento y el complemento actual. Las propiedades personalizadas no están cifradas en el elemento, por lo que no debería usarse como almacenamiento seguro.

      Las propiedades personalizadas se proporcionan como un objeto `CustomProperties` en la propiedad `asyncResult.value`. Este objeto puede usarse para obtener, establecer y quitar las propiedades personalizadas del elemento, así como para guardar los cambios en la propiedad personalizada que se vuelve a establecer en el servidor.
    remarks: |-
      **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: Organizador de citas

      #### <a name="examples"></a>Ejemplos

      ```javascript
      // The following example shows how to use the loadCustomPropertiesAsync method
      // to asynchronously load custom properties that are specific to the current item.
      // The example also shows how to use the saveAsync method to save these properties
      // back to the server. After loading the custom properties, the example uses the
      // get method to read the custom property myProp, the set method to write the
      // custom property otherProp, and then finally calls the saveAsync method to save
      // the custom properties.
      Office.initialize = function () {
          // Checks for the DOM to load using the jQuery ready function.
          $(document).ready(function () {
              // After the DOM is loaded, add-in-specific code can run.
              var mailbox = Office.context.mailbox;
              mailbox.item.loadCustomPropertiesAsync(customPropsCallback);
          });
      };

      function customPropsCallback(asyncResult) {
          var customProps = asyncResult.value;
          var myProp = customProps.get("myProp");

          customProps.set("otherProp", "value");
          customProps.saveAsync(saveCallback);
      }

      function saveCallback(asyncResult) {
      }
      ```
      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/15-item-custom-properties/load-set-get-save.yaml
      Office.context.mailbox.item.loadCustomPropertiesAsync(function (result) {
        if (result.status === Office.AsyncResultStatus.Succeeded) {
          console.log("Loaded following custom properties:");
          customProps = result.value;
          var dataKey = Object.keys(customProps)[0];
          var data = customProps[dataKey];
          for (var propertyName in data)
          {
            var propertyValue = data[propertyName];
            console.log(`${propertyName}: ${propertyValue}`);
          }              
        }
        else {
          console.error(`loadCustomPropertiesAsync failed with message ${result.error.message}`);
        }
      });
      ```
    name: 'loadCustomPropertiesAsync(callback, userContext)'
    fullName: 'loadCustomPropertiesAsync(callback, userContext)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'loadCustomPropertiesAsync(callback: (asyncResult: Office.AsyncResult<CustomProperties>) => void, userContext?: any): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: 'Cuando el método finaliza, la función que se pasa en `callback` el parámetro se llama con un único parámetro de tipo`Office.AsyncResult`<!-- -->.'
          type:
            - 'outlook!Office.AppointmentCompose#loadCustomPropertiesAsync~0:complex'
        - id: userContext
          description: Opcional. Los desarrolladores pueden proporcionar cualquier objeto al que quieran obtener acceso en la función de devolución de llamada. A este objeto se puede acceder mediante la propiedad `asyncResult.asyncContext` en la función de devolución de llamada.
          type:
            - any
  - uid: 'outlook!Office.AppointmentCompose#location:member'
    summary: 'Obtiene o establece la ubicación de una cita. La `location` propiedad devuelve un objeto [Location](xref:outlook!Office.Location:interface) que proporciona métodos que se usan para obtener y establecer la ubicación de la cita.'
    remarks: |-
      **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: Organizador de citas

      #### <a name="examples"></a>Ejemplos

      ```javascript
      var userContext = { value : 1 };
      Office.context.mailbox.item.location.getAsync( { context: userContext}, callback);

      function callback(asyncResult) {
          var context = asyncResult.context;
          var location = asyncResult.value;
      }
      ```
      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-set-location-appointment-organizer.yaml
      Office.context.mailbox.item.location.getAsync((result) => {
        if (result.status !== Office.AsyncResultStatus.Succeeded) {
          console.error(`Action failed with message ${result.error.message}`);
          return;
        }
        console.log(`Appointment location: ${result.value}`);
      });
      ```
      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-set-location-appointment-organizer.yaml
      var location = "my office";
      Office.context.mailbox.item.location.setAsync(location, (result) => {
        if (result.status !== Office.AsyncResultStatus.Succeeded) {
          console.error(`Action failed with message ${result.error.message}`);
          return;
        }
        console.log(`Successfully set location to ${location}`);
      });
      ```
    name: location
    fullName: location
    langs:
      - typeScript
    type: property
    syntax:
      content: 'location: Location;'
      return:
        type:
          - 'outlook!Office.Location:interface'
  - uid: 'outlook!Office.AppointmentCompose#notificationMessages:member'
    summary: |-
      Obtiene los mensajes de notificación de un elemento.

      \[[Conjunto de API: buzón de correo 1,3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: Organizador de citas

      #### <a name="examples"></a>Ejemplos

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/35-notifications/add-getall-remove.yaml
      var id = $("#notificationId").val();
      var details =
        {
          type: "progressIndicator",
          message: "Progress indicator with id = " + id
        };
      Office.context.mailbox.item.notificationMessages.addAsync(id, details, handleResult);
      ```
      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/35-notifications/add-getall-remove.yaml
      var id = $("#notificationId").val();
      var details =
        {
          type: "informationalMessage",
          message: "Non-persistent informational notification message with id = " + id,
          icon: "icon1",
          persistent: false
        };
      Office.context.mailbox.item.notificationMessages.addAsync(id, details, handleResult);
      ```
      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/35-notifications/add-getall-remove.yaml
      var id = $("#notificationId").val();
      var details =
        {
          type: "informationalMessage",
          message: "Persistent informational notification message with id = " + id,
          icon: "icon1",
          persistent: true
        };
      Office.context.mailbox.item.notificationMessages.addAsync(id, details, handleResult);
      ```
      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/35-notifications/add-getall-remove.yaml
      Office.context.mailbox.item.notificationMessages.getAllAsync(handleResult);          
      ```
      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/35-notifications/add-getall-remove.yaml
      var id = $("#notificationId").val();
      Office.context.mailbox.item.notificationMessages.replaceAsync(
        id,
        {
          type: "informationalMessage",
          message: "Notification message with id = " + id + " has been replaced with an informational message.",
          icon: "icon2",
          persistent: false
        },
        handleResult);
      ```
      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/35-notifications/add-getall-remove.yaml
      var id = $("#notificationId").val();
      Office.context.mailbox.item.notificationMessages.removeAsync(id, handleResult);
      ```
    name: notificationMessages
    fullName: notificationMessages
    langs:
      - typeScript
    type: property
    syntax:
      content: 'notificationMessages: NotificationMessages;'
      return:
        type:
          - 'outlook!Office.NotificationMessages:interface'
  - uid: 'outlook!Office.AppointmentCompose#optionalAttendees:member'
    summary: |-
      Proporciona acceso a los asistentes opcionales de un evento. El tipo de objeto y el nivel de acceso dependen del modo del elemento actual.

      La `optionalAttendees` propiedad devuelve un objeto [Recipients](xref:outlook!Office.Recipients:interface) que proporciona métodos para obtener o actualizar los asistentes opcionales para una reunión. Por defecto, la colección está limitada a un máximo de 100 miembros. Sin embargo, en Windows y Mac, se aplican los siguientes límites.

      - Obtenga un máximo de 500 miembros.

      - Establezca un máximo de 100 miembros por llamada, hasta un total de 500 miembros.
    remarks: |-
      **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: Organizador de citas

      #### <a name="examples"></a>Ejemplos

      ```javascript
      Office.context.mailbox.item.optionalAttendees.setAsync( ['alice@contoso.com', 'bob@contoso.com'] );
      Office.context.mailbox.item.optionalAttendees.addAsync( ['jason@contoso.com'] );
      Office.context.mailbox.item.optionalAttendees.getAsync(callback);

      function callback(asyncResult) {
          var arrayOfOptionalAttendeesRecipients = asyncResult.value;
      }
      ```
      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/30-recipients-and-attendees/get-set-optional-attendees-appointment-organizer.yaml
      Office.context.mailbox.item.optionalAttendees.getAsync(function(asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
          var apptOptionalAttendees = asyncResult.value;
          for (var i = 0; i < apptOptionalAttendees.length; i++) {
            console.log(
              "Optional attendees: " +
                apptOptionalAttendees[i].displayName +
                " (" +
                apptOptionalAttendees[i].emailAddress +
                ") - response: " +
                apptOptionalAttendees[i].appointmentResponse
            );
          }
        } else {
          console.error(asyncResult.error);
        }
      });
      ```
      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/30-recipients-and-attendees/get-set-optional-attendees-appointment-organizer.yaml
      var email = $("#emailOptional")
        .val()
        .toString();
      var emailArray = [email];
      Office.context.mailbox.item.optionalAttendees.setAsync(emailArray, function(asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
          console.log("Succeeded in setting optional attendees field.");
        } else {
          console.error(asyncResult.error);
        }
      });
      ```
    name: optionalAttendees
    fullName: optionalAttendees
    langs:
      - typeScript
    type: property
    syntax:
      content: 'optionalAttendees: Recipients;'
      return:
        type:
          - 'outlook!Office.Recipients:interface'
  - uid: 'outlook!Office.AppointmentCompose#organizer:member'
    summary: |-
      Obtiene el organizador de la reunión especificada.

      La `organizer` propiedad devuelve un objeto [Organizer](xref:outlook!Office.Organizer:interface) que proporciona un método para obtener el valor de organizador.

      \[[Conjunto de API: buzón de correo 1,7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: Organizador de citas

      #### <a name="examples"></a>Ejemplos

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/30-recipients-and-attendees/get-organizer-appointment-organizer.yaml
      Office.context.mailbox.item.organizer.getAsync(function(asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
          var apptOrganizer = asyncResult.value;
          console.log("Organizer: " + apptOrganizer.displayName + " (" + apptOrganizer.emailAddress + ")");
        } else {
          console.error(asyncResult.error);
        }
      });
      ```
    name: organizer
    fullName: organizer
    langs:
      - typeScript
    type: property
    syntax:
      content: 'organizer: Organizer;'
      return:
        type:
          - 'outlook!Office.Organizer:interface'
  - uid: 'outlook!Office.AppointmentCompose#recurrence:member'
    summary: |-
      Obtiene o establece el patrón de periodicidad de una cita.

      La `recurrence` propiedad devuelve un objeto recurrence para las solicitudes de citas o reuniones periódicas si un elemento es una serie o una instancia de una serie. `null`se devuelve para citas únicas y convocatorias de reunión de citas únicas.

      **Nota**: las convocatorias de reunión `itemClass` tienen un valor de`IPM.Schedule.Meeting.Request`<!-- -->.

      **Nota**: Si el objeto de periodicidad es null, indica que el objeto es una cita única o una convocatoria de reunión de una sola cita y no forma parte de una serie.

      \[[Conjunto de API: buzón de correo 1,7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: Organizador de citas

      #### <a name="examples"></a>Ejemplos

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/50-recurrence/get-set-recurrence-appointment-organizer.yaml
      Office.context.mailbox.item.recurrence.getAsync(function(asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
          var recurrence = asyncResult.value;
          if (recurrence === null) {
            console.log("This is a single appointment.");
          } else {
            console.log(`Recurrence pattern: ${JSON.stringify(recurrence)}`);
          }
        } else {
          console.error(asyncResult.error);
        }
      });
      ```
      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/50-recurrence/get-set-recurrence-appointment-organizer.yaml
      // Important: Can only set the recurrence pattern of an appointment series.

      var currentDate = new Date();
      let seriesTimeObject : Office.SeriesTime;
      // Set series start date to tomorrow.
      seriesTimeObject.setStartDate(
        currentDate.getFullYear(),
        currentDate.getMonth(),
        currentDate.getDay() + 1
      );
      // Set series end date to 1 month from now.
      seriesTimeObject.setEndDate(
        currentDate.getFullYear(),
        currentDate.getMonth() + 1,
        currentDate.getDay()
      );
      // Set start time to 1:30 PM.
      seriesTimeObject.setStartTime(13, 30);
      // Set duration to 30 minutes.
      seriesTimeObject.setDuration(30);

      let pattern : Office.Recurrence = {
        seriesTime: seriesTimeObject,
        recurrenceType: "weekly",
        recurrenceProperties: { interval: 1, days: ["tue", "thu"], firstDayOfWeek: "sun" },
        recurrenceTimeZone: { name: "Pacific Standard Time" }
      };

      Office.context.mailbox.item.recurrence.setAsync(pattern, (asyncResult) => {
        if (asyncResult.status !== Office.AsyncResultStatus.Succeeded) {
          console.error(`Failed to set recurrence. Error: ${asyncResult.error.message}`);
          return;
        }
        console.log(`Succeeded in setting recurrence pattern ${JSON.stringify(pattern)}`);
      });
      ```
    name: recurrence
    fullName: recurrence
    langs:
      - typeScript
    type: property
    syntax:
      content: 'recurrence: Recurrence;'
      return:
        type:
          - 'outlook!Office.Recurrence:interface'
  - uid: 'outlook!Office.AppointmentCompose#removeAttachmentAsync:member(1)'
    summary: |-
      Quita los datos adjuntos de un mensaje o cita.

      El método `removeAttachmentAsync` quita del elemento los datos adjuntos con el identificador especificado. Como práctica recomendada, debe usar el identificador de datos adjuntos para quitar datos adjuntos solo si la misma aplicación de correo ha agregado los datos adjuntos en la misma sesión. En Outlook en la Web y dispositivos móviles, el identificador de datos adjuntos solo es válido en la misma sesión. Una sesión es superior a cuando el usuario cierra la aplicación o si el usuario comienza a redactar un formulario en línea y, a continuación, el formulario continúa en una ventana independiente.

      \[[Conjunto de API: buzón de correo 1,1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadWriteItem`

      **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: Organizador de citas

      **Errores**:

      - `InvalidAttachmentId`<!-- -->: El identificador de los datos adjuntos no existe.

      #### <a name="examples"></a>Ejemplos

      ```javascript
      // The following code removes an attachment with an identifier of '0'.
      Office.context.mailbox.item.removeAttachmentAsync(
          '0',
          { asyncContext : null },
          function (asyncResult)
          {
              console.log(asyncResult.status);
          }
      );
      ```
      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/40-attachments/attachments-compose.yaml
      Office.context.mailbox.item.removeAttachmentAsync(
          $("#attachmentId").val(),
          { asyncContext : null },
          function(result)
          {
              if (result.status !== Office.AsyncResultStatus.Succeeded) {
                  console.error(`${result.error.message}`);
              } else {
                  console.log(`Attachment removed successfully.`);
              }
          }
      );
      ```
    name: 'removeAttachmentAsync(attachmentId, options, callback)'
    fullName: 'removeAttachmentAsync(attachmentId, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeAttachmentAsync(attachmentId: string, options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: attachmentId
          description: El identificador de los datos adjuntos para quitar.
          type:
            - string
        - id: options
          description: 'Opcional. Un objeto literal que contiene una o más de las siguientes propiedades. `asyncContext`<!-- -->: Los desarrolladores pueden proporcionar cualquier objeto al que quieran tener acceso en el método de devolución de llamada.'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: 'Opcional. Cuando el método finaliza, la función que se pasa en `callback` el parámetro se llama con un único parámetro de tipo`Office.AsyncResult`<!-- -->. Si se produce un error en la eliminación de los datos adjuntos, la propiedad `asyncResult.error` contendrá un código de error con el motivo del error.'
          type:
            - 'outlook!Office.AppointmentCompose#removeAttachmentAsync~0:complex'
  - uid: 'outlook!Office.AppointmentCompose#removeAttachmentAsync:member(2)'
    summary: |-
      Quita los datos adjuntos de un mensaje o cita.

      El método `removeAttachmentAsync` quita del elemento los datos adjuntos con el identificador especificado. Como práctica recomendada, debe usar el identificador de datos adjuntos para quitar datos adjuntos solo si la misma aplicación de correo ha agregado los datos adjuntos en la misma sesión. En Outlook en la Web y dispositivos móviles, el identificador de datos adjuntos solo es válido en la misma sesión. Una sesión es superior a cuando el usuario cierra la aplicación o si el usuario comienza a redactar un formulario en línea y, a continuación, el formulario continúa en una ventana independiente.

      \[[Conjunto de API: buzón de correo 1,1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadWriteItem`

      **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: Organizador de citas

      **Errores**:

      - `InvalidAttachmentId`<!-- -->: El identificador de los datos adjuntos no existe.
    name: 'removeAttachmentAsync(attachmentId, callback)'
    fullName: 'removeAttachmentAsync(attachmentId, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeAttachmentAsync(attachmentId: string, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: attachmentId
          description: El identificador de los datos adjuntos para quitar.
          type:
            - string
        - id: callback
          description: 'Opcional. Cuando el método finaliza, la función que se pasa en `callback` el parámetro se llama con un único parámetro de tipo`Office.AsyncResult`<!-- -->. Si se produce un error en la eliminación de los datos adjuntos, la propiedad `asyncResult.error` contendrá un código de error con el motivo del error.'
          type:
            - 'outlook!Office.AppointmentCompose#removeAttachmentAsync~1:complex'
  - uid: 'outlook!Office.AppointmentCompose#removeHandlerAsync:member(1)'
    summary: |-
      Elimina el controlador de eventos de un tpo de evento admitido. **Nota**: los eventos solo están disponibles con el panel de tareas.

      Para ver qué tipos de eventos son compatibles, `Office.EventType` consulte para obtener más información.

      \[[Conjunto de API: buzón de correo 1,7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: Organizador de citas
    name: 'removeHandlerAsync(eventType, options, callback)'
    fullName: 'removeHandlerAsync(eventType, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeHandlerAsync(eventType: Office.EventType | string, options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: El evento que debe revocar el controlador.
          type:
            - 'outlook!Office.AppointmentCompose#removeHandlerAsync~0:complex'
        - id: options
          description: 'Opcional. Un objeto literal que contiene una o más de las siguientes propiedades. `asyncContext`<!-- -->: Los desarrolladores pueden proporcionar cualquier objeto al que quieran tener acceso en el método de devolución de llamada.'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: 'Opcional. Cuando el método finaliza, la función que se pasa en `callback` el parámetro se llama con un único parámetro,`asyncResult`<!-- -->, que es un `Office.AsyncResult` objeto.'
          type:
            - 'outlook!Office.AppointmentCompose#removeHandlerAsync~1:complex'
  - uid: 'outlook!Office.AppointmentCompose#removeHandlerAsync:member(2)'
    summary: |-
      Elimina el controlador de eventos de un tpo de evento admitido. **Nota**: los eventos solo están disponibles con el panel de tareas.

      Para ver qué tipos de eventos son compatibles, `Office.EventType` consulte para obtener más información.

      \[[Conjunto de API: buzón de correo 1,7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: Organizador de citas
    name: 'removeHandlerAsync(eventType, callback)'
    fullName: 'removeHandlerAsync(eventType, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeHandlerAsync(eventType: Office.EventType | string, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: El evento que debe revocar el controlador.
          type:
            - 'outlook!Office.AppointmentCompose#removeHandlerAsync~2:complex'
        - id: callback
          description: 'Opcional. Cuando el método finaliza, la función que se pasa en `callback` el parámetro se llama con un único parámetro,`asyncResult`<!-- -->, que es un `Office.AsyncResult` objeto.'
          type:
            - 'outlook!Office.AppointmentCompose#removeHandlerAsync~3:complex'
  - uid: 'outlook!Office.AppointmentCompose#requiredAttendees:member'
    summary: |-
      Proporciona acceso a los asistentes necesarios de un evento. El tipo de objeto y el nivel de acceso dependen del modo del elemento actual.

      La `requiredAttendees` propiedad devuelve un objeto [Recipients](xref:outlook!Office.Recipients:interface) que proporciona métodos para obtener o actualizar los asistentes necesarios para una reunión. Por defecto, la colección está limitada a un máximo de 100 miembros. Sin embargo, en Windows y Mac, se aplican los siguientes límites.

      - Obtenga un máximo de 500 miembros.

      - Establezca un máximo de 100 miembros por llamada, hasta un total de 500 miembros.
    remarks: |-
      **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: Organizador de citas

      #### <a name="examples"></a>Ejemplos

      ```javascript
      Office.context.mailbox.item.requiredAttendees.setAsync( ['alice@contoso.com', 'bob@contoso.com'] );
      Office.context.mailbox.item.requiredAttendees.addAsync( ['jason@contoso.com'] );
      Office.context.mailbox.item.requiredAttendees.getAsync(callback);

      function callback(asyncResult) {
          var arrayOfRequiredAttendeesRecipients = asyncResult.value;
          console.log(JSON.stringify(arrayOfRequiredAttendeesRecipients));
      }
      ```
      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/30-recipients-and-attendees/get-set-required-attendees-appointment-organizer.yaml
      Office.context.mailbox.item.requiredAttendees.getAsync(function(asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
          var apptRequiredAttendees = asyncResult.value;
          for (var i = 0; i < apptRequiredAttendees.length; i++) {
            console.log(
              "Required attendees: " +
                apptRequiredAttendees[i].displayName +
                " (" +
                apptRequiredAttendees[i].emailAddress +
                ") - response: " +
                apptRequiredAttendees[i].appointmentResponse
            );
          }
        } else {
          console.error(asyncResult.error);
        }
      });
      ```
      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/30-recipients-and-attendees/get-set-required-attendees-appointment-organizer.yaml
      var email = $("#emailRequired")
        .val()
        .toString();
      var emailArray = [email];
      Office.context.mailbox.item.requiredAttendees.setAsync(emailArray, function(asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
          console.log("Succeeded in setting required attendees field.");
        } else {
          console.error(asyncResult.error);
        }
      });
      ```
    name: requiredAttendees
    fullName: requiredAttendees
    langs:
      - typeScript
    type: property
    syntax:
      content: 'requiredAttendees: Recipients;'
      return:
        type:
          - 'outlook!Office.Recipients:interface'
  - uid: 'outlook!Office.AppointmentCompose#saveAsync:member(1)'
    summary: |-
      Guarda un elemento de forma asincrónica.

      Cuando se invoca, este método guarda el mensaje actual como un borrador y devuelve el identificador de elemento a través del método de devolución de llamada. En el modo en línea de Outlook o en Outlook en la web, el elemento se guarda en el servidor. En modo en caché de Outlook, se guarda el elemento en la caché local.

      Dado que las citas no tienen ningún estado de borrador, si se llama a `saveAsync` en una cita en modo de redacción, el elemento se guardará como una cita normal en el calendario del usuario. Para las citas nuevas que todavía no se han guardado, no se enviará ninguna invitación. Si se guarda una cita existente, se enviará una actualización a los asistentes agregados o eliminados.

      **Nota**: Si el complemento llama `saveAsync` a un elemento en el modo de redacción para obtener un identificador de elemento para usarlo con EWS o la API de REST, tenga en cuenta que cuando Outlook está en modo de caché, puede tardar algún tiempo antes de que el elemento se sincronice realmente con el servidor. Hasta que el elemento se sincronice, el uso del identificador de elemento devolverá un error.

      **Nota**: los siguientes clientes tienen un comportamiento diferente `saveAsync` para en las citas en el modo de redacción:

      - En Outlook en Mac, solo la versión preliminar 16.35.205.0 o posterior con una suscripción de Office 365 admite guardar una reunión. De lo contrario `saveAsync` , se produce un error en el método cuando se llama desde una reunión en modo de redacción. Para obtener una solución alternativa, vea [no se puede guardar una reunión como borrador en Outlook para Mac mediante la API de JS de Office](https://support.microsoft.com/help/4505745) .<!-- -->.

      - Outlook en la Web siempre envía una invitación o actualización cuando se llama a `saveAsync` para una cita en modo de redacción.

      \[[Conjunto de API: buzón de correo 1,3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadWriteItem`

      **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: Organizador de citas

      **Errores**:

      - `InvalidAttachmentId`<!-- -->: El identificador de los datos adjuntos no existe.

      #### <a name="examples"></a>Ejemplos

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/25-item-save-and-close/save.yaml
      Office.context.mailbox.item.saveAsync(function (result) {
        if (result.status === Office.AsyncResultStatus.Succeeded) {
          console.log(`saveAsync succeeded, itemId is ${result.value}`);
        }
        else {
          console.error(`saveAsync failed with message ${result.error.message}`);
        }
      });
      ```
    name: 'saveAsync(options, callback)'
    fullName: 'saveAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'saveAsync(options: Office.AsyncContextOptions, callback: (asyncResult: Office.AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: 'Un objeto literal que contiene una o más de las siguientes propiedades. `asyncContext`<!-- -->: Los desarrolladores pueden proporcionar cualquier objeto al que quieran tener acceso en el método de devolución de llamada.'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: 'Cuando el método finaliza, la función que se pasa en `callback` el parámetro se llama con un único parámetro de tipo`Office.AsyncResult`<!-- -->.'
          type:
            - 'outlook!Office.AppointmentCompose#saveAsync~0:complex'
  - uid: 'outlook!Office.AppointmentCompose#saveAsync:member(2)'
    summary: |-
      Guarda un elemento de forma asincrónica.

      Cuando se invoca, este método guarda el mensaje actual como un borrador y devuelve el identificador de elemento a través del método de devolución de llamada. En el modo en línea de Outlook o en Outlook en la web, el elemento se guarda en el servidor. En modo en caché de Outlook, se guarda el elemento en la caché local.

      Dado que las citas no tienen ningún estado de borrador, si se llama a `saveAsync` en una cita en modo de redacción, el elemento se guardará como una cita normal en el calendario del usuario. Para las citas nuevas que todavía no se han guardado, no se enviará ninguna invitación. Si se guarda una cita existente, se enviará una actualización a los asistentes agregados o eliminados.

      **Nota**: Si el complemento llama `saveAsync` a un elemento en el modo de redacción para obtener un identificador de elemento para usarlo con EWS o la API de REST, tenga en cuenta que cuando Outlook está en modo de caché, puede tardar algún tiempo antes de que el elemento se sincronice realmente con el servidor. Hasta que el elemento se sincronice, el uso del identificador de elemento devolverá un error.

      **Nota**: los siguientes clientes tienen un comportamiento diferente `saveAsync` para en las citas en el modo de redacción:

      - En Outlook en Mac, solo la versión preliminar 16.35.205.0 o posterior con una suscripción de Office 365 admite guardar una reunión. De lo contrario `saveAsync` , se produce un error en el método cuando se llama desde una reunión en modo de redacción. Para obtener una solución alternativa, vea [no se puede guardar una reunión como borrador en Outlook para Mac mediante la API de JS de Office](https://support.microsoft.com/help/4505745) .<!-- -->.

      - Outlook en la Web siempre envía una invitación o actualización cuando se llama a `saveAsync` para una cita en modo de redacción.

      \[[Conjunto de API: buzón de correo 1,3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadWriteItem`

      **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: Organizador de citas

      **Errores**:

      - `InvalidAttachmentId`<!-- -->: El identificador de los datos adjuntos no existe.

      #### <a name="examples"></a>Ejemplos

      ```javascript
      Office.context.mailbox.item.saveAsync(
          function callback(result) {
              // Process the result.
          });

      // The following is an example of the
      // `result` parameter passed to the
      // callback function. The `value`
      // property contains the item ID of
      // the item.
      {
          "value": "AAMkADI5...AAA=",
          "status": "succeeded"
      }
      ```
    name: saveAsync(callback)
    fullName: saveAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'saveAsync(callback: (asyncResult: Office.AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: 'Cuando el método finaliza, la función que se pasa en el parámetro callback se llama con un único parámetro de tipo`Office.AsyncResult`<!-- -->.'
          type:
            - 'outlook!Office.AppointmentCompose#saveAsync~1:complex'
  - uid: 'outlook!Office.AppointmentCompose#seriesId:member'
    summary: |-
      Obtiene el identificador de la serie a la que pertenece una instancia.

      En los clientes de Outlook en la web y de `seriesId` escritorio, la propiedad devuelve el identificador de los servicios web Exchange (EWS) del elemento primario (serie) al que pertenece este elemento. Sin embargo, en iOS y Android, seriesId devuelve el identificador de REST del elemento primario.

      **Nota**: el identificador que devuelve la `seriesId` propiedad es el mismo que el identificador de elemento de servicios web Exchange. La `seriesId` propiedad no es idéntica a los identificadores de Outlook usados por la API de REST de Outlook. Antes de realizar llamadas a la API de REST con este valor, se debe convertir mediante`Office.context.mailbox.convertToRestId`<!-- -->. Para obtener más información, vea [usar las API de REST de Outlook desde un complemento de Outlook](https://docs.microsoft.com/office/dev/add-ins/outlook/use-rest-api) .<!-- -->.

      La `seriesId` propiedad devuelve `null` los elementos que no tienen elementos primarios, como citas únicas, elementos de serie o convocatorias de reunión, `undefined` y devuelven los elementos que no son convocatorias de reunión.

      \[[Conjunto de API: buzón de correo 1,7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: Organizador de citas

      #### <a name="examples"></a>Ejemplos

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/50-recurrence/get-series-id.yaml
      var seriesId = Office.context.mailbox.item.seriesId;

      if (seriesId === undefined) {
        console.log("This is a message that's not a meeting request.");
      } else if (seriesId === null) {
        console.log("This is a single appointment, a parent series, or a meeting request for a series or single meeting.");
      } else {
        console.log("This is an instance belonging to series with ID " + seriesId);
      }
      ```
    name: seriesId
    fullName: seriesId
    langs:
      - typeScript
    type: property
    syntax:
      content: 'seriesId: string;'
      return:
        type:
          - string
  - uid: 'outlook!Office.AppointmentCompose#setSelectedDataAsync:member(1)'
    summary: |-
      Inserta asincrónicamente datos en el cuerpo o el asunto de un mensaje.

      El método `setSelectedDataAsync` inserta la cadena especificada en la posición del cursor en el asunto o el cuerpo del elemento, o si se selecciona texto en el editor, reemplaza el texto seleccionado. Si el cursor no está en el cuerpo o el campo del asunto, se devuelve un error. Después de la inserción, el cursor se coloca al final del contenido insertado.

      \[[Conjunto de API: buzón de correo 1,2](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadWriteItem`

      **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: Organizador de citas

      **Errores**:

      - `InvalidAttachmentId`<!-- -->: El identificador de los datos adjuntos no existe.

      #### <a name="examples"></a>Ejemplos

      ```javascript
      Office.context.mailbox.item.setSelectedDataAsync("<b>Hello World!</b>", { coercionType : "html" });
      ```
    name: 'setSelectedDataAsync(data, options, callback)'
    fullName: 'setSelectedDataAsync(data, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setSelectedDataAsync(data: string, options?: Office.AsyncContextOptions & CoercionTypeOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: data
          description: 'Datos que se van a insertar. Los datos no deben superar 1.000.000 de caracteres. Si se pasan más de 1.000.000 de caracteres, se produce una excepción `ArgumentOutOfRange`.'
          type:
            - string
        - id: options
          description: 'Opcional. Un objeto literal que contiene una o más de las siguientes propiedades. `asyncContext`<!-- -->: Los desarrolladores pueden proporcionar cualquier objeto al que quieran tener acceso en el método de devolución de llamada. `coercionType`<!-- -->: Si es texto, el estilo actual se aplica en Outlook en la web y Windows. Si el campo es un editor de HTML, se insertan solo los datos de texto, aunque los datos sean HTML. Si HTML y el campo admiten HTML (el asunto no), el estilo actual se aplica en Outlook en la web y el estilo predeterminado se aplica en los clientes de Outlook en escritorio. Si el campo es un campo de texto, se devuelve un error `InvalidDataFormat`. Si `coercionType` no está establecido, el resultado depende del campo: si el campo es HTML, se usa HTML; si el campo es texto, se usa texto sin formato.'
          type:
            - 'outlook!Office.AppointmentCompose#setSelectedDataAsync~0:complex'
        - id: callback
          description: 'Opcional. Cuando el método finaliza, la función que se pasa en `callback` el parámetro se llama con un único parámetro de tipo`Office.AsyncResult`<!-- -->.'
          type:
            - 'outlook!Office.AppointmentCompose#setSelectedDataAsync~1:complex'
  - uid: 'outlook!Office.AppointmentCompose#setSelectedDataAsync:member(2)'
    summary: |-
      Inserta asincrónicamente datos en el cuerpo o el asunto de un mensaje.

      El método `setSelectedDataAsync` inserta la cadena especificada en la posición del cursor en el asunto o el cuerpo del elemento, o si se selecciona texto en el editor, reemplaza el texto seleccionado. Si el cursor no está en el cuerpo o el campo del asunto, se devuelve un error. Después de la inserción, el cursor se coloca al final del contenido insertado.

      \[[Conjunto de API: buzón de correo 1,2](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadWriteItem`

      **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: Organizador de citas

      **Errores**:

      - `InvalidAttachmentId`<!-- -->: El identificador de los datos adjuntos no existe.

      #### <a name="examples"></a>Ejemplos

      ```javascript
      Office.context.mailbox.item.setSelectedDataAsync("Hello World!");
      ```
      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/20-item-body/set-selected-data.yaml
      Office.context.mailbox.item.setSelectedDataAsync("Replaced", function(asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
          console.log("Selected text has been updated successfully.");
        } else {
          console.error(asyncResult.error);
        }
      });
      ```
    name: 'setSelectedDataAsync(data, callback)'
    fullName: 'setSelectedDataAsync(data, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setSelectedDataAsync(data: string, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: data
          description: 'Datos que se van a insertar. Los datos no deben superar 1.000.000 de caracteres. Si se pasan más de 1.000.000 de caracteres, se produce una excepción `ArgumentOutOfRange`.'
          type:
            - string
        - id: callback
          description: 'Opcional. Cuando el método finaliza, la función que se pasa en `callback` el parámetro se llama con un único parámetro de tipo`Office.AsyncResult`<!-- -->.'
          type:
            - 'outlook!Office.AppointmentCompose#setSelectedDataAsync~2:complex'
  - uid: 'outlook!Office.AppointmentCompose#start:member'
    summary: |-
      Obtiene o establece la fecha y la hora de inicio de la cita.

      La `start` propiedad es un objeto [Time](xref:outlook!Office.Time:interface) expresado como un valor de fecha y hora de la hora universal coordinada (UTC). Puede usar el `convertToLocalClientTime` método para convertir el valor a la fecha y hora local del cliente.

      Si usa el método `Time.setAsync` para establecer la hora de inicio, use el método `convertToUtcClientTime` para convertir la hora local del cliente en un valor UTC para el servidor.
    remarks: |-
      **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: Organizador de citas

      #### <a name="examples"></a>Ejemplos

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-set-start-appointment-organizer.yaml
      Office.context.mailbox.item.start.getAsync((result) => {
        if (result.status !== Office.AsyncResultStatus.Succeeded) {
          console.error(`Action failed with message ${result.error.message}`);
          return;
        }
        console.log(`Appointment starts: ${result.value}`);
      });
      ```
      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-set-start-appointment-organizer.yaml
      var start = new Date(); // Represents current date and time.
      start.setDate(start.getDate() + 2); // Add 2 days to current date.
      Office.context.mailbox.item.start.setAsync(start, (result) => {
        if (result.status !== Office.AsyncResultStatus.Succeeded) {
          console.error(`Action failed with message ${result.error.message}`);
          return;
        }
        console.log(`Successfully set start date and time to ${start}`);
      });
      ```
    name: start
    fullName: start
    langs:
      - typeScript
    type: property
    syntax:
      content: 'start: Time;'
      return:
        type:
          - 'outlook!Office.Time:interface'
  - uid: 'outlook!Office.AppointmentCompose#subject:member'
    summary: |-
      Obtiene o establece la descripción que se muestra en el campo de asunto de un elemento.

      La propiedad `subject` obtiene o establece el asunto completo del elemento, como lo ha enviado el servidor de correo electrónico.

      La propiedad `subject` devuelve un objeto `Subject` que proporciona métodos para obtener y establecer el asunto.
    remarks: |-
      **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: Organizador de citas

      #### <a name="examples"></a>Ejemplos

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-set-subject-compose.yaml
      Office.context.mailbox.item.subject.getAsync((result) => {
        if (result.status !== Office.AsyncResultStatus.Succeeded) {
          console.error(`Action failed with message ${result.error.message}`);
          return;
        }
        console.log(`Subject: ${result.value}`);
      });
      ```
      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-set-subject-compose.yaml
      let subject = "Hello World!";
      Office.context.mailbox.item.subject.setAsync(subject, (result) => {
        if (result.status !== Office.AsyncResultStatus.Succeeded) {
          console.error(`Action failed with message ${result.error.message}`);
          return;
        }
        console.log(`Successfully set subject to ${subject}`);
      });
      ```
    name: subject
    fullName: subject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'subject: Subject;'
      return:
        type:
          - 'outlook!Office.Subject:interface'
references:
  - uid: 'outlook!Office.Appointment:interface'
    name: Appointment
  - uid: 'outlook!Office.ItemCompose:interface'
    name: ItemCompose
  - uid: 'outlook!Office.AppointmentCompose#addFileAttachmentAsync~0:complex'
    name: 'Office.AsyncContextOptions & { isInline: boolean }'
    fullName: 'Office.AsyncContextOptions & { isInline: boolean }'
    spec.typeScript:
      - uid: 'office!Office.AsyncContextOptions:interface'
        name: Office.AsyncContextOptions
        fullName: Office.AsyncContextOptions
      - name: ' & { isInline: boolean }'
        fullName: ' & { isInline: boolean }'
  - uid: 'outlook!Office.AppointmentCompose#addFileAttachmentAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<string>) => void'
    fullName: '(asyncResult: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'outlook!Office.AppointmentCompose#addFileAttachmentAsync~2:complex'
    name: '(asyncResult: Office.AsyncResult<string>) => void'
    fullName: '(asyncResult: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'outlook!Office.AppointmentCompose#addFileAttachmentFromBase64Async~0:complex'
    name: 'Office.AsyncContextOptions &  { isInline: boolean }'
    fullName: 'Office.AsyncContextOptions &  { isInline: boolean }'
    spec.typeScript:
      - uid: 'office!Office.AsyncContextOptions:interface'
        name: Office.AsyncContextOptions
        fullName: Office.AsyncContextOptions
      - name: ' &  { isInline: boolean }'
        fullName: ' &  { isInline: boolean }'
  - uid: 'outlook!Office.AppointmentCompose#addFileAttachmentFromBase64Async~1:complex'
    name: '(asyncResult: Office.AsyncResult<string>) => void'
    fullName: '(asyncResult: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'outlook!Office.AppointmentCompose#addFileAttachmentFromBase64Async~2:complex'
    name: '(asyncResult: Office.AsyncResult<string>) => void'
    fullName: '(asyncResult: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'outlook!Office.AppointmentCompose#addHandlerAsync~0:complex'
    name: Office.EventType | string
    fullName: Office.EventType | string
    spec.typeScript:
      - uid: 'office!Office.EventType:enum'
        name: Office.EventType
        fullName: Office.EventType
      - name: ' | string'
        fullName: ' | string'
  - uid: 'office!Office.AsyncContextOptions:interface'
    name: Office.AsyncContextOptions
  - uid: 'outlook!Office.AppointmentCompose#addHandlerAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.AppointmentCompose#addHandlerAsync~2:complex'
    name: Office.EventType | string
    fullName: Office.EventType | string
    spec.typeScript:
      - uid: 'office!Office.EventType:enum'
        name: Office.EventType
        fullName: Office.EventType
      - name: ' | string'
        fullName: ' | string'
  - uid: 'outlook!Office.AppointmentCompose#addHandlerAsync~3:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.AppointmentCompose#addItemAttachmentAsync~0:complex'
    name: '(asyncResult: Office.AsyncResult<string>) => void'
    fullName: '(asyncResult: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'outlook!Office.AppointmentCompose#addItemAttachmentAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<string>) => void'
    fullName: '(asyncResult: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'outlook!Office.Body:interface'
    name: Body
  - uid: 'outlook!Office.Categories:interface'
    name: Categories
  - uid: 'outlook!Office.Time:interface'
    name: Time
  - uid: 'outlook!Office.EnhancedLocation:interface'
    name: EnhancedLocation
  - uid: 'outlook!Office.AppointmentCompose#getAttachmentContentAsync~0:complex'
    name: '(asyncResult: Office.AsyncResult<AttachmentContent>) => void'
    fullName: '(asyncResult: Office.AsyncResult<Office.AttachmentContent>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <
        fullName: <
      - uid: 'outlook!Office.AttachmentContent:interface'
        name: AttachmentContent
        fullName: Office.AttachmentContent
      - name: '>) => void'
        fullName: '>) => void'
  - uid: 'outlook!Office.AppointmentCompose#getAttachmentContentAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<AttachmentContent>) => void'
    fullName: '(asyncResult: Office.AsyncResult<Office.AttachmentContent>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <
        fullName: <
      - uid: 'outlook!Office.AttachmentContent:interface'
        name: AttachmentContent
        fullName: Office.AttachmentContent
      - name: '>) => void'
        fullName: '>) => void'
  - uid: 'outlook!Office.AppointmentCompose#getAttachmentsAsync~0:complex'
    name: '(asyncResult: Office.AsyncResult<AttachmentDetails[]>) => void'
    fullName: '(asyncResult: Office.AsyncResult<Office.AttachmentDetails[]>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <
        fullName: <
      - uid: 'outlook!Office.AttachmentDetails:interface'
        name: AttachmentDetails
        fullName: Office.AttachmentDetails
      - name: '[]>) => void'
        fullName: '[]>) => void'
  - uid: 'outlook!Office.AppointmentCompose#getAttachmentsAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<AttachmentDetails[]>) => void'
    fullName: '(asyncResult: Office.AsyncResult<Office.AttachmentDetails[]>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <
        fullName: <
      - uid: 'outlook!Office.AttachmentDetails:interface'
        name: AttachmentDetails
        fullName: Office.AttachmentDetails
      - name: '[]>) => void'
        fullName: '[]>) => void'
  - uid: 'outlook!Office.AppointmentCompose#getItemIdAsync~0:complex'
    name: '(asyncResult: Office.AsyncResult<string>) => void'
    fullName: '(asyncResult: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'outlook!Office.AppointmentCompose#getItemIdAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<string>) => void'
    fullName: '(asyncResult: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'outlook!Office.AppointmentCompose#getSelectedDataAsync~0:complex'
    name: Office.CoercionType | string
    fullName: Office.CoercionType | string
    spec.typeScript:
      - uid: 'office!Office.CoercionType:enum'
        name: Office.CoercionType
        fullName: Office.CoercionType
      - name: ' | string'
        fullName: ' | string'
  - uid: 'outlook!Office.AppointmentCompose#getSelectedDataAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<any>) => void'
    fullName: '(asyncResult: Office.AsyncResult<any>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <any>) => void
        fullName: <any>) => void
  - uid: 'outlook!Office.AppointmentCompose#getSelectedDataAsync~2:complex'
    name: Office.CoercionType | string
    fullName: Office.CoercionType | string
    spec.typeScript:
      - uid: 'office!Office.CoercionType:enum'
        name: Office.CoercionType
        fullName: Office.CoercionType
      - name: ' | string'
        fullName: ' | string'
  - uid: 'outlook!Office.AppointmentCompose#getSelectedDataAsync~3:complex'
    name: '(asyncResult: Office.AsyncResult<string>) => void'
    fullName: '(asyncResult: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'outlook!Office.AppointmentCompose#getSharedPropertiesAsync~0:complex'
    name: '(asyncResult: Office.AsyncResult<SharedProperties>) => void'
    fullName: '(asyncResult: Office.AsyncResult<Office.SharedProperties>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <
        fullName: <
      - uid: 'outlook!Office.SharedProperties:interface'
        name: SharedProperties
        fullName: Office.SharedProperties
      - name: '>) => void'
        fullName: '>) => void'
  - uid: 'outlook!Office.AppointmentCompose#getSharedPropertiesAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<SharedProperties>) => void'
    fullName: '(asyncResult: Office.AsyncResult<Office.SharedProperties>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <
        fullName: <
      - uid: 'outlook!Office.SharedProperties:interface'
        name: SharedProperties
        fullName: Office.SharedProperties
      - name: '>) => void'
        fullName: '>) => void'
  - uid: 'outlook!Office.AppointmentCompose#itemType~0:complex'
    name: MailboxEnums.ItemType | string
    fullName: Office.MailboxEnums.ItemType | string
    spec.typeScript:
      - uid: 'outlook!Office.MailboxEnums.ItemType:enum'
        name: MailboxEnums.ItemType
        fullName: Office.MailboxEnums.ItemType
      - name: ' | string'
        fullName: ' | string'
  - uid: 'outlook!Office.AppointmentCompose#loadCustomPropertiesAsync~0:complex'
    name: '(asyncResult: Office.AsyncResult<CustomProperties>) => void'
    fullName: '(asyncResult: Office.AsyncResult<Office.CustomProperties>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <
        fullName: <
      - uid: 'outlook!Office.CustomProperties:interface'
        name: CustomProperties
        fullName: Office.CustomProperties
      - name: '>) => void'
        fullName: '>) => void'
  - uid: 'outlook!Office.Location:interface'
    name: Location
  - uid: 'outlook!Office.NotificationMessages:interface'
    name: NotificationMessages
  - uid: 'outlook!Office.Recipients:interface'
    name: Recipients
  - uid: 'outlook!Office.Organizer:interface'
    name: Organizer
  - uid: 'outlook!Office.Recurrence:interface'
    name: Recurrence
  - uid: 'outlook!Office.AppointmentCompose#removeAttachmentAsync~0:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.AppointmentCompose#removeAttachmentAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.AppointmentCompose#removeHandlerAsync~0:complex'
    name: Office.EventType | string
    fullName: Office.EventType | string
    spec.typeScript:
      - uid: 'office!Office.EventType:enum'
        name: Office.EventType
        fullName: Office.EventType
      - name: ' | string'
        fullName: ' | string'
  - uid: 'outlook!Office.AppointmentCompose#removeHandlerAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.AppointmentCompose#removeHandlerAsync~2:complex'
    name: Office.EventType | string
    fullName: Office.EventType | string
    spec.typeScript:
      - uid: 'office!Office.EventType:enum'
        name: Office.EventType
        fullName: Office.EventType
      - name: ' | string'
        fullName: ' | string'
  - uid: 'outlook!Office.AppointmentCompose#removeHandlerAsync~3:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.AppointmentCompose#saveAsync~0:complex'
    name: '(asyncResult: Office.AsyncResult<string>) => void'
    fullName: '(asyncResult: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'outlook!Office.AppointmentCompose#saveAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<string>) => void'
    fullName: '(asyncResult: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'outlook!Office.AppointmentCompose#setSelectedDataAsync~0:complex'
    name: Office.AsyncContextOptions & CoercionTypeOptions
    fullName: Office.AsyncContextOptions & Office.CoercionTypeOptions
    spec.typeScript:
      - uid: 'office!Office.AsyncContextOptions:interface'
        name: Office.AsyncContextOptions
        fullName: Office.AsyncContextOptions
      - name: ' & '
        fullName: ' & '
      - uid: 'outlook!Office.CoercionTypeOptions:interface'
        name: CoercionTypeOptions
        fullName: Office.CoercionTypeOptions
  - uid: 'outlook!Office.AppointmentCompose#setSelectedDataAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.AppointmentCompose#setSelectedDataAsync~2:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.Subject:interface'
    name: Subject