### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.TextConditionalFormat:class'
    summary: |-
      <span data-ttu-id="35e06-101">Representa un formato condicional de texto específico.</span><span class="sxs-lookup"><span data-stu-id="35e06-101">Represents a specific text conditional format.</span></span>

      <span data-ttu-id="35e06-102">\[[Conjunto de API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="35e06-102">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: Excel.TextConditionalFormat
    fullName: Excel.TextConditionalFormat
    langs:
      - typeScript
    type: class
    extends:
      - 'excel!OfficeExtension.ClientObject:class'
    package: excel!
    children:
      - 'excel!Excel.TextConditionalFormat#context:member'
      - 'excel!Excel.TextConditionalFormat#format:member'
      - 'excel!Excel.TextConditionalFormat#load:member(1)'
      - 'excel!Excel.TextConditionalFormat#load:member(2)'
      - 'excel!Excel.TextConditionalFormat#load:member(3)'
      - 'excel!Excel.TextConditionalFormat#rule:member'
      - 'excel!Excel.TextConditionalFormat#set:member(1)'
      - 'excel!Excel.TextConditionalFormat#set:member(2)'
      - 'excel!Excel.TextConditionalFormat#toJSON:member(1)'
  - uid: 'excel!Excel.TextConditionalFormat#context:member'
    summary: <span data-ttu-id="35e06-103">Contexto de la solicitud asociado al objeto.</span><span class="sxs-lookup"><span data-stu-id="35e06-103">The request context associated with the object.</span></span> <span data-ttu-id="35e06-104">Esto conecta el proceso del complemento con el proceso de la aplicación host de Office.</span><span class="sxs-lookup"><span data-stu-id="35e06-104">This connects the add-in's process to the Office host application's process.</span></span>
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'excel!Excel.RequestContext:class'
  - uid: 'excel!Excel.TextConditionalFormat#format:member'
    summary: |-
      <span data-ttu-id="35e06-105">Devuelve un objeto Format, encapsulando la fuente de los formatos condicionales, el relleno, los bordes y otras propiedades.</span><span class="sxs-lookup"><span data-stu-id="35e06-105">Returns a format object, encapsulating the conditional formats font, fill, borders, and other properties.</span></span> <span data-ttu-id="35e06-106">Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="35e06-106">Read-only.</span></span>

      <span data-ttu-id="35e06-107">\[[Conjunto de API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="35e06-107">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: format
    fullName: format
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly format: Excel.ConditionalRangeFormat;'
      return:
        type:
          - 'excel!Excel.ConditionalRangeFormat:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="35e06-108">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="35e06-108">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const range = sheet.getRange("B16:D18");
              const conditionalFormat = range.conditionalFormats
                  .add(Excel.ConditionalFormatType.containsText);
              conditionalFormat.textComparison.format.font.color = "red";
              conditionalFormat.textComparison.rule = { operator: Excel.ConditionalTextOperator.contains, text: "Delayed" };

              await context.sync();
          });
          ```
  - uid: 'excel!Excel.TextConditionalFormat#load:member(1)'
    summary: '<span data-ttu-id="35e06-109">Pone en cola un comando para cargar las propiedades especificadas del objeto.</span><span class="sxs-lookup"><span data-stu-id="35e06-109">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="35e06-110">Antes de leer las propiedades, debe llamar a "context.sync()".</span><span class="sxs-lookup"><span data-stu-id="35e06-110">You must call "context.sync()" before reading the properties.</span></span>'
    remarks: |-
      <span data-ttu-id="35e06-111">Además de esta firma, este método tiene las siguientes firmas:</span><span class="sxs-lookup"><span data-stu-id="35e06-111">In addition to this signature, this method has the following signatures:</span></span>

      <span data-ttu-id="35e06-112">`load(option?: string | string[]): Excel.TextConditionalFormat`-Donde opción es una cadena delimitada por comas o una matriz de cadenas que especifican las propiedades que se van a cargar.</span><span class="sxs-lookup"><span data-stu-id="35e06-112">`load(option?: string | string[]): Excel.TextConditionalFormat` - Where option is a comma-delimited string or an array of strings that specify the properties to load.</span></span>

      <span data-ttu-id="35e06-113">`load(option?: { select?: string; expand?: string; }): Excel.TextConditionalFormat`-Where opción. Select es una cadena delimitada por comas que especifica las propiedades que se van a cargar y Options. Expand es una cadena delimitada por comas que especifica las propiedades de navegación que se deben cargar.</span><span class="sxs-lookup"><span data-stu-id="35e06-113">`load(option?: { select?: string; expand?: string; }): Excel.TextConditionalFormat` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>

      <span data-ttu-id="35e06-114">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.TextConditionalFormat`-Solo disponible en tipos de colección.</span><span class="sxs-lookup"><span data-stu-id="35e06-114">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.TextConditionalFormat` - Only available on collection types.</span></span> <span data-ttu-id="35e06-115">Es similar a la firma anterior.</span><span class="sxs-lookup"><span data-stu-id="35e06-115">It is similar to the preceding signature.</span></span> <span data-ttu-id="35e06-116">Option. Top especifica el número máximo de elementos de colección que se pueden incluir en el resultado.</span><span class="sxs-lookup"><span data-stu-id="35e06-116">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="35e06-117">La opción. SKIP especifica el número de elementos que se deben omitir y que no se incluyen en el resultado.</span><span class="sxs-lookup"><span data-stu-id="35e06-117">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="35e06-118">Si se especifica Option. Top, el conjunto de resultados se iniciará después de omitir el número especificado de elementos.</span><span class="sxs-lookup"><span data-stu-id="35e06-118">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: Excel.Interfaces.TextConditionalFormatLoadOptions): Excel.TextConditionalFormat;'
      return:
        type:
          - 'excel!Excel.TextConditionalFormat:class'
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - 'excel!Excel.Interfaces.TextConditionalFormatLoadOptions:interface'
  - uid: 'excel!Excel.TextConditionalFormat#load:member(2)'
    summary: <span data-ttu-id="35e06-119">Pone en cola un comando para cargar las propiedades especificadas del objeto.</span><span class="sxs-lookup"><span data-stu-id="35e06-119">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="35e06-120">Debe llamar `context.sync()` antes de leer las propiedades.</span><span class="sxs-lookup"><span data-stu-id="35e06-120">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.TextConditionalFormat;'
      return:
        type:
          - 'excel!Excel.TextConditionalFormat:class'
        description: ''
      parameters:
        - id: propertyNames
          description: <span data-ttu-id="35e06-121">Una cadena delimitada por comas o una matriz de cadenas que especifican las propiedades que se van a cargar.</span><span class="sxs-lookup"><span data-stu-id="35e06-121">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
          type:
            - 'string | string[]'
  - uid: 'excel!Excel.TextConditionalFormat#load:member(3)'
    summary: <span data-ttu-id="35e06-122">Pone en cola un comando para cargar las propiedades especificadas del objeto.</span><span class="sxs-lookup"><span data-stu-id="35e06-122">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="35e06-123">Debe llamar `context.sync()` antes de leer las propiedades.</span><span class="sxs-lookup"><span data-stu-id="35e06-123">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): Excel.TextConditionalFormat;'
      return:
        type:
          - 'excel!Excel.TextConditionalFormat:class'
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '<span data-ttu-id="35e06-124">Donde propertyNamesAndPaths. Select es una cadena delimitada por comas que especifica las propiedades que se van a cargar y propertyNamesAndPaths. Expand es una cadena delimitada por comas que especifica las propiedades de navegación que se deben cargar.</span><span class="sxs-lookup"><span data-stu-id="35e06-124">Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>'
          type:
            - '{ select?: string; expand?: string; }'
  - uid: 'excel!Excel.TextConditionalFormat#rule:member'
    summary: |-
      <span data-ttu-id="35e06-125">Regla del formato condicional.</span><span class="sxs-lookup"><span data-stu-id="35e06-125">The rule of the conditional format.</span></span>

      <span data-ttu-id="35e06-126">\[[Conjunto de API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="35e06-126">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: rule
    fullName: rule
    langs:
      - typeScript
    type: property
    syntax:
      content: 'rule: Excel.ConditionalTextComparisonRule;'
      return:
        type:
          - 'excel!Excel.ConditionalTextComparisonRule:interface'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="35e06-127">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="35e06-127">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const range = sheet.getRange("B16:D18");
              const conditionalFormat = range.conditionalFormats
                  .add(Excel.ConditionalFormatType.containsText);
              conditionalFormat.textComparison.format.font.color = "red";
              conditionalFormat.textComparison.rule = { operator: Excel.ConditionalTextOperator.contains, text: "Delayed" };

              await context.sync();
          });
          ```
  - uid: 'excel!Excel.TextConditionalFormat#set:member(1)'
    summary: '<span data-ttu-id="35e06-128">Establece varias propiedades de un objeto al mismo tiempo.</span><span class="sxs-lookup"><span data-stu-id="35e06-128">Sets multiple properties of an object at the same time.</span></span> <span data-ttu-id="35e06-129">Puede pasar un objeto sin formato con las propiedades apropiadas o cualquier otro objeto de la API del mismo tipo.</span><span class="sxs-lookup"><span data-stu-id="35e06-129">You can pass either a plain object with the appropriate properties, or another API object of the same type.</span></span>'
    remarks: |-
      <span data-ttu-id="35e06-130">Este método tiene la siguiente firma adicional:</span><span class="sxs-lookup"><span data-stu-id="35e06-130">This method has the following additional signature:</span></span>

      `set(properties: Excel.TextConditionalFormat): void`
    name: 'set(properties, options)'
    fullName: 'set(properties, options)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Interfaces.TextConditionalFormatUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: <span data-ttu-id="35e06-131">Objeto de JavaScript con propiedades que se estructuran de forma isomórfico a las propiedades del objeto en el que se llama al método.</span><span class="sxs-lookup"><span data-stu-id="35e06-131">A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.</span></span>
          type:
            - 'excel!Excel.Interfaces.TextConditionalFormatUpdateData:interface'
        - id: options
          description: <span data-ttu-id="35e06-132">Proporciona una opción para suprimir errores si el objeto Properties intenta establecer propiedades de solo lectura.</span><span class="sxs-lookup"><span data-stu-id="35e06-132">Provides an option to suppress errors if the properties object tries to set any read-only properties.</span></span>
          type:
            - 'excel!OfficeExtension.UpdateOptions:interface'
  - uid: 'excel!Excel.TextConditionalFormat#set:member(2)'
    summary: '<span data-ttu-id="35e06-133">Establece varias propiedades en el objeto al mismo tiempo, basándose en un objeto cargado existente.</span><span class="sxs-lookup"><span data-stu-id="35e06-133">Sets multiple properties on the object at the same time, based on an existing loaded object.</span></span>'
    name: set(properties)
    fullName: set(properties)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Excel.TextConditionalFormat): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - 'excel!Excel.TextConditionalFormat:class'
  - uid: 'excel!Excel.TextConditionalFormat#toJSON:member(1)'
    summary: '<span data-ttu-id="35e06-134">Reemplaza el método JavaScript `toJSON()` para proporcionar un resultado más útil cuando se pasa un objeto API a`JSON.stringify()`</span><span class="sxs-lookup"><span data-stu-id="35e06-134">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id="35e06-135">.</span><span class="sxs-lookup"><span data-stu-id="35e06-135"></span></span> <span data-ttu-id="35e06-136">(`JSON.stringify`</span><span class="sxs-lookup"><span data-stu-id="35e06-136"></span></span><!-- --><span data-ttu-id="35e06-137">, a su vez, llama `toJSON` al método del objeto que se le pasa.) Mientras que el objeto Excel. TextConditionalFormat original es un objeto API, `toJSON` el método devuelve un objeto JavaScript sin formato (escrito como`Excel.Interfaces.TextConditionalFormatData`</span><span class="sxs-lookup"><span data-stu-id="35e06-137">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original Excel.TextConditionalFormat object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.TextConditionalFormatData`</span></span><!-- --><span data-ttu-id="35e06-138">) que contiene copias rasas de las propiedades secundarias cargadas del objeto original.</span><span class="sxs-lookup"><span data-stu-id="35e06-138">) that contains shallow copies of any loaded child properties from the original object.</span></span>'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.TextConditionalFormatData;'
      return:
        type:
          - 'excel!Excel.Interfaces.TextConditionalFormatData:interface'
        description: ''
references:
  - uid: 'excel!OfficeExtension.ClientObject:class'
    name: OfficeExtension.ClientObject
  - uid: 'excel!Excel.RequestContext:class'
    name: RequestContext
  - uid: 'excel!Excel.ConditionalRangeFormat:class'
    name: Excel.ConditionalRangeFormat
  - uid: 'excel!Excel.TextConditionalFormat:class'
    name: Excel.TextConditionalFormat
  - uid: 'excel!Excel.Interfaces.TextConditionalFormatLoadOptions:interface'
    name: Excel.Interfaces.TextConditionalFormatLoadOptions
  - uid: 'excel!Excel.ConditionalTextComparisonRule:interface'
    name: Excel.ConditionalTextComparisonRule
  - uid: 'excel!Excel.Interfaces.TextConditionalFormatUpdateData:interface'
    name: Interfaces.TextConditionalFormatUpdateData
  - uid: 'excel!OfficeExtension.UpdateOptions:interface'
    name: OfficeExtension.UpdateOptions
  - uid: 'excel!Excel.Interfaces.TextConditionalFormatData:interface'
    name: Excel.Interfaces.TextConditionalFormatData