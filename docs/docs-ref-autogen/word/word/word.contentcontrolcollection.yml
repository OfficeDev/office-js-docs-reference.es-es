### YamlMime:UniversalReference
items:
  - uid: 'word!Word.ContentControlCollection:class'
    summary: |-
      Contiene una colección de objetos [Word. ContentControl](xref:word!Word.ContentControl:class) . Los controles de contenido son regiones delimitadas y posiblemente con etiquetas de un documento que funcionan como contenedores para tipos de contenido específicos. Los controles de contenido individuales pueden incluir contenido como imágenes, tablas o párrafos de texto con formato. Actualmente, solo se admiten controles de contenido de texto enriquecido.

      \[[Conjunto de API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: Word.ContentControlCollection
    fullName: Word.ContentControlCollection
    langs:
      - typeScript
    type: class
    extends:
      - 'word!OfficeExtension.ClientObject:class'
    package: word!
    children:
      - 'word!Word.ContentControlCollection#context:member'
      - 'word!Word.ContentControlCollection#getById:member(1)'
      - 'word!Word.ContentControlCollection#getByIdOrNullObject:member(1)'
      - 'word!Word.ContentControlCollection#getByTag:member(1)'
      - 'word!Word.ContentControlCollection#getByTitle:member(1)'
      - 'word!Word.ContentControlCollection#getByTypes:member(1)'
      - 'word!Word.ContentControlCollection#getFirst:member(1)'
      - 'word!Word.ContentControlCollection#getFirstOrNullObject:member(1)'
      - 'word!Word.ContentControlCollection#getItem:member(1)'
      - 'word!Word.ContentControlCollection#items:member'
      - 'word!Word.ContentControlCollection#load:member(1)'
      - 'word!Word.ContentControlCollection#load:member(2)'
      - 'word!Word.ContentControlCollection#load:member(3)'
      - 'word!Word.ContentControlCollection#toJSON:member(1)'
      - 'word!Word.ContentControlCollection#track:member(1)'
      - 'word!Word.ContentControlCollection#untrack:member(1)'
  - uid: 'word!Word.ContentControlCollection#context:member'
    summary: Contexto de la solicitud asociado al objeto. Esto conecta el proceso del complemento con el proceso de la aplicación host de Office.
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'word!Word.RequestContext:class'
  - uid: 'word!Word.ContentControlCollection#getById:member(1)'
    summary: |-
      Obtiene un control de contenido mediante su identificador. Produce un error si no hay un control de contenido con el identificador en esta colección.

      \[[Conjunto de API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: getById(id)
    fullName: getById(id)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getById(id: number): Word.ContentControl;'
      return:
        type:
          - 'word!Word.ContentControl:class'
        description: |-


          #### <a name="examples"></a>Ejemplos

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the content control that contains a specific id.
              var contentControl = context.document.contentControls.getById(30086310);

              // Queue a command to load the text property for a content control.
              context.load(contentControl, 'text');

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log('The content control with that Id has been found in this document.');
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: id
          description: Necesario. Identificador de un control de contenido.
          type:
            - number
  - uid: 'word!Word.ContentControlCollection#getByIdOrNullObject:member(1)'
    summary: |-
      Obtiene un control de contenido mediante su identificador. Devuelve un objeto NULL si no hay ningún control de contenido con el identificador en esta colección.

      \[[Conjunto de API: WordApi 1,3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: getByIdOrNullObject(id)
    fullName: getByIdOrNullObject(id)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getByIdOrNullObject(id: number): Word.ContentControl;'
      return:
        type:
          - 'word!Word.ContentControl:class'
        description: |-


          #### <a name="examples"></a>Ejemplos

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the content control that contains a specific id.
              var contentControl = context.document.contentControls.getByIdOrNullObject(30086310);

              // Queue a command to load the text property for a content control.
              context.load(contentControl, 'text');

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  if (contentControl.isNullObject) {
                      console.log('There is no content control with that ID.')
                  } else {
                      console.log('The content control with that ID has been found in this document.');
                  }
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: id
          description: Necesario. Identificador de un control de contenido.
          type:
            - number
  - uid: 'word!Word.ContentControlCollection#getByTag:member(1)'
    summary: |-
      Obtiene los controles de contenido que tienen la etiqueta especificada.

      \[[Conjunto de API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: getByTag(tag)
    fullName: getByTag(tag)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getByTag(tag: string): Word.ContentControlCollection;'
      return:
        type:
          - 'word!Word.ContentControlCollection:class'
        description: |-


          #### <a name="examples"></a>Ejemplos

          ```typescript
          await Word.run(async (context) => {
              let contentControls = context.document.contentControls.getByTag("customer");
              contentControls.load("text");

              await context.sync();

              for (let i = 0; i < contentControls.items.length; i++) {
                contentControls.items[i].insertText("Fabrikam", "Replace");
              }

              await context.sync();
          });
          ```
      parameters:
        - id: tag
          description: Necesario. Etiqueta establecida en un control de contenido.
          type:
            - string
  - uid: 'word!Word.ContentControlCollection#getByTitle:member(1)'
    summary: |-
      Obtiene los controles de contenido que tienen el título especificado.

      \[[Conjunto de API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: getByTitle(title)
    fullName: getByTitle(title)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getByTitle(title: string): Word.ContentControlCollection;'
      return:
        type:
          - 'word!Word.ContentControlCollection:class'
        description: |-


          #### <a name="examples"></a>Ejemplos

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the content controls collection that contains a specific title.
              var contentControlsWithTitle = context.document.contentControls.getByTitle('Enter Customer Address Here');

              // Queue a command to load the text property for all of content controls with a specific title.
              context.load(contentControlsWithTitle, 'text');

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  if (contentControlsWithTitle.items.length === 0) {
                      console.log(
                          "There isn't a content control with a title of 'Enter Customer Address Here' in this document.");
                  } else {
                      console.log(
                          "The first content control with the title of 'Enter Customer Address Here' has this text: " + 
                          contentControlsWithTitle.items[0].text);
                  }

              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });

          // The Word-Add-in-DocumentAssembly sample has another example of using the getByTitle method.
          // https://github.com/OfficeDev/Word-Add-in-DocumentAssembly
          ```
      parameters:
        - id: title
          description: Necesario. Título de un control de contenido.
          type:
            - string
  - uid: 'word!Word.ContentControlCollection#getByTypes:member(1)'
    summary: |-
      Obtiene los controles de contenido que tienen los tipos y subtipos especificados.

      \[[Conjunto de API: WordApi 1,3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: getByTypes(types)
    fullName: getByTypes(types)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getByTypes(types: Word.ContentControlType[]): Word.ContentControlCollection;'
      return:
        type:
          - 'word!Word.ContentControlCollection:class'
        description: ''
      parameters:
        - id: types
          description: Necesario. Una matriz de tipos de control de contenido o subtipos.
          type:
            - 'word!Word.ContentControlCollection#getByTypes~0:complex'
  - uid: 'word!Word.ContentControlCollection#getFirst:member(1)'
    summary: |-
      Obtiene el primer control de contenido de esta colección. Produce un error si la colección está vacía.

      \[[Conjunto de API: WordApi 1,3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: getFirst()
    fullName: getFirst()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getFirst(): Word.ContentControl;'
      return:
        type:
          - 'word!Word.ContentControl:class'
        description: |-


          #### <a name="examples"></a>Ejemplos

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the first content control in the document.
              var contentControl = context.document.contentControls.getFirstOrNullObject();

              // Queue a command to load the text property for a content control.
              context.load(contentControl, 'text');

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  if (contentControl.isNullObject) {
                      console.log('There are no content controls in this document.')
                  } else {
                      console.log('The first content control has been found in this document.');
                  }
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'word!Word.ContentControlCollection#getFirstOrNullObject:member(1)'
    summary: |-
      Obtiene el primer control de contenido de esta colección. Devuelve un objeto nulo si esta colección está vacía.

      \[[Conjunto de API: WordApi 1,3](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: getFirstOrNullObject()
    fullName: getFirstOrNullObject()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getFirstOrNullObject(): Word.ContentControl;'
      return:
        type:
          - 'word!Word.ContentControl:class'
        description: ''
  - uid: 'word!Word.ContentControlCollection#getItem:member(1)'
    summary: |-
      Obtiene un control de contenido por su índice en la colección.

      \[[Conjunto de API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
    name: getItem(index)
    fullName: getItem(index)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItem(index: number): Word.ContentControl;'
      return:
        type:
          - 'word!Word.ContentControl:class'
        description: ''
      parameters:
        - id: index
          description: El índice.
          type:
            - number
  - uid: 'word!Word.ContentControlCollection#items:member'
    summary: Obtiene los elementos secundarios cargados en esta colección.
    name: items
    fullName: items
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly items: Word.ContentControl[];'
      return:
        type:
          - 'word!Word.ContentControlCollection#items~0:complex'
  - uid: 'word!Word.ContentControlCollection#load:member(1)'
    summary: 'Pone en cola un comando para cargar las propiedades especificadas del objeto. Antes de leer las propiedades, debe llamar a "context.sync()".'
    remarks: |-
      Además de esta firma, este método tiene las siguientes firmas:

      `load(option?: string | string[]): Word.ContentControlCollection`-Donde opción es una cadena delimitada por comas o una matriz de cadenas que especifican las propiedades que se van a cargar.

      `load(option?: { select?: string; expand?: string; }): Word.ContentControlCollection`-Where opción. Select es una cadena delimitada por comas que especifica las propiedades que se van a cargar y Options. Expand es una cadena delimitada por comas que especifica las propiedades de navegación que se deben cargar.

      `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Word.ContentControlCollection`-Solo disponible en tipos de colección. Es similar a la firma anterior. Option. Top especifica el número máximo de elementos de colección que se pueden incluir en el resultado. La opción. SKIP especifica el número de elementos que se deben omitir y que no se incluyen en el resultado. Si se especifica Option. Top, el conjunto de resultados se iniciará después de omitir el número especificado de elementos.

      #### <a name="examples"></a>Ejemplos

      ```javascript
      // Run a batch operation against the Word object model.
      Word.run(function (context) {

          // Create a proxy object for the content controls collection.
          var contentControls = context.document.contentControls;

          // Queue a command to load the id property for all of the content controls.
          context.load(contentControls, 'id');

          // Synchronize the document state by executing the queued commands,
          // and return a promise to indicate task completion.
          return context.sync().then(function () {
              if (contentControls.items.length === 0) {
                  console.log('No content control found.');
              }
              else {
                  // Queue a command to load the properties on the first content control.
                  contentControls.items[0].load(  'appearance,' +
                                                  'cannotDelete,' +
                                                  'cannotEdit,' +
                                                  'color,' +
                                                  'id,' +
                                                  'placeHolderText,' +
                                                  'removeWhenEdited,' +
                                                  'title,' +
                                                  'text,' +
                                                  'type,' +
                                                  'style,' +
                                                  'tag,' +
                                                  'font/size,' +
                                                  'font/name,' +
                                                  'font/color');

                  // Synchronize the document state by executing the queued commands,
                  // and return a promise to indicate task completion.
                  return context.sync()
                      .then(function () {
                          console.log('Property values of the first content control:' +
                              '   ----- appearance: ' + contentControls.items[0].appearance +
                              '   ----- cannotDelete: ' + contentControls.items[0].cannotDelete +
                              '   ----- cannotEdit: ' + contentControls.items[0].cannotEdit +
                              '   ----- color: ' + contentControls.items[0].color +
                              '   ----- id: ' + contentControls.items[0].id +
                              '   ----- placeHolderText: ' + contentControls.items[0].placeholderText +
                              '   ----- removeWhenEdited: ' + contentControls.items[0].removeWhenEdited +
                              '   ----- title: ' + contentControls.items[0].title +
                              '   ----- text: ' + contentControls.items[0].text +
                              '   ----- type: ' + contentControls.items[0].type +
                              '   ----- style: ' + contentControls.items[0].style +
                              '   ----- tag: ' + contentControls.items[0].tag +
                              '   ----- font size: ' + contentControls.items[0].font.size +
                              '   ----- font name: ' + contentControls.items[0].font.name +
                              '   ----- font color: ' + contentControls.items[0].font.color);
                  });
              }
          });
      })
      .catch(function (error) {
          console.log('Error: ' + JSON.stringify(error));
          if (error instanceof OfficeExtension.Error) {
              console.log('Debug info: ' + JSON.stringify(error.debugInfo));
          }
      });

      // The Silly stories add-in sample shows how the load method is used
      // to load the content control collection with the tag and title properties.
      // https://aka.ms/sillystorywordaddin
      ```
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: Word.Interfaces.ContentControlCollectionLoadOptions & Word.Interfaces.CollectionLoadOptions): Word.ContentControlCollection;'
      return:
        type:
          - 'word!Word.ContentControlCollection:class'
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - 'word!Word.ContentControlCollection#load~0:complex'
  - uid: 'word!Word.ContentControlCollection#load:member(2)'
    summary: Pone en cola un comando para cargar las propiedades especificadas del objeto. Debe llamar `context.sync()` antes de leer las propiedades.
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Word.ContentControlCollection;'
      return:
        type:
          - 'word!Word.ContentControlCollection:class'
        description: ''
      parameters:
        - id: propertyNames
          description: Una cadena delimitada por comas o una matriz de cadenas que especifican las propiedades que se van a cargar.
          type:
            - 'string | string[]'
  - uid: 'word!Word.ContentControlCollection#load:member(3)'
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: OfficeExtension.LoadOption): Word.ContentControlCollection;'
      return:
        type:
          - 'word!Word.ContentControlCollection:class'
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - 'word!OfficeExtension.LoadOption:interface'
  - uid: 'word!Word.ContentControlCollection#toJSON:member(1)'
    summary: 'Reemplaza el método JavaScript `toJSON()` para proporcionar un resultado más útil cuando se pasa un objeto API a`JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, a su vez, llama `toJSON` al método del objeto que se le pasa.) Mientras que el `Word.ContentControlCollection` objeto original es un objeto API, `toJSON` el método devuelve un objeto JavaScript sin formato (escrito como`Word.Interfaces.ContentControlCollectionData`<!-- -->) que contiene una matriz "items" con copias rasas de las propiedades cargadas de los elementos de la colección.'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Word.Interfaces.ContentControlCollectionData;'
      return:
        type:
          - 'word!Word.Interfaces.ContentControlCollectionData:interface'
        description: ''
  - uid: 'word!Word.ContentControlCollection#track:member(1)'
    summary: 'Realiza un seguimiento del objeto de ajuste automático según cambios adyacentes en el documento. Esta llamada es una forma abreviada de context.trackedObjects.add(thisObject). Si usa este objeto en llamadas ".sync" y fuera de la ejecución secuencial de un lote de ".run", y obtiene un error "InvalidObjectPath" al establecer una propiedad o invocar un método en el objeto, debería haber agregado el objeto a la colección de objetos de la que realiza un seguimiento cuando se creó el objeto.'
    name: track()
    fullName: track()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'track(): Word.ContentControlCollection;'
      return:
        type:
          - 'word!Word.ContentControlCollection:class'
        description: ''
  - uid: 'word!Word.ContentControlCollection#untrack:member(1)'
    summary: 'Libere la memoria asociada a este objeto, si se ha realizado un seguimiento de él anteriormente. Esta llamada es una forma abreviada de context.trackedObjects.remove(thisObject). Tener muchos objetos marcados ralentiza la aplicación host, así que debe recordar liberar los objetos que agregue cuando haya terminado con ellos. Debe llamar a "context.sync()" antes de que surta efecto la liberación de memoria.'
    name: untrack()
    fullName: untrack()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'untrack(): Word.ContentControlCollection;'
      return:
        type:
          - 'word!Word.ContentControlCollection:class'
        description: ''
references:
  - uid: 'word!OfficeExtension.ClientObject:class'
    name: OfficeExtension.ClientObject
  - uid: 'word!Word.RequestContext:class'
    name: RequestContext
  - uid: 'word!Word.ContentControl:class'
    name: Word.ContentControl
  - uid: 'word!Word.ContentControlCollection:class'
    name: Word.ContentControlCollection
  - uid: 'word!Word.ContentControlCollection#getByTypes~0:complex'
    name: 'Word.ContentControlType[]'
    fullName: 'Word.ContentControlType[]'
    spec.typeScript:
      - uid: 'word!Word.ContentControlType:enum'
        name: Word.ContentControlType
        fullName: Word.ContentControlType
      - name: '[]'
        fullName: '[]'
  - uid: 'word!Word.ContentControlCollection#items~0:complex'
    name: 'Word.ContentControl[]'
    fullName: 'Word.ContentControl[]'
    spec.typeScript:
      - uid: 'word!Word.ContentControl:class'
        name: Word.ContentControl
        fullName: Word.ContentControl
      - name: '[]'
        fullName: '[]'
  - uid: 'word!Word.ContentControlCollection#load~0:complex'
    name: Word.Interfaces.ContentControlCollectionLoadOptions & Word.Interfaces.CollectionLoadOptions
    fullName: Word.Interfaces.ContentControlCollectionLoadOptions & Word.Interfaces.CollectionLoadOptions
    spec.typeScript:
      - uid: 'word!Word.Interfaces.ContentControlCollectionLoadOptions:interface'
        name: Word.Interfaces.ContentControlCollectionLoadOptions
        fullName: Word.Interfaces.ContentControlCollectionLoadOptions
      - name: ' & '
        fullName: ' & '
      - uid: 'word!Word.Interfaces.CollectionLoadOptions:interface'
        name: Word.Interfaces.CollectionLoadOptions
        fullName: Word.Interfaces.CollectionLoadOptions
  - uid: 'word!OfficeExtension.LoadOption:interface'
    name: OfficeExtension.LoadOption
  - uid: 'word!Word.Interfaces.ContentControlCollectionData:interface'
    name: Word.Interfaces.ContentControlCollectionData