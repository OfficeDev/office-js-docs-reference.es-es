### YamlMime:UniversalReference
items:
  - uid: 'outlook!Office.Recipients:interface'
    summary: |-
      Representa a los destinatarios de un elemento. Solo en el modo de composición.

      \[[Conjunto de API: buzón de correo 1,1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: redacción
    name: Office.Recipients
    fullName: Office.Recipients
    langs:
      - typeScript
    type: interface
    package: outlook!
    children:
      - 'outlook!Office.Recipients#addAsync:member(1)'
      - 'outlook!Office.Recipients#addAsync:member(2)'
      - 'outlook!Office.Recipients#getAsync:member(1)'
      - 'outlook!Office.Recipients#getAsync:member(2)'
      - 'outlook!Office.Recipients#setAsync:member(1)'
      - 'outlook!Office.Recipients#setAsync:member(2)'
  - uid: 'outlook!Office.Recipients#addAsync:member(1)'
    summary: |-
      Agrega una lista de destinatarios a los destinatarios existentes de un mensaje o una cita.

      El parámetro recipients puede ser una matriz de uno de los siguientes elementos:

      - Cadenas que contienen direcciones de correo electrónico SMTP

      - [EmailUser](xref:outlook!Office.EmailUser:interface) (objetos)

      - Objetos [EmailAddressDetails](xref:outlook!Office.EmailAddressDetails:interface)

      \[[Conjunto de API: buzón de correo 1,1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadWriteItem`

      **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: redacción

      **Errores**:

      - `NumberOfRecipientsExceeded`<!-- -->: El número de destinatarios superó 100 entradas.
    name: 'addAsync(recipients, options, callback)'
    fullName: 'addAsync(recipients, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addAsync(recipients: (string | EmailUser | EmailAddressDetails)[], options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: recipients
          description: Destinatarios que se deben agregar a la lista de destinatarios.
          type:
            - 'outlook!Office.Recipients#addAsync~0:complex'
        - id: options
          description: 'Opcional. Un objeto literal que contiene una o más de las siguientes propiedades. `asyncContext`<!-- -->: Los desarrolladores pueden proporcionar cualquier objeto al que quieran tener acceso en el método de devolución de llamada.'
          type:
            - 'outlook!Office.AsyncContextOptions:interface'
        - id: callback
          description: 'Opcional. Cuando el método finaliza, la función que se pasa en `callback` el parámetro se llama con un único parámetro de tipo`Office.AsyncResult`<!-- -->. Si se produce un error al agregar el destinatario, la propiedad `asyncResult.error` contendrá un código de error.'
          type:
            - 'outlook!Office.Recipients#addAsync~1:complex'
  - uid: 'outlook!Office.Recipients#addAsync:member(2)'
    summary: |-
      Agrega una lista de destinatarios a los destinatarios existentes de un mensaje o una cita.

      El parámetro recipients puede ser una matriz de uno de los siguientes elementos:

      - Cadenas que contienen direcciones de correo electrónico SMTP

      - [EmailUser](xref:outlook!Office.EmailUser:interface) (objetos)

      - Objetos [EmailAddressDetails](xref:outlook!Office.EmailAddressDetails:interface)

      \[[Conjunto de API: buzón de correo 1,1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadWriteItem`

      **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: redacción

      **Errores**:

      - `NumberOfRecipientsExceeded`<!-- -->: El número de destinatarios superó 100 entradas.

      #### <a name="examples"></a>Ejemplos

      ```javascript
      // The following example creates an array of EmailUser objects
      // and adds them to the To recipients of the message.
      var newRecipients = [
          {
              "displayName": "Allie Bellew",
              "emailAddress": "allieb@contoso.com"
          },
          {
              "displayName": "Alex Darrow",
              "emailAddress": "alexd@contoso.com"
          }
      ];

      Office.context.mailbox.item.to.addAsync(newRecipients, function(result) {
          if (result.error) {
              console.log(result.error);
          } else {
              console.log("Recipients added");
          }
      });
      ```
    name: 'addAsync(recipients, callback)'
    fullName: 'addAsync(recipients, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addAsync(recipients: (string | EmailUser | EmailAddressDetails)[], callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: recipients
          description: Destinatarios que se deben agregar a la lista de destinatarios.
          type:
            - 'outlook!Office.Recipients#addAsync~2:complex'
        - id: callback
          description: 'Opcional. Cuando el método finaliza, la función que se pasa en `callback` el parámetro se llama con un único parámetro de tipo`Office.AsyncResult`<!-- -->. Si se produce un error al agregar el destinatario, la propiedad `asyncResult.error` contendrá un código de error.'
          type:
            - 'outlook!Office.Recipients#addAsync~3:complex'
  - uid: 'outlook!Office.Recipients#getAsync:member(1)'
    summary: |-
      Obtiene una lista de destinatarios para un mensaje o una cita.

      Cuando finalice la llamada, la `asyncResult.value` propiedad contendrá una matriz de objetos [EmailAddressDetails](xref:outlook!Office.EmailAddressDetails:interface) .

      \[[Conjunto de API: buzón de correo 1,1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: redacción
    name: 'getAsync(options, callback)'
    fullName: 'getAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getAsync(options: Office.AsyncContextOptions, callback: (asyncResult: Office.AsyncResult<EmailAddressDetails[]>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: 'Un objeto literal que contiene una o más de las siguientes propiedades. `asyncContext`<!-- -->: Los desarrolladores pueden proporcionar cualquier objeto al que quieran tener acceso en el método de devolución de llamada.'
          type:
            - 'outlook!Office.AsyncContextOptions:interface'
        - id: callback
          description: 'Cuando el método finaliza, la función que se pasa en `callback` el parámetro se llama con un único parámetro de tipo`Office.AsyncResult`<!-- -->. La `value` propiedad del resultado es una matriz de `EmailAddressDetails` objetos.'
          type:
            - 'outlook!Office.Recipients#getAsync~0:complex'
  - uid: 'outlook!Office.Recipients#getAsync:member(2)'
    summary: |-
      Obtiene una lista de destinatarios para un mensaje o una cita.

      Cuando finalice la llamada, la `asyncResult.value` propiedad contendrá una matriz de objetos [EmailAddressDetails](xref:outlook!Office.EmailAddressDetails:interface) .

      \[[Conjunto de API: buzón de correo 1,1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: redacción

      #### <a name="examples"></a>Ejemplos

      ```javascript
      // The following example gets the optional attendees of a meeting.
      Office.context.mailbox.item.optionalAttendees.getAsync(function(result) {
          if (result.error) {
              console.log(result.error);
          } else {
              var msg = "";
              result.value.forEach(function(recip, index) {
                  msg = msg + recip.displayName + " (" + recip.emailAddress + ");";
              });
              console.log(msg);
          }
      });
      ```
      ```javascript
      Office.context.mailbox.item.bcc.getAsync(function(asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
          var msgBcc = asyncResult.value;
          console.log("Message being bcc'd to:");
          for (var i = 0; i < msgBcc.length; i++) {
            console.log(msgBcc[i].displayName + " (" + msgBcc[i].emailAddress + ")");
          }
        } else {
          console.error(asyncResult.error);
        }
      });
      ```
      ```javascript
      Office.context.mailbox.item.cc.getAsync(function(asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
          var msgCc = asyncResult.value;
          console.log("Message being copied to:");
          for (var i = 0; i < msgCc.length; i++) {
            console.log(msgCc[i].displayName + " (" + msgCc[i].emailAddress + ")");
          }
        } else {
          console.error(asyncResult.error);
        }
      });
      ```
      ```javascript
      Office.context.mailbox.item.optionalAttendees.getAsync(function(asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
          var apptOptionalAttendees = asyncResult.value;
          for (var i = 0; i < apptOptionalAttendees.length; i++) {
            console.log(
              "Optional attendees: " +
                apptOptionalAttendees[i].displayName +
                " (" +
                apptOptionalAttendees[i].emailAddress +
                ") - response: " +
                apptOptionalAttendees[i].appointmentResponse
            );
          }
        } else {
          console.error(asyncResult.error);
        }
      });
      ```
      ```javascript
      Office.context.mailbox.item.requiredAttendees.getAsync(function(asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
          var apptRequiredAttendees = asyncResult.value;
          for (var i = 0; i < apptRequiredAttendees.length; i++) {
            console.log(
              "Required attendees: " +
                apptRequiredAttendees[i].displayName +
                " (" +
                apptRequiredAttendees[i].emailAddress +
                ") - response: " +
                apptRequiredAttendees[i].appointmentResponse
            );
          }
        } else {
          console.error(asyncResult.error);
        }
      });
      ```
      ```javascript
      Office.context.mailbox.item.to.getAsync(function(asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
          var msgTo = asyncResult.value;
          console.log("Message being sent to:");
          for (var i = 0; i < msgTo.length; i++) {
            console.log(msgTo[i].displayName + " (" + msgTo[i].emailAddress + ")");
          }
        } else {
          console.error(asyncResult.error);
        }
      });
      ```
    name: getAsync(callback)
    fullName: getAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getAsync(callback: (asyncResult: Office.AsyncResult<EmailAddressDetails[]>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: 'Cuando el método finaliza, la función que se pasa en `callback` el parámetro se llama con un único parámetro de tipo`Office.AsyncResult`<!-- -->. La `value` propiedad del resultado es una matriz de `EmailAddressDetails` objetos.'
          type:
            - 'outlook!Office.Recipients#getAsync~1:complex'
  - uid: 'outlook!Office.Recipients#setAsync:member(1)'
    summary: |-
      Establece una lista de destinatarios para una cita o un mensaje.

      El método `setAsync` sobrescribe la lista de destinatarios actual.

      El parámetro recipients puede ser una matriz de uno de los siguientes elementos:

      - Cadenas que contienen direcciones de correo electrónico SMTP

      - [EmailUser](xref:outlook!Office.EmailUser:interface) (objetos)

      - Objetos [EmailAddressDetails](xref:outlook!Office.EmailAddressDetails:interface)

      \[[Conjunto de API: buzón de correo 1,1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadWriteItem`

      **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: redacción

      **Errores**:

      - `NumberOfRecipientsExceeded`<!-- -->: El número de destinatarios superó 100 entradas.
    name: 'setAsync(recipients, options, callback)'
    fullName: 'setAsync(recipients, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setAsync(recipients: (string | EmailUser | EmailAddressDetails)[], options: Office.AsyncContextOptions, callback: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: recipients
          description: Destinatarios que se deben agregar a la lista de destinatarios.
          type:
            - 'outlook!Office.Recipients#setAsync~0:complex'
        - id: options
          description: 'Un objeto literal que contiene una o más de las siguientes propiedades. `asyncContext`<!-- -->: Los desarrolladores pueden proporcionar cualquier objeto al que quieran tener acceso en el método de devolución de llamada.'
          type:
            - 'outlook!Office.AsyncContextOptions:interface'
        - id: callback
          description: 'Cuando el método finaliza, la función que se pasa en `callback` el parámetro se llama con un único parámetro de tipo`Office.AsyncResult`<!-- -->. Si no es posible establecer el destinatario, la propiedad `asyncResult.error` contendrá un código que indica el error que se produjo al agregar los datos.'
          type:
            - 'outlook!Office.Recipients#setAsync~1:complex'
  - uid: 'outlook!Office.Recipients#setAsync:member(2)'
    summary: |-
      Establece una lista de destinatarios para una cita o un mensaje.

      El método `setAsync` sobrescribe la lista de destinatarios actual.

      El parámetro recipients puede ser una matriz de uno de los siguientes elementos:

      - Cadenas que contienen direcciones de correo electrónico SMTP

      - [EmailUser](xref:outlook!Office.EmailUser:interface) (objetos)

      - Objetos [EmailAddressDetails](xref:outlook!Office.EmailAddressDetails:interface)

      \[[Conjunto de API: buzón de correo 1,1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadWriteItem`

      **<!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: redacción

      **Errores**:

      - `NumberOfRecipientsExceeded`<!-- -->: El número de destinatarios superó 100 entradas.

      #### <a name="examples"></a>Ejemplos

      ```javascript
      // The following example creates an array of EmailUser objects and
      // replaces the CC recipients of the message with the array.
      var newRecipients = [
          {
              "displayName": "Allie Bellew",
              "emailAddress": "allieb@contoso.com"
          },
          {
              "displayName": "Alex Darrow",
              "emailAddress": "alexd@contoso.com"
          }
      ];

      Office.context.mailbox.item.cc.setAsync(newRecipients, function(result) {
          if (result.error) {
              console.log(result.error);
          } else {
              console.log("Recipients overwritten");
          }
      });
      ```
    name: 'setAsync(recipients, callback)'
    fullName: 'setAsync(recipients, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setAsync(recipients: (string | EmailUser | EmailAddressDetails)[], callback: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: recipients
          description: Destinatarios que se deben agregar a la lista de destinatarios.
          type:
            - 'outlook!Office.Recipients#setAsync~2:complex'
        - id: callback
          description: 'Cuando el método finaliza, la función que se pasa en `callback` el parámetro se llama con un único parámetro de tipo`Office.AsyncResult`<!-- -->. Si no es posible establecer el destinatario, la propiedad `asyncResult.error` contendrá un código que indica el error que se produjo al agregar los datos.'
          type:
            - 'outlook!Office.Recipients#setAsync~3:complex'
references:
  - uid: 'outlook!Office.Recipients#addAsync~0:complex'
    name: '(string | EmailUser | EmailAddressDetails)[]'
    fullName: '(string | Office.EmailUser | Office.EmailAddressDetails)[]'
    spec.typeScript:
      - name: '(string | '
        fullName: '(string | '
      - uid: 'outlook!Office.EmailUser:interface'
        name: EmailUser
        fullName: Office.EmailUser
      - name: ' | '
        fullName: ' | '
      - uid: 'outlook!Office.EmailAddressDetails:interface'
        name: EmailAddressDetails
        fullName: Office.EmailAddressDetails
      - name: ')[]'
        fullName: ')[]'
  - uid: 'outlook!Office.AsyncContextOptions:interface'
    name: Office.AsyncContextOptions
  - uid: 'outlook!Office.Recipients#addAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.Recipients#addAsync~2:complex'
    name: '(string | EmailUser | EmailAddressDetails)[]'
    fullName: '(string | Office.EmailUser | Office.EmailAddressDetails)[]'
    spec.typeScript:
      - name: '(string | '
        fullName: '(string | '
      - uid: 'outlook!Office.EmailUser:interface'
        name: EmailUser
        fullName: Office.EmailUser
      - name: ' | '
        fullName: ' | '
      - uid: 'outlook!Office.EmailAddressDetails:interface'
        name: EmailAddressDetails
        fullName: Office.EmailAddressDetails
      - name: ')[]'
        fullName: ')[]'
  - uid: 'outlook!Office.Recipients#addAsync~3:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.Recipients#getAsync~0:complex'
    name: '(asyncResult: Office.AsyncResult<EmailAddressDetails[]>) => void'
    fullName: '(asyncResult: Office.AsyncResult<Office.EmailAddressDetails[]>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <
        fullName: <
      - uid: 'outlook!Office.EmailAddressDetails:interface'
        name: EmailAddressDetails
        fullName: Office.EmailAddressDetails
      - name: '[]>) => void'
        fullName: '[]>) => void'
  - uid: 'outlook!Office.Recipients#getAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<EmailAddressDetails[]>) => void'
    fullName: '(asyncResult: Office.AsyncResult<Office.EmailAddressDetails[]>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <
        fullName: <
      - uid: 'outlook!Office.EmailAddressDetails:interface'
        name: EmailAddressDetails
        fullName: Office.EmailAddressDetails
      - name: '[]>) => void'
        fullName: '[]>) => void'
  - uid: 'outlook!Office.Recipients#setAsync~0:complex'
    name: '(string | EmailUser | EmailAddressDetails)[]'
    fullName: '(string | Office.EmailUser | Office.EmailAddressDetails)[]'
    spec.typeScript:
      - name: '(string | '
        fullName: '(string | '
      - uid: 'outlook!Office.EmailUser:interface'
        name: EmailUser
        fullName: Office.EmailUser
      - name: ' | '
        fullName: ' | '
      - uid: 'outlook!Office.EmailAddressDetails:interface'
        name: EmailAddressDetails
        fullName: Office.EmailAddressDetails
      - name: ')[]'
        fullName: ')[]'
  - uid: 'outlook!Office.Recipients#setAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.Recipients#setAsync~2:complex'
    name: '(string | EmailUser | EmailAddressDetails)[]'
    fullName: '(string | Office.EmailUser | Office.EmailAddressDetails)[]'
    spec.typeScript:
      - name: '(string | '
        fullName: '(string | '
      - uid: 'outlook!Office.EmailUser:interface'
        name: EmailUser
        fullName: Office.EmailUser
      - name: ' | '
        fullName: ' | '
      - uid: 'outlook!Office.EmailAddressDetails:interface'
        name: EmailAddressDetails
        fullName: Office.EmailAddressDetails
      - name: ')[]'
        fullName: ')[]'
  - uid: 'outlook!Office.Recipients#setAsync~3:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'outlook!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void