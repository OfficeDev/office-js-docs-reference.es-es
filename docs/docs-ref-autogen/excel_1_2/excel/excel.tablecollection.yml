### YamlMime:UniversalReference
items:
  - uid: excel.Excel.TableCollection
    summary: |-
      <span data-ttu-id="280d2-101">Representa una colección de todas las tablas que forman parte del libro o la hoja de cálculo, dependiendo de cómo se haya alcanzado.</span><span class="sxs-lookup"><span data-stu-id="280d2-101">Represents a collection of all the tables that are part of the workbook or worksheet, depending on how it was reached.</span></span>

      <span data-ttu-id="280d2-102">\[[Conjunto de API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="280d2-102">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: Excel.TableCollection
    fullName: Excel.TableCollection
    langs:
      - typeScript
    type: class
    extends:
      - 'OfficeExtension.ClientObject '
    package: excel
    children:
      - excel.Excel.TableCollection.add
      - excel.Excel.TableCollection.context
      - excel.Excel.TableCollection.count
      - excel.Excel.TableCollection.getItem
      - excel.Excel.TableCollection.getItemAt
      - excel.Excel.TableCollection.items
      - excel.Excel.TableCollection.load
      - excel.Excel.TableCollection.load_1
      - excel.Excel.TableCollection.load_2
      - excel.Excel.TableCollection.toJSON
  - uid: excel.Excel.TableCollection.add
    summary: |-
      <span data-ttu-id="280d2-p101">Crea una tabla nueva. El objeto de rango o la dirección de origen determinan la hoja de cálculo a la que se agregará la tabla. Si no se puede agregar la tabla (por ejemplo, porque la dirección no es válida o porque la tabla se superpondría con otra tabla), se producirá un error.</span><span class="sxs-lookup"><span data-stu-id="280d2-p101">Create a new table. The range object or source address determines the worksheet under which the table will be added. If the table cannot be added (e.g., because the address is invalid, or the table would overlap with another table), an error will be thrown.</span></span>

      <span data-ttu-id="280d2-106">\[[Conjunto de API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="280d2-106">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'add(address, hasHeaders)'
    fullName: 'add(address, hasHeaders)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'add(address: Range | string, hasHeaders: boolean): Excel.Table;'
      return:
        type:
          - excel.Excel.Table
        description: |-


          #### <a name="examples"></a><span data-ttu-id="280d2-107">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="280d2-107">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var table = ctx.workbook.tables.add('Sheet1!A1:E7', true);
              table.load('name');
              return ctx.sync().then(function() {
                  console.log(table.name);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: address
          description: '<span data-ttu-id="280d2-108">Objeto de rango, dirección de cadena o nombre del rango que representa el origen de datos.</span><span class="sxs-lookup"><span data-stu-id="280d2-108">A Range object, or a string address or name of the range representing the data source.</span></span> <span data-ttu-id="280d2-109">Si la dirección no contiene un nombre de hoja, se usa la hoja activa en ese momento.</span><span class="sxs-lookup"><span data-stu-id="280d2-109">If the address does not contain a sheet name, the currently-active sheet is used.</span></span> <span data-ttu-id="280d2-110">\[Conjunto de API: ExcelApi 1,1/1,3.</span><span class="sxs-lookup"><span data-stu-id="280d2-110">\[Api set: ExcelApi 1.1 / 1.3.</span></span> <span data-ttu-id="280d2-111">Antes de ExcelApi 1,3, este parámetro debe ser una cadena.</span><span class="sxs-lookup"><span data-stu-id="280d2-111">Prior to ExcelApi 1.3, this parameter must be a string.</span></span> <span data-ttu-id="280d2-112">A partir de la API de Excel 1,3, este parámetro puede ser un objeto de intervalo o una cadena.\]</span><span class="sxs-lookup"><span data-stu-id="280d2-112">Starting with Excel Api 1.3, this parameter may be a Range object or a string.\]</span></span>'
          type:
            - Range | string
        - id: hasHeaders
          description: '<span data-ttu-id="280d2-p103">Valor booleano que indica si los datos que se están importando tienen etiquetas de columna. Si el origen no contiene encabezados (es decir, cuando esta propiedad se establece en false), Excel generará automáticamente el encabezado desplazando los datos una fila hacia abajo.</span><span class="sxs-lookup"><span data-stu-id="280d2-p103">Boolean value that indicates whether the data being imported has column labels. If the source does not contain headers (i.e,. when this property set to false), Excel will automatically generate header shifting the data down by one row.</span></span>'
          type:
            - boolean
  - uid: excel.Excel.TableCollection.context
    summary: <span data-ttu-id="280d2-116">Contexto de la solicitud asociado al objeto.</span><span class="sxs-lookup"><span data-stu-id="280d2-116">The request context associated with the object.</span></span> <span data-ttu-id="280d2-117">Esto conecta el proceso del complemento con el proceso de la aplicación host de Office.</span><span class="sxs-lookup"><span data-stu-id="280d2-117">This connects the add-in's process to the Office host application's process.</span></span>
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - excel.Excel.RequestContext
  - uid: excel.Excel.TableCollection.count
    summary: |-
      <span data-ttu-id="280d2-118">Devuelve el número de tablas del libro.</span><span class="sxs-lookup"><span data-stu-id="280d2-118">Returns the number of tables in the workbook.</span></span> <span data-ttu-id="280d2-119">Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="280d2-119">Read-only.</span></span>

      <span data-ttu-id="280d2-120">\[[Conjunto de API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="280d2-120">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: count
    fullName: count
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly count: number;'
      return:
        type:
          - number
  - uid: excel.Excel.TableCollection.getItem
    summary: |-
      <span data-ttu-id="280d2-121">Obtiene una tabla por nombre o identificador.</span><span class="sxs-lookup"><span data-stu-id="280d2-121">Gets a table by Name or ID.</span></span>

      <span data-ttu-id="280d2-122">\[[Conjunto de API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="280d2-122">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getItem(key)
    fullName: getItem(key)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItem(key: string): Excel.Table;'
      return:
        type:
          - excel.Excel.Table
        description: |-


          #### <a name="examples"></a><span data-ttu-id="280d2-123">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="280d2-123">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var tableName = 'Table1';
              var table = ctx.workbook.tables.getItem(tableName);
              table.load('name');
              return ctx.sync().then(function() {
                      console.log(table.name);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: key
          description: <span data-ttu-id="280d2-124">Nombre o identificador de la tabla que se va a recuperar.</span><span class="sxs-lookup"><span data-stu-id="280d2-124">Name or ID of the table to be retrieved.</span></span>
          type:
            - string
  - uid: excel.Excel.TableCollection.getItemAt
    summary: |-
      <span data-ttu-id="280d2-125">Obtiene una tabla basada en su posición en la colección.</span><span class="sxs-lookup"><span data-stu-id="280d2-125">Gets a table based on its position in the collection.</span></span>

      <span data-ttu-id="280d2-126">\[[Conjunto de API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="280d2-126">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getItemAt(index)
    fullName: getItemAt(index)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemAt(index: number): Excel.Table;'
      return:
        type:
          - excel.Excel.Table
        description: |-


          #### <a name="examples"></a><span data-ttu-id="280d2-127">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="280d2-127">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var table = ctx.workbook.tables.getItemAt(0);
              table.load('name');
              return ctx.sync().then(function() {
                      console.log(table.name);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: index
          description: <span data-ttu-id="280d2-128">Valor de índice del objeto que se va a recuperar.</span><span class="sxs-lookup"><span data-stu-id="280d2-128">Index value of the object to be retrieved.</span></span> <span data-ttu-id="280d2-129">Indizado con cero.</span><span class="sxs-lookup"><span data-stu-id="280d2-129">Zero-indexed.</span></span>
          type:
            - number
  - uid: excel.Excel.TableCollection.items
    summary: <span data-ttu-id="280d2-130">Obtiene los elementos secundarios cargados en esta colección.</span><span class="sxs-lookup"><span data-stu-id="280d2-130">Gets the loaded child items in this collection.</span></span>
    name: items
    fullName: items
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly items: Excel.Table[];'
      return:
        type:
          - 'Excel.Table[]'
  - uid: excel.Excel.TableCollection.load
    summary: '<span data-ttu-id="280d2-131">Pone en cola un comando para cargar las propiedades especificadas del objeto.</span><span class="sxs-lookup"><span data-stu-id="280d2-131">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="280d2-132">Antes de leer las propiedades, debe llamar a "context.sync()".</span><span class="sxs-lookup"><span data-stu-id="280d2-132">You must call "context.sync()" before reading the properties.</span></span>'
    remarks: |-
      <span data-ttu-id="280d2-133">Además de esta firma, este método tiene las siguientes firmas:</span><span class="sxs-lookup"><span data-stu-id="280d2-133">In addition to this signature, this method has the following signatures:</span></span>

      <span data-ttu-id="280d2-134">`load(option?: string | string[]): Excel.TableCollection`-Donde opción es una cadena delimitada por comas o una matriz de cadenas que especifican las propiedades que se van a cargar.</span><span class="sxs-lookup"><span data-stu-id="280d2-134">`load(option?: string | string[]): Excel.TableCollection` - Where option is a comma-delimited string or an array of strings that specify the properties to load.</span></span>

      <span data-ttu-id="280d2-135">`load(option?: { select?: string; expand?: string; }): Excel.TableCollection`-Where opción. Select es una cadena delimitada por comas que especifica las propiedades que se van a cargar y Options. Expand es una cadena delimitada por comas que especifica las propiedades de navegación que se deben cargar.</span><span class="sxs-lookup"><span data-stu-id="280d2-135">`load(option?: { select?: string; expand?: string; }): Excel.TableCollection` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>

      <span data-ttu-id="280d2-136">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.TableCollection`-Solo disponible en tipos de colección.</span><span class="sxs-lookup"><span data-stu-id="280d2-136">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.TableCollection` - Only available on collection types.</span></span> <span data-ttu-id="280d2-137">Es similar a la firma anterior.</span><span class="sxs-lookup"><span data-stu-id="280d2-137">It is similar to the preceding signature.</span></span> <span data-ttu-id="280d2-138">Option. Top especifica el número máximo de elementos de colección que se pueden incluir en el resultado.</span><span class="sxs-lookup"><span data-stu-id="280d2-138">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="280d2-139">La opción. SKIP especifica el número de elementos que se deben omitir y que no se incluyen en el resultado.</span><span class="sxs-lookup"><span data-stu-id="280d2-139">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="280d2-140">Si se especifica Option. Top, el conjunto de resultados se iniciará después de omitir el número especificado de elementos.</span><span class="sxs-lookup"><span data-stu-id="280d2-140">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: Excel.Interfaces.TableCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions): Excel.TableCollection;'
      return:
        type:
          - excel.Excel.TableCollection
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - Excel.Interfaces.TableCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions
  - uid: excel.Excel.TableCollection.load_1
    summary: <span data-ttu-id="280d2-141">Pone en cola un comando para cargar las propiedades especificadas del objeto.</span><span class="sxs-lookup"><span data-stu-id="280d2-141">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="280d2-142">Debe llamar `context.sync()` antes de leer las propiedades.</span><span class="sxs-lookup"><span data-stu-id="280d2-142">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.TableCollection;'
      return:
        type:
          - excel.Excel.TableCollection
        description: |-


          #### <a name="examples"></a><span data-ttu-id="280d2-143">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="280d2-143">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var tables = ctx.workbook.tables;
              tables.load();
              return ctx.sync().then(function() {
                  console.log("tables Count: " + tables.count);
                  for (var i = 0; i < tables.items.length; i++)
                  {
                      console.log(tables.items[i].name);
                  }
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          // Get the number of tables
          Excel.run(function (ctx) { 
              var tables = ctx.workbook.tables;
              tables.load('count');
              return ctx.sync().then(function() {
                  console.log(tables.count);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: propertyNames
          description: <span data-ttu-id="280d2-144">Una cadena delimitada por comas o una matriz de cadenas que especifican las propiedades que se van a cargar.</span><span class="sxs-lookup"><span data-stu-id="280d2-144">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
          type:
            - 'string | string[]'
  - uid: excel.Excel.TableCollection.load_2
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: OfficeExtension.LoadOption): Excel.TableCollection;'
      return:
        type:
          - excel.Excel.TableCollection
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - OfficeExtension.LoadOption
  - uid: excel.Excel.TableCollection.toJSON
    summary: '<span data-ttu-id="280d2-145">Reemplaza el método JavaScript `toJSON()` para proporcionar un resultado más útil cuando se pasa un objeto API a`JSON.stringify()`</span><span class="sxs-lookup"><span data-stu-id="280d2-145">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id="280d2-146">.</span><span class="sxs-lookup"><span data-stu-id="280d2-146"></span></span> <span data-ttu-id="280d2-147">(`JSON.stringify`</span><span class="sxs-lookup"><span data-stu-id="280d2-147"></span></span><!-- --><span data-ttu-id="280d2-148">, a su vez, llama `toJSON` al método del objeto que se le pasa.) Mientras que el `Excel.TableCollection` objeto original es un objeto API, `toJSON` el método devuelve un objeto JavaScript sin formato (escrito como`Excel.Interfaces.TableCollectionData`</span><span class="sxs-lookup"><span data-stu-id="280d2-148">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original `Excel.TableCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.TableCollectionData`</span></span><!-- --><span data-ttu-id="280d2-149">) que contiene una matriz "items" con copias rasas de las propiedades cargadas de los elementos de la colección.</span><span class="sxs-lookup"><span data-stu-id="280d2-149">) that contains an "items" array with shallow copies of any loaded properties from the collection''s items.</span></span>'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.TableCollectionData;'
      return:
        type:
          - excel.Excel.Interfaces.TableCollectionData
        description: ''