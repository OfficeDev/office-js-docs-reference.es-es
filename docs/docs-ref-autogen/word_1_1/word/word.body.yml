### YamlMime:UniversalReference
items:
  - uid: 'word!Word.Body:class'
    summary: |-
      <span data-ttu-id="cdb33-101">Representa el cuerpo de un documento o una sección.</span><span class="sxs-lookup"><span data-stu-id="cdb33-101">Represents the body of a document or a section.</span></span>

      <span data-ttu-id="cdb33-102">\[[Conjunto de API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="cdb33-102">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: Word.Body
    fullName: Word.Body
    langs:
      - typeScript
    type: class
    extends:
      - 'word!OfficeExtension.ClientObject:class'
    package: word!
    children:
      - 'word!Word.Body#clear:member(1)'
      - 'word!Word.Body#contentControls:member'
      - 'word!Word.Body#context:member'
      - 'word!Word.Body#font:member'
      - 'word!Word.Body#getHtml:member(1)'
      - 'word!Word.Body#getOoxml:member(1)'
      - 'word!Word.Body#inlinePictures:member'
      - 'word!Word.Body#insertBreak:member(1)'
      - 'word!Word.Body#insertBreak:member(2)'
      - 'word!Word.Body#insertContentControl:member(1)'
      - 'word!Word.Body#insertFileFromBase64:member(1)'
      - 'word!Word.Body#insertFileFromBase64:member(2)'
      - 'word!Word.Body#insertHtml:member(1)'
      - 'word!Word.Body#insertHtml:member(2)'
      - 'word!Word.Body#insertOoxml:member(1)'
      - 'word!Word.Body#insertOoxml:member(2)'
      - 'word!Word.Body#insertParagraph:member(1)'
      - 'word!Word.Body#insertParagraph:member(2)'
      - 'word!Word.Body#insertText:member(1)'
      - 'word!Word.Body#insertText:member(2)'
      - 'word!Word.Body#load:member(1)'
      - 'word!Word.Body#load:member(2)'
      - 'word!Word.Body#load:member(3)'
      - 'word!Word.Body#paragraphs:member'
      - 'word!Word.Body#parentContentControl:member'
      - 'word!Word.Body#search:member(1)'
      - 'word!Word.Body#select:member(1)'
      - 'word!Word.Body#select:member(2)'
      - 'word!Word.Body#set:member(1)'
      - 'word!Word.Body#set:member(2)'
      - 'word!Word.Body#style:member'
      - 'word!Word.Body#text:member'
      - 'word!Word.Body#toJSON:member(1)'
      - 'word!Word.Body#track:member(1)'
      - 'word!Word.Body#untrack:member(1)'
  - uid: 'word!Word.Body#clear:member(1)'
    summary: |-
      <span data-ttu-id="cdb33-103">Borra el contenido del objeto de cuerpo.</span><span class="sxs-lookup"><span data-stu-id="cdb33-103">Clears the contents of the body object.</span></span> <span data-ttu-id="cdb33-104">El usuario puede realizar la operación de deshacer en el contenido borrado.</span><span class="sxs-lookup"><span data-stu-id="cdb33-104">The user can perform the undo operation on the cleared content.</span></span>

      <span data-ttu-id="cdb33-105">\[[Conjunto de API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="cdb33-105">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: clear()
    fullName: clear()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clear(): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="cdb33-106">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="cdb33-106">Examples</span></span>

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the document body.
              var body = context.document.body;

              // Queue a command to clear the contents of the body.
              body.clear();

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log('Cleared the body contents.');
              });
          })
          .catch(function (error) {
              console.log("Error: " + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });

          // The Silly stories add-in sample shows how the 
          // clear method can be used to clear the contents of a document.
          // https://aka.ms/sillystorywordaddin
          ```
  - uid: 'word!Word.Body#contentControls:member'
    summary: |-
      <span data-ttu-id="cdb33-107">Obtiene la colección de objetos de control de contenido de texto enriquecido en el cuerpo.</span><span class="sxs-lookup"><span data-stu-id="cdb33-107">Gets the collection of rich text content control objects in the body.</span></span> <span data-ttu-id="cdb33-108">Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="cdb33-108">Read-only.</span></span>

      <span data-ttu-id="cdb33-109">\[[Conjunto de API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="cdb33-109">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: contentControls
    fullName: contentControls
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly contentControls: Word.ContentControlCollection;'
      return:
        type:
          - 'word!Word.ContentControlCollection:class'
  - uid: 'word!Word.Body#context:member'
    summary: <span data-ttu-id="cdb33-110">Contexto de la solicitud asociado al objeto.</span><span class="sxs-lookup"><span data-stu-id="cdb33-110">The request context associated with the object.</span></span> <span data-ttu-id="cdb33-111">Esto conecta el proceso del complemento con el proceso de la aplicación host de Office.</span><span class="sxs-lookup"><span data-stu-id="cdb33-111">This connects the add-in's process to the Office host application's process.</span></span>
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'word!Word.RequestContext:class'
  - uid: 'word!Word.Body#font:member'
    summary: |-
      <span data-ttu-id="cdb33-112">Obtiene el formato de texto del cuerpo.</span><span class="sxs-lookup"><span data-stu-id="cdb33-112">Gets the text format of the body.</span></span> <span data-ttu-id="cdb33-113">Use esta para obtener y establecer el nombre, el tamaño, el color y otras propiedades de la fuente.</span><span class="sxs-lookup"><span data-stu-id="cdb33-113">Use this to get and set font name, size, color and other properties.</span></span> <span data-ttu-id="cdb33-114">Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="cdb33-114">Read-only.</span></span>

      <span data-ttu-id="cdb33-115">\[[Conjunto de API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="cdb33-115">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: font
    fullName: font
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly font: Word.Font;'
      return:
        type:
          - 'word!Word.Font:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="cdb33-116">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="cdb33-116">Examples</span></span>

          ```javascript
          // Get the style and the font size, font name, and font color properties on the body object.
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the document body.
              var body = context.document.body;

              // Queue a command to load font and style information for the document body.
              context.load(body, 'font/size, font/name, font/color, style');

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  // Show the results of the load method. Here we show the
                  // property values on the body object.
                  var results = 'Font size: ' + body.font.size +
                                '; Font name: ' + body.font.name +
                                '; Font color: ' + body.font.color +
                                '; Body style: ' + body.style;

                  console.log(results);
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'word!Word.Body#getHtml:member(1)'
    summary: |-
      <span data-ttu-id="cdb33-117">Obtiene una representación HTML del objeto Body.</span><span class="sxs-lookup"><span data-stu-id="cdb33-117">Gets an HTML representation of the body object.</span></span> <span data-ttu-id="cdb33-118">Cuando se representa en una página web o visor de HTML, el formato será una coincidencia aproximada, pero no exacta, con el formato del documento.</span><span class="sxs-lookup"><span data-stu-id="cdb33-118">When rendered in a web page or HTML viewer, the formatting will be a close, but not exact, match to the formatting of the document.</span></span> <span data-ttu-id="cdb33-119">Este método no devuelve el mismo HTML exacto para el mismo documento en diferentes plataformas (Windows, Mac, etc.).</span><span class="sxs-lookup"><span data-stu-id="cdb33-119">This method does not return the exact same HTML for the same document on different platforms (Windows, Mac, etc.).</span></span> <span data-ttu-id="cdb33-120">Si necesita fidelidad exacta, o coherencia entre plataformas, use `Body.getOoxml()` y convierta el XML devuelto en HTML.</span><span class="sxs-lookup"><span data-stu-id="cdb33-120">If you need exact fidelity, or consistency across platforms, use `Body.getOoxml()` and convert the returned XML to HTML.</span></span>

      <span data-ttu-id="cdb33-121">\[[Conjunto de API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="cdb33-121">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: getHtml()
    fullName: getHtml()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getHtml(): OfficeExtension.ClientResult<string>;'
      return:
        type:
          - 'word!Word.Body#getHtml~0:complex'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="cdb33-122">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="cdb33-122">Examples</span></span>

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the document body.
              var body = context.document.body;

              // Queue a command to get the HTML contents of the body.
              var bodyHTML = body.getHtml();

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log("Body HTML contents: " + bodyHTML.value);
              });
          })
          .catch(function (error) {
              console.log("Error: " + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'word!Word.Body#getOoxml:member(1)'
    summary: |-
      <span data-ttu-id="cdb33-123">Obtiene la representación OOXML (Office Open XML) del objeto de cuerpo.</span><span class="sxs-lookup"><span data-stu-id="cdb33-123">Gets the OOXML (Office Open XML) representation of the body object.</span></span>

      <span data-ttu-id="cdb33-124">\[[Conjunto de API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="cdb33-124">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: getOoxml()
    fullName: getOoxml()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getOoxml(): OfficeExtension.ClientResult<string>;'
      return:
        type:
          - 'word!Word.Body#getOoxml~0:complex'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="cdb33-125">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="cdb33-125">Examples</span></span>

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the document body.
              var body = context.document.body;

              // Queue a command to get the OOXML contents of the body.
              var bodyOOXML = body.getOoxml();

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log("Body OOXML contents: " + bodyOOXML.value);
              });
          })
          .catch(function (error) {
              console.log("Error: " + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'word!Word.Body#inlinePictures:member'
    summary: |-
      <span data-ttu-id="cdb33-126">Obtiene la colección de objetos InlinePicture en el cuerpo.</span><span class="sxs-lookup"><span data-stu-id="cdb33-126">Gets the collection of InlinePicture objects in the body.</span></span> <span data-ttu-id="cdb33-127">La colección no incluye imágenes flotantes.</span><span class="sxs-lookup"><span data-stu-id="cdb33-127">The collection does not include floating images.</span></span> <span data-ttu-id="cdb33-128">Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="cdb33-128">Read-only.</span></span>

      <span data-ttu-id="cdb33-129">\[[Conjunto de API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="cdb33-129">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: inlinePictures
    fullName: inlinePictures
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly inlinePictures: Word.InlinePictureCollection;'
      return:
        type:
          - 'word!Word.InlinePictureCollection:class'
  - uid: 'word!Word.Body#insertBreak:member(1)'
    summary: |-
      <span data-ttu-id="cdb33-130">Inserta un salto en la ubicación especificada del documento principal.</span><span class="sxs-lookup"><span data-stu-id="cdb33-130">Inserts a break at the specified location in the main document.</span></span> <span data-ttu-id="cdb33-131">El valor insertLocation puede ser 'Start' o 'End'.</span><span class="sxs-lookup"><span data-stu-id="cdb33-131">The insertLocation value can be 'Start' or 'End'.</span></span>

      <span data-ttu-id="cdb33-132">\[[Conjunto de API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="cdb33-132">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'insertBreak(breakType, insertLocation)'
    fullName: 'insertBreak(breakType, insertLocation)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertBreak(breakType: Word.BreakType, insertLocation: Word.InsertLocation): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="cdb33-133">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="cdb33-133">Examples</span></span>

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (ctx) {

              // Create a proxy object for the document body.
              var body = ctx.document.body;

              // Queue a command to insert a page break at the start of the document body.
              body.insertBreak(Word.BreakType.page, Word.InsertLocation.start);

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return ctx.sync().then(function () {
                  console.log('Added a page break at the start of the document body.');
              });
          })
          .catch(function (error) {
              console.log("Error: " + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: breakType
          description: <span data-ttu-id="cdb33-134">Necesario.</span><span class="sxs-lookup"><span data-stu-id="cdb33-134">Required.</span></span> <span data-ttu-id="cdb33-135">Tipo de salto que se va a agregar al cuerpo.</span><span class="sxs-lookup"><span data-stu-id="cdb33-135">The break type to add to the body.</span></span>
          type:
            - 'word!Word.BreakType:enum'
        - id: insertLocation
          description: <span data-ttu-id="cdb33-136">Necesario.</span><span class="sxs-lookup"><span data-stu-id="cdb33-136">Required.</span></span> <span data-ttu-id="cdb33-137">El valor puede ser "Start" o "End".</span><span class="sxs-lookup"><span data-stu-id="cdb33-137">The value can be 'Start' or 'End'.</span></span>
          type:
            - 'word!Word.InsertLocation:enum'
  - uid: 'word!Word.Body#insertBreak:member(2)'
    summary: |-
      <span data-ttu-id="cdb33-138">Inserta un salto en la ubicación especificada del documento principal.</span><span class="sxs-lookup"><span data-stu-id="cdb33-138">Inserts a break at the specified location in the main document.</span></span> <span data-ttu-id="cdb33-139">El valor insertLocation puede ser 'Start' o 'End'.</span><span class="sxs-lookup"><span data-stu-id="cdb33-139">The insertLocation value can be 'Start' or 'End'.</span></span>

      <span data-ttu-id="cdb33-140">\[[Conjunto de API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="cdb33-140">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'insertBreak(breakTypeString, insertLocation)'
    fullName: 'insertBreak(breakTypeString, insertLocation)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertBreak(breakTypeString: "Page" | "Next" | "SectionNext" | "SectionContinuous" | "SectionEven" | "SectionOdd" | "Line", insertLocation: "Before" | "After" | "Start" | "End" | "Replace"): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: breakTypeString
          description: <span data-ttu-id="cdb33-141">Necesario.</span><span class="sxs-lookup"><span data-stu-id="cdb33-141">Required.</span></span> <span data-ttu-id="cdb33-142">Tipo de salto que se va a agregar al cuerpo.</span><span class="sxs-lookup"><span data-stu-id="cdb33-142">The break type to add to the body.</span></span>
          type:
            - '"Page" | "Next" | "SectionNext" | "SectionContinuous" | "SectionEven" | "SectionOdd" | "Line"'
        - id: insertLocation
          description: <span data-ttu-id="cdb33-143">Necesario.</span><span class="sxs-lookup"><span data-stu-id="cdb33-143">Required.</span></span> <span data-ttu-id="cdb33-144">El valor puede ser "Start" o "End".</span><span class="sxs-lookup"><span data-stu-id="cdb33-144">The value can be 'Start' or 'End'.</span></span>
          type:
            - '"Before" | "After" | "Start" | "End" | "Replace"'
  - uid: 'word!Word.Body#insertContentControl:member(1)'
    summary: |-
      <span data-ttu-id="cdb33-145">Ajusta el objeto de cuerpo con un control de contenido de texto enriquecido.</span><span class="sxs-lookup"><span data-stu-id="cdb33-145">Wraps the body object with a Rich Text content control.</span></span>

      <span data-ttu-id="cdb33-146">\[[Conjunto de API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="cdb33-146">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: insertContentControl()
    fullName: insertContentControl()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertContentControl(): Word.ContentControl;'
      return:
        type:
          - 'word!Word.ContentControl:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="cdb33-147">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="cdb33-147">Examples</span></span>

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the document body.
              var body = context.document.body;

              // Queue a command to wrap the body in a content control.
              body.insertContentControl();

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log('Wrapped the body in a content control.');
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'word!Word.Body#insertFileFromBase64:member(1)'
    summary: |-
      <span data-ttu-id="cdb33-148">Inserta un documento en el cuerpo en la ubicación especificada.</span><span class="sxs-lookup"><span data-stu-id="cdb33-148">Inserts a document into the body at the specified location.</span></span> <span data-ttu-id="cdb33-149">El valor insertLocation puede ser 'Replace', 'Start' o 'End'.</span><span class="sxs-lookup"><span data-stu-id="cdb33-149">The insertLocation value can be 'Replace', 'Start', or 'End'.</span></span>

      <span data-ttu-id="cdb33-150">\[[Conjunto de API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="cdb33-150">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'insertFileFromBase64(base64File, insertLocation)'
    fullName: 'insertFileFromBase64(base64File, insertLocation)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertFileFromBase64(base64File: string, insertLocation: Word.InsertLocation): Word.Range;'
      return:
        type:
          - 'word!Word.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="cdb33-151">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="cdb33-151">Examples</span></span>

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the document body.
              var body = context.document.body;

              // Queue a command to insert base64 encoded .docx at the beginning of the content body.
              // You will need to implement getBase64() to pass in a string of a base64 encoded docx file.
              body.insertFileFromBase64(getBase64(), Word.InsertLocation.start);

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log('Added base64 encoded text to the beginning of the document body.');
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: base64File
          description: <span data-ttu-id="cdb33-152">Necesario.</span><span class="sxs-lookup"><span data-stu-id="cdb33-152">Required.</span></span> <span data-ttu-id="cdb33-153">El contenido codificado en Base64 de un archivo. docx.</span><span class="sxs-lookup"><span data-stu-id="cdb33-153">The base64 encoded content of a .docx file.</span></span>
          type:
            - string
        - id: insertLocation
          description: '<span data-ttu-id="cdb33-154">Obligatorio.</span><span class="sxs-lookup"><span data-stu-id="cdb33-154">Required.</span></span> <span data-ttu-id="cdb33-155">El valor puede ser ''Replace'', ''Start'' o ''End''.</span><span class="sxs-lookup"><span data-stu-id="cdb33-155">The value can be ''Replace'', ''Start'', or ''End''.</span></span>'
          type:
            - 'word!Word.InsertLocation:enum'
  - uid: 'word!Word.Body#insertFileFromBase64:member(2)'
    summary: |-
      <span data-ttu-id="cdb33-156">Inserta un documento en el cuerpo en la ubicación especificada.</span><span class="sxs-lookup"><span data-stu-id="cdb33-156">Inserts a document into the body at the specified location.</span></span> <span data-ttu-id="cdb33-157">El valor insertLocation puede ser 'Replace', 'Start' o 'End'.</span><span class="sxs-lookup"><span data-stu-id="cdb33-157">The insertLocation value can be 'Replace', 'Start', or 'End'.</span></span>

      <span data-ttu-id="cdb33-158">\[[Conjunto de API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="cdb33-158">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'insertFileFromBase64(base64File, insertLocationString)'
    fullName: 'insertFileFromBase64(base64File, insertLocationString)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertFileFromBase64(base64File: string, insertLocationString: "Before" | "After" | "Start" | "End" | "Replace"): Word.Range;'
      return:
        type:
          - 'word!Word.Range:class'
        description: ''
      parameters:
        - id: base64File
          description: <span data-ttu-id="cdb33-159">Necesario.</span><span class="sxs-lookup"><span data-stu-id="cdb33-159">Required.</span></span> <span data-ttu-id="cdb33-160">El contenido codificado en Base64 de un archivo. docx.</span><span class="sxs-lookup"><span data-stu-id="cdb33-160">The base64 encoded content of a .docx file.</span></span>
          type:
            - string
        - id: insertLocationString
          description: '<span data-ttu-id="cdb33-161">Obligatorio.</span><span class="sxs-lookup"><span data-stu-id="cdb33-161">Required.</span></span> <span data-ttu-id="cdb33-162">El valor puede ser ''Replace'', ''Start'' o ''End''.</span><span class="sxs-lookup"><span data-stu-id="cdb33-162">The value can be ''Replace'', ''Start'', or ''End''.</span></span>'
          type:
            - '"Before" | "After" | "Start" | "End" | "Replace"'
  - uid: 'word!Word.Body#insertHtml:member(1)'
    summary: |-
      <span data-ttu-id="cdb33-163">Inserta HTML en la ubicación especificada.</span><span class="sxs-lookup"><span data-stu-id="cdb33-163">Inserts HTML at the specified location.</span></span> <span data-ttu-id="cdb33-164">El valor insertLocation puede ser 'Replace', 'Start' o 'End'.</span><span class="sxs-lookup"><span data-stu-id="cdb33-164">The insertLocation value can be 'Replace', 'Start', or 'End'.</span></span>

      <span data-ttu-id="cdb33-165">\[[Conjunto de API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="cdb33-165">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'insertHtml(html, insertLocation)'
    fullName: 'insertHtml(html, insertLocation)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertHtml(html: string, insertLocation: Word.InsertLocation): Word.Range;'
      return:
        type:
          - 'word!Word.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="cdb33-166">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="cdb33-166">Examples</span></span>

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the document body.
              var body = context.document.body;

              // Queue a command to insert HTML in to the beginning of the body.
              body.insertHtml(
                  '<strong>This is text inserted with body.insertHtml()</strong>', Word.InsertLocation.start);

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log('HTML added to the beginning of the document body.');
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: html
          description: <span data-ttu-id="cdb33-167">Necesario.</span><span class="sxs-lookup"><span data-stu-id="cdb33-167">Required.</span></span> <span data-ttu-id="cdb33-168">HTML que se va a insertar en el documento.</span><span class="sxs-lookup"><span data-stu-id="cdb33-168">The HTML to be inserted in the document.</span></span>
          type:
            - string
        - id: insertLocation
          description: '<span data-ttu-id="cdb33-169">Obligatorio.</span><span class="sxs-lookup"><span data-stu-id="cdb33-169">Required.</span></span> <span data-ttu-id="cdb33-170">El valor puede ser ''Replace'', ''Start'' o ''End''.</span><span class="sxs-lookup"><span data-stu-id="cdb33-170">The value can be ''Replace'', ''Start'', or ''End''.</span></span>'
          type:
            - 'word!Word.InsertLocation:enum'
  - uid: 'word!Word.Body#insertHtml:member(2)'
    summary: |-
      <span data-ttu-id="cdb33-171">Inserta HTML en la ubicación especificada.</span><span class="sxs-lookup"><span data-stu-id="cdb33-171">Inserts HTML at the specified location.</span></span> <span data-ttu-id="cdb33-172">El valor insertLocation puede ser 'Replace', 'Start' o 'End'.</span><span class="sxs-lookup"><span data-stu-id="cdb33-172">The insertLocation value can be 'Replace', 'Start', or 'End'.</span></span>

      <span data-ttu-id="cdb33-173">\[[Conjunto de API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="cdb33-173">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'insertHtml(html, insertLocationString)'
    fullName: 'insertHtml(html, insertLocationString)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertHtml(html: string, insertLocationString: "Before" | "After" | "Start" | "End" | "Replace"): Word.Range;'
      return:
        type:
          - 'word!Word.Range:class'
        description: ''
      parameters:
        - id: html
          description: <span data-ttu-id="cdb33-174">Necesario.</span><span class="sxs-lookup"><span data-stu-id="cdb33-174">Required.</span></span> <span data-ttu-id="cdb33-175">HTML que se va a insertar en el documento.</span><span class="sxs-lookup"><span data-stu-id="cdb33-175">The HTML to be inserted in the document.</span></span>
          type:
            - string
        - id: insertLocationString
          description: '<span data-ttu-id="cdb33-176">Obligatorio.</span><span class="sxs-lookup"><span data-stu-id="cdb33-176">Required.</span></span> <span data-ttu-id="cdb33-177">El valor puede ser ''Replace'', ''Start'' o ''End''.</span><span class="sxs-lookup"><span data-stu-id="cdb33-177">The value can be ''Replace'', ''Start'', or ''End''.</span></span>'
          type:
            - '"Before" | "After" | "Start" | "End" | "Replace"'
  - uid: 'word!Word.Body#insertOoxml:member(1)'
    summary: |-
      <span data-ttu-id="cdb33-178">Inserta OOXML en la ubicación especificada.</span><span class="sxs-lookup"><span data-stu-id="cdb33-178">Inserts OOXML at the specified location.</span></span> <span data-ttu-id="cdb33-179">El valor insertLocation puede ser 'Replace', 'Start' o 'End'.</span><span class="sxs-lookup"><span data-stu-id="cdb33-179">The insertLocation value can be 'Replace', 'Start', or 'End'.</span></span>

      <span data-ttu-id="cdb33-180">\[[Conjunto de API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="cdb33-180">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'insertOoxml(ooxml, insertLocation)'
    fullName: 'insertOoxml(ooxml, insertLocation)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertOoxml(ooxml: string, insertLocation: Word.InsertLocation): Word.Range;'
      return:
        type:
          - 'word!Word.Range:class'
        description: ''
      parameters:
        - id: ooxml
          description: <span data-ttu-id="cdb33-181">Necesario.</span><span class="sxs-lookup"><span data-stu-id="cdb33-181">Required.</span></span> <span data-ttu-id="cdb33-182">OOXML que se va a insertar.</span><span class="sxs-lookup"><span data-stu-id="cdb33-182">The OOXML to be inserted.</span></span>
          type:
            - string
        - id: insertLocation
          description: '<span data-ttu-id="cdb33-183">Obligatorio.</span><span class="sxs-lookup"><span data-stu-id="cdb33-183">Required.</span></span> <span data-ttu-id="cdb33-184">El valor puede ser ''Replace'', ''Start'' o ''End''.</span><span class="sxs-lookup"><span data-stu-id="cdb33-184">The value can be ''Replace'', ''Start'', or ''End''.</span></span>'
          type:
            - 'word!Word.InsertLocation:enum'
  - uid: 'word!Word.Body#insertOoxml:member(2)'
    summary: |-
      <span data-ttu-id="cdb33-185">Inserta OOXML en la ubicación especificada.</span><span class="sxs-lookup"><span data-stu-id="cdb33-185">Inserts OOXML at the specified location.</span></span> <span data-ttu-id="cdb33-186">El valor insertLocation puede ser 'Replace', 'Start' o 'End'.</span><span class="sxs-lookup"><span data-stu-id="cdb33-186">The insertLocation value can be 'Replace', 'Start', or 'End'.</span></span>

      <span data-ttu-id="cdb33-187">\[[Conjunto de API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="cdb33-187">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'insertOoxml(ooxml, insertLocationString)'
    fullName: 'insertOoxml(ooxml, insertLocationString)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertOoxml(ooxml: string, insertLocationString: "Before" | "After" | "Start" | "End" | "Replace"): Word.Range;'
      return:
        type:
          - 'word!Word.Range:class'
        description: ''
      parameters:
        - id: ooxml
          description: <span data-ttu-id="cdb33-188">Necesario.</span><span class="sxs-lookup"><span data-stu-id="cdb33-188">Required.</span></span> <span data-ttu-id="cdb33-189">OOXML que se va a insertar.</span><span class="sxs-lookup"><span data-stu-id="cdb33-189">The OOXML to be inserted.</span></span>
          type:
            - string
        - id: insertLocationString
          description: '<span data-ttu-id="cdb33-190">Obligatorio.</span><span class="sxs-lookup"><span data-stu-id="cdb33-190">Required.</span></span> <span data-ttu-id="cdb33-191">El valor puede ser ''Replace'', ''Start'' o ''End''.</span><span class="sxs-lookup"><span data-stu-id="cdb33-191">The value can be ''Replace'', ''Start'', or ''End''.</span></span>'
          type:
            - '"Before" | "After" | "Start" | "End" | "Replace"'
  - uid: 'word!Word.Body#insertParagraph:member(1)'
    summary: |-
      <span data-ttu-id="cdb33-192">Inserta un párrafo en la ubicación especificada.</span><span class="sxs-lookup"><span data-stu-id="cdb33-192">Inserts a paragraph at the specified location.</span></span> <span data-ttu-id="cdb33-193">El valor insertLocation puede ser 'Start' o 'End'.</span><span class="sxs-lookup"><span data-stu-id="cdb33-193">The insertLocation value can be 'Start' or 'End'.</span></span>

      <span data-ttu-id="cdb33-194">\[[Conjunto de API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="cdb33-194">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'insertParagraph(paragraphText, insertLocation)'
    fullName: 'insertParagraph(paragraphText, insertLocation)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertParagraph(paragraphText: string, insertLocation: Word.InsertLocation): Word.Paragraph;'
      return:
        type:
          - 'word!Word.Paragraph:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="cdb33-195">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="cdb33-195">Examples</span></span>

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the document body.
              var body = context.document.body;

              // Queue a command to insert the paragraph at the end of the document body.
              body.insertParagraph('Content of a new paragraph', Word.InsertLocation.end);

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log('Paragraph added at the end of the document body.');
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });

          // The Word-Add-in-DocumentAssembly sample shows how you can use the insertParagraph method to assemble a document.
          // https://github.com/OfficeDev/Word-Add-in-DocumentAssembly
          ```
          ```typescript
          await Word.run(async (context) => {
              let paragraph = context.document.body.insertParagraph("Timeline", "End");
              paragraph.style = "Heading 2";
              let paragraph2 = context.document.body.insertParagraph("The Services shall commence on July 31, 2015, and shall continue through July 29, 2015.", "End");
              paragraph2.style = "Normal";
              let paragraph3 = context.document.body.insertParagraph("Project Costs by Phase", "End");
              paragraph3.style = "Heading 2";
              // Note a content control with the title of "ProjectCosts" is added. Content will be replaced later.
              let paragraph4 = context.document.body.insertParagraph("<Add Project Costs Here>", "End");
              paragraph4.style = "Normal";
              paragraph4.font.highlightColor = "#FFFF00";
              let contentControl = paragraph4.insertContentControl();
              contentControl.title = "ProjectCosts";
              let paragraph5 = context.document.body.insertParagraph("Project Team", "End");
              paragraph5.style = "Heading 2";
              paragraph5.font.highlightColor = "#FFFFFF";
              let paragraph6 = context.document.body.insertParagraph("Terms of Work", "End");
              paragraph6.style = "Heading 1";
              let paragraph7 = context.document.body.insertParagraph("Contractor shall provide the Services and Deliverable(s) as follows:", "End");
              paragraph7.style = "Normal";
              let paragraph8 = context.document.body.insertParagraph("Out-of-Pocket Expenses / Invoice Procedures", "End");
              paragraph8.style = "Heading 2";
              let paragraph9 = context.document.body.insertParagraph("Client will be invoiced monthly for the consulting services and T&L expenses. Standard Contractor invoicing is assumed to be acceptable. Invoices are due upon receipt. client will be invoiced all costs associated with out-of-pocket expenses (including, without limitation, costs and expenses associated with meals, lodging, local transportation and any other applicable business expenses) listed on the invoice as a separate line item. Reimbursement for out-of-pocket expenses in connection with performance of this SOW, when authorized and up to the limits set forth in this SOW, shall be in accordance with Client's then-current published policies governing travel and associated business expenses, which information shall be provided by the Client Project Manager.", "End");
              paragraph9.style = "Normal";
              // Insert a page break at the end of the document.
              context.document.body.insertBreak("Page", "End");

              await context.sync();
          });
          ```
      parameters:
        - id: paragraphText
          description: <span data-ttu-id="cdb33-196">Necesario.</span><span class="sxs-lookup"><span data-stu-id="cdb33-196">Required.</span></span> <span data-ttu-id="cdb33-197">Texto de párrafo que se va a insertar.</span><span class="sxs-lookup"><span data-stu-id="cdb33-197">The paragraph text to be inserted.</span></span>
          type:
            - string
        - id: insertLocation
          description: <span data-ttu-id="cdb33-198">Necesario.</span><span class="sxs-lookup"><span data-stu-id="cdb33-198">Required.</span></span> <span data-ttu-id="cdb33-199">El valor puede ser "Start" o "End".</span><span class="sxs-lookup"><span data-stu-id="cdb33-199">The value can be 'Start' or 'End'.</span></span>
          type:
            - 'word!Word.InsertLocation:enum'
  - uid: 'word!Word.Body#insertParagraph:member(2)'
    summary: |-
      <span data-ttu-id="cdb33-200">Inserta un párrafo en la ubicación especificada.</span><span class="sxs-lookup"><span data-stu-id="cdb33-200">Inserts a paragraph at the specified location.</span></span> <span data-ttu-id="cdb33-201">El valor insertLocation puede ser 'Start' o 'End'.</span><span class="sxs-lookup"><span data-stu-id="cdb33-201">The insertLocation value can be 'Start' or 'End'.</span></span>

      <span data-ttu-id="cdb33-202">\[[Conjunto de API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="cdb33-202">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'insertParagraph(paragraphText, insertLocationString)'
    fullName: 'insertParagraph(paragraphText, insertLocationString)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertParagraph(paragraphText: string, insertLocationString: "Before" | "After" | "Start" | "End" | "Replace"): Word.Paragraph;'
      return:
        type:
          - 'word!Word.Paragraph:class'
        description: ''
      parameters:
        - id: paragraphText
          description: <span data-ttu-id="cdb33-203">Necesario.</span><span class="sxs-lookup"><span data-stu-id="cdb33-203">Required.</span></span> <span data-ttu-id="cdb33-204">Texto de párrafo que se va a insertar.</span><span class="sxs-lookup"><span data-stu-id="cdb33-204">The paragraph text to be inserted.</span></span>
          type:
            - string
        - id: insertLocationString
          description: <span data-ttu-id="cdb33-205">Necesario.</span><span class="sxs-lookup"><span data-stu-id="cdb33-205">Required.</span></span> <span data-ttu-id="cdb33-206">El valor puede ser "Start" o "End".</span><span class="sxs-lookup"><span data-stu-id="cdb33-206">The value can be 'Start' or 'End'.</span></span>
          type:
            - '"Before" | "After" | "Start" | "End" | "Replace"'
  - uid: 'word!Word.Body#insertText:member(1)'
    summary: |-
      <span data-ttu-id="cdb33-207">Inserta texto en el cuerpo en la ubicación especificada.</span><span class="sxs-lookup"><span data-stu-id="cdb33-207">Inserts text into the body at the specified location.</span></span> <span data-ttu-id="cdb33-208">El valor insertLocation puede ser 'Replace', 'Start' o 'End'.</span><span class="sxs-lookup"><span data-stu-id="cdb33-208">The insertLocation value can be 'Replace', 'Start', or 'End'.</span></span>

      <span data-ttu-id="cdb33-209">\[[Conjunto de API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="cdb33-209">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'insertText(text, insertLocation)'
    fullName: 'insertText(text, insertLocation)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertText(text: string, insertLocation: Word.InsertLocation): Word.Range;'
      return:
        type:
          - 'word!Word.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="cdb33-210">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="cdb33-210">Examples</span></span>

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the document body.
              var body = context.document.body;

              // Queue a command to insert text in to the beginning of the body.
              body.insertText('This is text inserted with body.insertText()', Word.InsertLocation.start);

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log('Text added to the beginning of the document body.');
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: text
          description: <span data-ttu-id="cdb33-211">Necesario.</span><span class="sxs-lookup"><span data-stu-id="cdb33-211">Required.</span></span> <span data-ttu-id="cdb33-212">Texto que se va a insertar.</span><span class="sxs-lookup"><span data-stu-id="cdb33-212">Text to be inserted.</span></span>
          type:
            - string
        - id: insertLocation
          description: '<span data-ttu-id="cdb33-213">Obligatorio.</span><span class="sxs-lookup"><span data-stu-id="cdb33-213">Required.</span></span> <span data-ttu-id="cdb33-214">El valor puede ser ''Replace'', ''Start'' o ''End''.</span><span class="sxs-lookup"><span data-stu-id="cdb33-214">The value can be ''Replace'', ''Start'', or ''End''.</span></span>'
          type:
            - 'word!Word.InsertLocation:enum'
  - uid: 'word!Word.Body#insertText:member(2)'
    summary: |-
      <span data-ttu-id="cdb33-215">Inserta texto en el cuerpo en la ubicación especificada.</span><span class="sxs-lookup"><span data-stu-id="cdb33-215">Inserts text into the body at the specified location.</span></span> <span data-ttu-id="cdb33-216">El valor insertLocation puede ser 'Replace', 'Start' o 'End'.</span><span class="sxs-lookup"><span data-stu-id="cdb33-216">The insertLocation value can be 'Replace', 'Start', or 'End'.</span></span>

      <span data-ttu-id="cdb33-217">\[[Conjunto de API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="cdb33-217">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'insertText(text, insertLocationString)'
    fullName: 'insertText(text, insertLocationString)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertText(text: string, insertLocationString: "Before" | "After" | "Start" | "End" | "Replace"): Word.Range;'
      return:
        type:
          - 'word!Word.Range:class'
        description: ''
      parameters:
        - id: text
          description: <span data-ttu-id="cdb33-218">Necesario.</span><span class="sxs-lookup"><span data-stu-id="cdb33-218">Required.</span></span> <span data-ttu-id="cdb33-219">Texto que se va a insertar.</span><span class="sxs-lookup"><span data-stu-id="cdb33-219">Text to be inserted.</span></span>
          type:
            - string
        - id: insertLocationString
          description: '<span data-ttu-id="cdb33-220">Obligatorio.</span><span class="sxs-lookup"><span data-stu-id="cdb33-220">Required.</span></span> <span data-ttu-id="cdb33-221">El valor puede ser ''Replace'', ''Start'' o ''End''.</span><span class="sxs-lookup"><span data-stu-id="cdb33-221">The value can be ''Replace'', ''Start'', or ''End''.</span></span>'
          type:
            - '"Before" | "After" | "Start" | "End" | "Replace"'
  - uid: 'word!Word.Body#load:member(1)'
    summary: '<span data-ttu-id="cdb33-222">Pone en cola un comando para cargar las propiedades especificadas del objeto.</span><span class="sxs-lookup"><span data-stu-id="cdb33-222">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="cdb33-223">Antes de leer las propiedades, debe llamar a "context.sync()".</span><span class="sxs-lookup"><span data-stu-id="cdb33-223">You must call "context.sync()" before reading the properties.</span></span>'
    remarks: |-
      <span data-ttu-id="cdb33-224">Además de esta firma, este método tiene las siguientes firmas:</span><span class="sxs-lookup"><span data-stu-id="cdb33-224">In addition to this signature, this method has the following signatures:</span></span>

      <span data-ttu-id="cdb33-225">`load(option?: string | string[]): Word.Body`-Donde opción es una cadena delimitada por comas o una matriz de cadenas que especifican las propiedades que se van a cargar.</span><span class="sxs-lookup"><span data-stu-id="cdb33-225">`load(option?: string | string[]): Word.Body` - Where option is a comma-delimited string or an array of strings that specify the properties to load.</span></span>

      <span data-ttu-id="cdb33-226">`load(option?: { select?: string; expand?: string; }): Word.Body`-Where opción. Select es una cadena delimitada por comas que especifica las propiedades que se van a cargar y Options. Expand es una cadena delimitada por comas que especifica las propiedades de navegación que se deben cargar.</span><span class="sxs-lookup"><span data-stu-id="cdb33-226">`load(option?: { select?: string; expand?: string; }): Word.Body` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>

      <span data-ttu-id="cdb33-227">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Word.Body`-Solo disponible en tipos de colección.</span><span class="sxs-lookup"><span data-stu-id="cdb33-227">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Word.Body` - Only available on collection types.</span></span> <span data-ttu-id="cdb33-228">Es similar a la firma anterior.</span><span class="sxs-lookup"><span data-stu-id="cdb33-228">It is similar to the preceding signature.</span></span> <span data-ttu-id="cdb33-229">Option. Top especifica el número máximo de elementos de colección que se pueden incluir en el resultado.</span><span class="sxs-lookup"><span data-stu-id="cdb33-229">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="cdb33-230">La opción. SKIP especifica el número de elementos que se deben omitir y que no se incluyen en el resultado.</span><span class="sxs-lookup"><span data-stu-id="cdb33-230">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="cdb33-231">Si se especifica Option. Top, el conjunto de resultados se iniciará después de omitir el número especificado de elementos.</span><span class="sxs-lookup"><span data-stu-id="cdb33-231">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: Word.Interfaces.BodyLoadOptions): Word.Body;'
      return:
        type:
          - 'word!Word.Body:class'
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - 'word!Word.Interfaces.BodyLoadOptions:interface'
  - uid: 'word!Word.Body#load:member(2)'
    summary: <span data-ttu-id="cdb33-232">Pone en cola un comando para cargar las propiedades especificadas del objeto.</span><span class="sxs-lookup"><span data-stu-id="cdb33-232">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="cdb33-233">Debe llamar `context.sync()` antes de leer las propiedades.</span><span class="sxs-lookup"><span data-stu-id="cdb33-233">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Word.Body;'
      return:
        type:
          - 'word!Word.Body:class'
        description: ''
      parameters:
        - id: propertyNames
          description: <span data-ttu-id="cdb33-234">Una cadena delimitada por comas o una matriz de cadenas que especifican las propiedades que se van a cargar.</span><span class="sxs-lookup"><span data-stu-id="cdb33-234">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
          type:
            - 'string | string[]'
  - uid: 'word!Word.Body#load:member(3)'
    summary: <span data-ttu-id="cdb33-235">Pone en cola un comando para cargar las propiedades especificadas del objeto.</span><span class="sxs-lookup"><span data-stu-id="cdb33-235">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="cdb33-236">Debe llamar `context.sync()` antes de leer las propiedades.</span><span class="sxs-lookup"><span data-stu-id="cdb33-236">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): Word.Body;'
      return:
        type:
          - 'word!Word.Body:class'
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '<span data-ttu-id="cdb33-237">Donde propertyNamesAndPaths. Select es una cadena delimitada por comas que especifica las propiedades que se van a cargar y propertyNamesAndPaths. Expand es una cadena delimitada por comas que especifica las propiedades de navegación que se deben cargar.</span><span class="sxs-lookup"><span data-stu-id="cdb33-237">Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>'
          type:
            - '{ select?: string; expand?: string; }'
  - uid: 'word!Word.Body#paragraphs:member'
    summary: |-
      <span data-ttu-id="cdb33-238">Obtiene la colección de objetos Paragraph en el cuerpo.</span><span class="sxs-lookup"><span data-stu-id="cdb33-238">Gets the collection of paragraph objects in the body.</span></span> <span data-ttu-id="cdb33-239">Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="cdb33-239">Read-only.</span></span>

      <span data-ttu-id="cdb33-240">\[[Conjunto de API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="cdb33-240">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: paragraphs
    fullName: paragraphs
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly paragraphs: Word.ParagraphCollection;'
      return:
        type:
          - 'word!Word.ParagraphCollection:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="cdb33-241">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="cdb33-241">Examples</span></span>

          ```typescript
          await Word.run(async (context) => {
            let paragraphs = context.document.body.paragraphs;
            paragraphs.load("text");
            await context.sync();

            let text = [];
            paragraphs.items.forEach((item) => {
              let paragraph = item.text.trim();
              if (paragraph) {
                paragraph.split(" ").forEach((term) => {
                  let currentTerm = term.trim();
                  if (currentTerm) {
                    text.push(currentTerm);
                  }
                });
              }
            });

            let makeTextDistinct = new Set(text);
            let distinctText = Array.from(makeTextDistinct);
            let allSearchResults = [];

            for (let i = 0; i < distinctText.length; i++) {
              let results = context.document.body.search(distinctText[i], { matchCase: true, matchWholeWord: true });
              results.load("text");

              // Map search term with its results.
              let correlatedResults = {
                searchTerm: distinctText[i],
                hits: results
              };

              allSearchResults.push(correlatedResults);
            }

            await context.sync();

            // Display counts.
            allSearchResults.forEach((result) => {
              let length = result.hits.items.length;

              console.log("Search term: " + result.searchTerm + " => Count: " + length);
            });
          });
          ```
  - uid: 'word!Word.Body#parentContentControl:member'
    summary: |-
      <span data-ttu-id="cdb33-242">Obtiene el control de contenido que contiene el cuerpo.</span><span class="sxs-lookup"><span data-stu-id="cdb33-242">Gets the content control that contains the body.</span></span> <span data-ttu-id="cdb33-243">Produce una excepción si no hay un control de contenido primario.</span><span class="sxs-lookup"><span data-stu-id="cdb33-243">Throws if there isn't a parent content control.</span></span> <span data-ttu-id="cdb33-244">Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="cdb33-244">Read-only.</span></span>

      <span data-ttu-id="cdb33-245">\[[Conjunto de API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="cdb33-245">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: parentContentControl
    fullName: parentContentControl
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly parentContentControl: Word.ContentControl;'
      return:
        type:
          - 'word!Word.ContentControl:class'
  - uid: 'word!Word.Body#search:member(1)'
    summary: |-
      <span data-ttu-id="cdb33-246">Realiza una búsqueda con el SearchOptions especificado en el ámbito del objeto de cuerpo.</span><span class="sxs-lookup"><span data-stu-id="cdb33-246">Performs a search with the specified SearchOptions on the scope of the body object.</span></span> <span data-ttu-id="cdb33-247">Los resultados de la búsqueda son una colección de objetos de intervalo.</span><span class="sxs-lookup"><span data-stu-id="cdb33-247">The search results are a collection of range objects.</span></span>

      <span data-ttu-id="cdb33-248">\[[Conjunto de API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="cdb33-248">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'search(searchText, searchOptions)'
    fullName: 'search(searchText, searchOptions)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        search(searchText: string, searchOptions?: Word.SearchOptions | {
                    ignorePunct?: boolean;
                    ignoreSpace?: boolean;
                    matchCase?: boolean;
                    matchPrefix?: boolean;
                    matchSuffix?: boolean;
                    matchWholeWord?: boolean;
                    matchWildcards?: boolean;
                }): Word.RangeCollection;
      return:
        type:
          - 'word!Word.RangeCollection:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="cdb33-249">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="cdb33-249">Examples</span></span>

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the document body.
              var body = context.document.body;

              // Queue a command to search the document.
              var searchResults = context.document.body.search('video', {matchCase: false});

              // Queue a command to load the results.
              context.load(searchResults, 'text, font');

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  var results = 'Found count: ' + searchResults.items.length +
                                '; we highlighted the results.';

                  // Queue a command to change the font for each found item.
                  for (var i = 0; i < searchResults.items.length; i++) {
                    searchResults.items[i].font.color = '#FF0000'    // Change color to Red
                    searchResults.items[i].font.highlightColor = '#FFFF00';
                    searchResults.items[i].font.bold = true;
                  }

                  // Synchronize the document state by executing the queued commands,
                  // and return a promise to indicate task completion.
                  return context.sync().then(function () {
                      console.log(results);
                  });
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });

          // The Word-Add-in-DocumentAssembly sample provides another example of how to search a document.
          // https://github.com/OfficeDev/Word-Add-in-DocumentAssembly
          ```
          ```typescript
          await Word.run(async (context) => {
            let results = context.document.body.search("Online");
            results.load("length");

            await context.sync();

            // Let's traverse the search results... and highlight...
            for (let i = 0; i < results.items.length; i++) {
              results.items[i].font.highlightColor = "yellow";
            }

            await context.sync();
          });
          ```
          ```typescript
          await Word.run(async (context) => {
            // Check out how wildcard expression are built, also use the second parameter of the search method to include search modes
            // (i.e. use wildcards).
            let results = context.document.body.search("$*.[0-9][0-9]", { matchWildcards: true });
            results.load("length");

            await context.sync();

            // Let's traverse the search results... and highlight...
            for (let i = 0; i < results.items.length; i++) {
              results.items[i].font.highlightColor = "red";
              results.items[i].font.color = "white";
            }

            await context.sync();
          });
          ```
          ```typescript
          await Word.run(async (context) => {
            let paragraphs = context.document.body.paragraphs;
            paragraphs.load("text");
            await context.sync();

            let text = [];
            paragraphs.items.forEach((item) => {
              let paragraph = item.text.trim();
              if (paragraph) {
                paragraph.split(" ").forEach((term) => {
                  let currentTerm = term.trim();
                  if (currentTerm) {
                    text.push(currentTerm);
                  }
                });
              }
            });

            let makeTextDistinct = new Set(text);
            let distinctText = Array.from(makeTextDistinct);
            let allSearchResults = [];

            for (let i = 0; i < distinctText.length; i++) {
              let results = context.document.body.search(distinctText[i], { matchCase: true, matchWholeWord: true });
              results.load("text");

              // Map search term with its results.
              let correlatedResults = {
                searchTerm: distinctText[i],
                hits: results
              };

              allSearchResults.push(correlatedResults);
            }

            await context.sync();

            // Display counts.
            allSearchResults.forEach((result) => {
              let length = result.hits.items.length;

              console.log("Search term: " + result.searchTerm + " => Count: " + length);
            });
          });
          ```
      parameters:
        - id: searchText
          description: <span data-ttu-id="cdb33-250">Necesario.</span><span class="sxs-lookup"><span data-stu-id="cdb33-250">Required.</span></span> <span data-ttu-id="cdb33-251">Texto de búsqueda.</span><span class="sxs-lookup"><span data-stu-id="cdb33-251">The search text.</span></span> <span data-ttu-id="cdb33-252">Puede tener un máximo de 255 caracteres.</span><span class="sxs-lookup"><span data-stu-id="cdb33-252">Can be a maximum of 255 characters.</span></span>
          type:
            - string
        - id: searchOptions
          description: <span data-ttu-id="cdb33-253">Opcional.</span><span class="sxs-lookup"><span data-stu-id="cdb33-253">Optional.</span></span> <span data-ttu-id="cdb33-254">Opciones de la búsqueda.</span><span class="sxs-lookup"><span data-stu-id="cdb33-254">Options for the search.</span></span>
          type:
            - 'word!Word.Body#search~0:complex'
  - uid: 'word!Word.Body#select:member(1)'
    summary: |-
      <span data-ttu-id="cdb33-255">Selecciona el cuerpo y se desplaza por la interfaz de usuario de Word hasta él.</span><span class="sxs-lookup"><span data-stu-id="cdb33-255">Selects the body and navigates the Word UI to it.</span></span>

      <span data-ttu-id="cdb33-256">\[[Conjunto de API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="cdb33-256">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: select(selectionMode)
    fullName: select(selectionMode)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'select(selectionMode?: Word.SelectionMode): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="cdb33-257">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="cdb33-257">Examples</span></span>

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the document body.
              var body = context.document.body;

              // Queue a command to select the document body. The Word UI will
              // move to the selected document body.
              body.select();

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log('Selected the document body.');
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: selectionMode
          description: '<span data-ttu-id="cdb33-258">Opcional.</span><span class="sxs-lookup"><span data-stu-id="cdb33-258">Optional.</span></span> <span data-ttu-id="cdb33-259">El modo de selección puede ser ''Select'', ''Start'' o ''End''.</span><span class="sxs-lookup"><span data-stu-id="cdb33-259">The selection mode can be ''Select'', ''Start'', or ''End''.</span></span> <span data-ttu-id="cdb33-260">''Select'' es el valor predeterminado.</span><span class="sxs-lookup"><span data-stu-id="cdb33-260">''Select'' is the default.</span></span>'
          type:
            - 'word!Word.SelectionMode:enum'
  - uid: 'word!Word.Body#select:member(2)'
    summary: |-
      <span data-ttu-id="cdb33-261">Selecciona el cuerpo y se desplaza por la interfaz de usuario de Word hasta él.</span><span class="sxs-lookup"><span data-stu-id="cdb33-261">Selects the body and navigates the Word UI to it.</span></span>

      <span data-ttu-id="cdb33-262">\[[Conjunto de API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="cdb33-262">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: select(selectionModeString)
    fullName: select(selectionModeString)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'select(selectionModeString?: "Select" | "Start" | "End"): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: selectionModeString
          description: '<span data-ttu-id="cdb33-263">Opcional.</span><span class="sxs-lookup"><span data-stu-id="cdb33-263">Optional.</span></span> <span data-ttu-id="cdb33-264">El modo de selección puede ser ''Select'', ''Start'' o ''End''.</span><span class="sxs-lookup"><span data-stu-id="cdb33-264">The selection mode can be ''Select'', ''Start'', or ''End''.</span></span> <span data-ttu-id="cdb33-265">''Select'' es el valor predeterminado.</span><span class="sxs-lookup"><span data-stu-id="cdb33-265">''Select'' is the default.</span></span>'
          type:
            - '"Select" | "Start" | "End"'
  - uid: 'word!Word.Body#set:member(1)'
    summary: '<span data-ttu-id="cdb33-266">Establece varias propiedades de un objeto al mismo tiempo.</span><span class="sxs-lookup"><span data-stu-id="cdb33-266">Sets multiple properties of an object at the same time.</span></span> <span data-ttu-id="cdb33-267">Puede pasar un objeto sin formato con las propiedades apropiadas o cualquier otro objeto de la API del mismo tipo.</span><span class="sxs-lookup"><span data-stu-id="cdb33-267">You can pass either a plain object with the appropriate properties, or another API object of the same type.</span></span>'
    remarks: |-
      <span data-ttu-id="cdb33-268">Este método tiene la siguiente firma adicional:</span><span class="sxs-lookup"><span data-stu-id="cdb33-268">This method has the following additional signature:</span></span>

      `set(properties: Word.Body): void`
    name: 'set(properties, options)'
    fullName: 'set(properties, options)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Interfaces.BodyUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: <span data-ttu-id="cdb33-269">Objeto de JavaScript con propiedades que se estructuran de forma isomórfico a las propiedades del objeto en el que se llama al método.</span><span class="sxs-lookup"><span data-stu-id="cdb33-269">A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.</span></span>
          type:
            - 'word!Word.Interfaces.BodyUpdateData:interface'
        - id: options
          description: <span data-ttu-id="cdb33-270">Proporciona una opción para suprimir errores si el objeto Properties intenta establecer propiedades de solo lectura.</span><span class="sxs-lookup"><span data-stu-id="cdb33-270">Provides an option to suppress errors if the properties object tries to set any read-only properties.</span></span>
          type:
            - 'word!OfficeExtension.UpdateOptions:interface'
  - uid: 'word!Word.Body#set:member(2)'
    summary: '<span data-ttu-id="cdb33-271">Establece varias propiedades en el objeto al mismo tiempo, basándose en un objeto cargado existente.</span><span class="sxs-lookup"><span data-stu-id="cdb33-271">Sets multiple properties on the object at the same time, based on an existing loaded object.</span></span>'
    name: set(properties)
    fullName: set(properties)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Word.Body): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - 'word!Word.Body:class'
  - uid: 'word!Word.Body#style:member'
    summary: |-
      <span data-ttu-id="cdb33-p155">Obtiene o establece el nombre de estilo del cuerpo. Use esta propiedad para los estilos personalizados y los nombres de estilo localizados. Para usar los estilos integrados portátiles entre configuraciones regionales, consulte la propiedad "styleBuiltIn".</span><span class="sxs-lookup"><span data-stu-id="cdb33-p155">Gets or sets the style name for the body. Use this property for custom styles and localized style names. To use the built-in styles that are portable between locales, see the "styleBuiltIn" property.</span></span>

      <span data-ttu-id="cdb33-275">\[[Conjunto de API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="cdb33-275">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: style
    fullName: style
    langs:
      - typeScript
    type: property
    syntax:
      content: 'style: string;'
      return:
        type:
          - string
  - uid: 'word!Word.Body#text:member'
    summary: |-
      <span data-ttu-id="cdb33-276">Obtiene el texto del cuerpo.</span><span class="sxs-lookup"><span data-stu-id="cdb33-276">Gets the text of the body.</span></span> <span data-ttu-id="cdb33-277">Use el método insertText para insertar texto.</span><span class="sxs-lookup"><span data-stu-id="cdb33-277">Use the insertText method to insert text.</span></span> <span data-ttu-id="cdb33-278">Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="cdb33-278">Read-only.</span></span>

      <span data-ttu-id="cdb33-279">\[[Conjunto de API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="cdb33-279">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: text
    fullName: text
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly text: string;'
      return:
        type:
          - string
        description: |-


          #### <a name="examples"></a><span data-ttu-id="cdb33-280">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="cdb33-280">Examples</span></span>

          ```javascript
          // Get the text property on the body object
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the document body.
              var body = context.document.body;

              // Queue a command to load the text in document body.
              context.load(body, 'text');

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  console.log("Body contents: " + body.text);
              });
          })
          .catch(function (error) {
              console.log("Error: " + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'word!Word.Body#toJSON:member(1)'
    summary: '<span data-ttu-id="cdb33-281">Reemplaza el método JavaScript `toJSON()` para proporcionar un resultado más útil cuando se pasa un objeto API a`JSON.stringify()`</span><span class="sxs-lookup"><span data-stu-id="cdb33-281">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id="cdb33-282">.</span><span class="sxs-lookup"><span data-stu-id="cdb33-282"></span></span> <span data-ttu-id="cdb33-283">(`JSON.stringify`</span><span class="sxs-lookup"><span data-stu-id="cdb33-283"></span></span><!-- --><span data-ttu-id="cdb33-284">, a su vez, llama `toJSON` al método del objeto que se le pasa.) Mientras que el objeto Word. Body original es un objeto API, `toJSON` el método devuelve un objeto JavaScript sin formato (escrito como`Word.Interfaces.BodyData`</span><span class="sxs-lookup"><span data-stu-id="cdb33-284">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original Word.Body object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.BodyData`</span></span><!-- --><span data-ttu-id="cdb33-285">) que contiene copias rasas de las propiedades secundarias cargadas del objeto original.</span><span class="sxs-lookup"><span data-stu-id="cdb33-285">) that contains shallow copies of any loaded child properties from the original object.</span></span>'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Word.Interfaces.BodyData;'
      return:
        type:
          - 'word!Word.Interfaces.BodyData:interface'
        description: ''
  - uid: 'word!Word.Body#track:member(1)'
    summary: '<span data-ttu-id="cdb33-286">Realiza un seguimiento del objeto de ajuste automático según cambios adyacentes en el documento.</span><span class="sxs-lookup"><span data-stu-id="cdb33-286">Track the object for automatic adjustment based on surrounding changes in the document.</span></span> <span data-ttu-id="cdb33-287">Esta llamada es una forma abreviada de context.trackedObjects.add(thisObject).</span><span class="sxs-lookup"><span data-stu-id="cdb33-287">This call is a shorthand for context.trackedObjects.add(thisObject).</span></span> <span data-ttu-id="cdb33-288">Si usa este objeto en llamadas ".sync" y fuera de la ejecución secuencial de un lote de ".run", y obtiene un error "InvalidObjectPath" al establecer una propiedad o invocar un método en el objeto, debería haber agregado el objeto a la colección de objetos de la que realiza un seguimiento cuando se creó el objeto.</span><span class="sxs-lookup"><span data-stu-id="cdb33-288">If you are using this object across ".sync" calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you needed to have added the object to the tracked object collection when the object was first created.</span></span>'
    name: track()
    fullName: track()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'track(): Word.Body;'
      return:
        type:
          - 'word!Word.Body:class'
        description: ''
  - uid: 'word!Word.Body#untrack:member(1)'
    summary: '<span data-ttu-id="cdb33-289">Libere la memoria asociada a este objeto, si se ha realizado un seguimiento de él anteriormente.</span><span class="sxs-lookup"><span data-stu-id="cdb33-289">Release the memory associated with this object, if it has previously been tracked.</span></span> <span data-ttu-id="cdb33-290">Esta llamada es una forma abreviada de context.trackedObjects.remove(thisObject).</span><span class="sxs-lookup"><span data-stu-id="cdb33-290">This call is shorthand for context.trackedObjects.remove(thisObject).</span></span> <span data-ttu-id="cdb33-291">Tener muchos objetos marcados ralentiza la aplicación host, así que debe recordar liberar los objetos que agregue cuando haya terminado con ellos.</span><span class="sxs-lookup"><span data-stu-id="cdb33-291">Having many tracked objects slows down the host application, so please remember to free any objects you add, once you''re done using them.</span></span> <span data-ttu-id="cdb33-292">Debe llamar a "context.sync()" antes de que surta efecto la liberación de memoria.</span><span class="sxs-lookup"><span data-stu-id="cdb33-292">You will need to call "context.sync()" before the memory release takes effect.</span></span>'
    name: untrack()
    fullName: untrack()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'untrack(): Word.Body;'
      return:
        type:
          - 'word!Word.Body:class'
        description: ''
references:
  - uid: 'word!OfficeExtension.ClientObject:class'
    name: OfficeExtension.ClientObject
  - uid: 'word!Word.ContentControlCollection:class'
    name: Word.ContentControlCollection
  - uid: 'word!Word.RequestContext:class'
    name: RequestContext
  - uid: 'word!Word.Font:class'
    name: Word.Font
  - uid: 'word!Word.Body#getHtml~0:complex'
    name: OfficeExtension.ClientResult<string>
    fullName: OfficeExtension.ClientResult<string>
    spec.typeScript:
      - uid: 'word!OfficeExtension.ClientResult:class'
        name: OfficeExtension.ClientResult
        fullName: OfficeExtension.ClientResult
      - name: <string>
        fullName: <string>
  - uid: 'word!Word.Body#getOoxml~0:complex'
    name: OfficeExtension.ClientResult<string>
    fullName: OfficeExtension.ClientResult<string>
    spec.typeScript:
      - uid: 'word!OfficeExtension.ClientResult:class'
        name: OfficeExtension.ClientResult
        fullName: OfficeExtension.ClientResult
      - name: <string>
        fullName: <string>
  - uid: 'word!Word.InlinePictureCollection:class'
    name: Word.InlinePictureCollection
  - uid: 'word!Word.BreakType:enum'
    name: Word.BreakType
  - uid: 'word!Word.InsertLocation:enum'
    name: Word.InsertLocation
  - uid: 'word!Word.ContentControl:class'
    name: Word.ContentControl
  - uid: 'word!Word.Range:class'
    name: Word.Range
  - uid: 'word!Word.Paragraph:class'
    name: Word.Paragraph
  - uid: 'word!Word.Body:class'
    name: Word.Body
  - uid: 'word!Word.Interfaces.BodyLoadOptions:interface'
    name: Word.Interfaces.BodyLoadOptions
  - uid: 'word!Word.ParagraphCollection:class'
    name: Word.ParagraphCollection
  - uid: 'word!Word.RangeCollection:class'
    name: Word.RangeCollection
  - uid: 'word!Word.Body#search~0:complex'
    name: |-
      Word.SearchOptions | {
                  ignorePunct?: boolean;
                  ignoreSpace?: boolean;
                  matchCase?: boolean;
                  matchPrefix?: boolean;
                  matchSuffix?: boolean;
                  matchWholeWord?: boolean;
                  matchWildcards?: boolean;
              }
    fullName: |-
      Word.SearchOptions | {
                  ignorePunct?: boolean;
                  ignoreSpace?: boolean;
                  matchCase?: boolean;
                  matchPrefix?: boolean;
                  matchSuffix?: boolean;
                  matchWholeWord?: boolean;
                  matchWildcards?: boolean;
              }
    spec.typeScript:
      - uid: 'word!Word.SearchOptions:class'
        name: Word.SearchOptions
        fullName: Word.SearchOptions
      - name: |2-
           | {
                      ignorePunct?: boolean;
                      ignoreSpace?: boolean;
                      matchCase?: boolean;
                      matchPrefix?: boolean;
                      matchSuffix?: boolean;
                      matchWholeWord?: boolean;
                      matchWildcards?: boolean;
                  }
        fullName: |2-
           | {
                      ignorePunct?: boolean;
                      ignoreSpace?: boolean;
                      matchCase?: boolean;
                      matchPrefix?: boolean;
                      matchSuffix?: boolean;
                      matchWholeWord?: boolean;
                      matchWildcards?: boolean;
                  }
  - uid: 'word!Word.SelectionMode:enum'
    name: Word.SelectionMode
  - uid: 'word!Word.Interfaces.BodyUpdateData:interface'
    name: Interfaces.BodyUpdateData
  - uid: 'word!OfficeExtension.UpdateOptions:interface'
    name: OfficeExtension.UpdateOptions
  - uid: 'word!Word.Interfaces.BodyData:interface'
    name: Word.Interfaces.BodyData