### YamlMime:UniversalReference
items:
  - uid: 'word!Word.Paragraph:class'
    summary: |-
      <span data-ttu-id="65213-101">Representa un solo párrafo de una selección, intervalo, control de contenido o cuerpo del documento.</span><span class="sxs-lookup"><span data-stu-id="65213-101">Represents a single paragraph in a selection, range, content control, or document body.</span></span>

      <span data-ttu-id="65213-102">\[[Conjunto de API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="65213-102">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: Word.Paragraph
    fullName: Word.Paragraph
    langs:
      - typeScript
    type: class
    extends:
      - 'word!OfficeExtension.ClientObject:class'
    package: word!
    children:
      - 'word!Word.Paragraph#alignment:member'
      - 'word!Word.Paragraph#clear:member(1)'
      - 'word!Word.Paragraph#contentControls:member'
      - 'word!Word.Paragraph#context:member'
      - 'word!Word.Paragraph#delete:member(1)'
      - 'word!Word.Paragraph#firstLineIndent:member'
      - 'word!Word.Paragraph#font:member'
      - 'word!Word.Paragraph#getHtml:member(1)'
      - 'word!Word.Paragraph#getOoxml:member(1)'
      - 'word!Word.Paragraph#inlinePictures:member'
      - 'word!Word.Paragraph#insertBreak:member(1)'
      - 'word!Word.Paragraph#insertBreak:member(2)'
      - 'word!Word.Paragraph#insertContentControl:member(1)'
      - 'word!Word.Paragraph#insertFileFromBase64:member(1)'
      - 'word!Word.Paragraph#insertFileFromBase64:member(2)'
      - 'word!Word.Paragraph#insertHtml:member(1)'
      - 'word!Word.Paragraph#insertHtml:member(2)'
      - 'word!Word.Paragraph#insertInlinePictureFromBase64:member(1)'
      - 'word!Word.Paragraph#insertInlinePictureFromBase64:member(2)'
      - 'word!Word.Paragraph#insertOoxml:member(1)'
      - 'word!Word.Paragraph#insertOoxml:member(2)'
      - 'word!Word.Paragraph#insertParagraph:member(1)'
      - 'word!Word.Paragraph#insertParagraph:member(2)'
      - 'word!Word.Paragraph#insertText:member(1)'
      - 'word!Word.Paragraph#insertText:member(2)'
      - 'word!Word.Paragraph#leftIndent:member'
      - 'word!Word.Paragraph#lineSpacing:member'
      - 'word!Word.Paragraph#lineUnitAfter:member'
      - 'word!Word.Paragraph#lineUnitBefore:member'
      - 'word!Word.Paragraph#load:member(1)'
      - 'word!Word.Paragraph#load:member(2)'
      - 'word!Word.Paragraph#load:member(3)'
      - 'word!Word.Paragraph#outlineLevel:member'
      - 'word!Word.Paragraph#parentContentControl:member'
      - 'word!Word.Paragraph#rightIndent:member'
      - 'word!Word.Paragraph#search:member(1)'
      - 'word!Word.Paragraph#select:member(1)'
      - 'word!Word.Paragraph#select:member(2)'
      - 'word!Word.Paragraph#set:member(1)'
      - 'word!Word.Paragraph#set:member(2)'
      - 'word!Word.Paragraph#spaceAfter:member'
      - 'word!Word.Paragraph#spaceBefore:member'
      - 'word!Word.Paragraph#style:member'
      - 'word!Word.Paragraph#text:member'
      - 'word!Word.Paragraph#toJSON:member(1)'
      - 'word!Word.Paragraph#track:member(1)'
      - 'word!Word.Paragraph#untrack:member(1)'
  - uid: 'word!Word.Paragraph#alignment:member'
    summary: |-
      <span data-ttu-id="65213-103">Obtiene o establece la alineación de un párrafo.</span><span class="sxs-lookup"><span data-stu-id="65213-103">Gets or sets the alignment for a paragraph.</span></span> <span data-ttu-id="65213-104">El valor puede ser 'left', 'centered', 'right' o 'justified'.</span><span class="sxs-lookup"><span data-stu-id="65213-104">The value can be 'left', 'centered', 'right', or 'justified'.</span></span>

      <span data-ttu-id="65213-105">\[[Conjunto de API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="65213-105">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: alignment
    fullName: alignment
    langs:
      - typeScript
    type: property
    syntax:
      content: 'alignment: Word.Alignment | "Mixed" | "Unknown" | "Left" | "Centered" | "Right" | "Justified";'
      return:
        type:
          - 'word!Word.Paragraph#alignment~0:complex'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="65213-106">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="65213-106">Examples</span></span>

          ```typescript
          await Word.run(async (context) => {
            // Centers last paragraph alignment.
            context.document.body.paragraphs.getLast().alignment = "Centered";

            await context.sync();
          });
          ```
  - uid: 'word!Word.Paragraph#clear:member(1)'
    summary: |-
      <span data-ttu-id="65213-107">Borra el contenido del objeto de párrafo.</span><span class="sxs-lookup"><span data-stu-id="65213-107">Clears the contents of the paragraph object.</span></span> <span data-ttu-id="65213-108">El usuario puede realizar la operación de deshacer en el contenido borrado.</span><span class="sxs-lookup"><span data-stu-id="65213-108">The user can perform the undo operation on the cleared content.</span></span>

      <span data-ttu-id="65213-109">\[[Conjunto de API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="65213-109">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: clear()
    fullName: clear()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clear(): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="65213-110">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="65213-110">Examples</span></span>

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the paragraphs collection.
              var paragraphs = context.document.body.paragraphs;

              // Queue a command to load the style property for all of the paragraphs.
              context.load(paragraphs, 'style');

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {

                  // Queue a command to clear the contents of the first paragraph.
                  paragraphs.items[0].clear();

                  // Synchronize the document state by executing the queued commands,
                  // and return a promise to indicate task completion.
                  return context.sync().then(function () {
                      console.log('Cleared the contents of the first paragraph.');
                  });
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'word!Word.Paragraph#contentControls:member'
    summary: |-
      <span data-ttu-id="65213-111">Obtiene la colección de objetos de control de contenido en el párrafo.</span><span class="sxs-lookup"><span data-stu-id="65213-111">Gets the collection of content control objects in the paragraph.</span></span> <span data-ttu-id="65213-112">Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="65213-112">Read-only.</span></span>

      <span data-ttu-id="65213-113">\[[Conjunto de API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="65213-113">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: contentControls
    fullName: contentControls
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly contentControls: Word.ContentControlCollection;'
      return:
        type:
          - 'word!Word.ContentControlCollection:class'
  - uid: 'word!Word.Paragraph#context:member'
    summary: <span data-ttu-id="65213-114">Contexto de la solicitud asociado al objeto.</span><span class="sxs-lookup"><span data-stu-id="65213-114">The request context associated with the object.</span></span> <span data-ttu-id="65213-115">Esto conecta el proceso del complemento con el proceso de la aplicación host de Office.</span><span class="sxs-lookup"><span data-stu-id="65213-115">This connects the add-in's process to the Office host application's process.</span></span>
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'word!Word.RequestContext:class'
  - uid: 'word!Word.Paragraph#delete:member(1)'
    summary: |-
      <span data-ttu-id="65213-116">Elimina el párrafo y su contenido del documento.</span><span class="sxs-lookup"><span data-stu-id="65213-116">Deletes the paragraph and its content from the document.</span></span>

      <span data-ttu-id="65213-117">\[[Conjunto de API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="65213-117">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: delete()
    fullName: delete()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'delete(): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="65213-118">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="65213-118">Examples</span></span>

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the paragraphs collection.
              var paragraphs = context.document.body.paragraphs;

              // Queue a command to load the text property for all of the paragraphs.
              context.load(paragraphs, 'text');

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {

                  // Queue a command to delete the first paragraph.
                  paragraphs.items[0].delete();

                  // Synchronize the document state by executing the queued commands,
                  // and return a promise to indicate task completion.
                  return context.sync().then(function () {
                      console.log('Deleted the first paragraph.');
                  });
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'word!Word.Paragraph#firstLineIndent:member'
    summary: |-
      <span data-ttu-id="65213-p105">Obtiene o establece el valor (en puntos) para una sangría en la primera línea o francesa. Para establecer una sangría en la primera línea se debe usar un valor positivo, para establecer una sangría francesa se debe usar un valor negativo.</span><span class="sxs-lookup"><span data-stu-id="65213-p105">Gets or sets the value, in points, for a first line or hanging indent. Use a positive value to set a first-line indent, and use a negative value to set a hanging indent.</span></span>

      <span data-ttu-id="65213-121">\[[Conjunto de API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="65213-121">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: firstLineIndent
    fullName: firstLineIndent
    langs:
      - typeScript
    type: property
    syntax:
      content: 'firstLineIndent: number;'
      return:
        type:
          - number
  - uid: 'word!Word.Paragraph#font:member'
    summary: |-
      <span data-ttu-id="65213-122">Obtiene el formato de texto del párrafo.</span><span class="sxs-lookup"><span data-stu-id="65213-122">Gets the text format of the paragraph.</span></span> <span data-ttu-id="65213-123">Úselo para obtener y establecer el nombre de la fuente, el tamaño, el color y otras propiedades.</span><span class="sxs-lookup"><span data-stu-id="65213-123">Use this to get and set font name, size, color, and other properties.</span></span> <span data-ttu-id="65213-124">Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="65213-124">Read-only.</span></span>

      <span data-ttu-id="65213-125">\[[Conjunto de API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="65213-125">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: font
    fullName: font
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly font: Word.Font;'
      return:
        type:
          - 'word!Word.Font:class'
  - uid: 'word!Word.Paragraph#getHtml:member(1)'
    summary: |-
      <span data-ttu-id="65213-126">Obtiene una representación HTML del objeto Paragraph.</span><span class="sxs-lookup"><span data-stu-id="65213-126">Gets an HTML representation of the paragraph object.</span></span> <span data-ttu-id="65213-127">Cuando se representa en una página web o visor de HTML, el formato será una coincidencia aproximada, pero no exacta, con el formato del documento.</span><span class="sxs-lookup"><span data-stu-id="65213-127">When rendered in a web page or HTML viewer, the formatting will be a close, but not exact, match to the formatting of the document.</span></span> <span data-ttu-id="65213-128">Este método no devuelve el mismo HTML exacto para el mismo documento en diferentes plataformas (Windows, Mac, etc.).</span><span class="sxs-lookup"><span data-stu-id="65213-128">This method does not return the exact same HTML for the same document on different platforms (Windows, Mac, etc.).</span></span> <span data-ttu-id="65213-129">Si necesita fidelidad exacta, o coherencia entre plataformas, use `Paragraph.getOoxml()` y convierta el XML devuelto en HTML.</span><span class="sxs-lookup"><span data-stu-id="65213-129">If you need exact fidelity, or consistency across platforms, use `Paragraph.getOoxml()` and convert the returned XML to HTML.</span></span>

      <span data-ttu-id="65213-130">\[[Conjunto de API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="65213-130">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: getHtml()
    fullName: getHtml()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getHtml(): OfficeExtension.ClientResult<string>;'
      return:
        type:
          - 'word!Word.Paragraph#getHtml~0:complex'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="65213-131">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="65213-131">Examples</span></span>

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the paragraphs collection.
              var paragraphs = context.document.body.paragraphs;

              // Queue a command to load the style property for all of the paragraphs.
              context.load(paragraphs, 'style');

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {

                  // Queue a a set of commands to get the HTML of the first paragraph.
                  var html = paragraphs.items[0].getHtml();

                  // Synchronize the document state by executing the queued commands,
                  // and return a promise to indicate task completion.
                  return context.sync().then(function () {
                      console.log('Paragraph HTML: ' + html.value);
                  });
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'word!Word.Paragraph#getOoxml:member(1)'
    summary: |-
      <span data-ttu-id="65213-132">Obtiene la representación Office Open XML (OOXML) del objeto de párrafo.</span><span class="sxs-lookup"><span data-stu-id="65213-132">Gets the Office Open XML (OOXML) representation of the paragraph object.</span></span>

      <span data-ttu-id="65213-133">\[[Conjunto de API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="65213-133">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: getOoxml()
    fullName: getOoxml()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getOoxml(): OfficeExtension.ClientResult<string>;'
      return:
        type:
          - 'word!Word.Paragraph#getOoxml~0:complex'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="65213-134">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="65213-134">Examples</span></span>

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the paragraphs collection.
              var paragraphs = context.document.body.paragraphs;

              // Queue a command to load the style property for the top 2 paragraphs.
              context.load(paragraphs, {select: 'style', top: 2} );

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {

                  // Queue a a set of commands to get the OOXML of the first paragraph.
                  var ooxml = paragraphs.items[0].getOoxml();

                  // Synchronize the document state by executing the queued commands,
                  // and return a promise to indicate task completion.
                  return context.sync().then(function () {
                      console.log('Paragraph OOXML: ' + ooxml.value);
                  });
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'word!Word.Paragraph#inlinePictures:member'
    summary: |-
      <span data-ttu-id="65213-135">Obtiene la colección de objetos InlinePicture del párrafo.</span><span class="sxs-lookup"><span data-stu-id="65213-135">Gets the collection of InlinePicture objects in the paragraph.</span></span> <span data-ttu-id="65213-136">La colección no incluye imágenes flotantes.</span><span class="sxs-lookup"><span data-stu-id="65213-136">The collection does not include floating images.</span></span> <span data-ttu-id="65213-137">Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="65213-137">Read-only.</span></span>

      <span data-ttu-id="65213-138">\[[Conjunto de API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="65213-138">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: inlinePictures
    fullName: inlinePictures
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly inlinePictures: Word.InlinePictureCollection;'
      return:
        type:
          - 'word!Word.InlinePictureCollection:class'
  - uid: 'word!Word.Paragraph#insertBreak:member(1)'
    summary: |-
      <span data-ttu-id="65213-139">Inserta un salto en la ubicación especificada del documento principal.</span><span class="sxs-lookup"><span data-stu-id="65213-139">Inserts a break at the specified location in the main document.</span></span> <span data-ttu-id="65213-140">El valor de insertLocation puede ser 'Before' o 'After'.</span><span class="sxs-lookup"><span data-stu-id="65213-140">The insertLocation value can be 'Before' or 'After'.</span></span>

      <span data-ttu-id="65213-141">\[[Conjunto de API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="65213-141">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'insertBreak(breakType, insertLocation)'
    fullName: 'insertBreak(breakType, insertLocation)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertBreak(breakType: Word.BreakType, insertLocation: Word.InsertLocation): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="65213-142">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="65213-142">Examples</span></span>

          ```typescript
          Word.run(async (context) => {
            context.document.body.paragraphs.getFirst().insertBreak(Word.BreakType.line, "After");

            await context.sync();
            console.log("success");
          });
          ```
          ```typescript
          await Word.run(async (context) => {
            context.document.body.paragraphs.getFirst().insertBreak(Word.BreakType.page, "After");

            await context.sync();
            console.log("success");
          });
          ```
      parameters:
        - id: breakType
          description: <span data-ttu-id="65213-143">Necesario.</span><span class="sxs-lookup"><span data-stu-id="65213-143">Required.</span></span> <span data-ttu-id="65213-144">Tipo de salto que se va a agregar al documento.</span><span class="sxs-lookup"><span data-stu-id="65213-144">The break type to add to the document.</span></span>
          type:
            - 'word!Word.BreakType:enum'
        - id: insertLocation
          description: <span data-ttu-id="65213-145">Necesario.</span><span class="sxs-lookup"><span data-stu-id="65213-145">Required.</span></span> <span data-ttu-id="65213-146">El valor puede ser "Before" o "After".</span><span class="sxs-lookup"><span data-stu-id="65213-146">The value can be 'Before' or 'After'.</span></span>
          type:
            - 'word!Word.InsertLocation:enum'
  - uid: 'word!Word.Paragraph#insertBreak:member(2)'
    summary: |-
      <span data-ttu-id="65213-147">Inserta un salto en la ubicación especificada del documento principal.</span><span class="sxs-lookup"><span data-stu-id="65213-147">Inserts a break at the specified location in the main document.</span></span> <span data-ttu-id="65213-148">El valor de insertLocation puede ser 'Before' o 'After'.</span><span class="sxs-lookup"><span data-stu-id="65213-148">The insertLocation value can be 'Before' or 'After'.</span></span>

      <span data-ttu-id="65213-149">\[[Conjunto de API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="65213-149">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'insertBreak(breakTypeString, insertLocation)'
    fullName: 'insertBreak(breakTypeString, insertLocation)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertBreak(breakTypeString: "Page" | "Next" | "SectionNext" | "SectionContinuous" | "SectionEven" | "SectionOdd" | "Line", insertLocation: "Before" | "After" | "Start" | "End" | "Replace"): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="65213-150">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="65213-150">Examples</span></span>

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the paragraphs collection.
              var paragraphs = context.document.body.paragraphs;

              // Queue a command to load the style property for the top 2 paragraphs.
              // We never perform an empty load. We always must request a property.
              context.load(paragraphs, {select: 'style', top: 2} );

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {

                  // Queue a command to get the first paragraph.
                  var paragraph = paragraphs.items[0];

                  // Queue a command to insert a page break after the first paragraph.
                  paragraph.insertBreak('page', 'After');

                  // Synchronize the document state by executing the queued commands,
                  // and return a promise to indicate task completion.
                  return context.sync().then(function () {
                      console.log('Inserted a page break after the paragraph.');
                  });
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: breakTypeString
          description: <span data-ttu-id="65213-151">Necesario.</span><span class="sxs-lookup"><span data-stu-id="65213-151">Required.</span></span> <span data-ttu-id="65213-152">Tipo de salto que se va a agregar al documento.</span><span class="sxs-lookup"><span data-stu-id="65213-152">The break type to add to the document.</span></span>
          type:
            - '"Page" | "Next" | "SectionNext" | "SectionContinuous" | "SectionEven" | "SectionOdd" | "Line"'
        - id: insertLocation
          description: <span data-ttu-id="65213-153">Necesario.</span><span class="sxs-lookup"><span data-stu-id="65213-153">Required.</span></span> <span data-ttu-id="65213-154">El valor puede ser "Before" o "After".</span><span class="sxs-lookup"><span data-stu-id="65213-154">The value can be 'Before' or 'After'.</span></span>
          type:
            - '"Before" | "After" | "Start" | "End" | "Replace"'
  - uid: 'word!Word.Paragraph#insertContentControl:member(1)'
    summary: |-
      <span data-ttu-id="65213-155">Ajusta el objeto de párrafo con un control de contenido de texto enriquecido.</span><span class="sxs-lookup"><span data-stu-id="65213-155">Wraps the paragraph object with a rich text content control.</span></span>

      <span data-ttu-id="65213-156">\[[Conjunto de API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="65213-156">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: insertContentControl()
    fullName: insertContentControl()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertContentControl(): Word.ContentControl;'
      return:
        type:
          - 'word!Word.ContentControl:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="65213-157">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="65213-157">Examples</span></span>

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the paragraphs collection.
              var paragraphs = context.document.body.paragraphs;

              // Queue a command to load the style property for the top 2 paragraphs.
              // We never perform an empty load. We always must request a property.
              context.load(paragraphs, {select: 'style', top: 2} );

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {

                  // Queue a command to get the first paragraph.
                  var paragraph = paragraphs.items[0];

                  // Queue a command to wrap the first paragraph in a rich text content control.
                  paragraph.insertContentControl();

                  // Synchronize the document state by executing the queued commands,
                  // and return a promise to indicate task completion.
                  return context.sync().then(function () {
                      console.log('Wrapped the first paragraph in a content control.');
                  });
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'word!Word.Paragraph#insertFileFromBase64:member(1)'
    summary: |-
      <span data-ttu-id="65213-158">Inserta un documento en el párrafo en la ubicación especificada.</span><span class="sxs-lookup"><span data-stu-id="65213-158">Inserts a document into the paragraph at the specified location.</span></span> <span data-ttu-id="65213-159">El valor insertLocation puede ser 'Replace', 'Start' o 'End'.</span><span class="sxs-lookup"><span data-stu-id="65213-159">The insertLocation value can be 'Replace', 'Start', or 'End'.</span></span>

      <span data-ttu-id="65213-160">\[[Conjunto de API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="65213-160">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'insertFileFromBase64(base64File, insertLocation)'
    fullName: 'insertFileFromBase64(base64File, insertLocation)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertFileFromBase64(base64File: string, insertLocation: Word.InsertLocation): Word.Range;'
      return:
        type:
          - 'word!Word.Range:class'
        description: ''
      parameters:
        - id: base64File
          description: <span data-ttu-id="65213-161">Necesario.</span><span class="sxs-lookup"><span data-stu-id="65213-161">Required.</span></span> <span data-ttu-id="65213-162">El contenido codificado en Base64 de un archivo. docx.</span><span class="sxs-lookup"><span data-stu-id="65213-162">The base64 encoded content of a .docx file.</span></span>
          type:
            - string
        - id: insertLocation
          description: '<span data-ttu-id="65213-163">Obligatorio.</span><span class="sxs-lookup"><span data-stu-id="65213-163">Required.</span></span> <span data-ttu-id="65213-164">El valor puede ser ''Replace'', ''Start'' o ''End''.</span><span class="sxs-lookup"><span data-stu-id="65213-164">The value can be ''Replace'', ''Start'', or ''End''.</span></span>'
          type:
            - 'word!Word.InsertLocation:enum'
  - uid: 'word!Word.Paragraph#insertFileFromBase64:member(2)'
    summary: |-
      <span data-ttu-id="65213-165">Inserta un documento en el párrafo en la ubicación especificada.</span><span class="sxs-lookup"><span data-stu-id="65213-165">Inserts a document into the paragraph at the specified location.</span></span> <span data-ttu-id="65213-166">El valor insertLocation puede ser 'Replace', 'Start' o 'End'.</span><span class="sxs-lookup"><span data-stu-id="65213-166">The insertLocation value can be 'Replace', 'Start', or 'End'.</span></span>

      <span data-ttu-id="65213-167">\[[Conjunto de API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="65213-167">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'insertFileFromBase64(base64File, insertLocationString)'
    fullName: 'insertFileFromBase64(base64File, insertLocationString)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertFileFromBase64(base64File: string, insertLocationString: "Before" | "After" | "Start" | "End" | "Replace"): Word.Range;'
      return:
        type:
          - 'word!Word.Range:class'
        description: ''
      parameters:
        - id: base64File
          description: <span data-ttu-id="65213-168">Necesario.</span><span class="sxs-lookup"><span data-stu-id="65213-168">Required.</span></span> <span data-ttu-id="65213-169">El contenido codificado en Base64 de un archivo. docx.</span><span class="sxs-lookup"><span data-stu-id="65213-169">The base64 encoded content of a .docx file.</span></span>
          type:
            - string
        - id: insertLocationString
          description: '<span data-ttu-id="65213-170">Obligatorio.</span><span class="sxs-lookup"><span data-stu-id="65213-170">Required.</span></span> <span data-ttu-id="65213-171">El valor puede ser ''Replace'', ''Start'' o ''End''.</span><span class="sxs-lookup"><span data-stu-id="65213-171">The value can be ''Replace'', ''Start'', or ''End''.</span></span>'
          type:
            - '"Before" | "After" | "Start" | "End" | "Replace"'
  - uid: 'word!Word.Paragraph#insertHtml:member(1)'
    summary: |-
      <span data-ttu-id="65213-172">Inserta HTML en el párrafo en la ubicación especificada.</span><span class="sxs-lookup"><span data-stu-id="65213-172">Inserts HTML into the paragraph at the specified location.</span></span> <span data-ttu-id="65213-173">El valor insertLocation puede ser 'Replace', 'Start' o 'End'.</span><span class="sxs-lookup"><span data-stu-id="65213-173">The insertLocation value can be 'Replace', 'Start', or 'End'.</span></span>

      <span data-ttu-id="65213-174">\[[Conjunto de API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="65213-174">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'insertHtml(html, insertLocation)'
    fullName: 'insertHtml(html, insertLocation)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertHtml(html: string, insertLocation: Word.InsertLocation): Word.Range;'
      return:
        type:
          - 'word!Word.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="65213-175">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="65213-175">Examples</span></span>

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the paragraphs collection.
              var paragraphs = context.document.body.paragraphs;

              // Queue a command to load the style property for the top 2 paragraphs.
              // We never perform an empty load. We always must request a property.
              context.load(paragraphs, {select: 'style', top: 2} );

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {

                  // Queue a command to get the first paragraph.
                  var paragraph = paragraphs.items[0];

                  // Queue a command to insert HTML content at the end of the first paragraph.
                  paragraph.insertHtml('<strong>Inserted HTML.</strong>', Word.InsertLocation.end);

                  // Synchronize the document state by executing the queued commands,
                  // and return a promise to indicate task completion.
                  return context.sync().then(function () {
                      console.log('Inserted HTML content at the end of the first paragraph.');
                  });
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: html
          description: <span data-ttu-id="65213-176">Necesario.</span><span class="sxs-lookup"><span data-stu-id="65213-176">Required.</span></span> <span data-ttu-id="65213-177">HTML que se va a insertar en el párrafo.</span><span class="sxs-lookup"><span data-stu-id="65213-177">The HTML to be inserted in the paragraph.</span></span>
          type:
            - string
        - id: insertLocation
          description: '<span data-ttu-id="65213-178">Obligatorio.</span><span class="sxs-lookup"><span data-stu-id="65213-178">Required.</span></span> <span data-ttu-id="65213-179">El valor puede ser ''Replace'', ''Start'' o ''End''.</span><span class="sxs-lookup"><span data-stu-id="65213-179">The value can be ''Replace'', ''Start'', or ''End''.</span></span>'
          type:
            - 'word!Word.InsertLocation:enum'
  - uid: 'word!Word.Paragraph#insertHtml:member(2)'
    summary: |-
      <span data-ttu-id="65213-180">Inserta HTML en el párrafo en la ubicación especificada.</span><span class="sxs-lookup"><span data-stu-id="65213-180">Inserts HTML into the paragraph at the specified location.</span></span> <span data-ttu-id="65213-181">El valor insertLocation puede ser 'Replace', 'Start' o 'End'.</span><span class="sxs-lookup"><span data-stu-id="65213-181">The insertLocation value can be 'Replace', 'Start', or 'End'.</span></span>

      <span data-ttu-id="65213-182">\[[Conjunto de API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="65213-182">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'insertHtml(html, insertLocationString)'
    fullName: 'insertHtml(html, insertLocationString)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertHtml(html: string, insertLocationString: "Before" | "After" | "Start" | "End" | "Replace"): Word.Range;'
      return:
        type:
          - 'word!Word.Range:class'
        description: ''
      parameters:
        - id: html
          description: <span data-ttu-id="65213-183">Necesario.</span><span class="sxs-lookup"><span data-stu-id="65213-183">Required.</span></span> <span data-ttu-id="65213-184">HTML que se va a insertar en el párrafo.</span><span class="sxs-lookup"><span data-stu-id="65213-184">The HTML to be inserted in the paragraph.</span></span>
          type:
            - string
        - id: insertLocationString
          description: '<span data-ttu-id="65213-185">Obligatorio.</span><span class="sxs-lookup"><span data-stu-id="65213-185">Required.</span></span> <span data-ttu-id="65213-186">El valor puede ser ''Replace'', ''Start'' o ''End''.</span><span class="sxs-lookup"><span data-stu-id="65213-186">The value can be ''Replace'', ''Start'', or ''End''.</span></span>'
          type:
            - '"Before" | "After" | "Start" | "End" | "Replace"'
  - uid: 'word!Word.Paragraph#insertInlinePictureFromBase64:member(1)'
    summary: |-
      <span data-ttu-id="65213-187">Inserta una imagen en el párrafo en la ubicación especificada.</span><span class="sxs-lookup"><span data-stu-id="65213-187">Inserts a picture into the paragraph at the specified location.</span></span> <span data-ttu-id="65213-188">El valor insertLocation puede ser 'Replace', 'Start' o 'End'.</span><span class="sxs-lookup"><span data-stu-id="65213-188">The insertLocation value can be 'Replace', 'Start', or 'End'.</span></span>

      <span data-ttu-id="65213-189">\[[Conjunto de API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="65213-189">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'insertInlinePictureFromBase64(base64EncodedImage, insertLocation)'
    fullName: 'insertInlinePictureFromBase64(base64EncodedImage, insertLocation)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertInlinePictureFromBase64(base64EncodedImage: string, insertLocation: Word.InsertLocation): Word.InlinePicture;'
      return:
        type:
          - 'word!Word.InlinePicture:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="65213-190">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="65213-190">Examples</span></span>

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the paragraphs collection.
              var paragraphs = context.document.body.paragraphs;

              // Queue a command to load the style property for all of the paragraphs.
              context.load(paragraphs, 'style');

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {

                  // Queue a command to get the first paragraph.
                  var paragraph = paragraphs.items[0];

                  var b64encodedImg = "iVBORw0KGgoAAAANSUhEUgAAAB4AAAANCAIAAAAxEEnAAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAACFSURBVDhPtY1BEoQwDMP6/0+XgIMTBAeYoTqso9Rkx1zG+tNj1H94jgGzeNSjteO5vtQQuG2seO0av8LzGbe3anzRoJ4ybm/VeKEerAEbAUpW4aWQCmrGFWykRzGBCnYy2ha3oAIq2MloW9yCCqhgJ6NtcQsqoIKdjLbFLaiACnYyf2fODbrjZcXfr2F4AAAAAElFTkSuQmCC";

                  // Queue a command to insert a base64 encoded image at the beginning of the first paragraph.
                  paragraph.insertInlinePictureFromBase64(b64encodedImg, Word.InsertLocation.start);

                  // Synchronize the document state by executing the queued commands,
                  // and return a promise to indicate task completion.
                  return context.sync().then(function () {
                      console.log('Added an image to the first paragraph.');
                  });
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: base64EncodedImage
          description: <span data-ttu-id="65213-191">Necesario.</span><span class="sxs-lookup"><span data-stu-id="65213-191">Required.</span></span> <span data-ttu-id="65213-192">La imagen codificada en Base64 que se va a insertar.</span><span class="sxs-lookup"><span data-stu-id="65213-192">The base64 encoded image to be inserted.</span></span>
          type:
            - string
        - id: insertLocation
          description: '<span data-ttu-id="65213-193">Obligatorio.</span><span class="sxs-lookup"><span data-stu-id="65213-193">Required.</span></span> <span data-ttu-id="65213-194">El valor puede ser ''Replace'', ''Start'' o ''End''.</span><span class="sxs-lookup"><span data-stu-id="65213-194">The value can be ''Replace'', ''Start'', or ''End''.</span></span>'
          type:
            - 'word!Word.InsertLocation:enum'
  - uid: 'word!Word.Paragraph#insertInlinePictureFromBase64:member(2)'
    summary: |-
      <span data-ttu-id="65213-195">Inserta una imagen en el párrafo en la ubicación especificada.</span><span class="sxs-lookup"><span data-stu-id="65213-195">Inserts a picture into the paragraph at the specified location.</span></span> <span data-ttu-id="65213-196">El valor insertLocation puede ser 'Replace', 'Start' o 'End'.</span><span class="sxs-lookup"><span data-stu-id="65213-196">The insertLocation value can be 'Replace', 'Start', or 'End'.</span></span>

      <span data-ttu-id="65213-197">\[[Conjunto de API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="65213-197">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'insertInlinePictureFromBase64(base64EncodedImage, insertLocationString)'
    fullName: 'insertInlinePictureFromBase64(base64EncodedImage, insertLocationString)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertInlinePictureFromBase64(base64EncodedImage: string, insertLocationString: "Before" | "After" | "Start" | "End" | "Replace"): Word.InlinePicture;'
      return:
        type:
          - 'word!Word.InlinePicture:class'
        description: ''
      parameters:
        - id: base64EncodedImage
          description: <span data-ttu-id="65213-198">Necesario.</span><span class="sxs-lookup"><span data-stu-id="65213-198">Required.</span></span> <span data-ttu-id="65213-199">La imagen codificada en Base64 que se va a insertar.</span><span class="sxs-lookup"><span data-stu-id="65213-199">The base64 encoded image to be inserted.</span></span>
          type:
            - string
        - id: insertLocationString
          description: '<span data-ttu-id="65213-200">Obligatorio.</span><span class="sxs-lookup"><span data-stu-id="65213-200">Required.</span></span> <span data-ttu-id="65213-201">El valor puede ser ''Replace'', ''Start'' o ''End''.</span><span class="sxs-lookup"><span data-stu-id="65213-201">The value can be ''Replace'', ''Start'', or ''End''.</span></span>'
          type:
            - '"Before" | "After" | "Start" | "End" | "Replace"'
  - uid: 'word!Word.Paragraph#insertOoxml:member(1)'
    summary: |-
      <span data-ttu-id="65213-202">Inserta OOXML en el párrafo, en la ubicación especificada.</span><span class="sxs-lookup"><span data-stu-id="65213-202">Inserts OOXML into the paragraph at the specified location.</span></span> <span data-ttu-id="65213-203">El valor insertLocation puede ser 'Replace', 'Start' o 'End'.</span><span class="sxs-lookup"><span data-stu-id="65213-203">The insertLocation value can be 'Replace', 'Start', or 'End'.</span></span>

      <span data-ttu-id="65213-204">\[[Conjunto de API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="65213-204">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'insertOoxml(ooxml, insertLocation)'
    fullName: 'insertOoxml(ooxml, insertLocation)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertOoxml(ooxml: string, insertLocation: Word.InsertLocation): Word.Range;'
      return:
        type:
          - 'word!Word.Range:class'
        description: ''
      parameters:
        - id: ooxml
          description: <span data-ttu-id="65213-205">Necesario.</span><span class="sxs-lookup"><span data-stu-id="65213-205">Required.</span></span> <span data-ttu-id="65213-206">OOXML que se va a insertar en el párrafo.</span><span class="sxs-lookup"><span data-stu-id="65213-206">The OOXML to be inserted in the paragraph.</span></span>
          type:
            - string
        - id: insertLocation
          description: '<span data-ttu-id="65213-207">Obligatorio.</span><span class="sxs-lookup"><span data-stu-id="65213-207">Required.</span></span> <span data-ttu-id="65213-208">El valor puede ser ''Replace'', ''Start'' o ''End''.</span><span class="sxs-lookup"><span data-stu-id="65213-208">The value can be ''Replace'', ''Start'', or ''End''.</span></span>'
          type:
            - 'word!Word.InsertLocation:enum'
  - uid: 'word!Word.Paragraph#insertOoxml:member(2)'
    summary: |-
      <span data-ttu-id="65213-209">Inserta OOXML en el párrafo, en la ubicación especificada.</span><span class="sxs-lookup"><span data-stu-id="65213-209">Inserts OOXML into the paragraph at the specified location.</span></span> <span data-ttu-id="65213-210">El valor insertLocation puede ser 'Replace', 'Start' o 'End'.</span><span class="sxs-lookup"><span data-stu-id="65213-210">The insertLocation value can be 'Replace', 'Start', or 'End'.</span></span>

      <span data-ttu-id="65213-211">\[[Conjunto de API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="65213-211">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'insertOoxml(ooxml, insertLocationString)'
    fullName: 'insertOoxml(ooxml, insertLocationString)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertOoxml(ooxml: string, insertLocationString: "Before" | "After" | "Start" | "End" | "Replace"): Word.Range;'
      return:
        type:
          - 'word!Word.Range:class'
        description: ''
      parameters:
        - id: ooxml
          description: <span data-ttu-id="65213-212">Necesario.</span><span class="sxs-lookup"><span data-stu-id="65213-212">Required.</span></span> <span data-ttu-id="65213-213">OOXML que se va a insertar en el párrafo.</span><span class="sxs-lookup"><span data-stu-id="65213-213">The OOXML to be inserted in the paragraph.</span></span>
          type:
            - string
        - id: insertLocationString
          description: '<span data-ttu-id="65213-214">Obligatorio.</span><span class="sxs-lookup"><span data-stu-id="65213-214">Required.</span></span> <span data-ttu-id="65213-215">El valor puede ser ''Replace'', ''Start'' o ''End''.</span><span class="sxs-lookup"><span data-stu-id="65213-215">The value can be ''Replace'', ''Start'', or ''End''.</span></span>'
          type:
            - '"Before" | "After" | "Start" | "End" | "Replace"'
  - uid: 'word!Word.Paragraph#insertParagraph:member(1)'
    summary: |-
      <span data-ttu-id="65213-216">Inserta un párrafo en la ubicación especificada.</span><span class="sxs-lookup"><span data-stu-id="65213-216">Inserts a paragraph at the specified location.</span></span> <span data-ttu-id="65213-217">El valor insertLocation puede ser 'Before' o 'After'.</span><span class="sxs-lookup"><span data-stu-id="65213-217">The insertLocation value can be 'Before' or 'After'.</span></span>

      <span data-ttu-id="65213-218">\[[Conjunto de API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="65213-218">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'insertParagraph(paragraphText, insertLocation)'
    fullName: 'insertParagraph(paragraphText, insertLocation)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertParagraph(paragraphText: string, insertLocation: Word.InsertLocation): Word.Paragraph;'
      return:
        type:
          - 'word!Word.Paragraph:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="65213-219">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="65213-219">Examples</span></span>

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the paragraphs collection.
              var paragraphs = context.document.body.paragraphs;

              // Queue a command to load the style property for the top 2 paragraphs.
              // We never perform an empty load. We always must request a property.
              context.load(paragraphs, {select: 'style', top: 2} );

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {

                  // Queue a command to get the first paragraph.
                  var paragraph = paragraphs.items[0];

                  // Queue a command to insert the paragraph after the current paragraph.
                  paragraph.insertParagraph('Content of a new paragraph', Word.InsertLocation.after);

                  // Synchronize the document state by executing the queued commands,
                  // and return a promise to indicate task completion.
                  return context.sync().then(function () {
                      console.log('Inserted a new paragraph at the end of the first paragraph.');
                  });
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```typescript
          await Word.run(async (context) => {
            // Second sentence, let's insert it as a paragraph after the previously inserted one.
            let secondSentence = context.document.body.insertParagraph(
              "This is the first text with a custom style.",
              "End"
            );
            secondSentence.font.set({
              bold: false,
              italic: true,
              name: "Berlin Sans FB",
              color: "blue",
              size: 30
            });

            await context.sync();
          });
          ```
      parameters:
        - id: paragraphText
          description: <span data-ttu-id="65213-220">Necesario.</span><span class="sxs-lookup"><span data-stu-id="65213-220">Required.</span></span> <span data-ttu-id="65213-221">Texto de párrafo que se va a insertar.</span><span class="sxs-lookup"><span data-stu-id="65213-221">The paragraph text to be inserted.</span></span>
          type:
            - string
        - id: insertLocation
          description: <span data-ttu-id="65213-222">Necesario.</span><span class="sxs-lookup"><span data-stu-id="65213-222">Required.</span></span> <span data-ttu-id="65213-223">El valor puede ser "Before" o "After".</span><span class="sxs-lookup"><span data-stu-id="65213-223">The value can be 'Before' or 'After'.</span></span>
          type:
            - 'word!Word.InsertLocation:enum'
  - uid: 'word!Word.Paragraph#insertParagraph:member(2)'
    summary: |-
      <span data-ttu-id="65213-224">Inserta un párrafo en la ubicación especificada.</span><span class="sxs-lookup"><span data-stu-id="65213-224">Inserts a paragraph at the specified location.</span></span> <span data-ttu-id="65213-225">El valor insertLocation puede ser 'Before' o 'After'.</span><span class="sxs-lookup"><span data-stu-id="65213-225">The insertLocation value can be 'Before' or 'After'.</span></span>

      <span data-ttu-id="65213-226">\[[Conjunto de API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="65213-226">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'insertParagraph(paragraphText, insertLocationString)'
    fullName: 'insertParagraph(paragraphText, insertLocationString)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertParagraph(paragraphText: string, insertLocationString: "Before" | "After" | "Start" | "End" | "Replace"): Word.Paragraph;'
      return:
        type:
          - 'word!Word.Paragraph:class'
        description: ''
      parameters:
        - id: paragraphText
          description: <span data-ttu-id="65213-227">Necesario.</span><span class="sxs-lookup"><span data-stu-id="65213-227">Required.</span></span> <span data-ttu-id="65213-228">Texto de párrafo que se va a insertar.</span><span class="sxs-lookup"><span data-stu-id="65213-228">The paragraph text to be inserted.</span></span>
          type:
            - string
        - id: insertLocationString
          description: <span data-ttu-id="65213-229">Necesario.</span><span class="sxs-lookup"><span data-stu-id="65213-229">Required.</span></span> <span data-ttu-id="65213-230">El valor puede ser "Before" o "After".</span><span class="sxs-lookup"><span data-stu-id="65213-230">The value can be 'Before' or 'After'.</span></span>
          type:
            - '"Before" | "After" | "Start" | "End" | "Replace"'
  - uid: 'word!Word.Paragraph#insertText:member(1)'
    summary: |-
      <span data-ttu-id="65213-231">Inserta texto en el párrafo en la ubicación especificada.</span><span class="sxs-lookup"><span data-stu-id="65213-231">Inserts text into the paragraph at the specified location.</span></span> <span data-ttu-id="65213-232">El valor insertLocation puede ser 'Replace', 'Start' o 'End'.</span><span class="sxs-lookup"><span data-stu-id="65213-232">The insertLocation value can be 'Replace', 'Start', or 'End'.</span></span>

      <span data-ttu-id="65213-233">\[[Conjunto de API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="65213-233">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'insertText(text, insertLocation)'
    fullName: 'insertText(text, insertLocation)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertText(text: string, insertLocation: Word.InsertLocation): Word.Range;'
      return:
        type:
          - 'word!Word.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="65213-234">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="65213-234">Examples</span></span>

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the paragraphs collection.
              var paragraphs = context.document.body.paragraphs;

              // Queue a command to load the style property for the top 2 paragraphs.
              // We never perform an empty load. We always must request a property.
              context.load(paragraphs, {select: 'style', top: 2} );

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {

                  // Queue a command to get the first paragraph.
                  var paragraph = paragraphs.items[0];

                  // Queue a command to insert text into the end of the paragraph.
                  paragraph.insertText('New text inserted into the paragraph.', Word.InsertLocation.end);

                  // Synchronize the document state by executing the queued commands,
                  // and return a promise to indicate task completion.
                  return context.sync().then(function () {
                      console.log('Inserted text at the end of the first paragraph.');
                  });
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```typescript
          await Word.run(async (context) => {
            // Replace the last paragraph.
            let range = context.document.body.paragraphs.getLast().insertText("Just replaced the last paragraph!", "Replace");
            range.font.highlightColor = "black";
            range.font.color = "white";

            await context.sync();
          });
          ```
      parameters:
        - id: text
          description: <span data-ttu-id="65213-235">Necesario.</span><span class="sxs-lookup"><span data-stu-id="65213-235">Required.</span></span> <span data-ttu-id="65213-236">Texto que se va a insertar.</span><span class="sxs-lookup"><span data-stu-id="65213-236">Text to be inserted.</span></span>
          type:
            - string
        - id: insertLocation
          description: '<span data-ttu-id="65213-237">Obligatorio.</span><span class="sxs-lookup"><span data-stu-id="65213-237">Required.</span></span> <span data-ttu-id="65213-238">El valor puede ser ''Replace'', ''Start'' o ''End''.</span><span class="sxs-lookup"><span data-stu-id="65213-238">The value can be ''Replace'', ''Start'', or ''End''.</span></span>'
          type:
            - 'word!Word.InsertLocation:enum'
  - uid: 'word!Word.Paragraph#insertText:member(2)'
    summary: |-
      <span data-ttu-id="65213-239">Inserta texto en el párrafo en la ubicación especificada.</span><span class="sxs-lookup"><span data-stu-id="65213-239">Inserts text into the paragraph at the specified location.</span></span> <span data-ttu-id="65213-240">El valor insertLocation puede ser 'Replace', 'Start' o 'End'.</span><span class="sxs-lookup"><span data-stu-id="65213-240">The insertLocation value can be 'Replace', 'Start', or 'End'.</span></span>

      <span data-ttu-id="65213-241">\[[Conjunto de API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="65213-241">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'insertText(text, insertLocationString)'
    fullName: 'insertText(text, insertLocationString)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insertText(text: string, insertLocationString: "Before" | "After" | "Start" | "End" | "Replace"): Word.Range;'
      return:
        type:
          - 'word!Word.Range:class'
        description: ''
      parameters:
        - id: text
          description: <span data-ttu-id="65213-242">Necesario.</span><span class="sxs-lookup"><span data-stu-id="65213-242">Required.</span></span> <span data-ttu-id="65213-243">Texto que se va a insertar.</span><span class="sxs-lookup"><span data-stu-id="65213-243">Text to be inserted.</span></span>
          type:
            - string
        - id: insertLocationString
          description: '<span data-ttu-id="65213-244">Obligatorio.</span><span class="sxs-lookup"><span data-stu-id="65213-244">Required.</span></span> <span data-ttu-id="65213-245">El valor puede ser ''Replace'', ''Start'' o ''End''.</span><span class="sxs-lookup"><span data-stu-id="65213-245">The value can be ''Replace'', ''Start'', or ''End''.</span></span>'
          type:
            - '"Before" | "After" | "Start" | "End" | "Replace"'
  - uid: 'word!Word.Paragraph#leftIndent:member'
    summary: |-
      <span data-ttu-id="65213-246">Obtiene o establece el valor de sangría izquierda (en puntos) del párrafo.</span><span class="sxs-lookup"><span data-stu-id="65213-246">Gets or sets the left indent value, in points, for the paragraph.</span></span>

      <span data-ttu-id="65213-247">\[[Conjunto de API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="65213-247">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: leftIndent
    fullName: leftIndent
    langs:
      - typeScript
    type: property
    syntax:
      content: 'leftIndent: number;'
      return:
        type:
          - number
        description: |-


          #### <a name="examples"></a><span data-ttu-id="65213-248">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="65213-248">Examples</span></span>

          ```typescript
          await Word.run(async (context) => {
            // Indents the first paragraph.
            context.document.body.paragraphs.getFirst().leftIndent = 75; //units = points

            return context.sync();
          });
          ```
  - uid: 'word!Word.Paragraph#lineSpacing:member'
    summary: |-
      <span data-ttu-id="65213-249">Obtiene o establece el espaciado de línea (en puntos) del párrafo especificado.</span><span class="sxs-lookup"><span data-stu-id="65213-249">Gets or sets the line spacing, in points, for the specified paragraph.</span></span> <span data-ttu-id="65213-250">En la interfaz de usuario de Word, este valor se divide entre 12.</span><span class="sxs-lookup"><span data-stu-id="65213-250">In the Word UI, this value is divided by 12.</span></span>

      <span data-ttu-id="65213-251">\[[Conjunto de API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="65213-251">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: lineSpacing
    fullName: lineSpacing
    langs:
      - typeScript
    type: property
    syntax:
      content: 'lineSpacing: number;'
      return:
        type:
          - number
        description: |-


          #### <a name="examples"></a><span data-ttu-id="65213-252">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="65213-252">Examples</span></span>

          ```typescript
          await Word.run(async (context) => {
            // Adjusts line spacing.
            context.document.body.paragraphs.getFirst().lineSpacing = 20;

            await context.sync();
          });
          ```
  - uid: 'word!Word.Paragraph#lineUnitAfter:member'
    summary: |-
      <span data-ttu-id="65213-253">Obtiene o establece la cantidad de espaciado, en líneas de cuadrícula, detrás del párrafo.</span><span class="sxs-lookup"><span data-stu-id="65213-253">Gets or sets the amount of spacing, in grid lines, after the paragraph.</span></span>

      <span data-ttu-id="65213-254">\[[Conjunto de API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="65213-254">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: lineUnitAfter
    fullName: lineUnitAfter
    langs:
      - typeScript
    type: property
    syntax:
      content: 'lineUnitAfter: number;'
      return:
        type:
          - number
  - uid: 'word!Word.Paragraph#lineUnitBefore:member'
    summary: |-
      <span data-ttu-id="65213-255">Obtiene o establece la cantidad de espaciado (en líneas de cuadrícula) antes del párrafo.</span><span class="sxs-lookup"><span data-stu-id="65213-255">Gets or sets the amount of spacing, in grid lines, before the paragraph.</span></span>

      <span data-ttu-id="65213-256">\[[Conjunto de API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="65213-256">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: lineUnitBefore
    fullName: lineUnitBefore
    langs:
      - typeScript
    type: property
    syntax:
      content: 'lineUnitBefore: number;'
      return:
        type:
          - number
  - uid: 'word!Word.Paragraph#load:member(1)'
    summary: '<span data-ttu-id="65213-257">Pone en cola un comando para cargar las propiedades especificadas del objeto.</span><span class="sxs-lookup"><span data-stu-id="65213-257">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="65213-258">Antes de leer las propiedades, debe llamar a "context.sync()".</span><span class="sxs-lookup"><span data-stu-id="65213-258">You must call "context.sync()" before reading the properties.</span></span>'
    remarks: |-
      <span data-ttu-id="65213-259">Además de esta firma, este método tiene las siguientes firmas:</span><span class="sxs-lookup"><span data-stu-id="65213-259">In addition to this signature, this method has the following signatures:</span></span>

      <span data-ttu-id="65213-260">`load(option?: string | string[]): Word.Paragraph`-Donde opción es una cadena delimitada por comas o una matriz de cadenas que especifican las propiedades que se van a cargar.</span><span class="sxs-lookup"><span data-stu-id="65213-260">`load(option?: string | string[]): Word.Paragraph` - Where option is a comma-delimited string or an array of strings that specify the properties to load.</span></span>

      <span data-ttu-id="65213-261">`load(option?: { select?: string; expand?: string; }): Word.Paragraph`-Where opción. Select es una cadena delimitada por comas que especifica las propiedades que se van a cargar y Options. Expand es una cadena delimitada por comas que especifica las propiedades de navegación que se deben cargar.</span><span class="sxs-lookup"><span data-stu-id="65213-261">`load(option?: { select?: string; expand?: string; }): Word.Paragraph` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>

      <span data-ttu-id="65213-262">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Word.Paragraph`-Solo disponible en tipos de colección.</span><span class="sxs-lookup"><span data-stu-id="65213-262">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Word.Paragraph` - Only available on collection types.</span></span> <span data-ttu-id="65213-263">Es similar a la firma anterior.</span><span class="sxs-lookup"><span data-stu-id="65213-263">It is similar to the preceding signature.</span></span> <span data-ttu-id="65213-264">Option. Top especifica el número máximo de elementos de colección que se pueden incluir en el resultado.</span><span class="sxs-lookup"><span data-stu-id="65213-264">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="65213-265">La opción. SKIP especifica el número de elementos que se deben omitir y que no se incluyen en el resultado.</span><span class="sxs-lookup"><span data-stu-id="65213-265">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="65213-266">Si se especifica Option. Top, el conjunto de resultados se iniciará después de omitir el número especificado de elementos.</span><span class="sxs-lookup"><span data-stu-id="65213-266">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: Word.Interfaces.ParagraphLoadOptions): Word.Paragraph;'
      return:
        type:
          - 'word!Word.Paragraph:class'
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - 'word!Word.Interfaces.ParagraphLoadOptions:interface'
  - uid: 'word!Word.Paragraph#load:member(2)'
    summary: <span data-ttu-id="65213-267">Pone en cola un comando para cargar las propiedades especificadas del objeto.</span><span class="sxs-lookup"><span data-stu-id="65213-267">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="65213-268">Debe llamar `context.sync()` antes de leer las propiedades.</span><span class="sxs-lookup"><span data-stu-id="65213-268">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Word.Paragraph;'
      return:
        type:
          - 'word!Word.Paragraph:class'
        description: ''
      parameters:
        - id: propertyNames
          description: <span data-ttu-id="65213-269">Una cadena delimitada por comas o una matriz de cadenas que especifican las propiedades que se van a cargar.</span><span class="sxs-lookup"><span data-stu-id="65213-269">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
          type:
            - 'string | string[]'
  - uid: 'word!Word.Paragraph#load:member(3)'
    summary: <span data-ttu-id="65213-270">Pone en cola un comando para cargar las propiedades especificadas del objeto.</span><span class="sxs-lookup"><span data-stu-id="65213-270">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="65213-271">Debe llamar `context.sync()` antes de leer las propiedades.</span><span class="sxs-lookup"><span data-stu-id="65213-271">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): Word.Paragraph;'
      return:
        type:
          - 'word!Word.Paragraph:class'
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '<span data-ttu-id="65213-272">Donde propertyNamesAndPaths. Select es una cadena delimitada por comas que especifica las propiedades que se van a cargar y propertyNamesAndPaths. Expand es una cadena delimitada por comas que especifica las propiedades de navegación que se deben cargar.</span><span class="sxs-lookup"><span data-stu-id="65213-272">Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>'
          type:
            - '{ select?: string; expand?: string; }'
  - uid: 'word!Word.Paragraph#outlineLevel:member'
    summary: |-
      <span data-ttu-id="65213-273">Obtiene o establece el nivel de esquema del párrafo.</span><span class="sxs-lookup"><span data-stu-id="65213-273">Gets or sets the outline level for the paragraph.</span></span>

      <span data-ttu-id="65213-274">\[[Conjunto de API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="65213-274">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: outlineLevel
    fullName: outlineLevel
    langs:
      - typeScript
    type: property
    syntax:
      content: 'outlineLevel: number;'
      return:
        type:
          - number
  - uid: 'word!Word.Paragraph#parentContentControl:member'
    summary: |-
      <span data-ttu-id="65213-275">Obtiene el control de contenido que contiene el párrafo.</span><span class="sxs-lookup"><span data-stu-id="65213-275">Gets the content control that contains the paragraph.</span></span> <span data-ttu-id="65213-276">Produce una excepción si no hay un control de contenido primario.</span><span class="sxs-lookup"><span data-stu-id="65213-276">Throws if there isn't a parent content control.</span></span> <span data-ttu-id="65213-277">Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="65213-277">Read-only.</span></span>

      <span data-ttu-id="65213-278">\[[Conjunto de API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="65213-278">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: parentContentControl
    fullName: parentContentControl
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly parentContentControl: Word.ContentControl;'
      return:
        type:
          - 'word!Word.ContentControl:class'
  - uid: 'word!Word.Paragraph#rightIndent:member'
    summary: |-
      <span data-ttu-id="65213-279">Obtiene o establece el valor de sangría derecha (en puntos) del párrafo.</span><span class="sxs-lookup"><span data-stu-id="65213-279">Gets or sets the right indent value, in points, for the paragraph.</span></span>

      <span data-ttu-id="65213-280">\[[Conjunto de API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="65213-280">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: rightIndent
    fullName: rightIndent
    langs:
      - typeScript
    type: property
    syntax:
      content: 'rightIndent: number;'
      return:
        type:
          - number
  - uid: 'word!Word.Paragraph#search:member(1)'
    summary: |-
      <span data-ttu-id="65213-281">Realiza una búsqueda con el SearchOptions especificado en el ámbito del objeto Paragraph.</span><span class="sxs-lookup"><span data-stu-id="65213-281">Performs a search with the specified SearchOptions on the scope of the paragraph object.</span></span> <span data-ttu-id="65213-282">Los resultados de la búsqueda son una colección de objetos de intervalo.</span><span class="sxs-lookup"><span data-stu-id="65213-282">The search results are a collection of range objects.</span></span>

      <span data-ttu-id="65213-283">\[[Conjunto de API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="65213-283">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: 'search(searchText, searchOptions)'
    fullName: 'search(searchText, searchOptions)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        search(searchText: string, searchOptions?: Word.SearchOptions | {
                    ignorePunct?: boolean;
                    ignoreSpace?: boolean;
                    matchCase?: boolean;
                    matchPrefix?: boolean;
                    matchSuffix?: boolean;
                    matchWholeWord?: boolean;
                    matchWildcards?: boolean;
                }): Word.RangeCollection;
      return:
        type:
          - 'word!Word.RangeCollection:class'
        description: ''
      parameters:
        - id: searchText
          description: <span data-ttu-id="65213-284">Necesario.</span><span class="sxs-lookup"><span data-stu-id="65213-284">Required.</span></span> <span data-ttu-id="65213-285">Texto de búsqueda.</span><span class="sxs-lookup"><span data-stu-id="65213-285">The search text.</span></span>
          type:
            - string
        - id: searchOptions
          description: <span data-ttu-id="65213-286">Opcional.</span><span class="sxs-lookup"><span data-stu-id="65213-286">Optional.</span></span> <span data-ttu-id="65213-287">Opciones de la búsqueda.</span><span class="sxs-lookup"><span data-stu-id="65213-287">Options for the search.</span></span>
          type:
            - 'word!Word.Paragraph#search~0:complex'
  - uid: 'word!Word.Paragraph#select:member(1)'
    summary: |-
      <span data-ttu-id="65213-288">Selecciona y se desplaza por la interfaz de usuario de Word hasta el párrafo.</span><span class="sxs-lookup"><span data-stu-id="65213-288">Selects and navigates the Word UI to the paragraph.</span></span>

      <span data-ttu-id="65213-289">\[[Conjunto de API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="65213-289">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: select(selectionMode)
    fullName: select(selectionMode)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'select(selectionMode?: Word.SelectionMode): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="65213-290">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="65213-290">Examples</span></span>

          ```javascript
          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the paragraphs collection.
              var paragraphs = context.document.body.paragraphs;

              // Queue a command to load the style property for all of the paragraphs.
              context.load(paragraphs, 'style');

              // Synchronize the document state by executing the queued commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {

                  // Queue a command to get the last paragraph a create a
                  // proxy paragraph object.
                  var paragraph = paragraphs.items[paragraphs.items.length - 1];

                  // Queue a command to select the paragraph. The Word UI will
                  // move to the selected paragraph.
                  paragraph.select();

                  // Synchronize the document state by executing the queued commands,
                  // and return a promise to indicate task completion.
                  return context.sync().then(function () {
                      console.log('Selected the last paragraph.');
                  });
              });
          })
          .catch(function (error) {
              console.log('Error: ' + JSON.stringify(error));
              if (error instanceof OfficeExtension.Error) {
                  console.log('Debug info: ' + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```typescript
          await Word.run(async (context) => {
            // If select is called with no parameters, it selects the object.
            context.document.body.paragraphs.getLast().select();

            await context.sync();
          });
          ```
          ```typescript
          await Word.run(async (context) => {
            // Select can be at the start or end of a range; this by definition moves the insertion point without selecting the range.
            context.document.body.paragraphs.getLast().select("End");

            await context.sync();
          });
          ```
      parameters:
        - id: selectionMode
          description: '<span data-ttu-id="65213-291">Opcional.</span><span class="sxs-lookup"><span data-stu-id="65213-291">Optional.</span></span> <span data-ttu-id="65213-292">El modo de selección puede ser ''Select'', ''Start'' o ''End''.</span><span class="sxs-lookup"><span data-stu-id="65213-292">The selection mode can be ''Select'', ''Start'', or ''End''.</span></span> <span data-ttu-id="65213-293">''Select'' es el valor predeterminado.</span><span class="sxs-lookup"><span data-stu-id="65213-293">''Select'' is the default.</span></span>'
          type:
            - 'word!Word.SelectionMode:enum'
  - uid: 'word!Word.Paragraph#select:member(2)'
    summary: |-
      <span data-ttu-id="65213-294">Selecciona y se desplaza por la interfaz de usuario de Word hasta el párrafo.</span><span class="sxs-lookup"><span data-stu-id="65213-294">Selects and navigates the Word UI to the paragraph.</span></span>

      <span data-ttu-id="65213-295">\[[Conjunto de API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="65213-295">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: select(selectionModeString)
    fullName: select(selectionModeString)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'select(selectionModeString?: "Select" | "Start" | "End"): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: selectionModeString
          description: '<span data-ttu-id="65213-296">Opcional.</span><span class="sxs-lookup"><span data-stu-id="65213-296">Optional.</span></span> <span data-ttu-id="65213-297">El modo de selección puede ser ''Select'', ''Start'' o ''End''.</span><span class="sxs-lookup"><span data-stu-id="65213-297">The selection mode can be ''Select'', ''Start'', or ''End''.</span></span> <span data-ttu-id="65213-298">''Select'' es el valor predeterminado.</span><span class="sxs-lookup"><span data-stu-id="65213-298">''Select'' is the default.</span></span>'
          type:
            - '"Select" | "Start" | "End"'
  - uid: 'word!Word.Paragraph#set:member(1)'
    summary: '<span data-ttu-id="65213-299">Establece varias propiedades de un objeto al mismo tiempo.</span><span class="sxs-lookup"><span data-stu-id="65213-299">Sets multiple properties of an object at the same time.</span></span> <span data-ttu-id="65213-300">Puede pasar un objeto sin formato con las propiedades apropiadas o cualquier otro objeto de la API del mismo tipo.</span><span class="sxs-lookup"><span data-stu-id="65213-300">You can pass either a plain object with the appropriate properties, or another API object of the same type.</span></span>'
    remarks: |-
      <span data-ttu-id="65213-301">Este método tiene la siguiente firma adicional:</span><span class="sxs-lookup"><span data-stu-id="65213-301">This method has the following additional signature:</span></span>

      `set(properties: Word.Paragraph): void`

      #### <a name="examples"></a><span data-ttu-id="65213-302">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="65213-302">Examples</span></span>

      ```typescript
      await Word.run(async (context) => {
        const paragraph = context.document.body.paragraphs.getFirst();
        paragraph.set({
          leftIndent: 30,
          font: {
            bold: true,
            color: "red"
          }
        });

        await context.sync();
      });
      ```
      ```typescript
      await Word.run(async (context) => {
        const firstParagraph = context.document.body.paragraphs.getFirst();
        const secondParagraph = firstParagraph.getNext();
        firstParagraph.load("text, font/color, font/bold, leftIndent");

        await context.sync();

        secondParagraph.set(firstParagraph);

        await context.sync();
      });
      ```
    name: 'set(properties, options)'
    fullName: 'set(properties, options)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Interfaces.ParagraphUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: <span data-ttu-id="65213-303">Objeto de JavaScript con propiedades que se estructuran de forma isomórfico a las propiedades del objeto en el que se llama al método.</span><span class="sxs-lookup"><span data-stu-id="65213-303">A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.</span></span>
          type:
            - 'word!Word.Interfaces.ParagraphUpdateData:interface'
        - id: options
          description: <span data-ttu-id="65213-304">Proporciona una opción para suprimir errores si el objeto Properties intenta establecer propiedades de solo lectura.</span><span class="sxs-lookup"><span data-stu-id="65213-304">Provides an option to suppress errors if the properties object tries to set any read-only properties.</span></span>
          type:
            - 'word!OfficeExtension.UpdateOptions:interface'
  - uid: 'word!Word.Paragraph#set:member(2)'
    summary: '<span data-ttu-id="65213-305">Establece varias propiedades en el objeto al mismo tiempo, basándose en un objeto cargado existente.</span><span class="sxs-lookup"><span data-stu-id="65213-305">Sets multiple properties on the object at the same time, based on an existing loaded object.</span></span>'
    name: set(properties)
    fullName: set(properties)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Word.Paragraph): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - 'word!Word.Paragraph:class'
  - uid: 'word!Word.Paragraph#spaceAfter:member'
    summary: |-
      <span data-ttu-id="65213-306">Obtiene o establece el espaciado (en puntos) después del párrafo.</span><span class="sxs-lookup"><span data-stu-id="65213-306">Gets or sets the spacing, in points, after the paragraph.</span></span>

      <span data-ttu-id="65213-307">\[[Conjunto de API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="65213-307">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: spaceAfter
    fullName: spaceAfter
    langs:
      - typeScript
    type: property
    syntax:
      content: 'spaceAfter: number;'
      return:
        type:
          - number
        description: |-


          #### <a name="examples"></a><span data-ttu-id="65213-308">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="65213-308">Examples</span></span>

          ```typescript
          await Word.run(async (context) => {
            // Adjust space between paragraphs.
            context.document.body.paragraphs.getFirst().spaceAfter = 20;

            await context.sync();
          });
          ```
  - uid: 'word!Word.Paragraph#spaceBefore:member'
    summary: |-
      <span data-ttu-id="65213-309">Obtiene o establece el espaciado (en puntos) antes del párrafo.</span><span class="sxs-lookup"><span data-stu-id="65213-309">Gets or sets the spacing, in points, before the paragraph.</span></span>

      <span data-ttu-id="65213-310">\[[Conjunto de API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="65213-310">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: spaceBefore
    fullName: spaceBefore
    langs:
      - typeScript
    type: property
    syntax:
      content: 'spaceBefore: number;'
      return:
        type:
          - number
  - uid: 'word!Word.Paragraph#style:member'
    summary: |-
      <span data-ttu-id="65213-311">Obtiene o establece el nombre de estilo del párrafo.</span><span class="sxs-lookup"><span data-stu-id="65213-311">Gets or sets the style name for the paragraph.</span></span> <span data-ttu-id="65213-312">Use esta propiedad para los estilos personalizados y los nombres de estilo localizados.</span><span class="sxs-lookup"><span data-stu-id="65213-312">Use this property for custom styles and localized style names.</span></span> <span data-ttu-id="65213-313">Para usar los estilos integrados portátiles entre configuraciones regionales, consulte la propiedad "styleBuiltIn".</span><span class="sxs-lookup"><span data-stu-id="65213-313">To use the built-in styles that are portable between locales, see the "styleBuiltIn" property.</span></span>

      <span data-ttu-id="65213-314">\[[Conjunto de API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="65213-314">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: style
    fullName: style
    langs:
      - typeScript
    type: property
    syntax:
      content: 'style: string;'
      return:
        type:
          - string
  - uid: 'word!Word.Paragraph#text:member'
    summary: |-
      <span data-ttu-id="65213-315">Obtiene el texto del párrafo.</span><span class="sxs-lookup"><span data-stu-id="65213-315">Gets the text of the paragraph.</span></span> <span data-ttu-id="65213-316">Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="65213-316">Read-only.</span></span>

      <span data-ttu-id="65213-317">\[[Conjunto de API: WordApi 1,1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="65213-317">\[ [API set: WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets) \]</span></span>
    name: text
    fullName: text
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly text: string;'
      return:
        type:
          - string
        description: |-


          #### <a name="examples"></a><span data-ttu-id="65213-318">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="65213-318">Examples</span></span>

          ```typescript
          await Word.run(async (context) => {
            // The collection of paragraphs of the current selection returns the full paragraphs contained in it.
            let paragraph = context.document.getSelection().paragraphs.getFirst();
            paragraph.load("text");

            await context.sync();
            console.log(paragraph.text);
          });
          ```
  - uid: 'word!Word.Paragraph#toJSON:member(1)'
    summary: '<span data-ttu-id="65213-319">Reemplaza el método JavaScript `toJSON()` para proporcionar un resultado más útil cuando se pasa un objeto API a`JSON.stringify()`</span><span class="sxs-lookup"><span data-stu-id="65213-319">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id="65213-320">.</span><span class="sxs-lookup"><span data-stu-id="65213-320"></span></span> <span data-ttu-id="65213-321">(`JSON.stringify`</span><span class="sxs-lookup"><span data-stu-id="65213-321"></span></span><!-- --><span data-ttu-id="65213-322">, a su vez, llama `toJSON` al método del objeto que se le pasa.) Mientras que el objeto Word. Paragraph original es un objeto API `toJSON` , el método devuelve un objeto JavaScript sin formato (escrito como`Word.Interfaces.ParagraphData`</span><span class="sxs-lookup"><span data-stu-id="65213-322">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original Word.Paragraph object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Word.Interfaces.ParagraphData`</span></span><!-- --><span data-ttu-id="65213-323">) que contiene copias rasas de las propiedades secundarias cargadas del objeto original.</span><span class="sxs-lookup"><span data-stu-id="65213-323">) that contains shallow copies of any loaded child properties from the original object.</span></span>'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Word.Interfaces.ParagraphData;'
      return:
        type:
          - 'word!Word.Interfaces.ParagraphData:interface'
        description: ''
  - uid: 'word!Word.Paragraph#track:member(1)'
    summary: '<span data-ttu-id="65213-324">Realiza un seguimiento del objeto de ajuste automático según cambios adyacentes en el documento.</span><span class="sxs-lookup"><span data-stu-id="65213-324">Track the object for automatic adjustment based on surrounding changes in the document.</span></span> <span data-ttu-id="65213-325">Esta llamada es una forma abreviada de context.trackedObjects.add(thisObject).</span><span class="sxs-lookup"><span data-stu-id="65213-325">This call is a shorthand for context.trackedObjects.add(thisObject).</span></span> <span data-ttu-id="65213-326">Si usa este objeto en llamadas ".sync" y fuera de la ejecución secuencial de un lote de ".run", y obtiene un error "InvalidObjectPath" al establecer una propiedad o invocar un método en el objeto, debería haber agregado el objeto a la colección de objetos de la que realiza un seguimiento cuando se creó el objeto.</span><span class="sxs-lookup"><span data-stu-id="65213-326">If you are using this object across ".sync" calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you needed to have added the object to the tracked object collection when the object was first created.</span></span>'
    name: track()
    fullName: track()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'track(): Word.Paragraph;'
      return:
        type:
          - 'word!Word.Paragraph:class'
        description: ''
  - uid: 'word!Word.Paragraph#untrack:member(1)'
    summary: '<span data-ttu-id="65213-327">Libere la memoria asociada a este objeto, si se ha realizado un seguimiento de él anteriormente.</span><span class="sxs-lookup"><span data-stu-id="65213-327">Release the memory associated with this object, if it has previously been tracked.</span></span> <span data-ttu-id="65213-328">Esta llamada es una forma abreviada de context.trackedObjects.remove(thisObject).</span><span class="sxs-lookup"><span data-stu-id="65213-328">This call is shorthand for context.trackedObjects.remove(thisObject).</span></span> <span data-ttu-id="65213-329">Tener muchos objetos marcados ralentiza la aplicación host, así que debe recordar liberar los objetos que agregue cuando haya terminado con ellos.</span><span class="sxs-lookup"><span data-stu-id="65213-329">Having many tracked objects slows down the host application, so please remember to free any objects you add, once you''re done using them.</span></span> <span data-ttu-id="65213-330">Debe llamar a "context.sync()" antes de que surta efecto la liberación de memoria.</span><span class="sxs-lookup"><span data-stu-id="65213-330">You will need to call "context.sync()" before the memory release takes effect.</span></span>'
    name: untrack()
    fullName: untrack()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'untrack(): Word.Paragraph;'
      return:
        type:
          - 'word!Word.Paragraph:class'
        description: ''
references:
  - uid: 'word!OfficeExtension.ClientObject:class'
    name: OfficeExtension.ClientObject
  - uid: 'word!Word.Paragraph#alignment~0:complex'
    name: Word.Alignment | "Mixed" | "Unknown" | "Left" | "Centered" | "Right" | "Justified"
    fullName: Word.Alignment | "Mixed" | "Unknown" | "Left" | "Centered" | "Right" | "Justified"
    spec.typeScript:
      - uid: 'word!Word.Alignment:enum'
        name: Word.Alignment
        fullName: Word.Alignment
      - name: ' | "Mixed" | "Unknown" | "Left" | "Centered" | "Right" | "Justified"'
        fullName: ' | "Mixed" | "Unknown" | "Left" | "Centered" | "Right" | "Justified"'
  - uid: 'word!Word.ContentControlCollection:class'
    name: Word.ContentControlCollection
  - uid: 'word!Word.RequestContext:class'
    name: RequestContext
  - uid: 'word!Word.Font:class'
    name: Word.Font
  - uid: 'word!Word.Paragraph#getHtml~0:complex'
    name: OfficeExtension.ClientResult<string>
    fullName: OfficeExtension.ClientResult<string>
    spec.typeScript:
      - uid: 'word!OfficeExtension.ClientResult:class'
        name: OfficeExtension.ClientResult
        fullName: OfficeExtension.ClientResult
      - name: <string>
        fullName: <string>
  - uid: 'word!Word.Paragraph#getOoxml~0:complex'
    name: OfficeExtension.ClientResult<string>
    fullName: OfficeExtension.ClientResult<string>
    spec.typeScript:
      - uid: 'word!OfficeExtension.ClientResult:class'
        name: OfficeExtension.ClientResult
        fullName: OfficeExtension.ClientResult
      - name: <string>
        fullName: <string>
  - uid: 'word!Word.InlinePictureCollection:class'
    name: Word.InlinePictureCollection
  - uid: 'word!Word.BreakType:enum'
    name: Word.BreakType
  - uid: 'word!Word.InsertLocation:enum'
    name: Word.InsertLocation
  - uid: 'word!Word.ContentControl:class'
    name: Word.ContentControl
  - uid: 'word!Word.Range:class'
    name: Word.Range
  - uid: 'word!Word.InlinePicture:class'
    name: Word.InlinePicture
  - uid: 'word!Word.Paragraph:class'
    name: Word.Paragraph
  - uid: 'word!Word.Interfaces.ParagraphLoadOptions:interface'
    name: Word.Interfaces.ParagraphLoadOptions
  - uid: 'word!Word.RangeCollection:class'
    name: Word.RangeCollection
  - uid: 'word!Word.Paragraph#search~0:complex'
    name: |-
      Word.SearchOptions | {
                  ignorePunct?: boolean;
                  ignoreSpace?: boolean;
                  matchCase?: boolean;
                  matchPrefix?: boolean;
                  matchSuffix?: boolean;
                  matchWholeWord?: boolean;
                  matchWildcards?: boolean;
              }
    fullName: |-
      Word.SearchOptions | {
                  ignorePunct?: boolean;
                  ignoreSpace?: boolean;
                  matchCase?: boolean;
                  matchPrefix?: boolean;
                  matchSuffix?: boolean;
                  matchWholeWord?: boolean;
                  matchWildcards?: boolean;
              }
    spec.typeScript:
      - uid: 'word!Word.SearchOptions:class'
        name: Word.SearchOptions
        fullName: Word.SearchOptions
      - name: |2-
           | {
                      ignorePunct?: boolean;
                      ignoreSpace?: boolean;
                      matchCase?: boolean;
                      matchPrefix?: boolean;
                      matchSuffix?: boolean;
                      matchWholeWord?: boolean;
                      matchWildcards?: boolean;
                  }
        fullName: |2-
           | {
                      ignorePunct?: boolean;
                      ignoreSpace?: boolean;
                      matchCase?: boolean;
                      matchPrefix?: boolean;
                      matchSuffix?: boolean;
                      matchWholeWord?: boolean;
                      matchWildcards?: boolean;
                  }
  - uid: 'word!Word.SelectionMode:enum'
    name: Word.SelectionMode
  - uid: 'word!Word.Interfaces.ParagraphUpdateData:interface'
    name: Interfaces.ParagraphUpdateData
  - uid: 'word!OfficeExtension.UpdateOptions:interface'
    name: OfficeExtension.UpdateOptions
  - uid: 'word!Word.Interfaces.ParagraphData:interface'
    name: Word.Interfaces.ParagraphData