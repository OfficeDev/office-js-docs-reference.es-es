### YamlMime:TSType
name: Excel.PivotTable
uid: excel!Excel.PivotTable:class
package: excel!
fullName: Excel.PivotTable
summary: >-
  Representa una tabla dinámica de Excel. Para obtener más información sobre el modelo de objetos de tabla dinámica, vea [trabajar con tablas dinámicas mediante la API de JavaScript de Excel](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-pivottables)<!-- -->.


  \[[Conjunto de API: ExcelApi 1,3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
remarks: ''
isPreview: false
isDeprecated: false
type: class
properties:
- name: columnHierarchies
  uid: excel!Excel.PivotTable#columnHierarchies:member
  package: excel!
  fullName: columnHierarchies
  summary: >-
    Las jerarquías dinámicas de columna de la tabla dinámica.


    \[[Conjunto de API: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly columnHierarchies: Excel.RowColumnPivotHierarchyCollection;'
    return:
      type: <xref uid="excel!Excel.RowColumnPivotHierarchyCollection:class" />
      description: "\n\n#### <a name=\"examples\"></a>Ejemplos\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/38-pivottable/pivottable-create-and-modify.yaml\nawait Excel.run(async (context) => {\n    const pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem(\"Farm Sales\");       \n\n    // check if the PivotTable already has a column\n    const column = pivotTable.columnHierarchies.getItemOrNullObject(\"Farm\");\n    column.load(\"id\");\n    await context.sync();\n\n    if (column.isNullObject) {\n        // ading the farm column to the column hierarchy automatically removes it from the row hierarchy\n        pivotTable.columnHierarchies.add(pivotTable.hierarchies.getItem(\"Farm\"));\n    } else {\n        pivotTable.columnHierarchies.remove(column);\n    }\n\n    await context.sync();\n});\n```"
- name: context
  uid: excel!Excel.PivotTable#context:member
  package: excel!
  fullName: context
  summary: Contexto de la solicitud asociado al objeto. Esto conecta el proceso del complemento con el proceso de la aplicación host de Office.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'context: RequestContext;'
    return:
      type: <xref uid="excel!Excel.RequestContext:class" />
- name: dataHierarchies
  uid: excel!Excel.PivotTable#dataHierarchies:member
  package: excel!
  fullName: dataHierarchies
  summary: >-
    Las jerarquías dinámicas de datos de la tabla dinámica.


    \[[Conjunto de API: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly dataHierarchies: Excel.DataPivotHierarchyCollection;'
    return:
      type: <xref uid="excel!Excel.DataPivotHierarchyCollection:class" />
      description: "\n\n#### <a name=\"examples\"></a>Ejemplos\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/38-pivottable/pivottable-create-and-modify.yaml\nawait Excel.run(async (context) => {\n    const pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem(\"Farm Sales\");\n    pivotTable.dataHierarchies.add(pivotTable.hierarchies.getItem(\"Crates Sold at Farm\"));\n    pivotTable.dataHierarchies.add(pivotTable.hierarchies.getItem(\"Crates Sold Wholesale\"));\n\n    await context.sync();\n});\n```"
- name: enableDataValueEditing
  uid: excel!Excel.PivotTable#enableDataValueEditing:member
  package: excel!
  fullName: enableDataValueEditing
  summary: >-
    Especifica si la tabla dinámica permite que el usuario edite los valores del cuerpo de datos.


    \[[Conjunto de API: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'enableDataValueEditing: boolean;'
    return:
      type: boolean
- name: filterHierarchies
  uid: excel!Excel.PivotTable#filterHierarchies:member
  package: excel!
  fullName: filterHierarchies
  summary: >-
    Las jerarquías dinámicas de filtro de la tabla dinámica.


    \[[Conjunto de API: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly filterHierarchies: Excel.FilterPivotHierarchyCollection;'
    return:
      type: <xref uid="excel!Excel.FilterPivotHierarchyCollection:class" />
      description: "\n\n#### <a name=\"examples\"></a>Ejemplos\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/38-pivottable/pivottable-filters-and-summaries.yaml\nasync function filter(functionType: Excel.AggregationFunction) {\n    await Excel.run(async (context) => {\n        const pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem(\"Farm Sales\");\n        const filters = pivotTable.filterHierarchies;\n        const filter = filters.getItemOrNullObject(\"Classification\");\n        filter.load();\n        await context.sync();\n\n        // add the Classification hierarchy to the filter, if it's not already there\n        if (filter.isNullObject) {\n            filters.add(pivotTable.hierarchies.getItem(\"Classification\"));\n            await context.sync();\n        }\n    });\n}\n```"
- name: hierarchies
  uid: excel!Excel.PivotTable#hierarchies:member
  package: excel!
  fullName: hierarchies
  summary: >-
    Las jerarquías dinámicas de la tabla dinámica.


    \[[Conjunto de API: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly hierarchies: Excel.PivotHierarchyCollection;'
    return:
      type: <xref uid="excel!Excel.PivotHierarchyCollection:class" />
- name: id
  uid: excel!Excel.PivotTable#id:member
  package: excel!
  fullName: id
  summary: >-
    ID la tabla dinámica.


    \[[Conjunto de API: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly id: string;'
    return:
      type: string
- name: layout
  uid: excel!Excel.PivotTable#layout:member
  package: excel!
  fullName: layout
  summary: >-
    El PivotLayout que describe el diseño y la estructura visual de la tabla dinámica.


    \[[Conjunto de API: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly layout: Excel.PivotLayout;'
    return:
      type: <xref uid="excel!Excel.PivotLayout:class" />
      description: "\n\n#### <a name=\"examples\"></a>Ejemplos\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/38-pivottable/pivottable-create-and-modify.yaml\nawait Excel.run(async (context) => {\n    const pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem(\"Farm Sales\");\n    pivotTable.layout.load(\"layoutType\");\n    await context.sync();\n\n    // cycle between the three layout types\n    if (pivotTable.layout.layoutType === \"Compact\") {\n        pivotTable.layout.layoutType = \"Outline\";\n    } else if (pivotTable.layout.layoutType === \"Outline\") {\n        pivotTable.layout.layoutType = \"Tabular\";\n    } else {\n        pivotTable.layout.layoutType = \"Compact\";\n    }\n    await context.sync();\n    console.log(\"Pivot layout is now \" + pivotTable.layout.layoutType);\n});\n```"
- name: name
  uid: excel!Excel.PivotTable#name:member
  package: excel!
  fullName: name
  summary: >-
    Nombre la tabla dinámica.


    \[[Conjunto de API: ExcelApi 1,3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'name: string;'
    return:
      type: string
- name: rowHierarchies
  uid: excel!Excel.PivotTable#rowHierarchies:member
  package: excel!
  fullName: rowHierarchies
  summary: >-
    Las jerarquías dinámicas de fila de la tabla dinámica.


    \[[Conjunto de API: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly rowHierarchies: Excel.RowColumnPivotHierarchyCollection;'
    return:
      type: <xref uid="excel!Excel.RowColumnPivotHierarchyCollection:class" />
- name: useCustomSortLists
  uid: excel!Excel.PivotTable#useCustomSortLists:member
  package: excel!
  fullName: useCustomSortLists
  summary: >-
    Especifica si la tabla dinámica utiliza listas personalizadas al ordenar.


    \[[Conjunto de API: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'useCustomSortLists: boolean;'
    return:
      type: boolean
- name: worksheet
  uid: excel!Excel.PivotTable#worksheet:member
  package: excel!
  fullName: worksheet
  summary: >-
    La hoja de cálculo que contiene la tabla dinámica actual.


    \[[Conjunto de API: ExcelApi 1,3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly worksheet: Excel.Worksheet;'
    return:
      type: <xref uid="excel!Excel.Worksheet:class" />
methods:
- name: delete()
  uid: excel!Excel.PivotTable#delete:member(1)
  package: excel!
  fullName: delete()
  summary: >-
    Elimina la tabla dinámica.


    \[[Conjunto de API: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'delete(): void;'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Ejemplos\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/excel/38-pivottable/pivottable-create-and-modify.yaml\nawait Excel.run(async (context) => {\n    context.workbook.worksheets.getItem(\"Pivot\").pivotTables.getItem(\"Farm Sales\").delete();\n\n    await context.sync();\n});\n```"
- name: load(options)
  uid: excel!Excel.PivotTable#load:member(1)
  package: excel!
  fullName: load(options)
  summary: Pone en cola un comando para cargar las propiedades especificadas del objeto. Debe llamar a `context.sync()` antes de leer las propiedades.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(options?: Excel.Interfaces.PivotTableLoadOptions): Excel.PivotTable;'
    parameters:
    - id: options
      description: Proporciona opciones para las propiedades del objeto que se va a cargar.
      type: <xref uid="excel!Excel.Interfaces.PivotTableLoadOptions:interface" />
    return:
      type: <xref uid="excel!Excel.PivotTable:class" />
      description: ''
- name: load(propertyNames)
  uid: excel!Excel.PivotTable#load:member(2)
  package: excel!
  fullName: load(propertyNames)
  summary: Pone en cola un comando para cargar las propiedades especificadas del objeto. Debe llamar a `context.sync()` antes de leer las propiedades.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(propertyNames?: string | string[]): Excel.PivotTable;'
    parameters:
    - id: propertyNames
      description: Una cadena delimitada por comas o una matriz de cadenas que especifican las propiedades que se van a cargar.
      type: string | string[]
    return:
      type: <xref uid="excel!Excel.PivotTable:class" />
      description: ''
- name: load(propertyNamesAndPaths)
  uid: excel!Excel.PivotTable#load:member(3)
  package: excel!
  fullName: load(propertyNamesAndPaths)
  summary: Pone en cola un comando para cargar las propiedades especificadas del objeto. Debe llamar a `context.sync()` antes de leer las propiedades.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      load(propertyNamesAndPaths?: {
                  select?: string;
                  expand?: string;
              }): Excel.PivotTable;
    parameters:
    - id: propertyNamesAndPaths
      description: '`propertyNamesAndPaths.select` es una cadena delimitada por comas que especifica las propiedades que se van a cargar y `propertyNamesAndPaths.expand` es una cadena delimitada por comas que especifica las propiedades de navegación que se deben cargar.'
      type: >-
        {
                    select?: string;
                    expand?: string;
                }
    return:
      type: <xref uid="excel!Excel.PivotTable:class" />
      description: ''
- name: refresh()
  uid: excel!Excel.PivotTable#refresh:member(1)
  package: excel!
  fullName: refresh()
  summary: >-
    Actualiza la tabla dinámica.


    \[[Conjunto de API: ExcelApi 1,3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'refresh(): void;'
    return:
      type: void
      description: ''
- name: set(properties, options)
  uid: excel!Excel.PivotTable#set:member(1)
  package: excel!
  fullName: set(properties, options)
  summary: Establece varias propiedades de un objeto al mismo tiempo. Puede pasar un objeto sin formato con las propiedades apropiadas o cualquier otro objeto de la API del mismo tipo.
  remarks: >-
    Este método tiene la siguiente firma adicional:


    `set(properties: Excel.PivotTable): void`
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'set(properties: Interfaces.PivotTableUpdateData, options?: OfficeExtension.UpdateOptions): void;'
    parameters:
    - id: properties
      description: Objeto de JavaScript con propiedades que se estructuran de forma isomórfico a las propiedades del objeto en el que se llama al método.
      type: <xref uid="excel!Excel.Interfaces.PivotTableUpdateData:interface" />
    - id: options
      description: Proporciona una opción para suprimir errores si el objeto Properties intenta establecer propiedades de solo lectura.
      type: <xref uid="office!OfficeExtension.UpdateOptions:interface" />
    return:
      type: void
      description: ''
- name: set(properties)
  uid: excel!Excel.PivotTable#set:member(2)
  package: excel!
  fullName: set(properties)
  summary: Establece varias propiedades en el objeto al mismo tiempo, basándose en un objeto cargado existente.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'set(properties: Excel.PivotTable): void;'
    parameters:
    - id: properties
      description: ''
      type: <xref uid="excel!Excel.PivotTable:class" />
    return:
      type: void
      description: ''
- name: toJSON()
  uid: excel!Excel.PivotTable#toJSON:member(1)
  package: excel!
  fullName: toJSON()
  summary: Reemplaza el `toJSON()` método JavaScript para proporcionar un resultado más útil cuando se pasa un objeto API a `JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, a su vez, llama al `toJSON` método del objeto que se le pasa.) Mientras que el objeto Excel. PivotTable original es un objeto API, el `toJSON` método devuelve un objeto JavaScript sin formato (escrito como `Excel.Interfaces.PivotTableData`<!-- -->) que contiene copias rasas de las propiedades secundarias cargadas del objeto original.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'toJSON(): Excel.Interfaces.PivotTableData;'
    return:
      type: <xref uid="excel!Excel.Interfaces.PivotTableData:interface" />
      description: ''
extends: <xref uid="office!OfficeExtension.ClientObject:class" />
metadata:
  ms.openlocfilehash: 85278c07e0b09307a17ec7372eb2891af9f84034
  ms.sourcegitcommit: 3bab97ab3b91da7cca497f6fc895408a76bd8b46
  ms.translationtype: MT
  ms.contentlocale: es-ES
  ms.lasthandoff: 11/18/2020
  ms.locfileid: "49173433"
