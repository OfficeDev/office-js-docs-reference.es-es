### YamlMime:UniversalReference
ms.openlocfilehash: c827b346f429c90b6637cbaefe26dfa1c8677bb0
ms.sourcegitcommit: fd03ef72d6a546b0e4dbe0cc9e75d2a7cf9341a1
ms.translationtype: MT
ms.contentlocale: es-ES
ms.lasthandoff: 02/27/2019
ms.locfileid: "30303119"
items:
- uid: excel.Excel.WorksheetCollection
  summary: >-
    <span data-ttu-id="8f32f-101">Representa una colección de objetos de hoja de cálculo que forman parte del libro.</span><span class="sxs-lookup"><span data-stu-id="8f32f-101">Represents a collection of worksheet objects that are part of the workbook.</span></span>


    <span data-ttu-id="8f32f-102">\[[Conjunto de API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8f32f-102">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: Excel.WorksheetCollection
  fullName: Excel.WorksheetCollection
  langs:
  - typeScript
  type: class
  extends:
  - office.OfficeExtension.ClientObject
  package: excel
  children:
  - excel.Excel.WorksheetCollection.add
  - excel.Excel.WorksheetCollection.addFromBase64
  - excel.Excel.WorksheetCollection.addFromBase64_1
  - excel.Excel.WorksheetCollection.context
  - excel.Excel.WorksheetCollection.getActiveWorksheet
  - excel.Excel.WorksheetCollection.getCount
  - excel.Excel.WorksheetCollection.getFirst
  - excel.Excel.WorksheetCollection.getItem
  - excel.Excel.WorksheetCollection.getItemOrNullObject
  - excel.Excel.WorksheetCollection.getLast
  - excel.Excel.WorksheetCollection.items
  - excel.Excel.WorksheetCollection.load
  - excel.Excel.WorksheetCollection.load_1
  - excel.Excel.WorksheetCollection.load_2
  - excel.Excel.WorksheetCollection.onActivated
  - excel.Excel.WorksheetCollection.onAdded
  - excel.Excel.WorksheetCollection.onCalculated
  - excel.Excel.WorksheetCollection.onChanged
  - excel.Excel.WorksheetCollection.onDeactivated
  - excel.Excel.WorksheetCollection.onDeleted
  - excel.Excel.WorksheetCollection.onFiltered
  - excel.Excel.WorksheetCollection.onFormatChanged
  - excel.Excel.WorksheetCollection.onSelectionChanged
  - excel.Excel.WorksheetCollection.toJSON
- uid: excel.Excel.WorksheetCollection.add
  summary: >-
    <span data-ttu-id="8f32f-p101">Agrega una nueva hoja al libro. La hoja de cálculo se agregará al final de las hojas de cálculo existentes. Si desea activar la hoja de cálculo recién agregada, llame en ella a ".activate().</span><span class="sxs-lookup"><span data-stu-id="8f32f-p101">Adds a new worksheet to the workbook. The worksheet will be added at the end of existing worksheets. If you wish to activate the newly added worksheet, call ".activate() on it.</span></span>


    <span data-ttu-id="8f32f-106">\[[Conjunto de API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8f32f-106">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: add(name)
  fullName: add(name)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'add(name?: string): Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"8f32f-107\">Ejemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"8f32f-107\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var wSheetName = 'Sample Name';\n    var worksheet = ctx.workbook.worksheets.add(wSheetName);\n    worksheet.load('name');\n    return ctx.sync().then(function() {\n        console.log(worksheet.name);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: name
      description: <span data-ttu-id="8f32f-p102">Opcional. Nombre de la hoja de cálculo que se va a agregar. Si se especifica, el nombre debe ser único. Si no se especifica, Excel determina el nombre de la nueva hoja de cálculo.</span><span class="sxs-lookup"><span data-stu-id="8f32f-p102">Optional. The name of the worksheet to be added. If specified, name should be unqiue. If not specified, Excel determines the name of the new worksheet.</span></span>
      type:
      - string
- uid: excel.Excel.WorksheetCollection.addFromBase64
  summary: >-
    <span data-ttu-id="8f32f-112">Inserta las hojas de cálculo especificadas de un libro en el libro actual.</span><span class="sxs-lookup"><span data-stu-id="8f32f-112">Inserts the specified worksheets of a workbook into the current workbook.</span></span>


    <span data-ttu-id="8f32f-113">\[[Conjunto de API: EXCELAPI beta (solo vista previa)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8f32f-113">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: addFromBase64(base64File, sheetNamesToInsert, positionType, relativeTo)
  fullName: addFromBase64(base64File, sheetNamesToInsert, positionType, relativeTo)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'addFromBase64(base64File: string, sheetNamesToInsert?: string[], positionType?: Excel.WorksheetPositionType, relativeTo?: Worksheet | string): OfficeExtension.ClientResult<string[]>;'
    return:
      type:
      - OfficeExtension.ClientResult<string[]>
      description: "<span data-ttu-id=\"8f32f-114\">Una matriz donde cada elemento representa el identificador de la nueva hoja de cálculo insertada.</span><span class=\"sxs-lookup\"><span data-stu-id=\"8f32f-114\">An array where each item represents the Id of the new inserted worksheet.</span></span>\n#### <a name=\"examples\"></a><span data-ttu-id=\"8f32f-115\">Ejemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"8f32f-115\">Examples</span></span>\n\n```javascript\nconst myFile = <HTMLInputElement>document.getElementById(\"file\");\nconst reader = new FileReader();\n\nreader.onload = (event) => {\n    Excel.run((context) => {\n        // strip off the metadata before the base64-encoded string\n        const startIndex = (<string>(<FileReader>event.target).result).indexOf(\"base64,\");\n        const workbookContents = (<string>(<FileReader>event.target).result).substr(startIndex + 7);\n\n        const sheets = context.workbook.worksheets;\n        sheets.addFromBase64(\n            workbookContents,\n            null, // get all the worksheets \n            Excel.WorksheetPositionType.end // insert them after the current workbook's worksheets\n            );\n        return context.sync();\n    });\n};\n\n// read in the file as a data URL so we can parse the base64-encoded string\nreader.readAsDataURL(myFile.files[0]);\n```"
    parameters:
    - id: base64File
      description: <span data-ttu-id="8f32f-116">Necesario.</span><span class="sxs-lookup"><span data-stu-id="8f32f-116">Required.</span></span> <span data-ttu-id="8f32f-117">Cadena Base64 que representa el libro de origen.</span><span class="sxs-lookup"><span data-stu-id="8f32f-117">Base64 string representing the source workbook.</span></span>
      type:
      - string
    - id: sheetNamesToInsert
      description: <span data-ttu-id="8f32f-118">Opcional.</span><span class="sxs-lookup"><span data-stu-id="8f32f-118">Optional.</span></span> <span data-ttu-id="8f32f-119">Nombre de la hoja de cálculo de speified que se va a insertar.</span><span class="sxs-lookup"><span data-stu-id="8f32f-119">The speified worksheet names to insert.</span></span> <span data-ttu-id="8f32f-120">De forma predeterminada, se insertarán todas las hojas de cálculo del libro de origen.</span><span class="sxs-lookup"><span data-stu-id="8f32f-120">By default it will insert all worksheets from the source workbook.</span></span>
      type:
      - string[]
    - id: positionType
      description: <span data-ttu-id="8f32f-121">Opcional.</span><span class="sxs-lookup"><span data-stu-id="8f32f-121">Optional.</span></span> <span data-ttu-id="8f32f-122">Insertar tipo de posición, consulte Excel. WorksheetPositionType para obtener información detallada.</span><span class="sxs-lookup"><span data-stu-id="8f32f-122">Insert position type, see Excel.WorksheetPositionType for details.</span></span> <span data-ttu-id="8f32f-123">El valor predeterminado es "Start".</span><span class="sxs-lookup"><span data-stu-id="8f32f-123">Default is "Start".</span></span>
      type:
      - excel.Excel.WorksheetPositionType
    - id: relativeTo
      description: <span data-ttu-id="8f32f-124">Opcional.</span><span class="sxs-lookup"><span data-stu-id="8f32f-124">Optional.</span></span> <span data-ttu-id="8f32f-125">El objeto o el nombre de la hoja de cálculo de referencia en el libro actual.</span><span class="sxs-lookup"><span data-stu-id="8f32f-125">The referencing worksheet object or worksheet name/id in the current workbook.</span></span> <span data-ttu-id="8f32f-126">El valor predeterminado es NULL y se basa en el parámetro postionType insertará las hojas de cálculo al principio o al final del libro actual.</span><span class="sxs-lookup"><span data-stu-id="8f32f-126">Default is null and based on the postionType parameter it will insert worksheets at the start or end of the current workbook.</span></span>
      type:
      - Worksheet | string
- uid: excel.Excel.WorksheetCollection.addFromBase64_1
  summary: >-
    <span data-ttu-id="8f32f-127">Inserta las hojas de cálculo especificadas de un libro en el libro actual.</span><span class="sxs-lookup"><span data-stu-id="8f32f-127">Inserts the specified worksheets of a workbook into the current workbook.</span></span>


    <span data-ttu-id="8f32f-128">\[[Conjunto de API: EXCELAPI beta (solo vista previa)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8f32f-128">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: addFromBase64(base64File, sheetNamesToInsert, positionTypeString, relativeTo)
  fullName: addFromBase64(base64File, sheetNamesToInsert, positionTypeString, relativeTo)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'addFromBase64(base64File: string, sheetNamesToInsert?: string[], positionTypeString?: "None" | "Before" | "After" | "Beginning" | "End", relativeTo?: Worksheet | string): OfficeExtension.ClientResult<string[]>;'
    return:
      type:
      - OfficeExtension.ClientResult<string[]>
      description: <span data-ttu-id="8f32f-129">Una matriz donde cada elemento representa el identificador de la nueva hoja de cálculo insertada.</span><span class="sxs-lookup"><span data-stu-id="8f32f-129">An array where each item represents the Id of the new inserted worksheet.</span></span>
    parameters:
    - id: base64File
      description: <span data-ttu-id="8f32f-130">Necesario.</span><span class="sxs-lookup"><span data-stu-id="8f32f-130">Required.</span></span> <span data-ttu-id="8f32f-131">Cadena Base64 que representa el libro de origen.</span><span class="sxs-lookup"><span data-stu-id="8f32f-131">Base64 string representing the source workbook.</span></span>
      type:
      - string
    - id: sheetNamesToInsert
      description: <span data-ttu-id="8f32f-132">Opcional.</span><span class="sxs-lookup"><span data-stu-id="8f32f-132">Optional.</span></span> <span data-ttu-id="8f32f-133">Nombre de la hoja de cálculo de speified que se va a insertar.</span><span class="sxs-lookup"><span data-stu-id="8f32f-133">The speified worksheet names to insert.</span></span> <span data-ttu-id="8f32f-134">De forma predeterminada, se insertarán todas las hojas de cálculo del libro de origen.</span><span class="sxs-lookup"><span data-stu-id="8f32f-134">By default it will insert all worksheets from the source workbook.</span></span>
      type:
      - string[]
    - id: positionTypeString
      description: <span data-ttu-id="8f32f-135">Opcional.</span><span class="sxs-lookup"><span data-stu-id="8f32f-135">Optional.</span></span> <span data-ttu-id="8f32f-136">Insertar tipo de posición, consulte Excel. WorksheetPositionType para obtener información detallada.</span><span class="sxs-lookup"><span data-stu-id="8f32f-136">Insert position type, see Excel.WorksheetPositionType for details.</span></span> <span data-ttu-id="8f32f-137">El valor predeterminado es "Start".</span><span class="sxs-lookup"><span data-stu-id="8f32f-137">Default is "Start".</span></span>
      type:
      - "\"None\" | \"Before\" | \"After\" | \"Beginning\" | \"End\""
    - id: relativeTo
      description: <span data-ttu-id="8f32f-138">Opcional.</span><span class="sxs-lookup"><span data-stu-id="8f32f-138">Optional.</span></span> <span data-ttu-id="8f32f-139">El objeto o el nombre de la hoja de cálculo de referencia en el libro actual.</span><span class="sxs-lookup"><span data-stu-id="8f32f-139">The referencing worksheet object or worksheet name/id in the current workbook.</span></span> <span data-ttu-id="8f32f-140">El valor predeterminado es NULL y se basa en el parámetro postionType insertará las hojas de cálculo al principio o al final del libro actual.</span><span class="sxs-lookup"><span data-stu-id="8f32f-140">Default is null and based on the postionType parameter it will insert worksheets at the start or end of the current workbook.</span></span>
      type:
      - Worksheet | string
- uid: excel.Excel.WorksheetCollection.context
  summary: <span data-ttu-id="8f32f-141">Contexto de la solicitud asociado al objeto.</span><span class="sxs-lookup"><span data-stu-id="8f32f-141">The request context associated with the object.</span></span> <span data-ttu-id="8f32f-142">Esto conecta el proceso del complemento con el proceso de la aplicación host de Office.</span><span class="sxs-lookup"><span data-stu-id="8f32f-142">This connects the add-in's process to the Office host application's process.</span></span>
  name: context
  fullName: context
  langs:
  - typeScript
  type: property
  syntax:
    content: 'context: RequestContext;'
    return:
      type:
      - RequestContext
- uid: excel.Excel.WorksheetCollection.getActiveWorksheet
  summary: >-
    <span data-ttu-id="8f32f-143">Obtiene la hoja de cálculo activa del libro.</span><span class="sxs-lookup"><span data-stu-id="8f32f-143">Gets the currently active worksheet in the workbook.</span></span>


    <span data-ttu-id="8f32f-144">\[[Conjunto de API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8f32f-144">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getActiveWorksheet()
  fullName: getActiveWorksheet()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getActiveWorksheet(): Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"8f32f-145\">Ejemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"8f32f-145\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) {  \n    var activeWorksheet = ctx.workbook.worksheets.getActiveWorksheet();\n    activeWorksheet.load('name');\n    return ctx.sync().then(function() {\n            console.log(activeWorksheet.name);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: excel.Excel.WorksheetCollection.getCount
  summary: >-
    <span data-ttu-id="8f32f-146">Obtiene el número de hojas de cálculo de la colección.</span><span class="sxs-lookup"><span data-stu-id="8f32f-146">Gets the number of worksheets in the collection.</span></span>


    <span data-ttu-id="8f32f-147">\[[Conjunto de API: ExcelApi 1,4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8f32f-147">\[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getCount(visibleOnly)
  fullName: getCount(visibleOnly)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getCount(visibleOnly?: boolean): OfficeExtension.ClientResult<number>;'
    return:
      type:
      - OfficeExtension.ClientResult<number>
      description: ''
    parameters:
    - id: visibleOnly
      description: <span data-ttu-id="8f32f-p112">Opcional. Si es true, solo tiene en cuenta las hojas de cálculo visibles y omite las ocultas.</span><span class="sxs-lookup"><span data-stu-id="8f32f-p112">Optional. If true, considers only visible worksheets, skipping over any hidden ones.</span></span>
      type:
      - boolean
- uid: excel.Excel.WorksheetCollection.getFirst
  summary: >-
    <span data-ttu-id="8f32f-150">Obtiene la primera hoja de cálculo de la colección.</span><span class="sxs-lookup"><span data-stu-id="8f32f-150">Gets the first worksheet in the collection.</span></span>


    <span data-ttu-id="8f32f-151">\[[Conjunto de API: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8f32f-151">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getFirst(visibleOnly)
  fullName: getFirst(visibleOnly)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getFirst(visibleOnly?: boolean): Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"8f32f-152\">Ejemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"8f32f-152\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheets = context.workbook.worksheets;\n\n    // We don't want to include the default worksheet that was created\n    // when the workbook was created, so our \"firstSheet\" will be the one\n    // after the literal first. Note chaining of navigation methods.\n    const firstSheet = sheets.getFirst().getNext();\n    const lastSheet = sheets.getLast();\n    const firstTaxRateRange = firstSheet.getRange(\"B2\");\n    const lastTaxRateRange = lastSheet.getRange(\"B2\");\n\n    firstSheet.load(\"name\");\n    lastSheet.load(\"name\");\n    firstTaxRateRange.load(\"text\");\n    lastTaxRateRange.load(\"text\");\n\n    await context.sync();\n\n    let firstYear = firstSheet.name.substr(5, 4);\n    let lastYear = lastSheet.name.substr(5, 4);\n    console.log(`Tax Rate change from ${firstYear} to ${lastYear}`, `Tax rate for ${firstYear}: ${firstTaxRateRange.text[0][0]}\\nTax rate for ${lastYear}: ${lastTaxRateRange.text[0][0]}`)\n\n    await context.sync();\n});\n```"
    parameters:
    - id: visibleOnly
      description: <span data-ttu-id="8f32f-p113">Opcional. Si es true, solo tiene en cuenta las hojas de cálculo visibles y omite las ocultas.</span><span class="sxs-lookup"><span data-stu-id="8f32f-p113">Optional. If true, considers only visible worksheets, skipping over any hidden ones.</span></span>
      type:
      - boolean
- uid: excel.Excel.WorksheetCollection.getItem
  summary: >-
    <span data-ttu-id="8f32f-155">Obtiene un objeto de hoja de cálculo mediante su nombre o identificador.</span><span class="sxs-lookup"><span data-stu-id="8f32f-155">Gets a worksheet object using its Name or ID.</span></span>


    <span data-ttu-id="8f32f-156">\[[Conjunto de API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8f32f-156">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getItem(key)
  fullName: getItem(key)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getItem(key: string): Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
      description: ''
    parameters:
    - id: key
      description: <span data-ttu-id="8f32f-157">Nombre o identificador de la hoja de cálculo.</span><span class="sxs-lookup"><span data-stu-id="8f32f-157">The Name or ID of the worksheet.</span></span>
      type:
      - string
- uid: excel.Excel.WorksheetCollection.getItemOrNullObject
  summary: >-
    <span data-ttu-id="8f32f-p114">Obtiene un objeto de hoja de cálculo mediante su nombre o identificador. Si la hoja de cálculo no existe, devolverá un objeto NULL.</span><span class="sxs-lookup"><span data-stu-id="8f32f-p114">Gets a worksheet object using its Name or ID. If the worksheet does not exist, will return a null object.</span></span>


    <span data-ttu-id="8f32f-160">\[[Conjunto de API: ExcelApi 1,4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8f32f-160">\[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getItemOrNullObject(key)
  fullName: getItemOrNullObject(key)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getItemOrNullObject(key: string): Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
      description: ''
    parameters:
    - id: key
      description: <span data-ttu-id="8f32f-161">Nombre o identificador de la hoja de cálculo.</span><span class="sxs-lookup"><span data-stu-id="8f32f-161">The Name or ID of the worksheet.</span></span>
      type:
      - string
- uid: excel.Excel.WorksheetCollection.getLast
  summary: >-
    <span data-ttu-id="8f32f-162">Obtiene la última hoja de cálculo de la colección.</span><span class="sxs-lookup"><span data-stu-id="8f32f-162">Gets the last worksheet in the collection.</span></span>


    <span data-ttu-id="8f32f-163">\[[Conjunto de API: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8f32f-163">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getLast(visibleOnly)
  fullName: getLast(visibleOnly)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getLast(visibleOnly?: boolean): Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"8f32f-164\">Ejemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"8f32f-164\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheets = context.workbook.worksheets;\n\n    // We don't want to include the default worksheet that was created\n    // when the workbook was created, so our \"firstSheet\" will be the one\n    // after the literal first. Note chaining of navigation methods.\n    const firstSheet = sheets.getFirst().getNext();\n    const lastSheet = sheets.getLast();\n    const firstTaxRateRange = firstSheet.getRange(\"B2\");\n    const lastTaxRateRange = lastSheet.getRange(\"B2\");\n\n    firstSheet.load(\"name\");\n    lastSheet.load(\"name\");\n    firstTaxRateRange.load(\"text\");\n    lastTaxRateRange.load(\"text\");\n\n    await context.sync();\n\n    let firstYear = firstSheet.name.substr(5, 4);\n    let lastYear = lastSheet.name.substr(5, 4);\n    console.log(`Tax Rate change from ${firstYear} to ${lastYear}`, `Tax rate for ${firstYear}: ${firstTaxRateRange.text[0][0]}\\nTax rate for ${lastYear}: ${lastTaxRateRange.text[0][0]}`)\n\n    await context.sync();\n});\n```"
    parameters:
    - id: visibleOnly
      description: <span data-ttu-id="8f32f-p115">Opcional. Si es true, solo tiene en cuenta las hojas de cálculo visibles y omite las ocultas.</span><span class="sxs-lookup"><span data-stu-id="8f32f-p115">Optional. If true, considers only visible worksheets, skipping over any hidden ones.</span></span>
      type:
      - boolean
- uid: excel.Excel.WorksheetCollection.items
  summary: <span data-ttu-id="8f32f-167">Obtiene los elementos secundarios cargados de esta colección.</span><span class="sxs-lookup"><span data-stu-id="8f32f-167">Gets the loaded child items in this collection.</span></span>
  name: items
  fullName: items
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly items: Excel.Worksheet[];'
    return:
      type:
      - Excel.Worksheet[]
- uid: excel.Excel.WorksheetCollection.load
  summary: <span data-ttu-id="8f32f-168">Pone en cola un comando para cargar las propiedades especificadas del objeto.</span><span class="sxs-lookup"><span data-stu-id="8f32f-168">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="8f32f-169">Debe llamar a "context. Sync ()" antes de leer las propiedades.</span><span class="sxs-lookup"><span data-stu-id="8f32f-169">You must call "context.sync()" before reading the properties.</span></span>
  remarks: >-
    <span data-ttu-id="8f32f-170">Además de esta firma, este método tiene las siguientes firmas:</span><span class="sxs-lookup"><span data-stu-id="8f32f-170">In addition to this signature, this method has the following signatures:</span></span>


    <span data-ttu-id="8f32f-171">`load(option?: string | string[]): Excel.WorksheetCollection`-Donde opción es una cadena delimitada por comas o una matriz de cadenas que especifican las propiedades que se van a cargar.</span><span class="sxs-lookup"><span data-stu-id="8f32f-171">`load(option?: string | string[]): Excel.WorksheetCollection` - Where option is a comma-delimited string or an array of strings that specify the properties to load.</span></span>


    <span data-ttu-id="8f32f-172">`load(option?: { select?: string; expand?: string; }): Excel.WorksheetCollection`-Where opción. Select es una cadena delimitada por comas que especifica las propiedades que se van a cargar y Options. Expand es una cadena delimitada por comas que especifica las propiedades de navegación que se deben cargar.</span><span class="sxs-lookup"><span data-stu-id="8f32f-172">`load(option?: { select?: string; expand?: string; }): Excel.WorksheetCollection` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>


    <span data-ttu-id="8f32f-173">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.WorksheetCollection`-Solo disponible en tipos de colección.</span><span class="sxs-lookup"><span data-stu-id="8f32f-173">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.WorksheetCollection` - Only available on collection types.</span></span> <span data-ttu-id="8f32f-174">Es similar a la firma anterior.</span><span class="sxs-lookup"><span data-stu-id="8f32f-174">It is similar to the preceding signature.</span></span> <span data-ttu-id="8f32f-175">Option. Top especifica el número máximo de elementos de colección que se pueden incluir en el resultado.</span><span class="sxs-lookup"><span data-stu-id="8f32f-175">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="8f32f-176">La opción. SKIP especifica el número de elementos que se deben omitir y que no se incluyen en el resultado.</span><span class="sxs-lookup"><span data-stu-id="8f32f-176">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="8f32f-177">Si se especifica Option. Top, el conjunto de resultados se iniciará después de omitir el número especificado de elementos.</span><span class="sxs-lookup"><span data-stu-id="8f32f-177">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
  name: load(option)
  fullName: load(option)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: Excel.Interfaces.WorksheetCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions): Excel.WorksheetCollection;'
    return:
      type:
      - excel.Excel.WorksheetCollection
      description: ''
    parameters:
    - id: option
      description: ''
      type:
      - Excel.Interfaces.WorksheetCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions
- uid: excel.Excel.WorksheetCollection.load_1
  summary: <span data-ttu-id="8f32f-178">Pone en cola un comando para cargar las propiedades especificadas del objeto.</span><span class="sxs-lookup"><span data-stu-id="8f32f-178">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="8f32f-179">Debe llamar `context.sync()` antes de leer las propiedades.</span><span class="sxs-lookup"><span data-stu-id="8f32f-179">You must call `context.sync()` before reading the properties.</span></span>
  name: load(propertyNames)
  fullName: load(propertyNames)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(propertyNames?: string | string[]): Excel.WorksheetCollection;'
    return:
      type:
      - excel.Excel.WorksheetCollection
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"8f32f-180\">Ejemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"8f32f-180\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var worksheets = ctx.workbook.worksheets;\n    worksheets.load('items');\n    return ctx.sync().then(function() {\n        for (var i = 0; i < worksheets.items.length; i++)\n        {\n            console.log(worksheets.items[i].name);\n            console.log(worksheets.items[i].index);\n        }\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: propertyNames
      description: <span data-ttu-id="8f32f-181">Una cadena delimitada por comas o una matriz de cadenas que especifican las propiedades que se van a cargar.</span><span class="sxs-lookup"><span data-stu-id="8f32f-181">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
      type:
      - string | string[]
- uid: excel.Excel.WorksheetCollection.load_2
  name: load(option)
  fullName: load(option)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: OfficeExtension.LoadOption): Excel.WorksheetCollection;'
    return:
      type:
      - excel.Excel.WorksheetCollection
      description: ''
    parameters:
    - id: option
      description: ''
      type:
      - office.OfficeExtension.LoadOption
- uid: excel.Excel.WorksheetCollection.onActivated
  summary: >-
    <span data-ttu-id="8f32f-182">Este evento se produce cuando se activa cualquier hoja de cálculo del libro.</span><span class="sxs-lookup"><span data-stu-id="8f32f-182">Occurs when any worksheet in the workbook is activated.</span></span>


    <span data-ttu-id="8f32f-183">\[[Conjunto de API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8f32f-183">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: onActivated
  fullName: onActivated
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onActivated: OfficeExtension.EventHandlers<Excel.WorksheetActivatedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.WorksheetActivatedEventArgs>
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"8f32f-184\">Ejemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"8f32f-184\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    let sheets = context.workbook.worksheets;\n    sheets.onActivated.add(onActivate);\n\n    await context.sync();\n    console.log(\"A handler has been registered for the OnActivate event.\");\n});\n```"
- uid: excel.Excel.WorksheetCollection.onAdded
  summary: >-
    <span data-ttu-id="8f32f-185">Este evento se produce cuando se agrega una nueva hoja de cálculo al libro.</span><span class="sxs-lookup"><span data-stu-id="8f32f-185">Occurs when a new worksheet is added to the workbook.</span></span>


    <span data-ttu-id="8f32f-186">\[[Conjunto de API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8f32f-186">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: onAdded
  fullName: onAdded
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onAdded: OfficeExtension.EventHandlers<Excel.WorksheetAddedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.WorksheetAddedEventArgs>
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"8f32f-187\">Ejemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"8f32f-187\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    let sheet = context.workbook.worksheets;\n    sheet.onAdded.add(onWorksheetAdd);\n\n    await context.sync();\n    console.log(\"A handler has been registered for the OnAdded event.\");\n});\n```"
- uid: excel.Excel.WorksheetCollection.onCalculated
  summary: >-
    <span data-ttu-id="8f32f-188">Este evento se produce cuando se calcula cualquier hoja de cálculo del libro.</span><span class="sxs-lookup"><span data-stu-id="8f32f-188">Occurs when any worksheet in the workbook is calculated.</span></span>


    <span data-ttu-id="8f32f-189">\[[Conjunto de API: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8f32f-189">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: onCalculated
  fullName: onCalculated
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onCalculated: OfficeExtension.EventHandlers<Excel.WorksheetCalculatedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.WorksheetCalculatedEventArgs>
- uid: excel.Excel.WorksheetCollection.onChanged
  summary: >-
    <span data-ttu-id="8f32f-190">Este evento se produce cuando se modifica cualquier hoja de cálculo del libro.</span><span class="sxs-lookup"><span data-stu-id="8f32f-190">Occurs when any worksheet in the workbook is changed.</span></span>


    <span data-ttu-id="8f32f-191">\[[Conjunto de API: EXCELAPI beta (solo vista previa)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8f32f-191">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: onChanged
  fullName: onChanged
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onChanged: OfficeExtension.EventHandlers<Excel.WorksheetChangedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.WorksheetChangedEventArgs>
- uid: excel.Excel.WorksheetCollection.onDeactivated
  summary: >-
    <span data-ttu-id="8f32f-192">Este evento se produce cuando se desactiva cualquier hoja de cálculo del libro.</span><span class="sxs-lookup"><span data-stu-id="8f32f-192">Occurs when any worksheet in the workbook is deactivated.</span></span>


    <span data-ttu-id="8f32f-193">\[[Conjunto de API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8f32f-193">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: onDeactivated
  fullName: onDeactivated
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onDeactivated: OfficeExtension.EventHandlers<Excel.WorksheetDeactivatedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.WorksheetDeactivatedEventArgs>
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"8f32f-194\">Ejemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"8f32f-194\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    let sheets = context.workbook.worksheets;\n    sheets.onDeactivated.add(onDeactivate);\n\n    await context.sync();\n    console.log(\"A handler has been registered for the OnDeactivate event.\");\n});\n```"
- uid: excel.Excel.WorksheetCollection.onDeleted
  summary: >-
    <span data-ttu-id="8f32f-195">Este evento se produce cuando se elimina una hoja de cálculo del libro.</span><span class="sxs-lookup"><span data-stu-id="8f32f-195">Occurs when a worksheet is deleted from the workbook.</span></span>


    <span data-ttu-id="8f32f-196">\[[Conjunto de API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8f32f-196">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: onDeleted
  fullName: onDeleted
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onDeleted: OfficeExtension.EventHandlers<Excel.WorksheetDeletedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.WorksheetDeletedEventArgs>
- uid: excel.Excel.WorksheetCollection.onFiltered
  summary: >-
    <span data-ttu-id="8f32f-197">Este evento se produce cuando se aplica cualquier filtro de hoja de cálculo en el libro.</span><span class="sxs-lookup"><span data-stu-id="8f32f-197">Occurs when any worksheet's filter is applied in the workbook.</span></span>


    <span data-ttu-id="8f32f-198">\[[Conjunto de API: EXCELAPI beta (solo vista previa)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8f32f-198">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: onFiltered
  fullName: onFiltered
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onFiltered: OfficeExtension.EventHandlers<Excel.WorksheetFilteredEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.WorksheetFilteredEventArgs>
- uid: excel.Excel.WorksheetCollection.onFormatChanged
  summary: >-
    <span data-ttu-id="8f32f-199">Se produce cuando se cambia el formato de cualquier hoja de cálculo del libro.</span><span class="sxs-lookup"><span data-stu-id="8f32f-199">Occurs when any worksheet in the workbook has format changed.</span></span>


    <span data-ttu-id="8f32f-200">\[[Conjunto de API: EXCELAPI beta (solo vista previa)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8f32f-200">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: onFormatChanged
  fullName: onFormatChanged
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onFormatChanged: OfficeExtension.EventHandlers<Excel.WorksheetFormatChangedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.WorksheetFormatChangedEventArgs>
- uid: excel.Excel.WorksheetCollection.onSelectionChanged
  summary: >-
    <span data-ttu-id="8f32f-201">Se produce cuando la selección cambia en una hoja de cálculo.</span><span class="sxs-lookup"><span data-stu-id="8f32f-201">Occurs when the selection changes on any worksheet.</span></span>


    <span data-ttu-id="8f32f-202">\[[Conjunto de API: EXCELAPI beta (solo vista previa)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="8f32f-202">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: onSelectionChanged
  fullName: onSelectionChanged
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onSelectionChanged: OfficeExtension.EventHandlers<Excel.WorksheetSelectionChangedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.WorksheetSelectionChangedEventArgs>
- uid: excel.Excel.WorksheetCollection.toJSON
  summary: <span data-ttu-id="8f32f-203">Reemplaza el método de JavaScript `toJSON()` para proporcionar un resultado más útil cuando se pasa un objeto de `JSON.stringify()` <!-- -->la API.</span><span class="sxs-lookup"><span data-stu-id="8f32f-203">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`<!-- -->.</span></span> <span data-ttu-id="8f32f-204">(`JSON.stringify`<!-- -->a su vez, llama al `toJSON` método del objeto que se le pasa). Mientras que el `Excel.WorksheetCollection` objeto original es un objeto API, `toJSON` el método devuelve un objeto JavaScript sin formato (escrito `Excel.Interfaces.WorksheetCollectionData` <!-- -->como) que contiene una matriz "items" con copias rasas de las propiedades cargadas de los elementos de la colección.</span><span class="sxs-lookup"><span data-stu-id="8f32f-204">(`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original `Excel.WorksheetCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.WorksheetCollectionData`<!-- -->) that contains an "items" array with shallow copies of any loaded properties from the collection's items.</span></span>
  name: toJSON()
  fullName: toJSON()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON(): Excel.Interfaces.WorksheetCollectionData;'
    return:
      type:
      - excel.Excel.Interfaces.WorksheetCollectionData
      description: ''
