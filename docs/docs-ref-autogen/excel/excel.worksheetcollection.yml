### YamlMime:UniversalReference
ms.openlocfilehash: 09ae4be877fcadf8d226394758f6569dff40a618
ms.sourcegitcommit: d356f1545c328d4b59ce814fcab8191e4231f1dc
ms.translationtype: MT
ms.contentlocale: es-ES
ms.lasthandoff: 02/13/2019
ms.locfileid: "29980292"
items:
- uid: excel.Excel.WorksheetCollection
  summary: >-
    <span data-ttu-id="36da6-101">Representa una colección de objetos de hoja de cálculo que forman parte del libro.</span><span class="sxs-lookup"><span data-stu-id="36da6-101">Represents a collection of worksheet objects that are part of the workbook.</span></span>


    <span data-ttu-id="36da6-102">\[[Conjunto de API: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="36da6-102">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: Excel.WorksheetCollection
  fullName: Excel.WorksheetCollection
  langs:
  - typeScript
  type: class
  extends:
  - office.OfficeExtension.ClientObject
  package: excel
  children:
  - excel.Excel.WorksheetCollection.add
  - excel.Excel.WorksheetCollection.context
  - excel.Excel.WorksheetCollection.getActiveWorksheet
  - excel.Excel.WorksheetCollection.getCount
  - excel.Excel.WorksheetCollection.getFirst
  - excel.Excel.WorksheetCollection.getItem
  - excel.Excel.WorksheetCollection.getItemOrNullObject
  - excel.Excel.WorksheetCollection.getLast
  - excel.Excel.WorksheetCollection.items
  - excel.Excel.WorksheetCollection.load
  - excel.Excel.WorksheetCollection.load_1
  - excel.Excel.WorksheetCollection.load_2
  - excel.Excel.WorksheetCollection.onActivated
  - excel.Excel.WorksheetCollection.onAdded
  - excel.Excel.WorksheetCollection.onCalculated
  - excel.Excel.WorksheetCollection.onDeactivated
  - excel.Excel.WorksheetCollection.onDeleted
  - excel.Excel.WorksheetCollection.toJSON
- uid: excel.Excel.WorksheetCollection.add
  summary: >-
    <span data-ttu-id="36da6-p101">Agrega una nueva hoja al libro. La hoja de cálculo se agregará al final de las hojas de cálculo existentes. Si desea activar la hoja de cálculo recién agregada, llame en ella a ".activate().</span><span class="sxs-lookup"><span data-stu-id="36da6-p101">Adds a new worksheet to the workbook. The worksheet will be added at the end of existing worksheets. If you wish to activate the newly added worksheet, call ".activate() on it.</span></span>


    <span data-ttu-id="36da6-106">\[[Conjunto de API: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="36da6-106">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: add(name)
  fullName: add(name)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'add(name?: string): Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"36da6-107\">Ejemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"36da6-107\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var wSheetName = 'Sample Name';\n    var worksheet = ctx.workbook.worksheets.add(wSheetName);\n    worksheet.load('name');\n    return ctx.sync().then(function() {\n        console.log(worksheet.name);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: name
      description: <span data-ttu-id="36da6-p102">Opcional. Nombre de la hoja de cálculo que se va a agregar. Si se especifica, el nombre debe ser único. Si no se especifica, Excel determina el nombre de la nueva hoja de cálculo.</span><span class="sxs-lookup"><span data-stu-id="36da6-p102">Optional. The name of the worksheet to be added. If specified, name should be unqiue. If not specified, Excel determines the name of the new worksheet.</span></span>
      type:
      - string
- uid: excel.Excel.WorksheetCollection.context
  summary: <span data-ttu-id="36da6-112">El contexto de solicitud asociado con el objeto.</span><span class="sxs-lookup"><span data-stu-id="36da6-112">The request context associated with the object.</span></span> <span data-ttu-id="36da6-113">Este comando conecta proceso del complemento al proceso de la aplicación host de Office.</span><span class="sxs-lookup"><span data-stu-id="36da6-113">This connects the add-in's process to the Office host application's process.</span></span>
  name: context
  fullName: context
  langs:
  - typeScript
  type: property
  syntax:
    content: 'context: RequestContext;'
    return:
      type:
      - RequestContext
- uid: excel.Excel.WorksheetCollection.getActiveWorksheet
  summary: >-
    <span data-ttu-id="36da6-114">Obtiene la hoja de cálculo activa del libro.</span><span class="sxs-lookup"><span data-stu-id="36da6-114">Gets the currently active worksheet in the workbook.</span></span>


    <span data-ttu-id="36da6-115">\[[Conjunto de API: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="36da6-115">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getActiveWorksheet()
  fullName: getActiveWorksheet()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getActiveWorksheet(): Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"36da6-116\">Ejemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"36da6-116\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) {  \n    var activeWorksheet = ctx.workbook.worksheets.getActiveWorksheet();\n    activeWorksheet.load('name');\n    return ctx.sync().then(function() {\n            console.log(activeWorksheet.name);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: excel.Excel.WorksheetCollection.getCount
  summary: >-
    <span data-ttu-id="36da6-117">Obtiene el número de hojas de cálculo de la colección.</span><span class="sxs-lookup"><span data-stu-id="36da6-117">Gets the number of worksheets in the collection.</span></span>


    <span data-ttu-id="36da6-118">\[[Conjunto de API: ExcelApi 1,4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="36da6-118">\[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getCount(visibleOnly)
  fullName: getCount(visibleOnly)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getCount(visibleOnly?: boolean): OfficeExtension.ClientResult<number>;'
    return:
      type:
      - OfficeExtension.ClientResult<number>
      description: ''
    parameters:
    - id: visibleOnly
      description: <span data-ttu-id="36da6-p104">Opcional. Si es true, solo tiene en cuenta las hojas de cálculo visibles y omite las ocultas.</span><span class="sxs-lookup"><span data-stu-id="36da6-p104">Optional. If true, considers only visible worksheets, skipping over any hidden ones.</span></span>
      type:
      - boolean
- uid: excel.Excel.WorksheetCollection.getFirst
  summary: >-
    <span data-ttu-id="36da6-121">Obtiene la primera hoja de cálculo de la colección.</span><span class="sxs-lookup"><span data-stu-id="36da6-121">Gets the first worksheet in the collection.</span></span>


    <span data-ttu-id="36da6-122">\[[Conjunto de API: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="36da6-122">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getFirst(visibleOnly)
  fullName: getFirst(visibleOnly)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getFirst(visibleOnly?: boolean): Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"36da6-123\">Ejemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"36da6-123\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheets = context.workbook.worksheets;\n\n    // We don't want to include the default worksheet that was created\n    // when the workbook was created, so our \"firstSheet\" will be the one\n    // after the literal first. Note chaining of navigation methods.\n    const firstSheet = sheets.getFirst().getNext();\n    const lastSheet = sheets.getLast();\n    const firstTaxRateRange = firstSheet.getRange(\"B2\");\n    const lastTaxRateRange = lastSheet.getRange(\"B2\");\n\n    firstSheet.load(\"name\");\n    lastSheet.load(\"name\");\n    firstTaxRateRange.load(\"text\");\n    lastTaxRateRange.load(\"text\");\n\n    await context.sync();\n\n    let firstYear = firstSheet.name.substr(5, 4);\n    let lastYear = lastSheet.name.substr(5, 4);\n    console.log(`Tax Rate change from ${firstYear} to ${lastYear}`, `Tax rate for ${firstYear}: ${firstTaxRateRange.text[0][0]}\\nTax rate for ${lastYear}: ${lastTaxRateRange.text[0][0]}`)\n\n    await context.sync();\n});\n```"
    parameters:
    - id: visibleOnly
      description: <span data-ttu-id="36da6-p105">Opcional. Si es true, solo tiene en cuenta las hojas de cálculo visibles y omite las ocultas.</span><span class="sxs-lookup"><span data-stu-id="36da6-p105">Optional. If true, considers only visible worksheets, skipping over any hidden ones.</span></span>
      type:
      - boolean
- uid: excel.Excel.WorksheetCollection.getItem
  summary: >-
    <span data-ttu-id="36da6-126">Obtiene un objeto de hoja de cálculo mediante su nombre o identificador.</span><span class="sxs-lookup"><span data-stu-id="36da6-126">Gets a worksheet object using its Name or ID.</span></span>


    <span data-ttu-id="36da6-127">\[[Conjunto de API: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="36da6-127">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getItem(key)
  fullName: getItem(key)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getItem(key: string): Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
      description: ''
    parameters:
    - id: key
      description: <span data-ttu-id="36da6-128">Nombre o identificador de la hoja de cálculo.</span><span class="sxs-lookup"><span data-stu-id="36da6-128">The Name or ID of the worksheet.</span></span>
      type:
      - string
- uid: excel.Excel.WorksheetCollection.getItemOrNullObject
  summary: >-
    <span data-ttu-id="36da6-p106">Obtiene un objeto de hoja de cálculo mediante su nombre o identificador. Si la hoja de cálculo no existe, devolverá un objeto NULL.</span><span class="sxs-lookup"><span data-stu-id="36da6-p106">Gets a worksheet object using its Name or ID. If the worksheet does not exist, will return a null object.</span></span>


    <span data-ttu-id="36da6-131">\[[Conjunto de API: ExcelApi 1,4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="36da6-131">\[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getItemOrNullObject(key)
  fullName: getItemOrNullObject(key)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getItemOrNullObject(key: string): Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
      description: ''
    parameters:
    - id: key
      description: <span data-ttu-id="36da6-132">Nombre o identificador de la hoja de cálculo.</span><span class="sxs-lookup"><span data-stu-id="36da6-132">The Name or ID of the worksheet.</span></span>
      type:
      - string
- uid: excel.Excel.WorksheetCollection.getLast
  summary: >-
    <span data-ttu-id="36da6-133">Obtiene la última hoja de cálculo de la colección.</span><span class="sxs-lookup"><span data-stu-id="36da6-133">Gets the last worksheet in the collection.</span></span>


    <span data-ttu-id="36da6-134">\[[Conjunto de API: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="36da6-134">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getLast(visibleOnly)
  fullName: getLast(visibleOnly)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getLast(visibleOnly?: boolean): Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"36da6-135\">Ejemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"36da6-135\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheets = context.workbook.worksheets;\n\n    // We don't want to include the default worksheet that was created\n    // when the workbook was created, so our \"firstSheet\" will be the one\n    // after the literal first. Note chaining of navigation methods.\n    const firstSheet = sheets.getFirst().getNext();\n    const lastSheet = sheets.getLast();\n    const firstTaxRateRange = firstSheet.getRange(\"B2\");\n    const lastTaxRateRange = lastSheet.getRange(\"B2\");\n\n    firstSheet.load(\"name\");\n    lastSheet.load(\"name\");\n    firstTaxRateRange.load(\"text\");\n    lastTaxRateRange.load(\"text\");\n\n    await context.sync();\n\n    let firstYear = firstSheet.name.substr(5, 4);\n    let lastYear = lastSheet.name.substr(5, 4);\n    console.log(`Tax Rate change from ${firstYear} to ${lastYear}`, `Tax rate for ${firstYear}: ${firstTaxRateRange.text[0][0]}\\nTax rate for ${lastYear}: ${lastTaxRateRange.text[0][0]}`)\n\n    await context.sync();\n});\n```"
    parameters:
    - id: visibleOnly
      description: <span data-ttu-id="36da6-p107">Opcional. Si es true, solo tiene en cuenta las hojas de cálculo visibles y omite las ocultas.</span><span class="sxs-lookup"><span data-stu-id="36da6-p107">Optional. If true, considers only visible worksheets, skipping over any hidden ones.</span></span>
      type:
      - boolean
- uid: excel.Excel.WorksheetCollection.items
  summary: <span data-ttu-id="36da6-138">Obtiene al secundario cargado los elementos de esta colección.</span><span class="sxs-lookup"><span data-stu-id="36da6-138">Gets the loaded child items in this collection.</span></span>
  name: items
  fullName: items
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly items: Excel.Worksheet[];'
    return:
      type:
      - Excel.Worksheet[]
- uid: excel.Excel.WorksheetCollection.load
  summary: <span data-ttu-id="36da6-139">Colas de seguridad de un comando que se va a cargar las propiedades del objeto especificadas.</span><span class="sxs-lookup"><span data-stu-id="36da6-139">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="36da6-140">Se debe llamar a "context.sync()" antes de leer las propiedades.</span><span class="sxs-lookup"><span data-stu-id="36da6-140">You must call "context.sync()" before reading the properties.</span></span>
  remarks: >-
    <span data-ttu-id="36da6-141">Además de esta firma, este método no tiene las siguientes firmas:</span><span class="sxs-lookup"><span data-stu-id="36da6-141">In addition to this signature, this method has the following signatures:</span></span>


    <span data-ttu-id="36da6-142">`load(option?: string | string[]): Excel.WorksheetCollection`-Donde opción es una cadena delimitada por comas o una matriz de cadenas que especifican las propiedades de carga.</span><span class="sxs-lookup"><span data-stu-id="36da6-142">`load(option?: string | string[]): Excel.WorksheetCollection` - Where option is a comma-delimited string or an array of strings that specify the properties to load.</span></span>


    <span data-ttu-id="36da6-143">`load(option?: { select?: string; expand?: string; }): Excel.WorksheetCollection`-Donde option.select es una cadena delimitada por comas que especifica las propiedades para cargar y options.expand es una cadena delimitada por comas que especifica las propiedades de navegación para cargar.</span><span class="sxs-lookup"><span data-stu-id="36da6-143">`load(option?: { select?: string; expand?: string; }): Excel.WorksheetCollection` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>


    <span data-ttu-id="36da6-144">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.WorksheetCollection`-Sólo está disponible en los tipos de colección.</span><span class="sxs-lookup"><span data-stu-id="36da6-144">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.WorksheetCollection` - Only available on collection types.</span></span> <span data-ttu-id="36da6-145">Es similar a la firma precedente.</span><span class="sxs-lookup"><span data-stu-id="36da6-145">It is similar to the preceding signature.</span></span> <span data-ttu-id="36da6-146">Option.Top especifica el número máximo de elementos de la colección que se puede incluir en el resultado.</span><span class="sxs-lookup"><span data-stu-id="36da6-146">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="36da6-147">Option.Skip especifica el número de elementos que se pasan por alto y no se incluyen en el resultado.</span><span class="sxs-lookup"><span data-stu-id="36da6-147">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="36da6-148">Si se especifica option.top, se iniciará el conjunto de resultados después de omitir el número especificado de elementos.</span><span class="sxs-lookup"><span data-stu-id="36da6-148">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
  name: load(option)
  fullName: load(option)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: Excel.Interfaces.WorksheetCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions): Excel.WorksheetCollection;'
    return:
      type:
      - excel.Excel.WorksheetCollection
      description: ''
    parameters:
    - id: option
      description: ''
      type:
      - Excel.Interfaces.WorksheetCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions
- uid: excel.Excel.WorksheetCollection.load_1
  summary: <span data-ttu-id="36da6-149">Colas de seguridad de un comando que se va a cargar las propiedades del objeto especificadas.</span><span class="sxs-lookup"><span data-stu-id="36da6-149">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="36da6-150">Se debe llamar a `context.sync()` antes de leer las propiedades.</span><span class="sxs-lookup"><span data-stu-id="36da6-150">You must call `context.sync()` before reading the properties.</span></span>
  name: load(propertyNames)
  fullName: load(propertyNames)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(propertyNames?: string | string[]): Excel.WorksheetCollection;'
    return:
      type:
      - excel.Excel.WorksheetCollection
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"36da6-151\">Ejemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"36da6-151\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var worksheets = ctx.workbook.worksheets;\n    worksheets.load('items');\n    return ctx.sync().then(function() {\n        for (var i = 0; i < worksheets.items.length; i++)\n        {\n            console.log(worksheets.items[i].name);\n            console.log(worksheets.items[i].index);\n        }\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: propertyNames
      description: <span data-ttu-id="36da6-152">Una cadena delimitada por comas o una matriz de cadenas que especifican las propiedades de carga.</span><span class="sxs-lookup"><span data-stu-id="36da6-152">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
      type:
      - string | string[]
- uid: excel.Excel.WorksheetCollection.load_2
  name: load(option)
  fullName: load(option)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: OfficeExtension.LoadOption): Excel.WorksheetCollection;'
    return:
      type:
      - excel.Excel.WorksheetCollection
      description: ''
    parameters:
    - id: option
      description: ''
      type:
      - office.OfficeExtension.LoadOption
- uid: excel.Excel.WorksheetCollection.onActivated
  summary: >-
    <span data-ttu-id="36da6-153">Se produce cuando se activa cualquier hoja de cálculo del libro.</span><span class="sxs-lookup"><span data-stu-id="36da6-153">Occurs when any worksheet in the workbook is activated.</span></span>


    <span data-ttu-id="36da6-154">\[[Conjunto de API: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="36da6-154">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: onActivated
  fullName: onActivated
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onActivated: OfficeExtension.EventHandlers<Excel.WorksheetActivatedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.WorksheetActivatedEventArgs>
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"36da6-155\">Ejemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"36da6-155\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    let sheets = context.workbook.worksheets;\n    sheets.onActivated.add(onActivate);\n\n    await context.sync();\n    console.log(\"A handler has been registered for the OnActivate event.\");\n});\n```"
- uid: excel.Excel.WorksheetCollection.onAdded
  summary: >-
    <span data-ttu-id="36da6-156">Se produce cuando se agrega una nueva hoja de cálculo del libro.</span><span class="sxs-lookup"><span data-stu-id="36da6-156">Occurs when a new worksheet is added to the workbook.</span></span>


    <span data-ttu-id="36da6-157">\[[Conjunto de API: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="36da6-157">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: onAdded
  fullName: onAdded
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onAdded: OfficeExtension.EventHandlers<Excel.WorksheetAddedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.WorksheetAddedEventArgs>
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"36da6-158\">Ejemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"36da6-158\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    let sheet = context.workbook.worksheets;\n    sheet.onAdded.add(onWorksheetAdd);\n\n    await context.sync();\n    console.log(\"A handler has been registered for the OnAdded event.\");\n});\n```"
- uid: excel.Excel.WorksheetCollection.onCalculated
  summary: >-
    <span data-ttu-id="36da6-159">Se produce cuando se calcula cualquier hoja de cálculo del libro.</span><span class="sxs-lookup"><span data-stu-id="36da6-159">Occurs when any worksheet in the workbook is calculated.</span></span>


    <span data-ttu-id="36da6-160">\[[Conjunto de API: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="36da6-160">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: onCalculated
  fullName: onCalculated
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onCalculated: OfficeExtension.EventHandlers<Excel.WorksheetCalculatedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.WorksheetCalculatedEventArgs>
- uid: excel.Excel.WorksheetCollection.onDeactivated
  summary: >-
    <span data-ttu-id="36da6-161">Se produce cuando se desactiva cualquier hoja de cálculo del libro.</span><span class="sxs-lookup"><span data-stu-id="36da6-161">Occurs when any worksheet in the workbook is deactivated.</span></span>


    <span data-ttu-id="36da6-162">\[[Conjunto de API: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="36da6-162">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: onDeactivated
  fullName: onDeactivated
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onDeactivated: OfficeExtension.EventHandlers<Excel.WorksheetDeactivatedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.WorksheetDeactivatedEventArgs>
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"36da6-163\">Ejemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"36da6-163\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    let sheets = context.workbook.worksheets;\n    sheets.onDeactivated.add(onDeactivate);\n\n    await context.sync();\n    console.log(\"A handler has been registered for the OnDeactivate event.\");\n});\n```"
- uid: excel.Excel.WorksheetCollection.onDeleted
  summary: >-
    <span data-ttu-id="36da6-164">Se produce cuando se elimina una hoja de cálculo del libro.</span><span class="sxs-lookup"><span data-stu-id="36da6-164">Occurs when a worksheet is deleted from the workbook.</span></span>


    <span data-ttu-id="36da6-165">\[[Conjunto de API: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="36da6-165">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: onDeleted
  fullName: onDeleted
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onDeleted: OfficeExtension.EventHandlers<Excel.WorksheetDeletedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.WorksheetDeletedEventArgs>
- uid: excel.Excel.WorksheetCollection.toJSON
  summary: <span data-ttu-id="36da6-166">Invalida el JavaScript `toJSON()` método con el fin de proporcionar resultados más útiles cuando se pasa un objeto de la API a `JSON.stringify()` <!-- -->.</span><span class="sxs-lookup"><span data-stu-id="36da6-166">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`<!-- -->.</span></span> <span data-ttu-id="36da6-167">(`JSON.stringify`<!-- -->, a su vez, llama a la `toJSON` método del objeto que se pasa a ella.) Mientras que el original `Excel.WorksheetCollection` es un objeto de la API, el `toJSON` método devuelve un objeto de JavaScript sin formato (escrito como `Excel.Interfaces.WorksheetCollectionData` <!-- -->) que contiene una matriz de "elementos" con copias superficiales de las propiedades de elementos de la colección cargadas.</span><span class="sxs-lookup"><span data-stu-id="36da6-167">(`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original `Excel.WorksheetCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.WorksheetCollectionData`<!-- -->) that contains an "items" array with shallow copies of any loaded properties from the collection's items.</span></span>
  name: toJSON()
  fullName: toJSON()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON(): Excel.Interfaces.WorksheetCollectionData;'
    return:
      type:
      - excel.Excel.Interfaces.WorksheetCollectionData
      description: ''
