### YamlMime:UniversalReference
ms.openlocfilehash: a30b3a743426d9bc10d73ab0b22f53199b0ee07c
ms.sourcegitcommit: 016e17422cf62dc9f1de1809666e9244e41cc1a9
ms.translationtype: MT
ms.contentlocale: es-ES
ms.lasthandoff: 11/09/2018
ms.locfileid: "26231716"
items:
- uid: excel.Excel.CustomConditionalFormat
  summary: >-
    <span data-ttu-id="52ea3-101">Representa un tipo de formato condicional personalizado.</span><span class="sxs-lookup"><span data-stu-id="52ea3-101">Represents a custom conditional format type.</span></span>


    <span data-ttu-id="52ea3-102">\[[Conjunto de API: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="52ea3-102">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: Excel.CustomConditionalFormat
  fullName: Excel.CustomConditionalFormat
  langs:
  - typeScript
  type: class
  extends:
  - OfficeExtension.ClientObject
  package: excel
  children:
  - excel.Excel.CustomConditionalFormat.format
  - excel.Excel.CustomConditionalFormat.load
  - excel.Excel.CustomConditionalFormat.rule
  - excel.Excel.CustomConditionalFormat.toJSON
- uid: excel.Excel.CustomConditionalFormat.format
  summary: >-
    <span data-ttu-id="52ea3-p101">Devuelve un objeto de formato que encapsula la fuente de formatos condicionales, el relleno, los bordes y otras propiedades. Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="52ea3-p101">Returns a format object, encapsulating the conditional formats font, fill, borders, and other properties. Read-only.</span></span>


    <span data-ttu-id="52ea3-105">\[[Conjunto de API: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="52ea3-105">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: format
  fullName: format
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly format: Excel.ConditionalRangeFormat;'
    return:
      type:
      - excel.Excel.ConditionalRangeFormat
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"52ea3-106\">Ejemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"52ea3-106\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const range = sheet.getRange(\"B8:E13\");\n    const conditionalFormat = range.conditionalFormats.add(Excel.ConditionalFormatType.custom);\n    conditionalFormat.custom.rule.formula = '=IF(B8>INDIRECT(\"RC[-1]\",0),TRUE)';\n    conditionalFormat.custom.format.font.color = \"green\";\n\n    await context.sync();\n});\n```"
- uid: excel.Excel.CustomConditionalFormat.load
  summary: <span data-ttu-id="52ea3-107">Colas de seguridad de un comando que se va a cargar las propiedades del objeto especificadas.</span><span class="sxs-lookup"><span data-stu-id="52ea3-107">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="52ea3-108">Se debe llamar a "context.sync()" antes de leer las propiedades.</span><span class="sxs-lookup"><span data-stu-id="52ea3-108">You must call "context.sync()" before reading the properties.</span></span>
  remarks: >-
    <span data-ttu-id="52ea3-109">Además de esta firma, este método no tiene las siguientes firmas:</span><span class="sxs-lookup"><span data-stu-id="52ea3-109">In addition to this signature, this method has the following signatures:</span></span>


    <span data-ttu-id="52ea3-110">`load(option?: { select?: string; expand?: string; }): Excel.CustomConditionalFormat`-Donde option.select es una cadena delimitada por comas que especifica las propiedades para cargar y options.expand es una cadena delimitada por comas que especifica las propiedades de navegación para cargar.</span><span class="sxs-lookup"><span data-stu-id="52ea3-110">`load(option?: { select?: string; expand?: string; }): Excel.CustomConditionalFormat` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>


    <span data-ttu-id="52ea3-111">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.CustomConditionalFormat`-Sólo está disponible en los tipos de colección.</span><span class="sxs-lookup"><span data-stu-id="52ea3-111">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.CustomConditionalFormat` - Only available on collection types.</span></span> <span data-ttu-id="52ea3-112">Es similar a la firma precedente.</span><span class="sxs-lookup"><span data-stu-id="52ea3-112">It is similar to the preceding signature.</span></span> <span data-ttu-id="52ea3-113">Option.Top especifica el número máximo de elementos de la colección que se puede incluir en el resultado.</span><span class="sxs-lookup"><span data-stu-id="52ea3-113">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="52ea3-114">Option.Skip especifica el número de elementos que se pasan por alto y no se incluyen en el resultado.</span><span class="sxs-lookup"><span data-stu-id="52ea3-114">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="52ea3-115">Si se especifica option.top, se iniciará el conjunto de resultados después de omitir el número especificado de elementos.</span><span class="sxs-lookup"><span data-stu-id="52ea3-115">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
  name: load(option)
  fullName: load
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: string | string[]): Excel.CustomConditionalFormat;'
    return:
      type:
      - excel.Excel.CustomConditionalFormat
      description: ''
    parameters:
    - id: option
      description: <span data-ttu-id="52ea3-116">Una cadena delimitada por comas o una matriz de cadenas que especifican las propiedades de carga.</span><span class="sxs-lookup"><span data-stu-id="52ea3-116">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
      type:
      - string | string[]
- uid: excel.Excel.CustomConditionalFormat.rule
  summary: >-
    <span data-ttu-id="52ea3-p104">Representa el objeto Rule en este formato condicional. Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="52ea3-p104">Represents the Rule object on this conditional format. Read-only.</span></span>


    <span data-ttu-id="52ea3-119">\[[Conjunto de API: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="52ea3-119">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: rule
  fullName: rule
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly rule: Excel.ConditionalFormatRule;'
    return:
      type:
      - excel.Excel.ConditionalFormatRule
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"52ea3-120\">Ejemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"52ea3-120\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) {\n    var sheet = ctx.workbook.worksheets.getActiveWorksheet();\n    var range = sheet.getRange(\"A1:A5\");\n    range.values = [[1], [20], [\"\"], [5], [\"test\"]];\n    var cf = range.conditionalFormats.add(Excel.ConditionalFormatType.custom);\n    var cfCustom = cf.customOrNullObject;\n    cfCustom.rule.formula = \"=ISBLANK(A1)\";\n    cfCustom.format.fill.color = \"#00FF00\";\n    return ctx.sync().then(function () {\n        console.log(\"Added new custom conditional format highlighting all blank cells.\");\n    });\n}).catch(function (error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: excel.Excel.CustomConditionalFormat.toJSON
  name: toJSON()
  fullName: toJSON
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON(): Excel.Interfaces.CustomConditionalFormatData;'
    return:
      type:
      - excel.Excel.Interfaces.CustomConditionalFormatData
      description: ''
