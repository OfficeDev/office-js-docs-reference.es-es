### YamlMime:UniversalReference
ms.openlocfilehash: 8e825405e1f328ca931354e2d4138476887d2e8d
ms.sourcegitcommit: fd03ef72d6a546b0e4dbe0cc9e75d2a7cf9341a1
ms.translationtype: MT
ms.contentlocale: es-ES
ms.lasthandoff: 02/27/2019
ms.locfileid: "30303245"
items:
- uid: excel.Excel.Worksheet
  summary: >-
    <span data-ttu-id="2285f-p101">Una hoja de cálculo de Excel es una cuadrícula de celdas. Puede contener datos, tablas, gráficos, etc.</span><span class="sxs-lookup"><span data-stu-id="2285f-p101">An Excel worksheet is a grid of cells. It can contain data, tables, charts, etc.</span></span>


    <span data-ttu-id="2285f-103">\[[Conjunto de API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="2285f-103">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: Excel.Worksheet
  fullName: Excel.Worksheet
  langs:
  - typeScript
  type: class
  extends:
  - office.OfficeExtension.ClientObject
  package: excel
  children:
  - excel.Excel.Worksheet.activate
  - excel.Excel.Worksheet.autoFilter
  - excel.Excel.Worksheet.calculate
  - excel.Excel.Worksheet.charts
  - excel.Excel.Worksheet.comments
  - excel.Excel.Worksheet.context
  - excel.Excel.Worksheet.copy
  - excel.Excel.Worksheet.copy_1
  - excel.Excel.Worksheet.delete
  - excel.Excel.Worksheet.enableCalculation
  - excel.Excel.Worksheet.findAll
  - excel.Excel.Worksheet.findAllOrNullObject
  - excel.Excel.Worksheet.freezePanes
  - excel.Excel.Worksheet.getCell
  - excel.Excel.Worksheet.getNext
  - excel.Excel.Worksheet.getNextOrNullObject
  - excel.Excel.Worksheet.getPrevious
  - excel.Excel.Worksheet.getPreviousOrNullObject
  - excel.Excel.Worksheet.getRange
  - excel.Excel.Worksheet.getRangeByIndexes
  - excel.Excel.Worksheet.getRanges
  - excel.Excel.Worksheet.getUsedRange
  - excel.Excel.Worksheet.getUsedRangeOrNullObject
  - excel.Excel.Worksheet.horizontalPageBreaks
  - excel.Excel.Worksheet.id
  - excel.Excel.Worksheet.load
  - excel.Excel.Worksheet.load_1
  - excel.Excel.Worksheet.load_2
  - excel.Excel.Worksheet.name
  - excel.Excel.Worksheet.names
  - excel.Excel.Worksheet.onActivated
  - excel.Excel.Worksheet.onCalculated
  - excel.Excel.Worksheet.onChanged
  - excel.Excel.Worksheet.onDeactivated
  - excel.Excel.Worksheet.onFiltered
  - excel.Excel.Worksheet.onFormatChanged
  - excel.Excel.Worksheet.onSelectionChanged
  - excel.Excel.Worksheet.pageLayout
  - excel.Excel.Worksheet.pivotTables
  - excel.Excel.Worksheet.position
  - excel.Excel.Worksheet.protection
  - excel.Excel.Worksheet.replaceAll
  - excel.Excel.Worksheet.set
  - excel.Excel.Worksheet.set_1
  - excel.Excel.Worksheet.shapes
  - excel.Excel.Worksheet.showGridlines
  - excel.Excel.Worksheet.showHeadings
  - excel.Excel.Worksheet.slicers
  - excel.Excel.Worksheet.standardHeight
  - excel.Excel.Worksheet.standardWidth
  - excel.Excel.Worksheet.tabColor
  - excel.Excel.Worksheet.tables
  - excel.Excel.Worksheet.toJSON
  - excel.Excel.Worksheet.verticalPageBreaks
  - excel.Excel.Worksheet.visibility
- uid: excel.Excel.Worksheet.activate
  summary: >-
    <span data-ttu-id="2285f-104">Activa la hoja de cálculo en la interfaz de usuario de Excel.</span><span class="sxs-lookup"><span data-stu-id="2285f-104">Activate the worksheet in the Excel UI.</span></span>


    <span data-ttu-id="2285f-105">\[[Conjunto de API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="2285f-105">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: activate()
  fullName: activate()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'activate(): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"2285f-106\">Ejemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"2285f-106\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var wSheetName = 'Sheet1';\n    var worksheet = ctx.workbook.worksheets.getItem(wSheetName);\n    worksheet.activate();\n    return ctx.sync(); \n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: excel.Excel.Worksheet.autoFilter
  summary: >-
    <span data-ttu-id="2285f-107">Representa el objeto autoFilter de la hoja de cálculo.</span><span class="sxs-lookup"><span data-stu-id="2285f-107">Represents the AutoFilter object of the worksheet.</span></span> <span data-ttu-id="2285f-108">Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="2285f-108">Read-Only.</span></span>


    <span data-ttu-id="2285f-109">\[[Conjunto de API: EXCELAPI beta (solo vista previa)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="2285f-109">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: autoFilter
  fullName: autoFilter
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly autoFilter: Excel.AutoFilter;'
    return:
      type:
      - excel.Excel.AutoFilter
- uid: excel.Excel.Worksheet.calculate
  summary: >-
    <span data-ttu-id="2285f-110">Calcula todas las celdas de una hoja de cálculo.</span><span class="sxs-lookup"><span data-stu-id="2285f-110">Calculates all cells on a worksheet.</span></span>


    <span data-ttu-id="2285f-111">\[[Conjunto de API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="2285f-111">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: calculate(markAllDirty)
  fullName: calculate(markAllDirty)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'calculate(markAllDirty: boolean): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: markAllDirty
      description: <span data-ttu-id="2285f-112">True, para marcar todos como modificados.</span><span class="sxs-lookup"><span data-stu-id="2285f-112">True, to mark all as dirty.</span></span>
      type:
      - boolean
- uid: excel.Excel.Worksheet.charts
  summary: >-
    <span data-ttu-id="2285f-p103">Devuelve la colección de gráficos que forman parte de la hoja de cálculo. Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="2285f-p103">Returns collection of charts that are part of the worksheet. Read-only.</span></span>


    <span data-ttu-id="2285f-115">\[[Conjunto de API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="2285f-115">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: charts
  fullName: charts
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly charts: Excel.ChartCollection;'
    return:
      type:
      - excel.Excel.ChartCollection
- uid: excel.Excel.Worksheet.comments
  summary: >-
    <span data-ttu-id="2285f-116">Devuelve una colección de todos los objetos Comments de la hoja de cálculo.</span><span class="sxs-lookup"><span data-stu-id="2285f-116">Returns a collection of all the Comments objects on the worksheet.</span></span> <span data-ttu-id="2285f-117">Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="2285f-117">Read-only.</span></span>


    <span data-ttu-id="2285f-118">\[[Conjunto de API: EXCELAPI beta (solo vista previa)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="2285f-118">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: comments
  fullName: comments
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly comments: Excel.CommentCollection;'
    return:
      type:
      - excel.Excel.CommentCollection
- uid: excel.Excel.Worksheet.context
  summary: <span data-ttu-id="2285f-119">Contexto de la solicitud asociado al objeto.</span><span class="sxs-lookup"><span data-stu-id="2285f-119">The request context associated with the object.</span></span> <span data-ttu-id="2285f-120">Esto conecta el proceso del complemento con el proceso de la aplicación host de Office.</span><span class="sxs-lookup"><span data-stu-id="2285f-120">This connects the add-in's process to the Office host application's process.</span></span>
  name: context
  fullName: context
  langs:
  - typeScript
  type: property
  syntax:
    content: 'context: RequestContext;'
    return:
      type:
      - RequestContext
- uid: excel.Excel.Worksheet.copy
  summary: >-
    <span data-ttu-id="2285f-121">Copia una hoja de cálculo y la coloca en la posición especificada.</span><span class="sxs-lookup"><span data-stu-id="2285f-121">Copy a worksheet and place it at the specified position.</span></span> <span data-ttu-id="2285f-122">Devuelve la hoja de cálculo copiada.</span><span class="sxs-lookup"><span data-stu-id="2285f-122">Return the copied worksheet.</span></span>


    <span data-ttu-id="2285f-123">\[[Conjunto de API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="2285f-123">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: copy(positionType, relativeTo)
  fullName: copy(positionType, relativeTo)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'copy(positionType?: Excel.WorksheetPositionType, relativeTo?: Excel.Worksheet): Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"2285f-124\">Ejemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"2285f-124\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n\n    let myWorkbook = context.workbook;\n    let sampleSheet = myWorkbook.worksheets.getActiveWorksheet();\n    let copiedSheet = sampleSheet.copy(\"End\")\n\n    sampleSheet.load(\"name\");\n    copiedSheet.load(\"name\");\n\n    await context.sync();\n\n    console.log(\"'\" + sampleSheet.name + \"' was copied to '\" + copiedSheet.name + \"'\")\n});\n```"
    parameters:
    - id: positionType
      description: <span data-ttu-id="2285f-125">Opcional.</span><span class="sxs-lookup"><span data-stu-id="2285f-125">Optional.</span></span>
      type:
      - excel.Excel.WorksheetPositionType
    - id: relativeTo
      description: <span data-ttu-id="2285f-126">Opcional.</span><span class="sxs-lookup"><span data-stu-id="2285f-126">Optional.</span></span>
      type:
      - excel.Excel.Worksheet
- uid: excel.Excel.Worksheet.copy_1
  summary: >-
    <span data-ttu-id="2285f-127">Copia una hoja de cálculo y la coloca en la posición especificada.</span><span class="sxs-lookup"><span data-stu-id="2285f-127">Copy a worksheet and place it at the specified position.</span></span> <span data-ttu-id="2285f-128">Devuelve la hoja de cálculo copiada.</span><span class="sxs-lookup"><span data-stu-id="2285f-128">Return the copied worksheet.</span></span>


    <span data-ttu-id="2285f-129">\[[Conjunto de API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="2285f-129">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: copy(positionTypeString, relativeTo)
  fullName: copy(positionTypeString, relativeTo)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'copy(positionTypeString?: "None" | "Before" | "After" | "Beginning" | "End", relativeTo?: Excel.Worksheet): Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
      description: ''
    parameters:
    - id: positionTypeString
      description: <span data-ttu-id="2285f-130">Opcional.</span><span class="sxs-lookup"><span data-stu-id="2285f-130">Optional.</span></span>
      type:
      - "\"None\" | \"Before\" | \"After\" | \"Beginning\" | \"End\""
    - id: relativeTo
      description: <span data-ttu-id="2285f-131">Opcional.</span><span class="sxs-lookup"><span data-stu-id="2285f-131">Optional.</span></span>
      type:
      - excel.Excel.Worksheet
- uid: excel.Excel.Worksheet.delete
  summary: >-
    <span data-ttu-id="2285f-132">Elimina la hoja de cálculo del libro.</span><span class="sxs-lookup"><span data-stu-id="2285f-132">Deletes the worksheet from the workbook.</span></span> <span data-ttu-id="2285f-133">Tenga en cuenta que si la visibilidad de la hoja de cálculo se establece en "VeryHidden", se producirá un error en la operación de eliminación con una GeneralException.</span><span class="sxs-lookup"><span data-stu-id="2285f-133">Note that if the worksheet's visibility is set to "VeryHidden", the delete operation will fail with a GeneralException.</span></span>


    <span data-ttu-id="2285f-134">\[[Conjunto de API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="2285f-134">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: delete()
  fullName: delete()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'delete(): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"2285f-135\">Ejemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"2285f-135\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var wSheetName = 'Sheet1';\n    var worksheet = ctx.workbook.worksheets.getItem(wSheetName);\n    worksheet.delete();\n    return ctx.sync(); \n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: excel.Excel.Worksheet.enableCalculation
  summary: >-
    <span data-ttu-id="2285f-136">Obtiene o establece la propiedad enableCalculation de la hoja de cálculo.</span><span class="sxs-lookup"><span data-stu-id="2285f-136">Gets or sets the enableCalculation property of the worksheet.</span></span> <span data-ttu-id="2285f-137">True si Excel vuelve a calcular la hoja de cálculo cuando es necesario.</span><span class="sxs-lookup"><span data-stu-id="2285f-137">True if Excel recalculates the worksheet when necessary.</span></span> <span data-ttu-id="2285f-138">False si Excel no recalcula la hoja.</span><span class="sxs-lookup"><span data-stu-id="2285f-138">False if Excel doesn't recalculate the sheet.</span></span>


    <span data-ttu-id="2285f-139">\[[Conjunto de API: EXCELAPI beta (solo vista previa)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="2285f-139">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: enableCalculation
  fullName: enableCalculation
  langs:
  - typeScript
  type: property
  syntax:
    content: 'enableCalculation: boolean;'
    return:
      type:
      - boolean
- uid: excel.Excel.Worksheet.findAll
  summary: >-
    <span data-ttu-id="2285f-140">Busca todas las repeticiones de la cadena especificada en función de los criterios especificados y las devuelve como un objeto RangeAreas, que contiene uno o más rangos rectangulares.</span><span class="sxs-lookup"><span data-stu-id="2285f-140">Finds all occurrences of the given string based on the criteria specified and returns them as a RangeAreas object, comprising one or more rectangular ranges.</span></span>


    <span data-ttu-id="2285f-141">\[[Conjunto de API: EXCELAPI beta (solo vista previa)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="2285f-141">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: findAll(text, criteria)
  fullName: findAll(text, criteria)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'findAll(text: string, criteria: Excel.WorksheetSearchCriteria): Excel.RangeAreas;'
    return:
      type:
      - excel.Excel.RangeAreas
      description: <span data-ttu-id="2285f-142">Un objeto RangeArea, formado por uno o más rangos rectangulares, que coincide con los criterios de búsqueda.</span><span class="sxs-lookup"><span data-stu-id="2285f-142">A RangeArea object, comprising one or more rectangular ranges, that matches the search criteria.</span></span> <span data-ttu-id="2285f-143">Si ninguna celda cumple estos criterios, se producirá un error ItemNotFound.</span><span class="sxs-lookup"><span data-stu-id="2285f-143">If no cells meet this criteria, an ItemNotFound error will be thrown.</span></span>
    parameters:
    - id: text
      description: <span data-ttu-id="2285f-144">Cadena que se va a buscar.</span><span class="sxs-lookup"><span data-stu-id="2285f-144">String to find.</span></span>
      type:
      - string
    - id: criteria
      description: <span data-ttu-id="2285f-145">Criterios adicionales.</span><span class="sxs-lookup"><span data-stu-id="2285f-145">Additional Criteria.</span></span>
      type:
      - excel.Excel.WorksheetSearchCriteria
- uid: excel.Excel.Worksheet.findAllOrNullObject
  summary: >-
    <span data-ttu-id="2285f-146">Busca todas las repeticiones de la cadena especificada en función de los criterios especificados y las devuelve como un objeto RangeAreas, que contiene uno o más rangos rectangulares.</span><span class="sxs-lookup"><span data-stu-id="2285f-146">Finds all occurrences of the given string based on the criteria specified and returns them as a RangeAreas object, comprising one or more rectangular ranges.</span></span>


    <span data-ttu-id="2285f-147">\[[Conjunto de API: EXCELAPI beta (solo vista previa)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="2285f-147">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: findAllOrNullObject(text, criteria)
  fullName: findAllOrNullObject(text, criteria)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'findAllOrNullObject(text: string, criteria: Excel.WorksheetSearchCriteria): Excel.RangeAreas;'
    return:
      type:
      - excel.Excel.RangeAreas
      description: >-
        <span data-ttu-id="2285f-148">Un objeto RangeArea, formado por uno o más rangos rectangulares, que coincide con los criterios de búsqueda.</span><span class="sxs-lookup"><span data-stu-id="2285f-148">A RangeArea object, comprising one or more rectangular ranges, that matches the search criteria.</span></span> <span data-ttu-id="2285f-149">Si no hay coincidencias, esta función devolverá un objeto null.</span><span class="sxs-lookup"><span data-stu-id="2285f-149">If there are no matches, this function will return a null object.</span></span>

        #### <a name="examples"></a><span data-ttu-id="2285f-150">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="2285f-150">Examples</span></span>


        ```typescript

        await Excel.run(async (context) => {
            const sheet = context.workbook.worksheets.getItem("Sample");
            const foundRanges = sheet.findAllOrNullObject("Complete", {
                completeMatch: true,
                matchCase: false
            });

            await context.sync();

            if (foundRanges.isNullObject) {
                console.log("No complete projects");
            } else {
                foundRanges.format.fill.color = "green"
            }
        });

        ```
    parameters:
    - id: text
      description: <span data-ttu-id="2285f-151">Cadena que se va a buscar.</span><span class="sxs-lookup"><span data-stu-id="2285f-151">String to find.</span></span>
      type:
      - string
    - id: criteria
      description: <span data-ttu-id="2285f-152">Criterios adicionales.</span><span class="sxs-lookup"><span data-stu-id="2285f-152">Additional Criteria.</span></span>
      type:
      - excel.Excel.WorksheetSearchCriteria
- uid: excel.Excel.Worksheet.freezePanes
  summary: >-
    <span data-ttu-id="2285f-153">Obtiene un objeto que se puede usar para manipular paneles inmovilizados en la hoja de cálculo.</span><span class="sxs-lookup"><span data-stu-id="2285f-153">Gets an object that can be used to manipulate frozen panes on the worksheet.</span></span> <span data-ttu-id="2285f-154">Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="2285f-154">Read-only.</span></span>


    <span data-ttu-id="2285f-155">\[[Conjunto de API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="2285f-155">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: freezePanes
  fullName: freezePanes
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly freezePanes: Excel.WorksheetFreezePanes;'
    return:
      type:
      - excel.Excel.WorksheetFreezePanes
- uid: excel.Excel.Worksheet.getCell
  summary: >-
    <span data-ttu-id="2285f-p113">Obtiene el objeto de intervalo que contiene la celda en función de los números de fila y columna. La celda puede estar fuera de los límites del intervalo principal, siempre y cuando permanezca dentro de la cuadrícula de la hoja de cálculo.</span><span class="sxs-lookup"><span data-stu-id="2285f-p113">Gets the range object containing the single cell based on row and column numbers. The cell can be outside the bounds of its parent range, so long as it stays within the worksheet grid.</span></span>


    <span data-ttu-id="2285f-158">\[[Conjunto de API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="2285f-158">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getCell(row, column)
  fullName: getCell(row, column)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getCell(row: number, column: number): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"2285f-159\">Ejemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"2285f-159\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:F8\";\n    var worksheet = ctx.workbook.worksheets.getItem(sheetName);\n    var cell = worksheet.getCell(0,0);\n    cell.load('address');\n    return ctx.sync().then(function() {\n        console.log(cell.address);\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: row
      description: <span data-ttu-id="2285f-p114">Número de fila de la celda que se va a recuperar. Indizado con cero.</span><span class="sxs-lookup"><span data-stu-id="2285f-p114">The row number of the cell to be retrieved. Zero-indexed.</span></span>
      type:
      - number
    - id: column
      description: <span data-ttu-id="2285f-p115">Número de columna de la celda que se va a recuperar. Indexado con cero.</span><span class="sxs-lookup"><span data-stu-id="2285f-p115">the column number of the cell to be retrieved. Zero-indexed.</span></span>
      type:
      - number
- uid: excel.Excel.Worksheet.getNext
  summary: >-
    <span data-ttu-id="2285f-p116">Obtiene la siguiente hoja de cálculo. Si no hay ninguna hoja de cálculo que siga a esta, este método producirá un error.</span><span class="sxs-lookup"><span data-stu-id="2285f-p116">Gets the worksheet that follows this one. If there are no worksheets following this one, this method will throw an error.</span></span>


    <span data-ttu-id="2285f-166">\[[Conjunto de API: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="2285f-166">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getNext(visibleOnly)
  fullName: getNext(visibleOnly)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getNext(visibleOnly?: boolean): Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"2285f-167\">Ejemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"2285f-167\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheets = context.workbook.worksheets;\n\n    // We don't want to include the default worksheet that was created\n    // when the workbook was created, so our \"firstSheet\" will be the one\n    // after the literal first. Note chaining of navigation methods.\n    const firstSheet = sheets.getFirst().getNext();\n    const lastSheet = sheets.getLast();\n    const firstTaxRateRange = firstSheet.getRange(\"B2\");\n    const lastTaxRateRange = lastSheet.getRange(\"B2\");\n\n    firstSheet.load(\"name\");\n    lastSheet.load(\"name\");\n    firstTaxRateRange.load(\"text\");\n    lastTaxRateRange.load(\"text\");\n\n    await context.sync();\n\n    let firstYear = firstSheet.name.substr(5, 4);\n    let lastYear = lastSheet.name.substr(5, 4);\n    console.log(`Tax Rate change from ${firstYear} to ${lastYear}`, `Tax rate for ${firstYear}: ${firstTaxRateRange.text[0][0]}\\nTax rate for ${lastYear}: ${lastTaxRateRange.text[0][0]}`)\n\n    await context.sync();\n});\n```"
    parameters:
    - id: visibleOnly
      description: <span data-ttu-id="2285f-p117">Opcional. Si es true, solo tiene en cuenta las hojas de cálculo visibles y omite las ocultas.</span><span class="sxs-lookup"><span data-stu-id="2285f-p117">Optional. If true, considers only visible worksheets, skipping over any hidden ones.</span></span>
      type:
      - boolean
- uid: excel.Excel.Worksheet.getNextOrNullObject
  summary: >-
    <span data-ttu-id="2285f-p118">Obtiene la siguiente hoja de cálculo. Si no hay ninguna hoja de cálculo que siga a esta, este método devolverá un objeto NULL.</span><span class="sxs-lookup"><span data-stu-id="2285f-p118">Gets the worksheet that follows this one. If there are no worksheets following this one, this method will return a null object.</span></span>


    <span data-ttu-id="2285f-172">\[[Conjunto de API: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="2285f-172">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getNextOrNullObject(visibleOnly)
  fullName: getNextOrNullObject(visibleOnly)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getNextOrNullObject(visibleOnly?: boolean): Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
      description: ''
    parameters:
    - id: visibleOnly
      description: <span data-ttu-id="2285f-p119">Opcional. Si es true, solo tiene en cuenta las hojas de cálculo visibles y omite las ocultas.</span><span class="sxs-lookup"><span data-stu-id="2285f-p119">Optional. If true, considers only visible worksheets, skipping over any hidden ones.</span></span>
      type:
      - boolean
- uid: excel.Excel.Worksheet.getPrevious
  summary: >-
    <span data-ttu-id="2285f-p120">Obtiene la hoja de cálculo anterior. Si no hay ninguna hoja de cálculo anterior, este método producirá un error.</span><span class="sxs-lookup"><span data-stu-id="2285f-p120">Gets the worksheet that precedes this one. If there are no previous worksheets, this method will throw an error.</span></span>


    <span data-ttu-id="2285f-177">\[[Conjunto de API: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="2285f-177">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getPrevious(visibleOnly)
  fullName: getPrevious(visibleOnly)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getPrevious(visibleOnly?: boolean): Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"2285f-178\">Ejemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"2285f-178\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheets = context.workbook.worksheets;\n    const currentSheet = sheets.getActiveWorksheet();\n    const previousYearSheet = currentSheet.getPrevious();\n    const currentTaxDueRange = currentSheet.getRange(\"C2\");\n    const previousTaxDueRange = previousYearSheet.getRange(\"C2\");\n\n    currentSheet.load(\"name\");\n    previousYearSheet.load(\"name\");\n    currentTaxDueRange.load(\"text\");\n    previousTaxDueRange.load(\"text\");\n\n    await context.sync();\n\n    let currentYear = currentSheet.name.substr(5, 4);\n    let previousYear = previousYearSheet.name.substr(5, 4);\n    console.log(\"Two Year Tax Due Comparison\", `Tax due for ${currentYear} was ${currentTaxDueRange.text[0][0]}\\nTax due for ${previousYear} was ${previousTaxDueRange.text[0][0]}`)\n\n    await context.sync();\n});\n```"
    parameters:
    - id: visibleOnly
      description: <span data-ttu-id="2285f-p121">Opcional. Si es true, solo tiene en cuenta las hojas de cálculo visibles y omite las ocultas.</span><span class="sxs-lookup"><span data-stu-id="2285f-p121">Optional. If true, considers only visible worksheets, skipping over any hidden ones.</span></span>
      type:
      - boolean
- uid: excel.Excel.Worksheet.getPreviousOrNullObject
  summary: >-
    <span data-ttu-id="2285f-p122">Obtiene la hoja de cálculo anterior. Si no hay ninguna hoja de cálculo anterior, este método devolverá un objeto NULL.</span><span class="sxs-lookup"><span data-stu-id="2285f-p122">Gets the worksheet that precedes this one. If there are no previous worksheets, this method will return a null objet.</span></span>


    <span data-ttu-id="2285f-183">\[[Conjunto de API: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="2285f-183">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getPreviousOrNullObject(visibleOnly)
  fullName: getPreviousOrNullObject(visibleOnly)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getPreviousOrNullObject(visibleOnly?: boolean): Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
      description: ''
    parameters:
    - id: visibleOnly
      description: <span data-ttu-id="2285f-p123">Opcional. Si es true, solo tiene en cuenta las hojas de cálculo visibles y omite las ocultas.</span><span class="sxs-lookup"><span data-stu-id="2285f-p123">Optional. If true, considers only visible worksheets, skipping over any hidden ones.</span></span>
      type:
      - boolean
- uid: excel.Excel.Worksheet.getRange
  summary: >-
    <span data-ttu-id="2285f-186">Obtiene el objeto de intervalo, que representa un único bloque rectangular de celdas, especificado por la dirección o el nombre.</span><span class="sxs-lookup"><span data-stu-id="2285f-186">Gets the range object, representing a single rectangular block of cells, specified by the address or name.</span></span>


    <span data-ttu-id="2285f-187">\[[Conjunto de API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="2285f-187">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getRange(address)
  fullName: getRange(address)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getRange(address?: string): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"2285f-188\">Ejemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"2285f-188\">Examples</span></span>\n\n```javascript\n// Below example uses range address to get the range object.\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:F8\";\n    var worksheet = ctx.workbook.worksheets.getItem(sheetName);\n    var range = worksheet.getRange(rangeAddress);\n    range.load('cellCount');\n    return ctx.sync().then(function() {\n        console.log(range.cellCount);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```javascript\n// Below example uses a named-range to get the range object.\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeName = 'MyRange';\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeName);\n    range.load('address');\n    return ctx.sync().then(function() {\n        console.log(range.address);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: address
      description: '<span data-ttu-id="2285f-189">Opcional.</span><span class="sxs-lookup"><span data-stu-id="2285f-189">Optional.</span></span> <span data-ttu-id="2285f-190">La cadena que representa la dirección o el nombre del intervalo.</span><span class="sxs-lookup"><span data-stu-id="2285f-190">The string representing the address or name of the range.</span></span> <span data-ttu-id="2285f-191">Por ejemplo, "a1: B2".</span><span class="sxs-lookup"><span data-stu-id="2285f-191">For example, "A1:B2".</span></span> <span data-ttu-id="2285f-192">Si no se especifica, se devuelve todo el rango de la hoja de cálculo.</span><span class="sxs-lookup"><span data-stu-id="2285f-192">If not specified, the entire worksheet range is returned.</span></span>'
      type:
      - string
- uid: excel.Excel.Worksheet.getRangeByIndexes
  summary: >-
    <span data-ttu-id="2285f-193">Obtiene el objeto de intervalo comenzando en un índice de columna y fila determinado, y que abarca un determinado número de filas y columnas.</span><span class="sxs-lookup"><span data-stu-id="2285f-193">Gets the range object beginning at a particular row index and column index, and spanning a certain number of rows and columns.</span></span>


    <span data-ttu-id="2285f-194">\[[Conjunto de API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="2285f-194">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getRangeByIndexes(startRow, startColumn, rowCount, columnCount)
  fullName: getRangeByIndexes(startRow, startColumn, rowCount, columnCount)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getRangeByIndexes(startRow: number, startColumn: number, rowCount: number, columnCount: number): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: ''
    parameters:
    - id: startRow
      description: <span data-ttu-id="2285f-195">Fila de inicio (indizado con ceros).</span><span class="sxs-lookup"><span data-stu-id="2285f-195">Start row (zero-indexed).</span></span>
      type:
      - number
    - id: startColumn
      description: <span data-ttu-id="2285f-196">Columna de inicio (indizado con ceros).</span><span class="sxs-lookup"><span data-stu-id="2285f-196">Start column (zero-indexed).</span></span>
      type:
      - number
    - id: rowCount
      description: <span data-ttu-id="2285f-197">Número de filas que se van a incluir en el rango.</span><span class="sxs-lookup"><span data-stu-id="2285f-197">Number of rows to include in the range.</span></span>
      type:
      - number
    - id: columnCount
      description: <span data-ttu-id="2285f-198">Número de columnas que se van a incluir en el rango.</span><span class="sxs-lookup"><span data-stu-id="2285f-198">Number of columns to include in the range.</span></span>
      type:
      - number
- uid: excel.Excel.Worksheet.getRanges
  summary: >-
    <span data-ttu-id="2285f-199">Obtiene el objeto RangeAreas, que representa uno o más bloques de rangos rectangulares, especificados por la dirección o el nombre.</span><span class="sxs-lookup"><span data-stu-id="2285f-199">Gets the RangeAreas object, representing one or more blocks of rectangular ranges, specified by the address or name.</span></span>


    <span data-ttu-id="2285f-200">\[[Conjunto de API: EXCELAPI beta (solo vista previa)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="2285f-200">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: getRanges(address)
  fullName: getRanges(address)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getRanges(address?: string): Excel.RangeAreas;'
    return:
      type:
      - excel.Excel.RangeAreas
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"2285f-201\">Ejemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"2285f-201\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n\n    const sheet = context.workbook.worksheets.getActiveWorksheet();\n    const specifiedRanges = sheet.getRanges(\"D3:D5, G3:G5\");\n    specifiedRanges.format.fill.color = \"pink\";\n\n    await context.sync();\n})\n```"
    parameters:
    - id: address
      description: '<span data-ttu-id="2285f-202">Opcional.</span><span class="sxs-lookup"><span data-stu-id="2285f-202">Optional.</span></span> <span data-ttu-id="2285f-203">Una cadena que contiene las direcciones separadas por comas o los nombres de los intervalos individuales.</span><span class="sxs-lookup"><span data-stu-id="2285f-203">A string containing the comma-separated addresses or names of the individual ranges.</span></span> <span data-ttu-id="2285f-204">Por ejemplo, "a1: B2, A5: B5".</span><span class="sxs-lookup"><span data-stu-id="2285f-204">For example, "A1:B2, A5:B5".</span></span> <span data-ttu-id="2285f-205">Si no se especifica, se devuelve un objeto RangeArea para toda la hoja de cálculo.</span><span class="sxs-lookup"><span data-stu-id="2285f-205">If not specified, an RangeArea object for the entire worksheet is returned.</span></span>'
      type:
      - string
- uid: excel.Excel.Worksheet.getUsedRange
  summary: >-
    <span data-ttu-id="2285f-206">El rango utilizado es el más pequeño que engloba las celdas que tienen asignado un valor o formato.</span><span class="sxs-lookup"><span data-stu-id="2285f-206">The used range is the smallest range that encompasses any cells that have a value or formatting assigned to them.</span></span> <span data-ttu-id="2285f-207">Si toda la hoja de cálculo está en blanco, esta función devolverá la celda superior izquierda (es decir, *no* generará un error).</span><span class="sxs-lookup"><span data-stu-id="2285f-207">If the entire worksheet is blank, this function will return the top left cell (i.e. it will *not* throw an error).</span></span>


    <span data-ttu-id="2285f-208">\[[Conjunto de API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="2285f-208">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getUsedRange(valuesOnly)
  fullName: getUsedRange(valuesOnly)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getUsedRange(valuesOnly?: boolean): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"2285f-209\">Ejemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"2285f-209\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var wSheetName = 'Sheet1';\n    var worksheet = ctx.workbook.worksheets.getItem(wSheetName);\n    var usedRange = worksheet.getUsedRange();\n    usedRange.load('address');\n    return ctx.sync().then(function() {\n            console.log(usedRange.address);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: valuesOnly
      description: '<span data-ttu-id="2285f-210">Opcional.</span><span class="sxs-lookup"><span data-stu-id="2285f-210">Optional.</span></span> <span data-ttu-id="2285f-211">Si es true, solo tiene en cuenta las celdas con valores como celdas usadas (ignora el formato).</span><span class="sxs-lookup"><span data-stu-id="2285f-211">If true, considers only cells with values as used cells (ignoring formatting).</span></span> <span data-ttu-id="2285f-212">\[Conjunto de API: ExcelApi 1,2\]</span><span class="sxs-lookup"><span data-stu-id="2285f-212">\[Api set: ExcelApi 1.2\]</span></span>'
      type:
      - boolean
- uid: excel.Excel.Worksheet.getUsedRangeOrNullObject
  summary: >-
    <span data-ttu-id="2285f-p128">El rango usado es el rango más pequeño que abarque todas las celdas que tengan asignado un valor o un formato. Si toda la hoja está en blanco, esta función devolverá un objeto NULL.</span><span class="sxs-lookup"><span data-stu-id="2285f-p128">The used range is the smallest range that encompasses any cells that have a value or formatting assigned to them. If the entire worksheet is blank, this function will return a null object.</span></span>


    <span data-ttu-id="2285f-215">\[[Conjunto de API: ExcelApi 1,4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="2285f-215">\[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getUsedRangeOrNullObject(valuesOnly)
  fullName: getUsedRangeOrNullObject(valuesOnly)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getUsedRangeOrNullObject(valuesOnly?: boolean): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: ''
    parameters:
    - id: valuesOnly
      description: <span data-ttu-id="2285f-p129">Opcional. Solo tiene en cuenta las celdas con valores como celdas usadas.</span><span class="sxs-lookup"><span data-stu-id="2285f-p129">Optional. Considers only cells with values as used cells.</span></span>
      type:
      - boolean
- uid: excel.Excel.Worksheet.horizontalPageBreaks
  summary: >-
    <span data-ttu-id="2285f-218">Obtiene la colección de saltos de página horizontales de la hoja de cálculo.</span><span class="sxs-lookup"><span data-stu-id="2285f-218">Gets the horizontal page break collection for the worksheet.</span></span> <span data-ttu-id="2285f-219">Esta colección solo contiene los saltos de página manuales.</span><span class="sxs-lookup"><span data-stu-id="2285f-219">This collection only contains manual page breaks.</span></span>


    <span data-ttu-id="2285f-220">\[[Conjunto de API: EXCELAPI beta (solo vista previa)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="2285f-220">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: horizontalPageBreaks
  fullName: horizontalPageBreaks
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly horizontalPageBreaks: Excel.PageBreakCollection;'
    return:
      type:
      - excel.Excel.PageBreakCollection
- uid: excel.Excel.Worksheet.id
  summary: >-
    <span data-ttu-id="2285f-p131">Devuelve un valor que identifica de forma única la hoja de cálculo de un libro determinado. El valor del identificador permanece igual, incluso cuando se cambia el nombre de la hoja de cálculo o cuando esta se mueve. Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="2285f-p131">Returns a value that uniquely identifies the worksheet in a given workbook. The value of the identifier remains the same even when the worksheet is renamed or moved. Read-only.</span></span>


    <span data-ttu-id="2285f-224">\[[Conjunto de API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="2285f-224">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: id
  fullName: id
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly id: string;'
    return:
      type:
      - string
- uid: excel.Excel.Worksheet.load
  summary: <span data-ttu-id="2285f-225">Pone en cola un comando para cargar las propiedades especificadas del objeto.</span><span class="sxs-lookup"><span data-stu-id="2285f-225">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="2285f-226">Debe llamar a "context. Sync ()" antes de leer las propiedades.</span><span class="sxs-lookup"><span data-stu-id="2285f-226">You must call "context.sync()" before reading the properties.</span></span>
  remarks: >-
    <span data-ttu-id="2285f-227">Además de esta firma, este método tiene las siguientes firmas:</span><span class="sxs-lookup"><span data-stu-id="2285f-227">In addition to this signature, this method has the following signatures:</span></span>


    <span data-ttu-id="2285f-228">`load(option?: string | string[]): Excel.Worksheet`-Donde opción es una cadena delimitada por comas o una matriz de cadenas que especifican las propiedades que se van a cargar.</span><span class="sxs-lookup"><span data-stu-id="2285f-228">`load(option?: string | string[]): Excel.Worksheet` - Where option is a comma-delimited string or an array of strings that specify the properties to load.</span></span>


    <span data-ttu-id="2285f-229">`load(option?: { select?: string; expand?: string; }): Excel.Worksheet`-Where opción. Select es una cadena delimitada por comas que especifica las propiedades que se van a cargar y Options. Expand es una cadena delimitada por comas que especifica las propiedades de navegación que se deben cargar.</span><span class="sxs-lookup"><span data-stu-id="2285f-229">`load(option?: { select?: string; expand?: string; }): Excel.Worksheet` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>


    <span data-ttu-id="2285f-230">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.Worksheet`-Solo disponible en tipos de colección.</span><span class="sxs-lookup"><span data-stu-id="2285f-230">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.Worksheet` - Only available on collection types.</span></span> <span data-ttu-id="2285f-231">Es similar a la firma anterior.</span><span class="sxs-lookup"><span data-stu-id="2285f-231">It is similar to the preceding signature.</span></span> <span data-ttu-id="2285f-232">Option. Top especifica el número máximo de elementos de colección que se pueden incluir en el resultado.</span><span class="sxs-lookup"><span data-stu-id="2285f-232">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="2285f-233">La opción. SKIP especifica el número de elementos que se deben omitir y que no se incluyen en el resultado.</span><span class="sxs-lookup"><span data-stu-id="2285f-233">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="2285f-234">Si se especifica Option. Top, el conjunto de resultados se iniciará después de omitir el número especificado de elementos.</span><span class="sxs-lookup"><span data-stu-id="2285f-234">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
  name: load(option)
  fullName: load(option)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: Excel.Interfaces.WorksheetLoadOptions): Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
      description: ''
    parameters:
    - id: option
      description: ''
      type:
      - excel.Excel.Interfaces.WorksheetLoadOptions
- uid: excel.Excel.Worksheet.load_1
  summary: <span data-ttu-id="2285f-235">Pone en cola un comando para cargar las propiedades especificadas del objeto.</span><span class="sxs-lookup"><span data-stu-id="2285f-235">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="2285f-236">Debe llamar `context.sync()` antes de leer las propiedades.</span><span class="sxs-lookup"><span data-stu-id="2285f-236">You must call `context.sync()` before reading the properties.</span></span>
  name: load(propertyNames)
  fullName: load(propertyNames)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(propertyNames?: string | string[]): Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"2285f-237\">Ejemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"2285f-237\">Examples</span></span>\n\n```javascript\n// Get worksheet properties based on sheet name.\nExcel.run(function (ctx) { \n    var wSheetName = 'Sheet1';\n    var worksheet = ctx.workbook.worksheets.getItem(wSheetName);\n    worksheet.load('position')\n    return ctx.sync().then(function() {\n            console.log(worksheet.position);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```javascript\n// Set worksheet position. \nExcel.run(function (ctx) { \n    var wSheetName = 'Sheet1';\n    var worksheet = ctx.workbook.worksheets.getItem(wSheetName);\n    worksheet.position = 2;\n    return ctx.sync(); \n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: propertyNames
      description: <span data-ttu-id="2285f-238">Una cadena delimitada por comas o una matriz de cadenas que especifican las propiedades que se van a cargar.</span><span class="sxs-lookup"><span data-stu-id="2285f-238">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
      type:
      - string | string[]
- uid: excel.Excel.Worksheet.load_2
  summary: <span data-ttu-id="2285f-239">Pone en cola un comando para cargar las propiedades especificadas del objeto.</span><span class="sxs-lookup"><span data-stu-id="2285f-239">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="2285f-240">Debe llamar `context.sync()` antes de leer las propiedades.</span><span class="sxs-lookup"><span data-stu-id="2285f-240">You must call `context.sync()` before reading the properties.</span></span>
  name: load(propertyNamesAndPaths)
  fullName: load(propertyNamesAndPaths)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
      description: ''
    parameters:
    - id: propertyNamesAndPaths
      description: <span data-ttu-id="2285f-241">Donde propertyNamesAndPaths. Select es una cadena delimitada por comas que especifica las propiedades que se van a cargar y propertyNamesAndPaths. Expand es una cadena delimitada por comas que especifica las propiedades de navegación que se deben cargar.</span><span class="sxs-lookup"><span data-stu-id="2285f-241">Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>
      type:
      - '{ select?: string; expand?: string; }'
- uid: excel.Excel.Worksheet.name
  summary: >-
    <span data-ttu-id="2285f-242">Nombre para mostrar de la hoja de cálculo.</span><span class="sxs-lookup"><span data-stu-id="2285f-242">The display name of the worksheet.</span></span>


    <span data-ttu-id="2285f-243">\[[Conjunto de API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="2285f-243">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: name
  fullName: name
  langs:
  - typeScript
  type: property
  syntax:
    content: 'name: string;'
    return:
      type:
      - string
- uid: excel.Excel.Worksheet.names
  summary: >-
    <span data-ttu-id="2285f-p136">Colección de nombres en el ámbito de la hoja de cálculo actual. Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="2285f-p136">Collection of names scoped to the current worksheet. Read-only.</span></span>


    <span data-ttu-id="2285f-246">\[[Conjunto de API: ExcelApi 1,4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="2285f-246">\[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: names
  fullName: names
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly names: Excel.NamedItemCollection;'
    return:
      type:
      - excel.Excel.NamedItemCollection
- uid: excel.Excel.Worksheet.onActivated
  summary: >-
    <span data-ttu-id="2285f-247">Se produce cuando se activa la hoja de cálculo.</span><span class="sxs-lookup"><span data-stu-id="2285f-247">Occurs when the worksheet is activated.</span></span>


    <span data-ttu-id="2285f-248">\[[Conjunto de API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="2285f-248">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: onActivated
  fullName: onActivated
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onActivated: OfficeExtension.EventHandlers<Excel.WorksheetActivatedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.WorksheetActivatedEventArgs>
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"2285f-249\">Ejemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"2285f-249\">Examples</span></span>\n\n```javascript\nExcel.run(function (context) {\n    var sheet = context.workbook.worksheets.getItem(\"Sample\");\n    sheet.onActivated.add(function (event) {\n        return Excel.run((context) => {\n            console.log(\"The activated worksheet ID is: \" + event.worksheetId);\n            return context.sync();\n        });\n    });\n    return context.sync();\n});\n```"
- uid: excel.Excel.Worksheet.onCalculated
  summary: >-
    <span data-ttu-id="2285f-250">Se produce cuando se calcula la hoja de cálculo.</span><span class="sxs-lookup"><span data-stu-id="2285f-250">Occurs when the worksheet is calculated.</span></span>


    <span data-ttu-id="2285f-251">\[[Conjunto de API: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="2285f-251">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: onCalculated
  fullName: onCalculated
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onCalculated: OfficeExtension.EventHandlers<Excel.WorksheetCalculatedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.WorksheetCalculatedEventArgs>
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"2285f-252\">Ejemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"2285f-252\">Examples</span></span>\n\n```javascript\nExcel.run(function (context) {\n    var sheet = context.workbook.worksheets.getItem(\"Sample\");\n    sheet.onCalculated.add(function (event) {\n        return Excel.run((context) => {\n            console.log(\"The worksheet has recalculated.\");\n            return context.sync();\n        });\n    });\n    return context.sync();\n});\n```"
- uid: excel.Excel.Worksheet.onChanged
  summary: >-
    <span data-ttu-id="2285f-253">Se produce cuando cambian los datos en una hoja de cálculo específica.</span><span class="sxs-lookup"><span data-stu-id="2285f-253">Occurs when data changed on a specific worksheet.</span></span>


    <span data-ttu-id="2285f-254">\[[Conjunto de API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="2285f-254">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: onChanged
  fullName: onChanged
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onChanged: OfficeExtension.EventHandlers<Excel.WorksheetChangedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.WorksheetChangedEventArgs>
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"2285f-255\">Ejemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"2285f-255\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    let sheet = context.workbook.worksheets.getItem(\"Sample\");\n    sheet.onChanged.add(onChange);\n\n    await context.sync();\n    console.log(\"A handler has been registered for the onChanged event.\");\n});\n```"
- uid: excel.Excel.Worksheet.onDeactivated
  summary: >-
    <span data-ttu-id="2285f-256">Se produce cuando se desactiva la hoja de cálculo.</span><span class="sxs-lookup"><span data-stu-id="2285f-256">Occurs when the worksheet is deactivated.</span></span>


    <span data-ttu-id="2285f-257">\[[Conjunto de API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="2285f-257">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: onDeactivated
  fullName: onDeactivated
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onDeactivated: OfficeExtension.EventHandlers<Excel.WorksheetDeactivatedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.WorksheetDeactivatedEventArgs>
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"2285f-258\">Ejemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"2285f-258\">Examples</span></span>\n\n```javascript\nExcel.run(function (context) {\n    var sheet = context.workbook.worksheets.getItem(\"Sample\");\n    sheet.onDeactivated.add(function (event) {\n        return Excel.run((context) => {\n            console.log(\"The deactivated worksheet is: \" + event.worksheetId);\n            return context.sync();\n        });\n    });\n    return context.sync();\n});\n```"
- uid: excel.Excel.Worksheet.onFiltered
  summary: >-
    <span data-ttu-id="2285f-259">Se produce cuando se aplica un filtro en una hoja de cálculo específica.</span><span class="sxs-lookup"><span data-stu-id="2285f-259">Occurs when filter is applied on a specific worksheet.</span></span>


    <span data-ttu-id="2285f-260">\[[Conjunto de API: EXCELAPI beta (solo vista previa)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="2285f-260">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: onFiltered
  fullName: onFiltered
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onFiltered: OfficeExtension.EventHandlers<Excel.WorksheetFilteredEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.WorksheetFilteredEventArgs>
- uid: excel.Excel.Worksheet.onFormatChanged
  summary: >-
    <span data-ttu-id="2285f-261">Se produce cuando se cambia el formato en una hoja de cálculo específica.</span><span class="sxs-lookup"><span data-stu-id="2285f-261">Occurs when format changed on a specific worksheet.</span></span>


    <span data-ttu-id="2285f-262">\[[Conjunto de API: EXCELAPI beta (solo vista previa)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="2285f-262">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: onFormatChanged
  fullName: onFormatChanged
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onFormatChanged: OfficeExtension.EventHandlers<Excel.WorksheetFormatChangedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.WorksheetFormatChangedEventArgs>
- uid: excel.Excel.Worksheet.onSelectionChanged
  summary: >-
    <span data-ttu-id="2285f-263">Se produce cuando la selección cambia en una hoja de cálculo específica.</span><span class="sxs-lookup"><span data-stu-id="2285f-263">Occurs when the selection changes on a specific worksheet.</span></span>


    <span data-ttu-id="2285f-264">\[[Conjunto de API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="2285f-264">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: onSelectionChanged
  fullName: onSelectionChanged
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onSelectionChanged: OfficeExtension.EventHandlers<Excel.WorksheetSelectionChangedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.WorksheetSelectionChangedEventArgs>
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"2285f-265\">Ejemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"2285f-265\">Examples</span></span>\n\n```javascript\nExcel.run(function (context) {\n    var sheet = context.workbook.worksheets.getItem(\"Sample\");\n    sheet.onSelectionChanged.add(function (event) {\n        return Excel.run((context) => {\n            console.log(\"The selected range has changed to: \" + event.address);\n            return context.sync();\n        });\n    });\n    return context.sync();\n});\n```"
- uid: excel.Excel.Worksheet.pageLayout
  summary: >-
    <span data-ttu-id="2285f-266">Obtiene el objeto PageLayout de la hoja de cálculo.</span><span class="sxs-lookup"><span data-stu-id="2285f-266">Gets the PageLayout object of the worksheet.</span></span>


    <span data-ttu-id="2285f-267">\[[Conjunto de API: EXCELAPI beta (solo vista previa)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="2285f-267">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: pageLayout
  fullName: pageLayout
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly pageLayout: Excel.PageLayout;'
    return:
      type:
      - excel.Excel.PageLayout
- uid: excel.Excel.Worksheet.pivotTables
  summary: >-
    <span data-ttu-id="2285f-p137">Colección de tablas dinámicas que forman parte de la hoja de cálculo. Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="2285f-p137">Collection of PivotTables that are part of the worksheet. Read-only.</span></span>


    <span data-ttu-id="2285f-270">\[[Conjunto de API: ExcelApi 1,3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="2285f-270">\[ [API set: ExcelApi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: pivotTables
  fullName: pivotTables
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly pivotTables: Excel.PivotTableCollection;'
    return:
      type:
      - excel.Excel.PivotTableCollection
- uid: excel.Excel.Worksheet.position
  summary: >-
    <span data-ttu-id="2285f-271">Posición de base cero de la hoja de cálculo dentro del libro.</span><span class="sxs-lookup"><span data-stu-id="2285f-271">The zero-based position of the worksheet within the workbook.</span></span>


    <span data-ttu-id="2285f-272">\[[Conjunto de API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="2285f-272">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: position
  fullName: position
  langs:
  - typeScript
  type: property
  syntax:
    content: 'position: number;'
    return:
      type:
      - number
- uid: excel.Excel.Worksheet.protection
  summary: >-
    <span data-ttu-id="2285f-p138">Devuelve el objeto de protección de hoja de una hoja de cálculo. Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="2285f-p138">Returns sheet protection object for a worksheet. Read-only.</span></span>


    <span data-ttu-id="2285f-275">\[[Conjunto de API: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="2285f-275">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: protection
  fullName: protection
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly protection: Excel.WorksheetProtection;'
    return:
      type:
      - excel.Excel.WorksheetProtection
- uid: excel.Excel.Worksheet.replaceAll
  summary: >-
    <span data-ttu-id="2285f-276">Busca y reemplaza la cadena especificada basándose en los criterios especificados en la hoja de cálculo actual.</span><span class="sxs-lookup"><span data-stu-id="2285f-276">Finds and replaces the given string based on the criteria specified within the current worksheet.</span></span>


    <span data-ttu-id="2285f-277">\[[Conjunto de API: EXCELAPI beta (solo vista previa)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="2285f-277">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: replaceAll(text, replacement, criteria)
  fullName: replaceAll(text, replacement, criteria)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'replaceAll(text: string, replacement: string, criteria: Excel.ReplaceCriteria): OfficeExtension.ClientResult<number>;'
    return:
      type:
      - OfficeExtension.ClientResult<number>
      description: <span data-ttu-id="2285f-278">Número de reemplazos realizados.</span><span class="sxs-lookup"><span data-stu-id="2285f-278">The number of replacements performed.</span></span>
    parameters:
    - id: text
      description: <span data-ttu-id="2285f-279">Cadena que se va a buscar.</span><span class="sxs-lookup"><span data-stu-id="2285f-279">String to find.</span></span>
      type:
      - string
    - id: replacement
      description: <span data-ttu-id="2285f-280">Cadena con la que se va a reemplazar el original.</span><span class="sxs-lookup"><span data-stu-id="2285f-280">String to replace the original with.</span></span>
      type:
      - string
    - id: criteria
      description: <span data-ttu-id="2285f-281">Criterios de reemplazo adicionales.</span><span class="sxs-lookup"><span data-stu-id="2285f-281">Additional Replace Criteria.</span></span>
      type:
      - excel.Excel.ReplaceCriteria
- uid: excel.Excel.Worksheet.set
  summary: <span data-ttu-id="2285f-282">Establece varias propiedades de un objeto al mismo tiempo.</span><span class="sxs-lookup"><span data-stu-id="2285f-282">Sets multiple properties of an object at the same time.</span></span> <span data-ttu-id="2285f-283">Puede pasar un objeto sin formato con las propiedades apropiadas o cualquier otro objeto de la API del mismo tipo.</span><span class="sxs-lookup"><span data-stu-id="2285f-283">You can pass either a plain object with the appropriate properties, or another API object of the same type.</span></span>
  remarks: >-
    <span data-ttu-id="2285f-284">Este método tiene la siguiente firma adicional:</span><span class="sxs-lookup"><span data-stu-id="2285f-284">This method has the following additional signature:</span></span>


    `set(properties: Excel.Worksheet): void`
  name: set(properties, options)
  fullName: set(properties, options)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'set(properties: Interfaces.WorksheetUpdateData, options?: OfficeExtension.UpdateOptions): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: properties
      description: <span data-ttu-id="2285f-285">Objeto de JavaScript con propiedades que se estructuran de forma isomórfico a las propiedades del objeto en el que se llama al método.</span><span class="sxs-lookup"><span data-stu-id="2285f-285">A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.</span></span>
      type:
      - Interfaces.WorksheetUpdateData
    - id: options
      description: <span data-ttu-id="2285f-286">Proporciona una opción para suprimir errores si el objeto Properties intenta establecer propiedades de solo lectura.</span><span class="sxs-lookup"><span data-stu-id="2285f-286">Provides an option to suppress errors if the properties object tries to set any read-only properties.</span></span>
      type:
      - office.OfficeExtension.UpdateOptions
- uid: excel.Excel.Worksheet.set_1
  summary: <span data-ttu-id="2285f-287">Establece varias propiedades en el objeto al mismo tiempo, basándose en un objeto cargado existente.</span><span class="sxs-lookup"><span data-stu-id="2285f-287">Sets multiple properties on the object at the same time, based on an existing loaded object.</span></span>
  name: set(properties)
  fullName: set(properties)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'set(properties: Excel.Worksheet): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: properties
      description: ''
      type:
      - excel.Excel.Worksheet
- uid: excel.Excel.Worksheet.shapes
  summary: >-
    <span data-ttu-id="2285f-288">Devuelve la colección de todos los objetos Shape de la hoja de cálculo.</span><span class="sxs-lookup"><span data-stu-id="2285f-288">Returns the collection of all the Shape objects on the worksheet.</span></span> <span data-ttu-id="2285f-289">Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="2285f-289">Read-only.</span></span>


    <span data-ttu-id="2285f-290">\[[Conjunto de API: EXCELAPI beta (solo vista previa)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="2285f-290">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: shapes
  fullName: shapes
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly shapes: Excel.ShapeCollection;'
    return:
      type:
      - excel.Excel.ShapeCollection
- uid: excel.Excel.Worksheet.showGridlines
  summary: >-
    <span data-ttu-id="2285f-291">Obtiene o establece la marca de las líneas de cuadrícula de la hoja de cálculo.</span><span class="sxs-lookup"><span data-stu-id="2285f-291">Gets or sets the worksheet's gridlines flag.</span></span> <span data-ttu-id="2285f-292">Esta marca determina si el usuario puede ver las líneas de la cuadrícula.</span><span class="sxs-lookup"><span data-stu-id="2285f-292">This flag determines whether gridlines are visible to the user.</span></span>


    <span data-ttu-id="2285f-293">\[[Conjunto de API: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="2285f-293">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: showGridlines
  fullName: showGridlines
  langs:
  - typeScript
  type: property
  syntax:
    content: 'showGridlines: boolean;'
    return:
      type:
      - boolean
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"2285f-294\">Ejemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"2285f-294\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getActiveWorksheet();\n    sheet.showGridlines = true;\n\n    await context.sync();\n});\n```"
- uid: excel.Excel.Worksheet.showHeadings
  summary: >-
    <span data-ttu-id="2285f-295">Obtiene o establece la marca de títulos de la hoja de cálculo.</span><span class="sxs-lookup"><span data-stu-id="2285f-295">Gets or sets the worksheet's headings flag.</span></span> <span data-ttu-id="2285f-296">Esta marca determina si los encabezados son visibles para el usuario.</span><span class="sxs-lookup"><span data-stu-id="2285f-296">This flag determines whether headings are visible to the user.</span></span>


    <span data-ttu-id="2285f-297">\[[Conjunto de API: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="2285f-297">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: showHeadings
  fullName: showHeadings
  langs:
  - typeScript
  type: property
  syntax:
    content: 'showHeadings: boolean;'
    return:
      type:
      - boolean
- uid: excel.Excel.Worksheet.slicers
  summary: >-
    <span data-ttu-id="2285f-298">Devuelve una colección de segmentaciones de los participantes que forman parte de la hoja de cálculo.</span><span class="sxs-lookup"><span data-stu-id="2285f-298">Returns collection of slicers that are part of the worksheet.</span></span> <span data-ttu-id="2285f-299">Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="2285f-299">Read-only.</span></span>


    <span data-ttu-id="2285f-300">\[[Conjunto de API: EXCELAPI beta (solo vista previa)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="2285f-300">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: slicers
  fullName: slicers
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly slicers: Excel.SlicerCollection;'
    return:
      type:
      - excel.Excel.SlicerCollection
- uid: excel.Excel.Worksheet.standardHeight
  summary: >-
    <span data-ttu-id="2285f-301">Devuelve el ancho estándar (predeterminado) de todas las filas de la hoja de cálculo, en puntos.</span><span class="sxs-lookup"><span data-stu-id="2285f-301">Returns the standard (default) height of all the rows in the worksheet, in points.</span></span> <span data-ttu-id="2285f-302">Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="2285f-302">Read-only.</span></span>


    <span data-ttu-id="2285f-303">\[[Conjunto de API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="2285f-303">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: standardHeight
  fullName: standardHeight
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly standardHeight: number;'
    return:
      type:
      - number
- uid: excel.Excel.Worksheet.standardWidth
  summary: >-
    <span data-ttu-id="2285f-304">Devuelve o establece el ancho estándar (predeterminado) de todas las columnas en la hoja de cálculo.</span><span class="sxs-lookup"><span data-stu-id="2285f-304">Returns or sets the standard (default) width of all the columns in the worksheet.</span></span> <span data-ttu-id="2285f-305">Una unidad de ancho de columna es igual al ancho de un carácter en el estilo Normal.</span><span class="sxs-lookup"><span data-stu-id="2285f-305">One unit of column width is equal to the width of one character in the Normal style.</span></span> <span data-ttu-id="2285f-306">En el caso de las fuentes proporcionales, se usa el ancho del carácter 0 (cero).</span><span class="sxs-lookup"><span data-stu-id="2285f-306">For proportional fonts, the width of the character 0 (zero) is used.</span></span>


    <span data-ttu-id="2285f-307">\[[Conjunto de API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="2285f-307">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: standardWidth
  fullName: standardWidth
  langs:
  - typeScript
  type: property
  syntax:
    content: 'standardWidth: number;'
    return:
      type:
      - number
- uid: excel.Excel.Worksheet.tabColor
  summary: >-
    <span data-ttu-id="2285f-308">Obtiene o establece el color de pestaña de hoja de cálculo.</span><span class="sxs-lookup"><span data-stu-id="2285f-308">Gets or sets the worksheet tab color.</span></span> <span data-ttu-id="2285f-309">Al recuperar el color de la pestaña, si la hoja de cálculo es invisible, el valor será null.</span><span class="sxs-lookup"><span data-stu-id="2285f-309">When retrieving the tab color, if the worksheet is invisible, the value will be null.</span></span> <span data-ttu-id="2285f-310">Si la hoja de cálculo está visible pero el color de la pestaña está establecido en automático, se devolverá una cadena vacía.</span><span class="sxs-lookup"><span data-stu-id="2285f-310">If the worksheet is visible but the tab color is set to auto, an empty string will be returned.</span></span> <span data-ttu-id="2285f-311">De lo contrario, la propiedad se establecerá en un color, con el\#formato "123456" cuando se establezca el color, use una cadena vacía para establecer un color "auto" o un color real en caso contrario.</span><span class="sxs-lookup"><span data-stu-id="2285f-311">Otherwise, the property will be set to a color, in the form "\#123456" When setting the color, use an empty-string to set an "auto" color, or a real color otherwise.</span></span>


    <span data-ttu-id="2285f-312">\[[Conjunto de API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="2285f-312">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: tabColor
  fullName: tabColor
  langs:
  - typeScript
  type: property
  syntax:
    content: 'tabColor: string;'
    return:
      type:
      - string
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"2285f-313\">Ejemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"2285f-313\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const activeSheet = context.workbook.worksheets.getActiveWorksheet();\n    activeSheet.tabColor = \"#FF0000\";\n\n    await context.sync();\n});\n```"
- uid: excel.Excel.Worksheet.tables
  summary: >-
    <span data-ttu-id="2285f-p147">Colección de tablas que forman parte de la hoja de cálculo. Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="2285f-p147">Collection of tables that are part of the worksheet. Read-only.</span></span>


    <span data-ttu-id="2285f-316">\[[Conjunto de API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="2285f-316">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: tables
  fullName: tables
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly tables: Excel.TableCollection;'
    return:
      type:
      - excel.Excel.TableCollection
- uid: excel.Excel.Worksheet.toJSON
  summary: <span data-ttu-id="2285f-317">Reemplaza el método de JavaScript `toJSON()` para proporcionar un resultado más útil cuando se pasa un objeto de `JSON.stringify()` <!-- -->la API.</span><span class="sxs-lookup"><span data-stu-id="2285f-317">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`<!-- -->.</span></span> <span data-ttu-id="2285f-318">(`JSON.stringify`<!-- -->a su vez, llama al `toJSON` método del objeto que se le pasa). Mientras que el objeto Excel. Worksheet original es un objeto API, `toJSON` el método devuelve un objeto JavaScript sin formato (escrito `Excel.Interfaces.WorksheetData` <!-- -->como) que contiene las copias rasas de las propiedades secundarias cargadas del objeto original.</span><span class="sxs-lookup"><span data-stu-id="2285f-318">(`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original Excel.Worksheet object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.WorksheetData`<!-- -->) that contains shallow copies of any loaded child properties from the original object.</span></span>
  name: toJSON()
  fullName: toJSON()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON(): Excel.Interfaces.WorksheetData;'
    return:
      type:
      - excel.Excel.Interfaces.WorksheetData
      description: ''
- uid: excel.Excel.Worksheet.verticalPageBreaks
  summary: >-
    <span data-ttu-id="2285f-319">Obtiene la colección de saltos de página verticales para la hoja de cálculo.</span><span class="sxs-lookup"><span data-stu-id="2285f-319">Gets the vertical page break collection for the worksheet.</span></span> <span data-ttu-id="2285f-320">Esta colección solo contiene los saltos de página manuales.</span><span class="sxs-lookup"><span data-stu-id="2285f-320">This collection only contains manual page breaks.</span></span>


    <span data-ttu-id="2285f-321">\[[Conjunto de API: EXCELAPI beta (solo vista previa)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="2285f-321">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: verticalPageBreaks
  fullName: verticalPageBreaks
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly verticalPageBreaks: Excel.PageBreakCollection;'
    return:
      type:
      - excel.Excel.PageBreakCollection
- uid: excel.Excel.Worksheet.visibility
  summary: >-
    <span data-ttu-id="2285f-322">Visibilidad de la hoja de cálculo.</span><span class="sxs-lookup"><span data-stu-id="2285f-322">The Visibility of the worksheet.</span></span>


    <span data-ttu-id="2285f-323">\[[Conjunto de API: ExcelApi 1,1 para la visibilidad de lectura; 1,2 para establecerla.](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)</span><span class="sxs-lookup"><span data-stu-id="2285f-323">\[ [API set: ExcelApi 1.1 for reading visibility; 1.2 for setting it.](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)</span></span> <span data-ttu-id="2285f-324">\]</span><span class="sxs-lookup"><span data-stu-id="2285f-324"></span></span>
  name: visibility
  fullName: visibility
  langs:
  - typeScript
  type: property
  syntax:
    content: 'visibility: Excel.SheetVisibility | "Visible" | "Hidden" | "VeryHidden";'
    return:
      type:
      - Excel.SheetVisibility | "Visible" | "Hidden" | "VeryHidden"
