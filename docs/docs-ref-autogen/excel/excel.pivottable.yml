### YamlMime:UniversalReference
items:
  - uid: excel.Excel.PivotTable
    summary: |-
      Representa una tabla dinámica de Excel.

      \[[Conjunto de API: ExcelApi 1,3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: Excel.PivotTable
    fullName: Excel.PivotTable
    langs:
      - typeScript
    type: class
    extends:
      - office.OfficeExtension.ClientObject
    package: excel
    children:
      - excel.Excel.PivotTable.columnHierarchies
      - excel.Excel.PivotTable.context
      - excel.Excel.PivotTable.dataHierarchies
      - excel.Excel.PivotTable.delete
      - excel.Excel.PivotTable.enableDataValueEditing
      - excel.Excel.PivotTable.filterHierarchies
      - excel.Excel.PivotTable.hierarchies
      - excel.Excel.PivotTable.id
      - excel.Excel.PivotTable.layout
      - excel.Excel.PivotTable.load
      - excel.Excel.PivotTable.load_1
      - excel.Excel.PivotTable.load_2
      - excel.Excel.PivotTable.name
      - excel.Excel.PivotTable.refresh
      - excel.Excel.PivotTable.rowHierarchies
      - excel.Excel.PivotTable.set
      - excel.Excel.PivotTable.set_1
      - excel.Excel.PivotTable.toJSON
      - excel.Excel.PivotTable.useCustomSortLists
      - excel.Excel.PivotTable.worksheet
  - uid: excel.Excel.PivotTable.columnHierarchies
    summary: |-
      Las jerarquías dinámicas de columna de la tabla dinámica.

      \[[Conjunto de API: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: columnHierarchies
    fullName: columnHierarchies
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly columnHierarchies: Excel.RowColumnPivotHierarchyCollection;'
      return:
        type:
          - excel.Excel.RowColumnPivotHierarchyCollection
        description: |-


          #### <a name="examples"></a>Ejemplos

          ```typescript
          await Excel.run(async (context) => {
              const pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem("Farm Sales");       

              // check if the PivotTable already has a column
              const column = pivotTable.columnHierarchies.getItemOrNullObject("Farm");
              column.load("id");
              await context.sync();

              if (column.isNullObject) {
                  // ading the farm column to the column hierarchy automatically removes it from the row hierarchy
                  pivotTable.columnHierarchies.add(pivotTable.hierarchies.getItem("Farm"));
              } else {
                  pivotTable.columnHierarchies.remove(column);
              }

              await context.sync();
          });
          ```
  - uid: excel.Excel.PivotTable.context
    summary: Contexto de la solicitud asociado al objeto. Esto conecta el proceso del complemento con el proceso de la aplicación host de Office.
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - RequestContext
  - uid: excel.Excel.PivotTable.dataHierarchies
    summary: |-
      Las jerarquías dinámicas de datos de la tabla dinámica.

      \[[Conjunto de API: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: dataHierarchies
    fullName: dataHierarchies
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly dataHierarchies: Excel.DataPivotHierarchyCollection;'
      return:
        type:
          - excel.Excel.DataPivotHierarchyCollection
        description: |-


          #### <a name="examples"></a>Ejemplos

          ```typescript
          await Excel.run(async (context) => {
              const pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem("Farm Sales");
              pivotTable.dataHierarchies.add(pivotTable.hierarchies.getItem("Crates Sold at Farm"));
              pivotTable.dataHierarchies.add(pivotTable.hierarchies.getItem("Crates Sold Wholesale"));

              await context.sync();
          });
          ```
  - uid: excel.Excel.PivotTable.delete
    summary: |-
      Elimina la tabla dinámica.

      \[[Conjunto de API: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: delete()
    fullName: delete()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'delete(): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>Ejemplos

          ```typescript
          await Excel.run(async (context) => {
              context.workbook.worksheets.getItem("Pivot").pivotTables.getItem("Farm Sales").delete();

              await context.sync();
          });
          ```
  - uid: excel.Excel.PivotTable.enableDataValueEditing
    summary: |-
      Especifica si la tabla dinámica permite que el usuario edite los valores del cuerpo de datos.

      \[[Conjunto de API: EXCELAPI beta (solo vista previa)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    isPreview: true
    name: enableDataValueEditing
    fullName: enableDataValueEditing
    langs:
      - typeScript
    type: property
    syntax:
      content: 'enableDataValueEditing: boolean;'
      return:
        type:
          - boolean
  - uid: excel.Excel.PivotTable.filterHierarchies
    summary: |-
      Las jerarquías dinámicas de filtro de la tabla dinámica.

      \[[Conjunto de API: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: filterHierarchies
    fullName: filterHierarchies
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly filterHierarchies: Excel.FilterPivotHierarchyCollection;'
      return:
        type:
          - excel.Excel.FilterPivotHierarchyCollection
        description: |-


          #### <a name="examples"></a>Ejemplos

          ```typescript
          async function filter(functionType: Excel.AggregationFunction) {
              await Excel.run(async (context) => {
                  const pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem("Farm Sales");
                  const filters = pivotTable.filterHierarchies;
                  const filter = filters.getItemOrNullObject("Classification");
                  filter.load();
                  await context.sync();

                  // add the Classification hierarchy to the filter, if it's not already there
                  if (filter.isNullObject) {
                      filters.add(pivotTable.hierarchies.getItem("Classification"));
                      await context.sync();
                  }
              });
          }
          ```
  - uid: excel.Excel.PivotTable.hierarchies
    summary: |-
      Las jerarquías dinámicas de la tabla dinámica.

      \[[Conjunto de API: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: hierarchies
    fullName: hierarchies
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly hierarchies: Excel.PivotHierarchyCollection;'
      return:
        type:
          - excel.Excel.PivotHierarchyCollection
  - uid: excel.Excel.PivotTable.id
    summary: |-
      ID la tabla dinámica. Solo lectura.

      \[[Conjunto de API: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: id
    fullName: id
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly id: string;'
      return:
        type:
          - string
  - uid: excel.Excel.PivotTable.layout
    summary: |-
      El PivotLayout que describe el diseño y la estructura visual de la tabla dinámica.

      \[[Conjunto de API: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: layout
    fullName: layout
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly layout: Excel.PivotLayout;'
      return:
        type:
          - excel.Excel.PivotLayout
        description: |-


          #### <a name="examples"></a>Ejemplos

          ```typescript
          await Excel.run(async (context) => {
              const pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem("Farm Sales");
              pivotTable.layout.load("layoutType");
              await context.sync();

              // cycle between the three layout types
              if (pivotTable.layout.layoutType === "Compact") {
                  pivotTable.layout.layoutType = "Outline";
              } else if (pivotTable.layout.layoutType === "Outline") {
                  pivotTable.layout.layoutType = "Tabular";
              } else {
                  pivotTable.layout.layoutType = "Compact";
              }
              await context.sync();
              console.log("Pivot layout is now " + pivotTable.layout.layoutType);
          });
          ```
  - uid: excel.Excel.PivotTable.load
    summary: 'Pone en cola un comando para cargar las propiedades especificadas del objeto. Antes de leer las propiedades, debe llamar a "context.sync()".'
    remarks: |-
      Además de esta firma, este método tiene las siguientes firmas:

      `load(option?: string | string[]): Excel.PivotTable`-Donde opción es una cadena delimitada por comas o una matriz de cadenas que especifican las propiedades que se van a cargar.

      `load(option?: { select?: string; expand?: string; }): Excel.PivotTable`-Where opción. Select es una cadena delimitada por comas que especifica las propiedades que se van a cargar y Options. Expand es una cadena delimitada por comas que especifica las propiedades de navegación que se deben cargar.

      `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.PivotTable`-Solo disponible en tipos de colección. Es similar a la firma anterior. Option. Top especifica el número máximo de elementos de colección que se pueden incluir en el resultado. La opción. SKIP especifica el número de elementos que se deben omitir y que no se incluyen en el resultado. Si se especifica Option. Top, el conjunto de resultados se iniciará después de omitir el número especificado de elementos.
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: Excel.Interfaces.PivotTableLoadOptions): Excel.PivotTable;'
      return:
        type:
          - excel.Excel.PivotTable
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - excel.Excel.Interfaces.PivotTableLoadOptions
  - uid: excel.Excel.PivotTable.load_1
    summary: Pone en cola un comando para cargar las propiedades especificadas del objeto. Debe llamar `context.sync()` antes de leer las propiedades.
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.PivotTable;'
      return:
        type:
          - excel.Excel.PivotTable
        description: ''
      parameters:
        - id: propertyNames
          description: Una cadena delimitada por comas o una matriz de cadenas que especifican las propiedades que se van a cargar.
          type:
            - 'string | string[]'
  - uid: excel.Excel.PivotTable.load_2
    summary: Pone en cola un comando para cargar las propiedades especificadas del objeto. Debe llamar `context.sync()` antes de leer las propiedades.
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): Excel.PivotTable;'
      return:
        type:
          - excel.Excel.PivotTable
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: Donde propertyNamesAndPaths. Select es una cadena delimitada por comas que especifica las propiedades que se van a cargar y propertyNamesAndPaths. Expand es una cadena delimitada por comas que especifica las propiedades de navegación que se deben cargar.
          type:
            - '{ select?: string; expand?: string; }'
  - uid: excel.Excel.PivotTable.name
    summary: |-
      Nombre la tabla dinámica.

      \[[Conjunto de API: ExcelApi 1,3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: name
    fullName: name
    langs:
      - typeScript
    type: property
    syntax:
      content: 'name: string;'
      return:
        type:
          - string
  - uid: excel.Excel.PivotTable.refresh
    summary: |-
      Actualiza la tabla dinámica.

      \[[Conjunto de API: ExcelApi 1,3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: refresh()
    fullName: refresh()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'refresh(): void;'
      return:
        type:
          - void
        description: ''
  - uid: excel.Excel.PivotTable.rowHierarchies
    summary: |-
      Las jerarquías dinámicas de fila de la tabla dinámica.

      \[[Conjunto de API: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: rowHierarchies
    fullName: rowHierarchies
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly rowHierarchies: Excel.RowColumnPivotHierarchyCollection;'
      return:
        type:
          - excel.Excel.RowColumnPivotHierarchyCollection
  - uid: excel.Excel.PivotTable.set
    summary: Establece varias propiedades de un objeto al mismo tiempo. Puede pasar un objeto sin formato con las propiedades apropiadas o cualquier otro objeto de la API del mismo tipo.
    remarks: |-
      Este método tiene la siguiente firma adicional:

      `set(properties: Excel.PivotTable): void`
    name: 'set(properties, options)'
    fullName: 'set(properties, options)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Interfaces.PivotTableUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: Objeto de JavaScript con propiedades que se estructuran de forma isomórfico a las propiedades del objeto en el que se llama al método.
          type:
            - Interfaces.PivotTableUpdateData
        - id: options
          description: Proporciona una opción para suprimir errores si el objeto Properties intenta establecer propiedades de solo lectura.
          type:
            - office.OfficeExtension.UpdateOptions
  - uid: excel.Excel.PivotTable.set_1
    summary: 'Establece varias propiedades en el objeto al mismo tiempo, basándose en un objeto cargado existente.'
    name: set(properties)
    fullName: set(properties)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Excel.PivotTable): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - excel.Excel.PivotTable
  - uid: excel.Excel.PivotTable.toJSON
    summary: 'Reemplaza el método JavaScript `toJSON()` para proporcionar un resultado más útil cuando se pasa un objeto API a`JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, a su vez, llama `toJSON` al método del objeto que se le pasa.) Mientras que el objeto Excel. PivotTable original es un objeto API, `toJSON` el método devuelve un objeto JavaScript sin formato (escrito como`Excel.Interfaces.PivotTableData`<!-- -->) que contiene copias rasas de las propiedades secundarias cargadas del objeto original.'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.PivotTableData;'
      return:
        type:
          - excel.Excel.Interfaces.PivotTableData
        description: ''
  - uid: excel.Excel.PivotTable.useCustomSortLists
    summary: |-
      Especifica si la tabla dinámica utiliza listas personalizadas al ordenar.

      \[[Conjunto de API: EXCELAPI beta (solo vista previa)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    isPreview: true
    name: useCustomSortLists
    fullName: useCustomSortLists
    langs:
      - typeScript
    type: property
    syntax:
      content: 'useCustomSortLists: boolean;'
      return:
        type:
          - boolean
  - uid: excel.Excel.PivotTable.worksheet
    summary: |-
      La hoja de cálculo que contiene la tabla dinámica actual.

      \[[Conjunto de API: ExcelApi 1,3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: worksheet
    fullName: worksheet
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly worksheet: Excel.Worksheet;'
      return:
        type:
          - excel.Excel.Worksheet