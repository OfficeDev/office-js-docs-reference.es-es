### YamlMime:UniversalReference
ms.openlocfilehash: 4f2b6bcc1d2f294cdcbc3fbf75ba3c042f2943e6
ms.sourcegitcommit: 06eebee5e68d349f78e6bc3bb0ef099fe063cf04
ms.translationtype: MT
ms.contentlocale: es-ES
ms.lasthandoff: 01/17/2019
ms.locfileid: "28724370"
items:
- uid: excel.Excel.TableRow
  summary: >-
    <span data-ttu-id="3abf0-101">Representa una fila de una tabla.</span><span class="sxs-lookup"><span data-stu-id="3abf0-101">Represents a row in a table.</span></span>


    <span data-ttu-id="3abf0-102">Tenga en cuenta que, a diferencia de rangos o columnas, que se ajustarán si se agregan nuevas filas o columnas antes de ellos, un objeto TableRow representa la ubicación física de la fila de tabla, pero no los datos.</span><span class="sxs-lookup"><span data-stu-id="3abf0-102">Note that unlike Ranges or Columns, which will adjust if new rows/columns are added before them, a TableRow object represent the physical location of the table row, but not the data.</span></span> <span data-ttu-id="3abf0-103">Es decir, si se ordenan los datos o si se agregan nuevas filas, una fila de tabla seguirá al punto en el índice para el que se creó.</span><span class="sxs-lookup"><span data-stu-id="3abf0-103">That is, if the data is sorted or if new rows are added, a table row will continue to point at the index for which it was created.</span></span>


    <span data-ttu-id="3abf0-104">\[[Conjunto de API: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="3abf0-104">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: Excel.TableRow
  fullName: Excel.TableRow
  langs:
  - typeScript
  type: class
  extends:
  - office.OfficeExtension.ClientObject
  package: excel
  children:
  - excel.Excel.TableRow.context
  - excel.Excel.TableRow.delete
  - excel.Excel.TableRow.getRange
  - excel.Excel.TableRow.index
  - excel.Excel.TableRow.load
  - excel.Excel.TableRow.toJSON
  - excel.Excel.TableRow.values
- uid: excel.Excel.TableRow.context
  summary: <span data-ttu-id="3abf0-105">El contexto de solicitud asociado con el objeto.</span><span class="sxs-lookup"><span data-stu-id="3abf0-105">The request context associated with the object.</span></span> <span data-ttu-id="3abf0-106">Este comando conecta proceso del complemento al proceso de la aplicación host de Office.</span><span class="sxs-lookup"><span data-stu-id="3abf0-106">This connects the add-in's process to the Office host application's process.</span></span>
  name: context
  fullName: context
  langs:
  - typeScript
  type: property
  syntax:
    content: 'context: RequestContext;'
    return:
      type:
      - RequestContext
- uid: excel.Excel.TableRow.delete
  summary: >-
    <span data-ttu-id="3abf0-107">Elimina la fila de la tabla.</span><span class="sxs-lookup"><span data-stu-id="3abf0-107">Deletes the row from the table.</span></span>


    <span data-ttu-id="3abf0-108">\[[Conjunto de API: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="3abf0-108">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: delete()
  fullName: delete
  langs:
  - typeScript
  type: method
  syntax:
    content: 'delete(): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"3abf0-109\">Ejemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"3abf0-109\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var tableName = 'Table1';\n    var row = ctx.workbook.tables.getItem(tableName).rows.getItemAt(2);\n    row.delete();\n    return ctx.sync(); \n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: excel.Excel.TableRow.getRange
  summary: >-
    <span data-ttu-id="3abf0-110">Devuelve el objeto de rango asociado a toda la fila.</span><span class="sxs-lookup"><span data-stu-id="3abf0-110">Returns the range object associated with the entire row.</span></span>


    <span data-ttu-id="3abf0-111">\[[Conjunto de API: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="3abf0-111">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getRange()
  fullName: getRange
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getRange(): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"3abf0-112\">Ejemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"3abf0-112\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var tableName = 'Table1';\n    var row = ctx.workbook.tables.getItem(tableName).rows.getItemAt(0);\n    var rowRange = row.getRange();\n    rowRange.load('address');\n    return ctx.sync().then(function() {\n        console.log(rowRange.address);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: excel.Excel.TableRow.index
  summary: >-
    <span data-ttu-id="3abf0-p103">Devuelve el número de índice de la fila dentro de la colección de filas de la tabla. Indizado con cero. Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="3abf0-p103">Returns the index number of the row within the rows collection of the table. Zero-indexed. Read-only.</span></span>


    <span data-ttu-id="3abf0-116">\[[Conjunto de API: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="3abf0-116">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: index
  fullName: index
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly index: number;'
    return:
      type:
      - number
- uid: excel.Excel.TableRow.load
  summary: <span data-ttu-id="3abf0-117">Colas de seguridad de un comando que se va a cargar las propiedades del objeto especificadas.</span><span class="sxs-lookup"><span data-stu-id="3abf0-117">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="3abf0-118">Se debe llamar a "context.sync()" antes de leer las propiedades.</span><span class="sxs-lookup"><span data-stu-id="3abf0-118">You must call "context.sync()" before reading the properties.</span></span>
  remarks: "<span data-ttu-id=\"3abf0-119\">Además de esta firma, este método no tiene las siguientes firmas:</span><span class=\"sxs-lookup\"><span data-stu-id=\"3abf0-119\">In addition to this signature, this method has the following signatures:</span></span>\n\n<span data-ttu-id=\"3abf0-120\">`load(option?: { select?: string; expand?: string; }): Excel.TableRow`-Donde option.select es una cadena delimitada por comas que especifica las propiedades para cargar y options.expand es una cadena delimitada por comas que especifica las propiedades de navegación para cargar.</span><span class=\"sxs-lookup\"><span data-stu-id=\"3abf0-120\">`load(option?: { select?: string; expand?: string; }): Excel.TableRow` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>\n\n<span data-ttu-id=\"3abf0-121\">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.TableRow`-Sólo está disponible en los tipos de colección.</span><span class=\"sxs-lookup\"><span data-stu-id=\"3abf0-121\">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.TableRow` - Only available on collection types.</span></span> <span data-ttu-id=\"3abf0-122\">Es similar a la firma precedente.</span><span class=\"sxs-lookup\"><span data-stu-id=\"3abf0-122\">It is similar to the preceding signature.</span></span> <span data-ttu-id=\"3abf0-123\">Option.Top especifica el número máximo de elementos de la colección que se puede incluir en el resultado.</span><span class=\"sxs-lookup\"><span data-stu-id=\"3abf0-123\">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id=\"3abf0-124\">Option.Skip especifica el número de elementos que se pasan por alto y no se incluyen en el resultado.</span><span class=\"sxs-lookup\"><span data-stu-id=\"3abf0-124\">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id=\"3abf0-125\">Si se especifica option.top, se iniciará el conjunto de resultados después de omitir el número especificado de elementos.</span><span class=\"sxs-lookup\"><span data-stu-id=\"3abf0-125\">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>\n#### <a name=\"examples\"></a><span data-ttu-id=\"3abf0-126\">Ejemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"3abf0-126\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var tableName = 'Table1';\n    var row = ctx.workbook.tables.getItem(tableName).rows.getItem(0);\n    row.load('index');\n    return ctx.sync().then(function() {\n        console.log(row.index);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```javascript\nExcel.run(function (ctx) { \n    var tables = ctx.workbook.tables;\n    var newValues = [[\"New\", \"Values\", \"For\", \"New\", \"Row\"]];\n    var tableName = 'Table1';\n    var row = ctx.workbook.tables.getItem(tableName).rows.getItemAt(2);\n    row.values = newValues;\n    row.load('values');\n    return ctx.sync().then(function() {\n        console.log(row.values);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
  name: load(option)
  fullName: load
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: string | string[]): Excel.TableRow;'
    return:
      type:
      - excel.Excel.TableRow
      description: ''
    parameters:
    - id: option
      description: <span data-ttu-id="3abf0-127">Una cadena delimitada por comas o una matriz de cadenas que especifican las propiedades de carga.</span><span class="sxs-lookup"><span data-stu-id="3abf0-127">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
      type:
      - string | string[]
- uid: excel.Excel.TableRow.toJSON
  summary: <span data-ttu-id="3abf0-128">Invalida el JavaScript `toJSON()` método con el fin de proporcionar resultados más útiles cuando se pasa un objeto de la API a `JSON.stringify()` <!-- -->.</span><span class="sxs-lookup"><span data-stu-id="3abf0-128">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`<!-- -->.</span></span> <span data-ttu-id="3abf0-129">(`JSON.stringify`<!-- -->, a su vez, llama a la `toJSON` método del objeto que se pasa a ella.) Mientras que el objeto original de Excel.TableRow es un objeto de la API, el `toJSON` método devuelve un objeto de JavaScript sin formato (escrito como `Excel.Interfaces.TableRowData` <!-- -->) que contiene copias superficiales de todas las propiedades del objeto original secundario cargado.</span><span class="sxs-lookup"><span data-stu-id="3abf0-129">(`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original Excel.TableRow object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.TableRowData`<!-- -->) that contains shallow copies of any loaded child properties from the original object.</span></span>
  name: toJSON()
  fullName: toJSON
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON(): Excel.Interfaces.TableRowData;'
    return:
      type:
      - excel.Excel.Interfaces.TableRowData
      description: ''
- uid: excel.Excel.TableRow.values
  summary: >-
    <span data-ttu-id="3abf0-130">Representa los valores sin formato del intervalo especificado.</span><span class="sxs-lookup"><span data-stu-id="3abf0-130">Represents the raw values of the specified range.</span></span> <span data-ttu-id="3abf0-131">Los datos devueltos podrían ser de tipo cadena, número o un valor boolean.</span><span class="sxs-lookup"><span data-stu-id="3abf0-131">The data returned could be of type string, number, or a boolean.</span></span> <span data-ttu-id="3abf0-132">Las celdas que contienen un error devolverá la cadena de error.</span><span class="sxs-lookup"><span data-stu-id="3abf0-132">Cells that contain an error will return the error string.</span></span>


    <span data-ttu-id="3abf0-133">\[[Conjunto de API: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="3abf0-133">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: values
  fullName: values
  langs:
  - typeScript
  type: property
  syntax:
    content: 'values: any[][];'
    return:
      type:
      - any[][]
