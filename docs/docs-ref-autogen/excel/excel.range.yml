### YamlMime:UniversalReference
ms.openlocfilehash: 8538878d7c5ae5deb7dd090b3760f6eaf146efed
ms.sourcegitcommit: 06eebee5e68d349f78e6bc3bb0ef099fe063cf04
ms.translationtype: MT
ms.contentlocale: es-ES
ms.lasthandoff: 01/17/2019
ms.locfileid: "28724965"
items:
- uid: excel.Excel.Range
  summary: >-
    <span data-ttu-id="f91fc-101">Range representa un conjunto de una o más celdas contiguas, como una celda, una fila, una columna, un bloque de celdas, etc.</span><span class="sxs-lookup"><span data-stu-id="f91fc-101">Range represents a set of one or more contiguous cells such as a cell, a row, a column, block of cells, etc.</span></span>


    <span data-ttu-id="f91fc-102">\[[Conjunto de API: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="f91fc-102">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  remarks: <span data-ttu-id="f91fc-103">Nuestra [Guía de procedimientos sobre cómo trabajar con rangos](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-ranges) ha detallados tutoriales, imágenes y ejemplos de código.</span><span class="sxs-lookup"><span data-stu-id="f91fc-103">Our [how-to guide on working with ranges](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-ranges) has detailed walkthroughs, images, and code samples.</span></span>
  name: Excel.Range
  fullName: Excel.Range
  langs:
  - typeScript
  type: class
  extends:
  - office.OfficeExtension.ClientObject
  package: excel
  children:
  - excel.Excel.Range.address
  - excel.Excel.Range.addressLocal
  - excel.Excel.Range.calculate
  - excel.Excel.Range.cellCount
  - excel.Excel.Range.clear
  - excel.Excel.Range.columnCount
  - excel.Excel.Range.columnHidden
  - excel.Excel.Range.columnIndex
  - excel.Excel.Range.conditionalFormats
  - excel.Excel.Range.context
  - excel.Excel.Range.dataValidation
  - excel.Excel.Range.delete
  - excel.Excel.Range.format
  - excel.Excel.Range.formulas
  - excel.Excel.Range.formulasLocal
  - excel.Excel.Range.formulasR1C1
  - excel.Excel.Range.getAbsoluteResizedRange
  - excel.Excel.Range.getBoundingRect
  - excel.Excel.Range.getCell
  - excel.Excel.Range.getColumn
  - excel.Excel.Range.getColumnsAfter
  - excel.Excel.Range.getColumnsBefore
  - excel.Excel.Range.getEntireColumn
  - excel.Excel.Range.getEntireRow
  - excel.Excel.Range.getImage
  - excel.Excel.Range.getIntersection
  - excel.Excel.Range.getIntersectionOrNullObject
  - excel.Excel.Range.getLastCell
  - excel.Excel.Range.getLastColumn
  - excel.Excel.Range.getLastRow
  - excel.Excel.Range.getOffsetRange
  - excel.Excel.Range.getResizedRange
  - excel.Excel.Range.getRow
  - excel.Excel.Range.getRowsAbove
  - excel.Excel.Range.getRowsBelow
  - excel.Excel.Range.getSurroundingRegion
  - excel.Excel.Range.getUsedRange
  - excel.Excel.Range.getUsedRangeOrNullObject
  - excel.Excel.Range.getVisibleView
  - excel.Excel.Range.hidden
  - excel.Excel.Range.hyperlink
  - excel.Excel.Range.insert
  - excel.Excel.Range.isEntireColumn
  - excel.Excel.Range.isEntireRow
  - excel.Excel.Range.load
  - excel.Excel.Range.merge
  - excel.Excel.Range.numberFormat
  - excel.Excel.Range.numberFormatLocal
  - excel.Excel.Range.rowCount
  - excel.Excel.Range.rowHidden
  - excel.Excel.Range.rowIndex
  - excel.Excel.Range.select
  - excel.Excel.Range.showCard
  - excel.Excel.Range.sort
  - excel.Excel.Range.style
  - excel.Excel.Range.text
  - excel.Excel.Range.toJSON
  - excel.Excel.Range.track
  - excel.Excel.Range.unmerge
  - excel.Excel.Range.untrack
  - excel.Excel.Range.values
  - excel.Excel.Range.valueTypes
  - excel.Excel.Range.worksheet
- uid: excel.Excel.Range.address
  summary: >-
    <span data-ttu-id="f91fc-104">Representa la referencia de rango de estilo A1.</span><span class="sxs-lookup"><span data-stu-id="f91fc-104">Represents the range reference in A1-style.</span></span> <span data-ttu-id="f91fc-105">Valor de dirección que contendrá la referencia de hoja (por ejemplo, "Sheet1! A1:B4 ").</span><span class="sxs-lookup"><span data-stu-id="f91fc-105">Address value will contain the Sheet reference (e.g. "Sheet1!A1:B4").</span></span> <span data-ttu-id="f91fc-106">Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="f91fc-106">Read-only.</span></span>


    <span data-ttu-id="f91fc-107">\[[Conjunto de API: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="f91fc-107">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: address
  fullName: address
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly address: string;'
    return:
      type:
      - string
- uid: excel.Excel.Range.addressLocal
  summary: >-
    <span data-ttu-id="f91fc-p102">Representa la referencia del intervalo especificado en el idioma del usuario. Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="f91fc-p102">Represents range reference for the specified range in the language of the user. Read-only.</span></span>


    <span data-ttu-id="f91fc-110">\[[Conjunto de API: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="f91fc-110">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: addressLocal
  fullName: addressLocal
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly addressLocal: string;'
    return:
      type:
      - string
- uid: excel.Excel.Range.calculate
  summary: >-
    <span data-ttu-id="f91fc-111">Calcula un rango de celdas en una hoja de cálculo.</span><span class="sxs-lookup"><span data-stu-id="f91fc-111">Calculates a range of cells on a worksheet.</span></span>


    <span data-ttu-id="f91fc-112">\[[Conjunto de API: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="f91fc-112">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: calculate()
  fullName: calculate
  langs:
  - typeScript
  type: method
  syntax:
    content: 'calculate(): void;'
    return:
      type:
      - void
      description: ''
- uid: excel.Excel.Range.cellCount
  summary: >-
    <span data-ttu-id="f91fc-p103">Número de celdas del intervalo. Esta API devolverá -1 si el recuento de celdas supera 2^31-1 (2 147 483 647). Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="f91fc-p103">Number of cells in the range. This API will return -1 if the cell count exceeds 2^31-1 (2,147,483,647). Read-only.</span></span>


    <span data-ttu-id="f91fc-116">\[[Conjunto de API: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="f91fc-116">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: cellCount
  fullName: cellCount
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly cellCount: number;'
    return:
      type:
      - number
- uid: excel.Excel.Range.clear
  summary: >-
    <span data-ttu-id="f91fc-117">Borrar valores de rango, formato, relleno, borde, etc.</span><span class="sxs-lookup"><span data-stu-id="f91fc-117">Clear range values, format, fill, border, etc.</span></span>


    <span data-ttu-id="f91fc-118">\[[Conjunto de API: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="f91fc-118">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: clear(applyTo)
  fullName: clear
  langs:
  - typeScript
  type: method
  syntax:
    content: 'clear(applyTo?: Excel.ClearApplyTo): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"f91fc-119\">Ejemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"f91fc-119\">Examples</span></span>\n\n```javascript\n// Below example clears format and contents of the range. \nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"D:F\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    range.clear();\n    return ctx.sync(); \n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: applyTo
      description: <span data-ttu-id="f91fc-120">Opcional.</span><span class="sxs-lookup"><span data-stu-id="f91fc-120">Optional.</span></span> <span data-ttu-id="f91fc-121">Determina el tipo de acción Borrar.</span><span class="sxs-lookup"><span data-stu-id="f91fc-121">Determines the type of clear action.</span></span> <span data-ttu-id="f91fc-122">Para obtener información detallada, vea Excel.ClearApplyTo.</span><span class="sxs-lookup"><span data-stu-id="f91fc-122">See Excel.ClearApplyTo for details.</span></span>
      type:
      - excel.Excel.ClearApplyTo
- uid: excel.Excel.Range.columnCount
  summary: >-
    <span data-ttu-id="f91fc-p105">Representa el número total de columnas del intervalo. Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="f91fc-p105">Represents the total number of columns in the range. Read-only.</span></span>


    <span data-ttu-id="f91fc-125">\[[Conjunto de API: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="f91fc-125">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: columnCount
  fullName: columnCount
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly columnCount: number;'
    return:
      type:
      - number
- uid: excel.Excel.Range.columnHidden
  summary: >-
    <span data-ttu-id="f91fc-126">Representa si todas las columnas del intervalo actual están ocultas.</span><span class="sxs-lookup"><span data-stu-id="f91fc-126">Represents if all columns of the current range are hidden.</span></span>


    <span data-ttu-id="f91fc-127">\[[Conjunto de API: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="f91fc-127">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: columnHidden
  fullName: columnHidden
  langs:
  - typeScript
  type: property
  syntax:
    content: 'columnHidden: boolean;'
    return:
      type:
      - boolean
- uid: excel.Excel.Range.columnIndex
  summary: >-
    <span data-ttu-id="f91fc-p106">Representa el número de columna de la primera celda del intervalo. Indizado con cero. Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="f91fc-p106">Represents the column number of the first cell in the range. Zero-indexed. Read-only.</span></span>


    <span data-ttu-id="f91fc-131">\[[Conjunto de API: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="f91fc-131">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: columnIndex
  fullName: columnIndex
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly columnIndex: number;'
    return:
      type:
      - number
- uid: excel.Excel.Range.conditionalFormats
  summary: >-
    <span data-ttu-id="f91fc-p107">Colección de ConditionalFormats que forman una intersección en el intervalo. Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="f91fc-p107">Collection of ConditionalFormats that intersect the range. Read-only.</span></span>


    <span data-ttu-id="f91fc-134">\[[Conjunto de API: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="f91fc-134">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: conditionalFormats
  fullName: conditionalFormats
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly conditionalFormats: Excel.ConditionalFormatCollection;'
    return:
      type:
      - excel.Excel.ConditionalFormatCollection
- uid: excel.Excel.Range.context
  summary: <span data-ttu-id="f91fc-135">El contexto de solicitud asociado con el objeto.</span><span class="sxs-lookup"><span data-stu-id="f91fc-135">The request context associated with the object.</span></span> <span data-ttu-id="f91fc-136">Este comando conecta proceso del complemento al proceso de la aplicación host de Office.</span><span class="sxs-lookup"><span data-stu-id="f91fc-136">This connects the add-in's process to the Office host application's process.</span></span>
  name: context
  fullName: context
  langs:
  - typeScript
  type: property
  syntax:
    content: 'context: RequestContext;'
    return:
      type:
      - RequestContext
- uid: excel.Excel.Range.dataValidation
  summary: >-
    <span data-ttu-id="f91fc-137">Devuelve un objeto de validación de datos.</span><span class="sxs-lookup"><span data-stu-id="f91fc-137">Returns a data validation object.</span></span>


    <span data-ttu-id="f91fc-138">\[[Conjunto de API: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="f91fc-138">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: dataValidation
  fullName: dataValidation
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly dataValidation: Excel.DataValidation;'
    return:
      type:
      - excel.Excel.DataValidation
- uid: excel.Excel.Range.delete
  summary: >-
    <span data-ttu-id="f91fc-139">Elimina las celdas asociadas al rango.</span><span class="sxs-lookup"><span data-stu-id="f91fc-139">Deletes the cells associated with the range.</span></span>


    <span data-ttu-id="f91fc-140">\[[Conjunto de API: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="f91fc-140">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: delete(shift)
  fullName: delete
  langs:
  - typeScript
  type: method
  syntax:
    content: 'delete(shift: Excel.DeleteShiftDirection): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"f91fc-141\">Ejemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"f91fc-141\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"D:F\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    range.delete(\"Left\");\n    return ctx.sync(); \n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: shift
      description: <span data-ttu-id="f91fc-142">Especifica el modo de desplazar las celdas.</span><span class="sxs-lookup"><span data-stu-id="f91fc-142">Specifies which way to shift the cells.</span></span> <span data-ttu-id="f91fc-143">Para obtener información detallada, vea Excel.DeleteShiftDirection.</span><span class="sxs-lookup"><span data-stu-id="f91fc-143">See Excel.DeleteShiftDirection for details.</span></span>
      type:
      - excel.Excel.DeleteShiftDirection
- uid: excel.Excel.Range.format
  summary: >-
    <span data-ttu-id="f91fc-p110">Devuelve un objeto de formato que encapsula la fuente, el relleno, los bordes, la alineación y otras propiedades del intervalo. Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="f91fc-p110">Returns a format object, encapsulating the range's font, fill, borders, alignment, and other properties. Read-only.</span></span>


    <span data-ttu-id="f91fc-146">\[[Conjunto de API: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="f91fc-146">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: format
  fullName: format
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly format: Excel.RangeFormat;'
    return:
      type:
      - excel.Excel.RangeFormat
- uid: excel.Excel.Range.formulas
  summary: >-
    <span data-ttu-id="f91fc-147">Representa la fórmula en notación de estilo A1.</span><span class="sxs-lookup"><span data-stu-id="f91fc-147">Represents the formula in A1-style notation.</span></span> <span data-ttu-id="f91fc-148">Al establecer las fórmulas a un intervalo, el argumento de valor puede ser un valor único (una cadena) o una matriz bidimensional.</span><span class="sxs-lookup"><span data-stu-id="f91fc-148">When setting formulas to a range, the value argument can be either a single value (a string) or a two-dimensional array.</span></span> <span data-ttu-id="f91fc-149">Si el argumento es un valor único, se aplicará a todas las celdas del rango.</span><span class="sxs-lookup"><span data-stu-id="f91fc-149">If the argument is a single value, it will be applied to all cells in the range.</span></span>


    <span data-ttu-id="f91fc-150">\[[Conjunto de API: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="f91fc-150">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: formulas
  fullName: formulas
  langs:
  - typeScript
  type: property
  syntax:
    content: 'formulas: any[][];'
    return:
      type:
      - any[][]
- uid: excel.Excel.Range.formulasLocal
  summary: >-
    <span data-ttu-id="f91fc-151">Representa la fórmula en notación de estilo A1, en formato de número regional y de idioma del usuario.</span><span class="sxs-lookup"><span data-stu-id="f91fc-151">Represents the formula in A1-style notation, in the user's language and number-formatting locale.</span></span> <span data-ttu-id="f91fc-152">Por ejemplo, la fórmula "= SUM (A1, 1,5)" en inglés se convertiría en "= SUMME(A1; 1,5) "en alemán.</span><span class="sxs-lookup"><span data-stu-id="f91fc-152">For example, the English "=SUM(A1, 1.5)" formula would become "=SUMME(A1; 1,5)" in German.</span></span> <span data-ttu-id="f91fc-153">Al establecer las fórmulas a un intervalo, el argumento de valor puede ser un valor único (una cadena) o una matriz bidimensional.</span><span class="sxs-lookup"><span data-stu-id="f91fc-153">When setting formulas to a range, the value argument can be either a single value (a string) or a two-dimensional array.</span></span> <span data-ttu-id="f91fc-154">Si el argumento es un valor único, se aplicará a todas las celdas del rango.</span><span class="sxs-lookup"><span data-stu-id="f91fc-154">If the argument is a single value, it will be applied to all cells in the range.</span></span>


    <span data-ttu-id="f91fc-155">\[[Conjunto de API: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="f91fc-155">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: formulasLocal
  fullName: formulasLocal
  langs:
  - typeScript
  type: property
  syntax:
    content: 'formulasLocal: any[][];'
    return:
      type:
      - any[][]
- uid: excel.Excel.Range.formulasR1C1
  summary: >-
    <span data-ttu-id="f91fc-156">Representa la fórmula en notación de estilo R1C1.</span><span class="sxs-lookup"><span data-stu-id="f91fc-156">Represents the formula in R1C1-style notation.</span></span> <span data-ttu-id="f91fc-157">Al establecer las fórmulas a un intervalo, el argumento de valor puede ser un valor único (una cadena) o una matriz bidimensional.</span><span class="sxs-lookup"><span data-stu-id="f91fc-157">When setting formulas to a range, the value argument can be either a single value (a string) or a two-dimensional array.</span></span> <span data-ttu-id="f91fc-158">Si el argumento es un valor único, se aplicará a todas las celdas del rango.</span><span class="sxs-lookup"><span data-stu-id="f91fc-158">If the argument is a single value, it will be applied to all cells in the range.</span></span>


    <span data-ttu-id="f91fc-159">\[[Conjunto de API: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="f91fc-159">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: formulasR1C1
  fullName: formulasR1C1
  langs:
  - typeScript
  type: property
  syntax:
    content: 'formulasR1C1: any[][];'
    return:
      type:
      - any[][]
- uid: excel.Excel.Range.getAbsoluteResizedRange
  summary: >-
    <span data-ttu-id="f91fc-160">Obtiene un objeto Range con la misma celda superior izquierda que el objeto Range actual, pero con los números de filas y columnas especificados.</span><span class="sxs-lookup"><span data-stu-id="f91fc-160">Gets a Range object with the same top-left cell as the current Range object, but with the specified numbers of rows and columns.</span></span>


    <span data-ttu-id="f91fc-161">\[[Conjunto de API: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="f91fc-161">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getAbsoluteResizedRange(numRows, numColumns)
  fullName: getAbsoluteResizedRange
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getAbsoluteResizedRange(numRows: number, numColumns: number): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: ''
    parameters:
    - id: numRows
      description: <span data-ttu-id="f91fc-162">El número de filas de nuevo el tamaño del intervalo.</span><span class="sxs-lookup"><span data-stu-id="f91fc-162">The number of rows of the new range size.</span></span>
      type:
      - number
    - id: numColumns
      description: <span data-ttu-id="f91fc-163">El número de columnas de nuevo el tamaño del intervalo.</span><span class="sxs-lookup"><span data-stu-id="f91fc-163">The number of columns of the new range size.</span></span>
      type:
      - number
- uid: excel.Excel.Range.getBoundingRect
  summary: >-
    <span data-ttu-id="f91fc-p114">Obtiene el objeto de intervalo más pequeño que abarca los intervalos especificados. Por ejemplo, el valor GetBoundingRect de "B2:C5" y "D10:E15" es "B2:E15".</span><span class="sxs-lookup"><span data-stu-id="f91fc-p114">Gets the smallest range object that encompasses the given ranges. For example, the GetBoundingRect of "B2:C5" and "D10:E15" is "B2:E15".</span></span>


    <span data-ttu-id="f91fc-166">\[[Conjunto de API: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="f91fc-166">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getBoundingRect(anotherRange)
  fullName: getBoundingRect
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getBoundingRect(anotherRange: Range | string): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"f91fc-167\">Ejemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"f91fc-167\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"D4:G6\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    var range = range.getBoundingRect(\"G4:H8\");\n    range.load('address');\n    return ctx.sync().then(function() {\n        console.log(range.address); // Prints Sheet1!D4:H8\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: anotherRange
      description: <span data-ttu-id="f91fc-168">Objeto o dirección de intervalo o nombre de intervalo.</span><span class="sxs-lookup"><span data-stu-id="f91fc-168">The range object or address or range name.</span></span>
      type:
      - Range | string
- uid: excel.Excel.Range.getCell
  summary: >-
    <span data-ttu-id="f91fc-169">Obtiene el objeto range que contiene la celda única basándose en los números de fila y columna.</span><span class="sxs-lookup"><span data-stu-id="f91fc-169">Gets the range object containing the single cell based on row and column numbers.</span></span> <span data-ttu-id="f91fc-170">La celda puede ser fuera de los límites de su rango primario, siempre y cuando permanece dentro de la cuadrícula de la hoja de cálculo.</span><span class="sxs-lookup"><span data-stu-id="f91fc-170">The cell can be outside the bounds of its parent range, so long as it stays within the worksheet grid.</span></span> <span data-ttu-id="f91fc-171">La celda devuelta se encuentra con respecto a la celda superior izquierda del rango.</span><span class="sxs-lookup"><span data-stu-id="f91fc-171">The returned cell is located relative to the top left cell of the range.</span></span>


    <span data-ttu-id="f91fc-172">\[[Conjunto de API: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="f91fc-172">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getCell(row, column)
  fullName: getCell
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getCell(row: number, column: number): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"f91fc-173\">Ejemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"f91fc-173\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:F8\";\n    var worksheet = ctx.workbook.worksheets.getItem(sheetName);\n    var range = worksheet.getRange(rangeAddress);\n    var cell = range.cell(0,0);\n    cell.load('address');\n    return ctx.sync().then(function() {\n        console.log(cell.address);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: row
      description: <span data-ttu-id="f91fc-p116">Número de fila de la celda que se va a recuperar. Indizado con cero.</span><span class="sxs-lookup"><span data-stu-id="f91fc-p116">Row number of the cell to be retrieved. Zero-indexed.</span></span>
      type:
      - number
    - id: column
      description: <span data-ttu-id="f91fc-p117">Número de columna de la celda que se va a recuperar. Indizado con cero.</span><span class="sxs-lookup"><span data-stu-id="f91fc-p117">Column number of the cell to be retrieved. Zero-indexed.</span></span>
      type:
      - number
- uid: excel.Excel.Range.getColumn
  summary: >-
    <span data-ttu-id="f91fc-178">Obtiene una columna contenida en el rango.</span><span class="sxs-lookup"><span data-stu-id="f91fc-178">Gets a column contained in the range.</span></span>


    <span data-ttu-id="f91fc-179">\[[Conjunto de API: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="f91fc-179">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getColumn(column)
  fullName: getColumn
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getColumn(column: number): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"f91fc-180\">Ejemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"f91fc-180\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet19\";\n    var rangeAddress = \"A1:F8\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getColumn(1);\n    range.load('address');\n    return ctx.sync().then(function() {\n        console.log(range.address); // prints Sheet1!B1:B8\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: column
      description: <span data-ttu-id="f91fc-p118">Número de columna del intervalo que se va a recuperar. Indizado con cero.</span><span class="sxs-lookup"><span data-stu-id="f91fc-p118">Column number of the range to be retrieved. Zero-indexed.</span></span>
      type:
      - number
- uid: excel.Excel.Range.getColumnsAfter
  summary: >-
    <span data-ttu-id="f91fc-183">Obtiene un número determinado de columnas a la derecha del objeto Range actual.</span><span class="sxs-lookup"><span data-stu-id="f91fc-183">Gets a certain number of columns to the right of the current Range object.</span></span>


    <span data-ttu-id="f91fc-184">\[[Conjunto de API: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="f91fc-184">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getColumnsAfter(count)
  fullName: getColumnsAfter
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getColumnsAfter(count?: number): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: ''
    parameters:
    - id: count
      description: <span data-ttu-id="f91fc-p119">Opcional. El número de columnas que se va a incluir en el rango resultante. En general, use un número positivo para crear un intervalo fuera del intervalo actual. También puede usar un número negativo para crear un intervalo dentro del intervalo actual. El valor predeterminado es 1.</span><span class="sxs-lookup"><span data-stu-id="f91fc-p119">Optional. The number of columns to include in the resulting range. In general, use a positive number to create a range outside the current range. You can also use a negative number to create a range within the current range. The default value is 1.</span></span>
      type:
      - number
- uid: excel.Excel.Range.getColumnsBefore
  summary: >-
    <span data-ttu-id="f91fc-190">Obtiene un número determinado de columnas a la izquierda del objeto Range actual.</span><span class="sxs-lookup"><span data-stu-id="f91fc-190">Gets a certain number of columns to the left of the current Range object.</span></span>


    <span data-ttu-id="f91fc-191">\[[Conjunto de API: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="f91fc-191">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getColumnsBefore(count)
  fullName: getColumnsBefore
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getColumnsBefore(count?: number): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: ''
    parameters:
    - id: count
      description: <span data-ttu-id="f91fc-p120">Opcional. El número de columnas que se va a incluir en el rango resultante. En general, use un número positivo para crear un intervalo fuera del intervalo actual. También puede usar un número negativo para crear un intervalo dentro del intervalo actual. El valor predeterminado es 1.</span><span class="sxs-lookup"><span data-stu-id="f91fc-p120">Optional. The number of columns to include in the resulting range. In general, use a positive number to create a range outside the current range. You can also use a negative number to create a range within the current range. The default value is 1.</span></span>
      type:
      - number
- uid: excel.Excel.Range.getEntireColumn
  summary: >-
    <span data-ttu-id="f91fc-197">Obtiene un objeto object que representa toda la columna del rango (por ejemplo, si el intervalo actual representa las celdas "B4:E11", su `getEntireColumn` es un rango que representa las columnas "B:E").</span><span class="sxs-lookup"><span data-stu-id="f91fc-197">Gets an object that represents the entire column of the range (for example, if the current range represents cells "B4:E11", its `getEntireColumn` is a range that represents columns "B:E").</span></span>


    <span data-ttu-id="f91fc-198">\[[Conjunto de API: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="f91fc-198">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getEntireColumn()
  fullName: getEntireColumn
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getEntireColumn(): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"f91fc-199\">Ejemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"f91fc-199\">Examples</span></span>\n\n```javascript\n// Note: the grid properties of the Range (values, numberFormat, formulas) \n// contains null since the Range in question is unbounded.\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"D:F\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    var rangeEC = range.getEntireColumn();\n    rangeEC.load('address');\n    return ctx.sync().then(function() {\n        console.log(rangeEC.address);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: excel.Excel.Range.getEntireRow
  summary: >-
    <span data-ttu-id="f91fc-200">Obtiene un objeto object que representa toda la fila del intervalo (por ejemplo, si el intervalo actual representa las celdas "B4:E11", su `GetEntireRow` es un rango que representa las filas de "4:11").</span><span class="sxs-lookup"><span data-stu-id="f91fc-200">Gets an object that represents the entire row of the range (for example, if the current range represents cells "B4:E11", its `GetEntireRow` is a range that represents rows "4:11").</span></span>


    <span data-ttu-id="f91fc-201">\[[Conjunto de API: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="f91fc-201">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getEntireRow()
  fullName: getEntireRow
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getEntireRow(): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"f91fc-202\">Ejemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"f91fc-202\">Examples</span></span>\n\n```javascript\n// Gets an object that represents the entire row of the range \n// (for example, if the current range represents cells \"B4:E11\", \n// its GetEntireRow is a range that represents rows \"4:11\").\nExcel.run(function (ctx) {\n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"D:F\"; \n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    var rangeER = range.getEntireRow();\n    rangeER.load('address');\n    return ctx.sync().then(function() {\n        console.log(rangeER.address);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: excel.Excel.Range.getImage
  summary: >-
    <span data-ttu-id="f91fc-203">El intervalo se representa como una imagen png con codificación base64.</span><span class="sxs-lookup"><span data-stu-id="f91fc-203">Renders the range as a base64-encoded png image.</span></span>


    <span data-ttu-id="f91fc-204">\[[Conjunto de API: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="f91fc-204">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getImage()
  fullName: getImage
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getImage(): OfficeExtension.ClientResult<string>;'
    return:
      type:
      - OfficeExtension.ClientResult<string>
      description: ''
- uid: excel.Excel.Range.getIntersection
  summary: >-
    <span data-ttu-id="f91fc-205">Obtiene el objeto de rango que representa la intersección rectangular de los rangos especificados.</span><span class="sxs-lookup"><span data-stu-id="f91fc-205">Gets the range object that represents the rectangular intersection of the given ranges.</span></span>


    <span data-ttu-id="f91fc-206">\[[Conjunto de API: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="f91fc-206">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getIntersection(anotherRange)
  fullName: getIntersection
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getIntersection(anotherRange: Range | string): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"f91fc-207\">Ejemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"f91fc-207\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:F8\";\n    var range = \n        ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getIntersection(\"D4:G6\");\n    range.load('address');\n    return ctx.sync().then(function() {\n        console.log(range.address); // prints Sheet1!D4:F6\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: anotherRange
      description: <span data-ttu-id="f91fc-208">Objeto de intervalo o dirección de intervalo que se usará para determinar la intersección de los intervalos.</span><span class="sxs-lookup"><span data-stu-id="f91fc-208">The range object or range address that will be used to determine the intersection of ranges.</span></span>
      type:
      - Range | string
- uid: excel.Excel.Range.getIntersectionOrNullObject
  summary: >-
    <span data-ttu-id="f91fc-p121">Obtiene el objeto de intervalo que representa la intersección rectangular de los intervalos especificados. Si no se encuentra ninguna intersección, se devolverá un objeto NULL.</span><span class="sxs-lookup"><span data-stu-id="f91fc-p121">Gets the range object that represents the rectangular intersection of the given ranges. If no intersection is found, will return a null object.</span></span>


    <span data-ttu-id="f91fc-211">\[[Conjunto de API: ExcelApi 1,4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="f91fc-211">\[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getIntersectionOrNullObject(anotherRange)
  fullName: getIntersectionOrNullObject
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getIntersectionOrNullObject(anotherRange: Range | string): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"f91fc-212\">Ejemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"f91fc-212\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const salesTable = sheet.tables.getItem(\"SalesTable\");\n    const dataRange = salesTable.getDataBodyRange();\n\n    // We want the most recent quarter that has data, so\n    // exclude quarters without data and get the last of\n    // the remaining columns.\n    const usedDataRange = dataRange.getUsedRange(true /* valuesOnly */);\n    const currentQuarterRange = usedDataRange.getLastColumn();\n\n    // Asian and European teams have separate contests.\n    const asianSalesRange = sheet.getRange(\"A2:E4\");\n    const europeanSalesRange = sheet.getRange(\"A5:E7\");\n\n    // The data for each chart is the intersection of the\n    // current quarter column and the rows for the continent.\n    const asianContestRange = asianSalesRange.getIntersectionOrNullObject(currentQuarterRange);\n    const europeanContestRange = europeanSalesRange.getIntersectionOrNullObject(currentQuarterRange);\n\n    // Must sync before you can test the output of *OrNullObject\n    // method/property.\n    await context.sync();\n\n    if (asianContestRange.isNullObject) {\n        // See the declaration of this method for how to\n        // test this code path.\n        reportMissingData(\"Asian\");\n    } else {\n        createContinentChart(\n            sheet,\n            \"Asian\",\n            asianContestRange,\n            \"A9\",\n            \"F24\"\n        );\n    }\n\n    if (europeanContestRange.isNullObject) {\n        // See the declaration of this method for how to\n        // test this code path.\n        reportMissingData(\"European\");\n    } else {\n        createContinentChart(\n            sheet,\n            \"European\",\n            europeanContestRange,\n            \"A25\",\n            \"F40\"\n        );\n    }\n\n    await context.sync();\n});\n```"
    parameters:
    - id: anotherRange
      description: <span data-ttu-id="f91fc-213">Objeto de intervalo o dirección de intervalo que se usará para determinar la intersección de los intervalos.</span><span class="sxs-lookup"><span data-stu-id="f91fc-213">The range object or range address that will be used to determine the intersection of ranges.</span></span>
      type:
      - Range | string
- uid: excel.Excel.Range.getLastCell
  summary: >-
    <span data-ttu-id="f91fc-p122">Obtiene la última celda del intervalo. Por ejemplo, la última celda de "B2:D5" es "D5".</span><span class="sxs-lookup"><span data-stu-id="f91fc-p122">Gets the last cell within the range. For example, the last cell of "B2:D5" is "D5".</span></span>


    <span data-ttu-id="f91fc-216">\[[Conjunto de API: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="f91fc-216">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getLastCell()
  fullName: getLastCell
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getLastCell(): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"f91fc-217\">Ejemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"f91fc-217\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:F8\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getLastCell();\n    range.load('address');\n    return ctx.sync().then(function() {\n        console.log(range.address); // prints Sheet1!F8\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: excel.Excel.Range.getLastColumn
  summary: >-
    <span data-ttu-id="f91fc-p123">Obtiene la última columna del intervalo. Por ejemplo, la última columna de "B2:D5" es "D2:D5".</span><span class="sxs-lookup"><span data-stu-id="f91fc-p123">Gets the last column within the range. For example, the last column of "B2:D5" is "D2:D5".</span></span>


    <span data-ttu-id="f91fc-220">\[[Conjunto de API: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="f91fc-220">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getLastColumn()
  fullName: getLastColumn
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getLastColumn(): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"f91fc-221\">Ejemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"f91fc-221\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:F8\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getLastColumn();\n    range.load('address');\n    return ctx.sync().then(function() {\n        console.log(range.address); // prints Sheet1!F1:F8\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: excel.Excel.Range.getLastRow
  summary: >-
    <span data-ttu-id="f91fc-p124">Obtiene la última fila del intervalo. Por ejemplo, la última fila de "B2:D5" es "B5:D5".</span><span class="sxs-lookup"><span data-stu-id="f91fc-p124">Gets the last row within the range. For example, the last row of "B2:D5" is "B5:D5".</span></span>


    <span data-ttu-id="f91fc-224">\[[Conjunto de API: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="f91fc-224">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getLastRow()
  fullName: getLastRow
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getLastRow(): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"f91fc-225\">Ejemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"f91fc-225\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:F8\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getLastRow();\n    range.load('address');\n    return ctx.sync().then(function() {\n        console.log(range.address); // prints Sheet1!A8:F8\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: excel.Excel.Range.getOffsetRange
  summary: >-
    <span data-ttu-id="f91fc-p125">Obtiene un objeto que representa un intervalo desplazado con respecto al intervalo especificado. La dimensión del rango devuelto coincidirá con este rango. Si el rango resultante se fuerza más allá de los límites de la cuadrícula de la hoja de cálculo, se producirá un error.</span><span class="sxs-lookup"><span data-stu-id="f91fc-p125">Gets an object which represents a range that's offset from the specified range. The dimension of the returned range will match this range. If the resulting range is forced outside the bounds of the worksheet grid, an error will be thrown.</span></span>


    <span data-ttu-id="f91fc-229">\[[Conjunto de API: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="f91fc-229">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getOffsetRange(rowOffset, columnOffset)
  fullName: getOffsetRange
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getOffsetRange(rowOffset: number, columnOffset: number): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"f91fc-230\">Ejemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"f91fc-230\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"D4:F6\";\n    var range = \n        ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getOffsetRange(-1,4);\n    range.load('address');\n    return ctx.sync().then(function() {\n        console.log(range.address); // prints Sheet1!H3:K5\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: rowOffset
      description: <span data-ttu-id="f91fc-p126">Número de filas (número positivo, negativo o 0) que debe desplazarse el intervalo. Los valores positivos desplazan hacia abajo, mientras que los negativos lo hacen hacia arriba.</span><span class="sxs-lookup"><span data-stu-id="f91fc-p126">The number of rows (positive, negative, or 0) by which the range is to be offset. Positive values are offset downward, and negative values are offset upward.</span></span>
      type:
      - number
    - id: columnOffset
      description: <span data-ttu-id="f91fc-p127">Número de columnas (número positivo, negativo o 0) que debe desplazarse el rango. Los valores positivos desplazan hacia la derecha, mientras que los negativos lo hacen hacia la izquierda.</span><span class="sxs-lookup"><span data-stu-id="f91fc-p127">The number of columns (positive, negative, or 0) by which the range is to be offset. Positive values are offset to the right, and negative values are offset to the left.</span></span>
      type:
      - number
- uid: excel.Excel.Range.getResizedRange
  summary: >-
    <span data-ttu-id="f91fc-235">Obtiene un objeto Range similar al objeto Range actual, pero con su esquina inferior derecha expandida (o contraída) mediante un número de filas y columnas.</span><span class="sxs-lookup"><span data-stu-id="f91fc-235">Gets a Range object similar to the current Range object, but with its bottom-right corner expanded (or contracted) by some number of rows and columns.</span></span>


    <span data-ttu-id="f91fc-236">\[[Conjunto de API: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="f91fc-236">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getResizedRange(deltaRows, deltaColumns)
  fullName: getResizedRange
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getResizedRange(deltaRows: number, deltaColumns: number): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: ''
    parameters:
    - id: deltaRows
      description: <span data-ttu-id="f91fc-p128">El número de filas en el que se va a expandir la esquina inferior derecha, con respecto al intervalo actual. Use un número positivo para expandir el intervalo, o un número negativo para reducirlo.</span><span class="sxs-lookup"><span data-stu-id="f91fc-p128">The number of rows by which to expand the bottom-right corner, relative to the current range. Use a positive number to expand the range, or a negative number to decrease it.</span></span>
      type:
      - number
    - id: deltaColumns
      description: <span data-ttu-id="f91fc-239">El número de columnas que se usará expandir la esquina inferior derecha, en relación con el intervalo actual.</span><span class="sxs-lookup"><span data-stu-id="f91fc-239">The number of columns by which to expand the bottom-right corner, relative to the current range.</span></span> <span data-ttu-id="f91fc-240">Use un número positivo para expandir el intervalo o un número negativo para reducirlo.</span><span class="sxs-lookup"><span data-stu-id="f91fc-240">Use a positive number to expand the range, or a negative number to decrease it.</span></span>
      type:
      - number
- uid: excel.Excel.Range.getRow
  summary: >-
    <span data-ttu-id="f91fc-241">Obtiene una fila contenida en el rango.</span><span class="sxs-lookup"><span data-stu-id="f91fc-241">Gets a row contained in the range.</span></span>


    <span data-ttu-id="f91fc-242">\[[Conjunto de API: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="f91fc-242">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getRow(row)
  fullName: getRow
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getRow(row: number): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"f91fc-243\">Ejemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"f91fc-243\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:F8\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getRow(1);\n    range.load('address');\n    return ctx.sync().then(function() {\n        console.log(range.address); // prints Sheet1!A2:F2\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: row
      description: <span data-ttu-id="f91fc-p130">Número de fila del intervalo que se va a recuperar. Indizado con cero.</span><span class="sxs-lookup"><span data-stu-id="f91fc-p130">Row number of the range to be retrieved. Zero-indexed.</span></span>
      type:
      - number
- uid: excel.Excel.Range.getRowsAbove
  summary: >-
    <span data-ttu-id="f91fc-246">Obtiene un número determinado de filas encima del objeto Range actual.</span><span class="sxs-lookup"><span data-stu-id="f91fc-246">Gets a certain number of rows above the current Range object.</span></span>


    <span data-ttu-id="f91fc-247">\[[Conjunto de API: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="f91fc-247">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getRowsAbove(count)
  fullName: getRowsAbove
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getRowsAbove(count?: number): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: ''
    parameters:
    - id: count
      description: <span data-ttu-id="f91fc-p131">Opcional. El número de filas que se va a incluir en el intervalo resultante. En general, use un número positivo para crear un intervalo fuera del intervalo actual. También puede usar un número negativo para crear un intervalo dentro del intervalo actual. El valor predeterminado es 1.</span><span class="sxs-lookup"><span data-stu-id="f91fc-p131">Optional. The number of rows to include in the resulting range. In general, use a positive number to create a range outside the current range. You can also use a negative number to create a range within the current range. The default value is 1.</span></span>
      type:
      - number
- uid: excel.Excel.Range.getRowsBelow
  summary: >-
    <span data-ttu-id="f91fc-253">Obtiene un número determinado de filas debajo del objeto Range actual.</span><span class="sxs-lookup"><span data-stu-id="f91fc-253">Gets a certain number of rows below the current Range object.</span></span>


    <span data-ttu-id="f91fc-254">\[[Conjunto de API: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="f91fc-254">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getRowsBelow(count)
  fullName: getRowsBelow
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getRowsBelow(count?: number): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: ''
    parameters:
    - id: count
      description: <span data-ttu-id="f91fc-p132">Opcional. El número de filas que se va a incluir en el intervalo resultante. En general, use un número positivo para crear un intervalo fuera del intervalo actual. También puede usar un número negativo para crear un intervalo dentro del intervalo actual. El valor predeterminado es 1.</span><span class="sxs-lookup"><span data-stu-id="f91fc-p132">Optional. The number of rows to include in the resulting range. In general, use a positive number to create a range outside the current range. You can also use a negative number to create a range within the current range. The default value is 1.</span></span>
      type:
      - number
- uid: excel.Excel.Range.getSurroundingRegion
  summary: >-
    <span data-ttu-id="f91fc-260">Devuelve un objeto Range que representa la región circundante para la celda superior izquierda de este intervalo.</span><span class="sxs-lookup"><span data-stu-id="f91fc-260">Returns a Range object that represents the surrounding region for the top-left cell in this range.</span></span> <span data-ttu-id="f91fc-261">Una región circundante es un intervalo limitado por cualquier combinación de filas y columnas en blanco en relación a este intervalo.</span><span class="sxs-lookup"><span data-stu-id="f91fc-261">A surrounding region is a range bounded by any combination of blank rows and blank columns relative to this range.</span></span>


    <span data-ttu-id="f91fc-262">\[[Conjunto de API: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="f91fc-262">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getSurroundingRegion()
  fullName: getSurroundingRegion
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getSurroundingRegion(): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: ''
- uid: excel.Excel.Range.getUsedRange
  summary: >-
    <span data-ttu-id="f91fc-p134">Devuelve el rango usado del objeto de rango especificado. Si no hay ninguna celda usada dentro del rango, esta función producirá un error ItemNotFound.</span><span class="sxs-lookup"><span data-stu-id="f91fc-p134">Returns the used range of the given range object. If there are no used cells within the range, this function will throw an ItemNotFound error.</span></span>


    <span data-ttu-id="f91fc-265">\[[Conjunto de API: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="f91fc-265">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getUsedRange(valuesOnly)
  fullName: getUsedRange
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getUsedRange(valuesOnly?: boolean): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"f91fc-266\">Ejemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"f91fc-266\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"D:F\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    var rangeUR = range.getUsedRange();\n    rangeUR.load('address');\n    return ctx.sync().then(function() {\n        console.log(rangeUR.address);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const salesTable = sheet.tables.getItem(\"SalesTable\");\n    const dataRange = salesTable.getDataBodyRange();\n\n    // We want the most recent quarter that has data, so\n    // exclude quarters without data and get the last of\n    // the remaining columns.\n    const usedDataRange = dataRange.getUsedRange(true /* valuesOnly */);\n    const currentQuarterRange = usedDataRange.getLastColumn();\n\n    // Asian and European teams have separate contests.\n    const asianSalesRange = sheet.getRange(\"A2:E4\");\n    const europeanSalesRange = sheet.getRange(\"A5:E7\");\n\n    // The data for each chart is the intersection of the\n    // current quarter column and the rows for the continent.\n    const asianContestRange = asianSalesRange.getIntersectionOrNullObject(currentQuarterRange);\n    const europeanContestRange = europeanSalesRange.getIntersectionOrNullObject(currentQuarterRange);\n\n    // Must sync before you can test the output of *OrNullObject\n    // method/property.\n    await context.sync();\n\n    if (asianContestRange.isNullObject) {\n        // See the declaration of this method for how to\n        // test this code path.\n        reportMissingData(\"Asian\");\n    } else {\n        createContinentChart(\n            sheet,\n            \"Asian\",\n            asianContestRange,\n            \"A9\",\n            \"F24\"\n        );\n    }\n\n    if (europeanContestRange.isNullObject) {\n        // See the declaration of this method for how to\n        // test this code path.\n        reportMissingData(\"European\");\n    } else {\n        createContinentChart(\n            sheet,\n            \"European\",\n            europeanContestRange,\n            \"A25\",\n            \"F40\"\n        );\n    }\n\n    await context.sync();\n});\n```"
    parameters:
    - id: valuesOnly
      description: '<span data-ttu-id="f91fc-267">Solo tiene en cuenta las celdas con valores como celdas usadas.</span><span class="sxs-lookup"><span data-stu-id="f91fc-267">Considers only cells with values as used cells.</span></span> <span data-ttu-id="f91fc-268">\[Conjunto de API: ExcelApi 1.2\]</span><span class="sxs-lookup"><span data-stu-id="f91fc-268">\[Api set: ExcelApi 1.2\]</span></span>'
      type:
      - boolean
- uid: excel.Excel.Range.getUsedRangeOrNullObject
  summary: >-
    <span data-ttu-id="f91fc-p136">Devuelve el rango usado del objeto de rango especificado. Si no hay ninguna celda usada dentro del rango, esta función devolverá un objeto NULL.</span><span class="sxs-lookup"><span data-stu-id="f91fc-p136">Returns the used range of the given range object. If there are no used cells within the range, this function will return a null object.</span></span>


    <span data-ttu-id="f91fc-271">\[[Conjunto de API: ExcelApi 1,4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="f91fc-271">\[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getUsedRangeOrNullObject(valuesOnly)
  fullName: getUsedRangeOrNullObject
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getUsedRangeOrNullObject(valuesOnly?: boolean): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"f91fc-272\">Ejemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"f91fc-272\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const salesTable = sheet.tables.getItem(\"SalesTable\");\n    const dataRange = salesTable.getDataBodyRange();\n\n    // Pass true so only cells with values count as used\n    const usedDataRange = dataRange.getUsedRangeOrNullObject(\n        true /* valuesOnly */\n    );\n\n    //Must sync before reading value returned from *OrNullObject method/property.\n    await context.sync();\n\n    if (usedDataRange.isNullObject) {\n        OfficeHelpers.UI.notify(\n            \"Need Data to Make Chart\",\n            \"To create a meaningful chart, press 'Fill the table' (or add names to the Product column and numbers to some of the other cells). Then press 'Try to create chart' again.\"\n        );\n    } else {\n        const chart = sheet.charts.add(\n            Excel.ChartType.columnClustered,\n            dataRange,\n            \"Columns\"\n        );\n        chart.setPosition(\"A15\", \"F30\");\n        chart.title.text = \"Quarterly sales chart\";\n        chart.legend.position = \"Right\";\n        chart.legend.format.fill.setSolidColor(\"white\");\n        chart.dataLabels.format.font.size = 15;\n        chart.dataLabels.format.font.color = \"black\";\n    }\n\n    await context.sync();\n});\n```"
    parameters:
    - id: valuesOnly
      description: <span data-ttu-id="f91fc-273">Solo tiene en cuenta las celdas con valores como celdas usadas.</span><span class="sxs-lookup"><span data-stu-id="f91fc-273">Considers only cells with values as used cells.</span></span>
      type:
      - boolean
- uid: excel.Excel.Range.getVisibleView
  summary: >-
    <span data-ttu-id="f91fc-274">Representa las filas visibles del intervalo actual.</span><span class="sxs-lookup"><span data-stu-id="f91fc-274">Represents the visible rows of the current range.</span></span>


    <span data-ttu-id="f91fc-275">\[[Conjunto de API: ExcelApi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="f91fc-275">\[ [API set: ExcelApi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getVisibleView()
  fullName: getVisibleView
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getVisibleView(): Excel.RangeView;'
    return:
      type:
      - excel.Excel.RangeView
      description: ''
- uid: excel.Excel.Range.hidden
  summary: >-
    <span data-ttu-id="f91fc-p137">Representa si todas las celdas del rango actual están ocultas. Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="f91fc-p137">Represents if all cells of the current range are hidden. Read-only.</span></span>


    <span data-ttu-id="f91fc-278">\[[Conjunto de API: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="f91fc-278">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: hidden
  fullName: hidden
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly hidden: boolean;'
    return:
      type:
      - boolean
- uid: excel.Excel.Range.hyperlink
  summary: >-
    <span data-ttu-id="f91fc-279">Representa el hipervínculo para el intervalo actual.</span><span class="sxs-lookup"><span data-stu-id="f91fc-279">Represents the hyperlink for the current range.</span></span>


    <span data-ttu-id="f91fc-280">\[[Conjunto de API: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="f91fc-280">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: hyperlink
  fullName: hyperlink
  langs:
  - typeScript
  type: property
  syntax:
    content: 'hyperlink: Excel.RangeHyperlink;'
    return:
      type:
      - excel.Excel.RangeHyperlink
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"f91fc-281\">Ejemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"f91fc-281\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Orders\");\n\n    let productsRange = sheet.getRange(\"A3:A5\");\n    productsRange.load(\"values\");\n\n    await context.sync();\n\n    // Create a hyperlink to a URL \n    // for each product name in the first table.\n    for (let i = 0; i < productsRange.values.length; i++) {\n        let cellRange = productsRange.getCell(i, 0);\n        let cellText = productsRange.values[i][0];\n\n        let hyperlink = {\n            textToDisplay: cellText,\n            screenTip: \"Search Bing for '\" + cellText + \"'\",\n            address: \"https://www.bing.com?q=\" + cellText\n        }\n        cellRange.hyperlink = hyperlink;\n    }\n\n    await context.sync();\n});\n```"
- uid: excel.Excel.Range.insert
  summary: >-
    <span data-ttu-id="f91fc-p138">Inserta una celda o un intervalo de celdas en la hoja de cálculo en lugar de este intervalo y desplaza las demás celdas para crear espacio. Devuelve un objeto Range en el espacio que queda en blanco.</span><span class="sxs-lookup"><span data-stu-id="f91fc-p138">Inserts a cell or a range of cells into the worksheet in place of this range, and shifts the other cells to make space. Returns a new Range object at the now blank space.</span></span>


    <span data-ttu-id="f91fc-284">\[[Conjunto de API: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="f91fc-284">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: insert(shift)
  fullName: insert
  langs:
  - typeScript
  type: method
  syntax:
    content: 'insert(shift: Excel.InsertShiftDirection): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"f91fc-285\">Ejemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"f91fc-285\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"F5:F10\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    range.insert();\n    return ctx.sync(); \n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: shift
      description: <span data-ttu-id="f91fc-286">Especifica el modo de desplazar las celdas.</span><span class="sxs-lookup"><span data-stu-id="f91fc-286">Specifies which way to shift the cells.</span></span> <span data-ttu-id="f91fc-287">Para obtener información detallada, vea Excel.InsertShiftDirection.</span><span class="sxs-lookup"><span data-stu-id="f91fc-287">See Excel.InsertShiftDirection for details.</span></span>
      type:
      - excel.Excel.InsertShiftDirection
- uid: excel.Excel.Range.isEntireColumn
  summary: >-
    <span data-ttu-id="f91fc-288">Representa si el intervalo actual es una columna completa.</span><span class="sxs-lookup"><span data-stu-id="f91fc-288">Represents if the current range is an entire column.</span></span> <span data-ttu-id="f91fc-289">Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="f91fc-289">Read-only.</span></span>


    <span data-ttu-id="f91fc-290">\[[Conjunto de API: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="f91fc-290">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: isEntireColumn
  fullName: isEntireColumn
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly isEntireColumn: boolean;'
    return:
      type:
      - boolean
- uid: excel.Excel.Range.isEntireRow
  summary: >-
    <span data-ttu-id="f91fc-291">Representa si el intervalo actual es una fila completa.</span><span class="sxs-lookup"><span data-stu-id="f91fc-291">Represents if the current range is an entire row.</span></span> <span data-ttu-id="f91fc-292">Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="f91fc-292">Read-only.</span></span>


    <span data-ttu-id="f91fc-293">\[[Conjunto de API: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="f91fc-293">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: isEntireRow
  fullName: isEntireRow
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly isEntireRow: boolean;'
    return:
      type:
      - boolean
- uid: excel.Excel.Range.load
  summary: <span data-ttu-id="f91fc-294">Colas de seguridad de un comando que se va a cargar las propiedades del objeto especificadas.</span><span class="sxs-lookup"><span data-stu-id="f91fc-294">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="f91fc-295">Se debe llamar a "context.sync()" antes de leer las propiedades.</span><span class="sxs-lookup"><span data-stu-id="f91fc-295">You must call "context.sync()" before reading the properties.</span></span>
  remarks: "<span data-ttu-id=\"f91fc-296\">Además de esta firma, este método no tiene las siguientes firmas:</span><span class=\"sxs-lookup\"><span data-stu-id=\"f91fc-296\">In addition to this signature, this method has the following signatures:</span></span>\n\n<span data-ttu-id=\"f91fc-297\">`load(option?: { select?: string; expand?: string; }): Excel.Range`-Donde option.select es una cadena delimitada por comas que especifica las propiedades para cargar y options.expand es una cadena delimitada por comas que especifica las propiedades de navegación para cargar.</span><span class=\"sxs-lookup\"><span data-stu-id=\"f91fc-297\">`load(option?: { select?: string; expand?: string; }): Excel.Range` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>\n\n<span data-ttu-id=\"f91fc-298\">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.Range`-Sólo está disponible en los tipos de colección.</span><span class=\"sxs-lookup\"><span data-stu-id=\"f91fc-298\">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.Range` - Only available on collection types.</span></span> <span data-ttu-id=\"f91fc-299\">Es similar a la firma precedente.</span><span class=\"sxs-lookup\"><span data-stu-id=\"f91fc-299\">It is similar to the preceding signature.</span></span> <span data-ttu-id=\"f91fc-300\">Option.Top especifica el número máximo de elementos de la colección que se puede incluir en el resultado.</span><span class=\"sxs-lookup\"><span data-stu-id=\"f91fc-300\">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id=\"f91fc-301\">Option.Skip especifica el número de elementos que se pasan por alto y no se incluyen en el resultado.</span><span class=\"sxs-lookup\"><span data-stu-id=\"f91fc-301\">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id=\"f91fc-302\">Si se especifica option.top, se iniciará el conjunto de resultados después de omitir el número especificado de elementos.</span><span class=\"sxs-lookup\"><span data-stu-id=\"f91fc-302\">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>\n#### <a name=\"examples\"></a><span data-ttu-id=\"f91fc-303\">Ejemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"f91fc-303\">Examples</span></span>\n\n```javascript\n// Below example uses range address to get the range object.\nExcel.run(function (ctx) {\n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:F8\"; \n    var worksheet = ctx.workbook.worksheets.getItem(sheetName);\n    var range = worksheet.getRange(rangeAddress);\n    range.load('cellCount');\n    return ctx.sync().then(function() {\n        console.log(range.cellCount);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```javascript\n// Below example uses a named-range to get the range object.\nExcel.run(function (ctx) { \n    var rangeName = 'MyRange';\n    var range = ctx.workbook.names.getItem(rangeName).range;\n    range.load('cellCount');\n    return ctx.sync().then(function() {\n        console.log(range.cellCount);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```javascript\n// The example below sets number-format, values and formulas on a grid that contains 2x3 grid.\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"F5:G7\";\n    var numberFormat = [[null, \"d-mmm\"], [null, \"d-mmm\"], [null, null]]\n    var values = [[\"Today\", 42147], [\"Tomorrow\", \"5/24\"], [\"Difference in days\", null]];\n    var formulas = [[null,null], [null,null], [null,\"=G6-G5\"]];\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    range.numberFormat = numberFormat;\n    range.values = values;\n    range.formulas= formulas;\n    range.load('text');\n    return ctx.sync().then(function() {\n        console.log(range.text);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
  name: load(option)
  fullName: load
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: string | string[]): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: ''
    parameters:
    - id: option
      description: <span data-ttu-id="f91fc-304">Una cadena delimitada por comas o una matriz de cadenas que especifican las propiedades de carga.</span><span class="sxs-lookup"><span data-stu-id="f91fc-304">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
      type:
      - string | string[]
- uid: excel.Excel.Range.merge
  summary: >-
    <span data-ttu-id="f91fc-305">Combinar las celdas del rango en una región de la hoja de cálculo.</span><span class="sxs-lookup"><span data-stu-id="f91fc-305">Merge the range cells into one region in the worksheet.</span></span>


    <span data-ttu-id="f91fc-306">\[[Conjunto de API: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="f91fc-306">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: merge(across)
  fullName: merge
  langs:
  - typeScript
  type: method
  syntax:
    content: 'merge(across?: boolean): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"f91fc-307\">Ejemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"f91fc-307\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:C3\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    range.merge(true);\n    return ctx.sync(); \n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:C3\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    range.unmerge();\n    return ctx.sync(); \n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: across
      description: <span data-ttu-id="f91fc-p144">Opcional. Verdadero para que se combinen las celdas de cada fila del rango especificado como celdas combinadas distintas. El valor predeterminado es falso.</span><span class="sxs-lookup"><span data-stu-id="f91fc-p144">Optional. Set true to merge cells in each row of the specified range as separate merged cells. The default value is false.</span></span>
      type:
      - boolean
- uid: excel.Excel.Range.numberFormat
  summary: >-
    <span data-ttu-id="f91fc-311">Representa el código de formato numérico de Excel para el intervalo determinado.</span><span class="sxs-lookup"><span data-stu-id="f91fc-311">Represents Excel's number format code for the given range.</span></span> <span data-ttu-id="f91fc-312">Cuando se establece el formato de número a un intervalo, el argumento de valor puede ser un valor único (string) o una matriz bidimensional.</span><span class="sxs-lookup"><span data-stu-id="f91fc-312">When setting number format to a range, the value argument can be either a single value (string) or a two-dimensional array.</span></span> <span data-ttu-id="f91fc-313">Si el argumento es un valor único, se aplicará a todas las celdas del rango.</span><span class="sxs-lookup"><span data-stu-id="f91fc-313">If the argument is a single value, it will be applied to all cells in the range.</span></span>


    <span data-ttu-id="f91fc-314">\[[Conjunto de API: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="f91fc-314">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: numberFormat
  fullName: numberFormat
  langs:
  - typeScript
  type: property
  syntax:
    content: 'numberFormat: any[][];'
    return:
      type:
      - any[][]
- uid: excel.Excel.Range.numberFormatLocal
  summary: >-
    <span data-ttu-id="f91fc-315">Representa el código de formato numérico de Excel para el intervalo determinado como una cadena en el idioma del usuario.</span><span class="sxs-lookup"><span data-stu-id="f91fc-315">Represents Excel's number format code for the given range as a string in the language of the user.</span></span> <span data-ttu-id="f91fc-316">Cuando se establece el formato de número local a un intervalo, el argumento de valor puede ser un valor único (string) o una matriz bidimensional.</span><span class="sxs-lookup"><span data-stu-id="f91fc-316">When setting number format local to a range, the value argument can be either a single value (string) or a two-dimensional array.</span></span> <span data-ttu-id="f91fc-317">Si el argumento es un valor único, se aplicará a todas las celdas del rango.</span><span class="sxs-lookup"><span data-stu-id="f91fc-317">If the argument is a single value, it will be applied to all cells in the range.</span></span>


    <span data-ttu-id="f91fc-318">\[[Conjunto de API: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="f91fc-318">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: numberFormatLocal
  fullName: numberFormatLocal
  langs:
  - typeScript
  type: property
  syntax:
    content: 'numberFormatLocal: any[][];'
    return:
      type:
      - any[][]
- uid: excel.Excel.Range.rowCount
  summary: >-
    <span data-ttu-id="f91fc-p147">Devuelve el número total de filas del intervalo. Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="f91fc-p147">Returns the total number of rows in the range. Read-only.</span></span>


    <span data-ttu-id="f91fc-321">\[[Conjunto de API: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="f91fc-321">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: rowCount
  fullName: rowCount
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly rowCount: number;'
    return:
      type:
      - number
- uid: excel.Excel.Range.rowHidden
  summary: >-
    <span data-ttu-id="f91fc-322">Representa si todas las filas del intervalo actual están ocultas.</span><span class="sxs-lookup"><span data-stu-id="f91fc-322">Represents if all rows of the current range are hidden.</span></span>


    <span data-ttu-id="f91fc-323">\[[Conjunto de API: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="f91fc-323">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: rowHidden
  fullName: rowHidden
  langs:
  - typeScript
  type: property
  syntax:
    content: 'rowHidden: boolean;'
    return:
      type:
      - boolean
- uid: excel.Excel.Range.rowIndex
  summary: >-
    <span data-ttu-id="f91fc-p148">Devuelve el número de fila de la primera celda del intervalo. Indizado con cero. Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="f91fc-p148">Returns the row number of the first cell in the range. Zero-indexed. Read-only.</span></span>


    <span data-ttu-id="f91fc-327">\[[Conjunto de API: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="f91fc-327">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: rowIndex
  fullName: rowIndex
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly rowIndex: number;'
    return:
      type:
      - number
- uid: excel.Excel.Range.select
  summary: >-
    <span data-ttu-id="f91fc-328">Selecciona el intervalo especificado en la interfaz de usuario de Excel.</span><span class="sxs-lookup"><span data-stu-id="f91fc-328">Selects the specified range in the Excel UI.</span></span>


    <span data-ttu-id="f91fc-329">\[[Conjunto de API: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="f91fc-329">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: select()
  fullName: select
  langs:
  - typeScript
  type: method
  syntax:
    content: 'select(): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"f91fc-330\">Ejemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"f91fc-330\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) {\n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"F5:F10\"; \n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    range.select();\n    return ctx.sync(); \n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: excel.Excel.Range.showCard
  summary: >-
    <span data-ttu-id="f91fc-331">Muestra la tarjeta de una celda activa si tiene contenido de valor enriquecido.</span><span class="sxs-lookup"><span data-stu-id="f91fc-331">Displays the card for an active cell if it has rich value content.</span></span>


    <span data-ttu-id="f91fc-332">\[[Conjunto de API: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="f91fc-332">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: showCard()
  fullName: showCard
  langs:
  - typeScript
  type: method
  syntax:
    content: 'showCard(): void;'
    return:
      type:
      - void
      description: ''
- uid: excel.Excel.Range.sort
  summary: >-
    <span data-ttu-id="f91fc-p149">Representa la ordenación del intervalo del intervalo actual. Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="f91fc-p149">Represents the range sort of the current range. Read-only.</span></span>


    <span data-ttu-id="f91fc-335">\[[Conjunto de API: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="f91fc-335">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: sort
  fullName: sort
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly sort: Excel.RangeSort;'
    return:
      type:
      - excel.Excel.RangeSort
- uid: excel.Excel.Range.style
  summary: >-
    <span data-ttu-id="f91fc-336">Representa el estilo del rango actual.</span><span class="sxs-lookup"><span data-stu-id="f91fc-336">Represents the style of the current range.</span></span> <span data-ttu-id="f91fc-337">Si los estilos de las celdas no son coherentes, se devolverá null.</span><span class="sxs-lookup"><span data-stu-id="f91fc-337">If the styles of the cells are inconsistent, null will be returned.</span></span> <span data-ttu-id="f91fc-338">Para los estilos personalizados, se devuelve el nombre del estilo.</span><span class="sxs-lookup"><span data-stu-id="f91fc-338">For custom styles, the style name will be returned.</span></span> <span data-ttu-id="f91fc-339">Para los estilos integrados, se devuelve una cadena que representa un valor en la enumeración BuiltInStyle.</span><span class="sxs-lookup"><span data-stu-id="f91fc-339">For built-in styles, a string representing a value in the BuiltInStyle enum will be returned.</span></span>


    <span data-ttu-id="f91fc-340">\[[Conjunto de API: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="f91fc-340">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: style
  fullName: style
  langs:
  - typeScript
  type: property
  syntax:
    content: 'style: string;'
    return:
      type:
      - string
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"f91fc-341\">Ejemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"f91fc-341\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    let worksheet = context.workbook.worksheets.getItem(\"Sample\");\n    let range = worksheet.getRange(\"A1:E1\");\n\n    // Apply built-in style. \n    // Styles are in the Home tab ribbon.\n    range.style = Excel.BuiltInStyle.neutral;\n    range.format.horizontalAlignment = \"Right\";\n\n    await context.sync();\n});\n```"
- uid: excel.Excel.Range.text
  summary: >-
    <span data-ttu-id="f91fc-342">Valores de texto del rango especificado.</span><span class="sxs-lookup"><span data-stu-id="f91fc-342">Text values of the specified range.</span></span> <span data-ttu-id="f91fc-343">El valor de texto no dependerá del ancho de la celda.</span><span class="sxs-lookup"><span data-stu-id="f91fc-343">The Text value will not depend on the cell width.</span></span> <span data-ttu-id="f91fc-344">El \# sustitución que sucede en la interfaz de usuario de Excel no afectará el valor de texto devuelto por la API de inicio de sesión.</span><span class="sxs-lookup"><span data-stu-id="f91fc-344">The \# sign substitution that happens in Excel UI will not affect the text value returned by the API.</span></span> <span data-ttu-id="f91fc-345">Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="f91fc-345">Read-only.</span></span>


    <span data-ttu-id="f91fc-346">\[[Conjunto de API: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="f91fc-346">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: text
  fullName: text
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly text: string[][];'
    return:
      type:
      - string[][]
- uid: excel.Excel.Range.toJSON
  summary: <span data-ttu-id="f91fc-347">Invalida el JavaScript `toJSON()` método con el fin de proporcionar resultados más útiles cuando se pasa un objeto de la API a `JSON.stringify()` <!-- -->.</span><span class="sxs-lookup"><span data-stu-id="f91fc-347">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`<!-- -->.</span></span> <span data-ttu-id="f91fc-348">(`JSON.stringify`<!-- -->, a su vez, llama a la `toJSON` método del objeto que se pasa a ella.) Mientras que el objeto Excel.Range original es un objeto de la API, el `toJSON` método devuelve un objeto de JavaScript sin formato (escrito como `Excel.Interfaces.RangeData` <!-- -->) que contiene copias superficiales de todas las propiedades del objeto original secundario cargado.</span><span class="sxs-lookup"><span data-stu-id="f91fc-348">(`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original Excel.Range object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.RangeData`<!-- -->) that contains shallow copies of any loaded child properties from the original object.</span></span>
  name: toJSON()
  fullName: toJSON
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON(): Excel.Interfaces.RangeData;'
    return:
      type:
      - excel.Excel.Interfaces.RangeData
      description: ''
- uid: excel.Excel.Range.track
  summary: <span data-ttu-id="f91fc-349">Realizar un seguimiento del objeto para el ajuste automático en función de que lo rodea los cambios en el documento.</span><span class="sxs-lookup"><span data-stu-id="f91fc-349">Track the object for automatic adjustment based on surrounding changes in the document.</span></span> <span data-ttu-id="f91fc-350">Esta llamada es una forma abreviada para context.trackedObjects.add(thisObject).</span><span class="sxs-lookup"><span data-stu-id="f91fc-350">This call is a shorthand for context.trackedObjects.add(thisObject).</span></span> <span data-ttu-id="f91fc-351">Si va a usar este objeto a través de llamadas "Sync" y fuera de la ejecución secuencial de un lote de "ésta se ejecute" y obtenga un error de "InvalidObjectPath" al establecer una propiedad o invocar un método en el objeto, había que ha agregado el objeto al objeto marca de revisión colección cuando el objeto se crea por primera vez.</span><span class="sxs-lookup"><span data-stu-id="f91fc-351">If you are using this object across ".sync" calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you needed to have added the object to the tracked object collection when the object was first created.</span></span>
  name: track()
  fullName: track
  langs:
  - typeScript
  type: method
  syntax:
    content: 'track(): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: ''
- uid: excel.Excel.Range.unmerge
  summary: >-
    <span data-ttu-id="f91fc-352">Separar las celdas del rango en celdas independientes.</span><span class="sxs-lookup"><span data-stu-id="f91fc-352">Unmerge the range cells into separate cells.</span></span>


    <span data-ttu-id="f91fc-353">\[[Conjunto de API: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="f91fc-353">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: unmerge()
  fullName: unmerge
  langs:
  - typeScript
  type: method
  syntax:
    content: 'unmerge(): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"f91fc-354\">Ejemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"f91fc-354\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:C3\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    range.unmerge();\n    return ctx.sync(); \n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: excel.Excel.Range.untrack
  summary: <span data-ttu-id="f91fc-355">La memoria asociada con este objeto, si lo se anteriormente hace el seguimiento de la versión.</span><span class="sxs-lookup"><span data-stu-id="f91fc-355">Release the memory associated with this object, if it has previously been tracked.</span></span> <span data-ttu-id="f91fc-356">Esta llamada es una abreviatura de context.trackedObjects.remove(thisObject).</span><span class="sxs-lookup"><span data-stu-id="f91fc-356">This call is shorthand for context.trackedObjects.remove(thisObject).</span></span> <span data-ttu-id="f91fc-357">Tener muchos objetos de marca de revisión reduce la velocidad de la aplicación host, por lo que no olvide libre de cualquier objeto que agregue, una vez que haya terminado con ellos.</span><span class="sxs-lookup"><span data-stu-id="f91fc-357">Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them.</span></span> <span data-ttu-id="f91fc-358">Debe llamar a "context.sync()" antes de la versión de memoria surta efecto.</span><span class="sxs-lookup"><span data-stu-id="f91fc-358">You will need to call "context.sync()" before the memory release takes effect.</span></span>
  name: untrack()
  fullName: untrack
  langs:
  - typeScript
  type: method
  syntax:
    content: 'untrack(): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"f91fc-359\">Ejemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"f91fc-359\">Examples</span></span>\n\n```typescript\nExcel.run(async (context) => {\n    const largeRange = context.workbook.getSelectedRange();\n    largeRange.load([\"rowCount\", \"columnCount\"]);\n    await context.sync();\n\n    for (let i = 0; i < largeRange.rowCount; i++) {\n        for (let j = 0; j < largeRange.columnCount; j++) {\n            let cell = largeRange.getCell(i, j);\n            cell.values = [[i *j]];\n\n            // call untrack() to release the range from memory\n            cell.untrack();\n        }\n    }\n\n    await context.sync();\n});\n```"
- uid: excel.Excel.Range.values
  summary: >-
    <span data-ttu-id="f91fc-360">Representa los valores sin formato del intervalo especificado.</span><span class="sxs-lookup"><span data-stu-id="f91fc-360">Represents the raw values of the specified range.</span></span> <span data-ttu-id="f91fc-361">Los datos devueltos podrían ser de tipo cadena, número o un valor boolean.</span><span class="sxs-lookup"><span data-stu-id="f91fc-361">The data returned could be of type string, number, or a boolean.</span></span> <span data-ttu-id="f91fc-362">Las celdas que contienen un error devolverá la cadena de error.</span><span class="sxs-lookup"><span data-stu-id="f91fc-362">Cells that contain an error will return the error string.</span></span> <span data-ttu-id="f91fc-363">Al establecer los valores en un intervalo, el argumento de valor puede ser un valor único (cadena, número o valor booleano) o una matriz bidimensional.</span><span class="sxs-lookup"><span data-stu-id="f91fc-363">When setting values to a range, the value argument can be either a single value (string, number or boolean) or a two-dimensional array.</span></span> <span data-ttu-id="f91fc-364">Si el argumento es un valor único, se aplicará a todas las celdas del rango.</span><span class="sxs-lookup"><span data-stu-id="f91fc-364">If the argument is a single value, it will be applied to all cells in the range.</span></span>


    <span data-ttu-id="f91fc-365">\[[Conjunto de API: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="f91fc-365">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: values
  fullName: values
  langs:
  - typeScript
  type: property
  syntax:
    content: 'values: any[][];'
    return:
      type:
      - any[][]
- uid: excel.Excel.Range.valueTypes
  summary: >-
    <span data-ttu-id="f91fc-366">Representa el tipo de datos de cada celda.</span><span class="sxs-lookup"><span data-stu-id="f91fc-366">Represents the type of data of each cell.</span></span> <span data-ttu-id="f91fc-367">Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="f91fc-367">Read-only.</span></span>


    <span data-ttu-id="f91fc-368">\[[Conjunto de API: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="f91fc-368">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: valueTypes
  fullName: valueTypes
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly valueTypes: Excel.RangeValueType[][];'
    return:
      type:
      - Excel.RangeValueType[][]
- uid: excel.Excel.Range.worksheet
  summary: >-
    <span data-ttu-id="f91fc-p157">Hoja de cálculo que contiene el rango actual. Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="f91fc-p157">The worksheet containing the current range. Read-only.</span></span>


    <span data-ttu-id="f91fc-371">\[[Conjunto de API: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="f91fc-371">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: worksheet
  fullName: worksheet
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly worksheet: Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
