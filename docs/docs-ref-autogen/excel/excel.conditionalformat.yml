### YamlMime:UniversalReference
ms.openlocfilehash: 092df8ef4f5f2017f08981a30c942882c8189bd8
ms.sourcegitcommit: 06eebee5e68d349f78e6bc3bb0ef099fe063cf04
ms.translationtype: MT
ms.contentlocale: es-ES
ms.lasthandoff: 01/17/2019
ms.locfileid: "28724986"
items:
- uid: excel.Excel.ConditionalFormat
  summary: >-
    <span data-ttu-id="ea79a-101">Un objeto que encapsula el formato, la regla, el rango de un formato condicional y otras propiedades.</span><span class="sxs-lookup"><span data-stu-id="ea79a-101">An object encapsulating a conditional format's range, format, rule, and other properties.</span></span>


    <span data-ttu-id="ea79a-102">\[[Conjunto de API: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="ea79a-102">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: Excel.ConditionalFormat
  fullName: Excel.ConditionalFormat
  langs:
  - typeScript
  type: class
  extends:
  - office.OfficeExtension.ClientObject
  package: excel
  children:
  - excel.Excel.ConditionalFormat.cellValue
  - excel.Excel.ConditionalFormat.cellValueOrNullObject
  - excel.Excel.ConditionalFormat.colorScale
  - excel.Excel.ConditionalFormat.colorScaleOrNullObject
  - excel.Excel.ConditionalFormat.context
  - excel.Excel.ConditionalFormat.custom
  - excel.Excel.ConditionalFormat.customOrNullObject
  - excel.Excel.ConditionalFormat.dataBar
  - excel.Excel.ConditionalFormat.dataBarOrNullObject
  - excel.Excel.ConditionalFormat.delete
  - excel.Excel.ConditionalFormat.getRange
  - excel.Excel.ConditionalFormat.getRangeOrNullObject
  - excel.Excel.ConditionalFormat.iconSet
  - excel.Excel.ConditionalFormat.iconSetOrNullObject
  - excel.Excel.ConditionalFormat.id
  - excel.Excel.ConditionalFormat.load
  - excel.Excel.ConditionalFormat.preset
  - excel.Excel.ConditionalFormat.presetOrNullObject
  - excel.Excel.ConditionalFormat.priority
  - excel.Excel.ConditionalFormat.stopIfTrue
  - excel.Excel.ConditionalFormat.textComparison
  - excel.Excel.ConditionalFormat.textComparisonOrNullObject
  - excel.Excel.ConditionalFormat.toJSON
  - excel.Excel.ConditionalFormat.topBottom
  - excel.Excel.ConditionalFormat.topBottomOrNullObject
  - excel.Excel.ConditionalFormat.type
- uid: excel.Excel.ConditionalFormat.cellValue
  summary: >-
    <span data-ttu-id="ea79a-103">Devuelve la celda de las propiedades de formato condicional de valor si el formato condicional actual es un tipo de CellValue.</span><span class="sxs-lookup"><span data-stu-id="ea79a-103">Returns the cell value conditional format properties if the current conditional format is a CellValue type.</span></span> <span data-ttu-id="ea79a-104">Por ejemplo dar formato a todas las celdas entre 5 y 10.</span><span class="sxs-lookup"><span data-stu-id="ea79a-104">For example to format all cells between 5 and 10.</span></span> <span data-ttu-id="ea79a-105">Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="ea79a-105">Read-only.</span></span>


    <span data-ttu-id="ea79a-106">\[[Conjunto de API: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="ea79a-106">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: cellValue
  fullName: cellValue
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly cellValue: Excel.CellValueConditionalFormat;'
    return:
      type:
      - excel.Excel.CellValueConditionalFormat
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"ea79a-107\">Ejemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"ea79a-107\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const range = sheet.getRange(\"B21:E23\");\n    const conditionalFormat = range.conditionalFormats\n        .add(Excel.ConditionalFormatType.cellValue);\n    conditionalFormat.cellValue.format.font.color = \"red\";\n    conditionalFormat.cellValue.rule = { formula1: \"=0\", operator: \"LessThan\" };\n\n    await context.sync();\n});\n```"
- uid: excel.Excel.ConditionalFormat.cellValueOrNullObject
  summary: >-
    <span data-ttu-id="ea79a-108">Devuelve la celda de las propiedades de formato condicional de valor si el formato condicional actual es un tipo de CellValue.</span><span class="sxs-lookup"><span data-stu-id="ea79a-108">Returns the cell value conditional format properties if the current conditional format is a CellValue type.</span></span> <span data-ttu-id="ea79a-109">Por ejemplo dar formato a todas las celdas entre 5 y 10.</span><span class="sxs-lookup"><span data-stu-id="ea79a-109">For example to format all cells between 5 and 10.</span></span> <span data-ttu-id="ea79a-110">Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="ea79a-110">Read-only.</span></span>


    <span data-ttu-id="ea79a-111">\[[Conjunto de API: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="ea79a-111">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: cellValueOrNullObject
  fullName: cellValueOrNullObject
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly cellValueOrNullObject: Excel.CellValueConditionalFormat;'
    return:
      type:
      - excel.Excel.CellValueConditionalFormat
- uid: excel.Excel.ConditionalFormat.colorScale
  summary: >-
    <span data-ttu-id="ea79a-p103">Devuelve las propiedades del formato condicional ColorScale si el formato condicional actual es un tipo de ColorScale. Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="ea79a-p103">Returns the ColorScale conditional format properties if the current conditional format is an ColorScale type. Read-only.</span></span>


    <span data-ttu-id="ea79a-114">\[[Conjunto de API: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="ea79a-114">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: colorScale
  fullName: colorScale
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly colorScale: Excel.ColorScaleConditionalFormat;'
    return:
      type:
      - excel.Excel.ColorScaleConditionalFormat
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"ea79a-115\">Ejemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"ea79a-115\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const range = sheet.getRange(\"B2:M5\");\n    const conditionalFormat = range.conditionalFormats\n        .add(Excel.ConditionalFormatType.colorScale);\n    const criteria = {\n        minimum: { formula: null, type: Excel.ConditionalFormatColorCriterionType.lowestValue, color: \"blue\" },\n        midpoint: { formula: \"50\", type: Excel.ConditionalFormatColorCriterionType.percent, color: \"yellow\" },\n        maximum: { formula: null, type: Excel.ConditionalFormatColorCriterionType.highestValue, color: \"red\" }\n    };\n    conditionalFormat.colorScale.criteria = criteria;\n\n    await context.sync();\n});\n```"
- uid: excel.Excel.ConditionalFormat.colorScaleOrNullObject
  summary: >-
    <span data-ttu-id="ea79a-p104">Devuelve las propiedades del formato condicional ColorScale si el formato condicional actual es un tipo de ColorScale. Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="ea79a-p104">Returns the ColorScale conditional format properties if the current conditional format is an ColorScale type. Read-only.</span></span>


    <span data-ttu-id="ea79a-118">\[[Conjunto de API: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="ea79a-118">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: colorScaleOrNullObject
  fullName: colorScaleOrNullObject
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly colorScaleOrNullObject: Excel.ColorScaleConditionalFormat;'
    return:
      type:
      - excel.Excel.ColorScaleConditionalFormat
- uid: excel.Excel.ConditionalFormat.context
  summary: <span data-ttu-id="ea79a-119">El contexto de solicitud asociado con el objeto.</span><span class="sxs-lookup"><span data-stu-id="ea79a-119">The request context associated with the object.</span></span> <span data-ttu-id="ea79a-120">Este comando conecta proceso del complemento al proceso de la aplicaci√≥n host de Office.</span><span class="sxs-lookup"><span data-stu-id="ea79a-120">This connects the add-in's process to the Office host application's process.</span></span>
  name: context
  fullName: context
  langs:
  - typeScript
  type: property
  syntax:
    content: 'context: RequestContext;'
    return:
      type:
      - RequestContext
- uid: excel.Excel.ConditionalFormat.custom
  summary: >-
    <span data-ttu-id="ea79a-p106">Devuelve las propiedades del formato condicional personalizadas si el formato condicional actual es un tipo personalizado. Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="ea79a-p106">Returns the custom conditional format properties if the current conditional format is a custom type. Read-only.</span></span>


    <span data-ttu-id="ea79a-123">\[[Conjunto de API: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="ea79a-123">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: custom
  fullName: custom
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly custom: Excel.CustomConditionalFormat;'
    return:
      type:
      - excel.Excel.CustomConditionalFormat
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"ea79a-124\">Ejemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"ea79a-124\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const range = sheet.getRange(\"B8:E13\");\n    const conditionalFormat = range.conditionalFormats.add(Excel.ConditionalFormatType.custom);\n    conditionalFormat.custom.rule.formula = '=IF(B8>INDIRECT(\"RC[-1]\",0),TRUE)';\n    conditionalFormat.custom.format.font.color = \"green\";\n\n    await context.sync();\n});\n```"
- uid: excel.Excel.ConditionalFormat.customOrNullObject
  summary: >-
    <span data-ttu-id="ea79a-p107">Devuelve las propiedades del formato condicional personalizadas si el formato condicional actual es un tipo personalizado. Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="ea79a-p107">Returns the custom conditional format properties if the current conditional format is a custom type. Read-only.</span></span>


    <span data-ttu-id="ea79a-127">\[[Conjunto de API: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="ea79a-127">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: customOrNullObject
  fullName: customOrNullObject
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly customOrNullObject: Excel.CustomConditionalFormat;'
    return:
      type:
      - excel.Excel.CustomConditionalFormat
- uid: excel.Excel.ConditionalFormat.dataBar
  summary: >-
    <span data-ttu-id="ea79a-p108">Devuelve las propiedades de barra de datos si el formato condicional actual es una barra de datos. Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="ea79a-p108">Returns the data bar properties if the current conditional format is a data bar. Read-only.</span></span>


    <span data-ttu-id="ea79a-130">\[[Conjunto de API: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="ea79a-130">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: dataBar
  fullName: dataBar
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly dataBar: Excel.DataBarConditionalFormat;'
    return:
      type:
      - excel.Excel.DataBarConditionalFormat
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"ea79a-131\">Ejemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"ea79a-131\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const range = sheet.getRange(\"B8:E13\");\n    const conditionalFormat = range.conditionalFormats\n        .add(Excel.ConditionalFormatType.dataBar);\n    conditionalFormat.dataBar.barDirection = Excel.ConditionalDataBarDirection.leftToRight;\n\n    await context.sync();\n});\n```"
- uid: excel.Excel.ConditionalFormat.dataBarOrNullObject
  summary: >-
    <span data-ttu-id="ea79a-p109">Devuelve las propiedades de barra de datos si el formato condicional actual es una barra de datos. Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="ea79a-p109">Returns the data bar properties if the current conditional format is a data bar. Read-only.</span></span>


    <span data-ttu-id="ea79a-134">\[[Conjunto de API: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="ea79a-134">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: dataBarOrNullObject
  fullName: dataBarOrNullObject
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly dataBarOrNullObject: Excel.DataBarConditionalFormat;'
    return:
      type:
      - excel.Excel.DataBarConditionalFormat
- uid: excel.Excel.ConditionalFormat.delete
  summary: >-
    <span data-ttu-id="ea79a-135">Elimina este formato condicional.</span><span class="sxs-lookup"><span data-stu-id="ea79a-135">Deletes this conditional format.</span></span>


    <span data-ttu-id="ea79a-136">\[[Conjunto de API: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="ea79a-136">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: delete()
  fullName: delete
  langs:
  - typeScript
  type: method
  syntax:
    content: 'delete(): void;'
    return:
      type:
      - void
      description: ''
- uid: excel.Excel.ConditionalFormat.getRange
  summary: >-
    <span data-ttu-id="ea79a-137">Devuelve el intervalo en el que se aplica el formato condicional.</span><span class="sxs-lookup"><span data-stu-id="ea79a-137">Returns the range the conditonal format is applied to.</span></span> <span data-ttu-id="ea79a-138">Se produce un error si se aplica el formato condicional a varios rangos.</span><span class="sxs-lookup"><span data-stu-id="ea79a-138">Throws an error if the conditional format is applied to multiple ranges.</span></span> <span data-ttu-id="ea79a-139">Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="ea79a-139">Read-only.</span></span>


    <span data-ttu-id="ea79a-140">\[[Conjunto de API: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="ea79a-140">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getRange()
  fullName: getRange
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getRange(): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"ea79a-141\">Ejemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"ea79a-141\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const worksheetRange = sheet.getRange();\n    worksheetRange.conditionalFormats.load(\"type\");\n\n    await context.sync();\n\n    let cfRangePairs: { cf: Excel.ConditionalFormat, range: Excel.Range }[] = [];\n    worksheetRange.conditionalFormats.items.forEach(item => {\n        cfRangePairs.push({\n            cf: item,\n            range: item.getRange().load(\"address\")\n        });\n    });\n\n    await context.sync();\n\n    if (cfRangePairs.length > 0) {\n        cfRangePairs.forEach(item => {\n            console.log(item.cf.type);\n        });\n    } else {\n        console.log(\"No conditional formats applied.\");\n    }\n});\n```"
- uid: excel.Excel.ConditionalFormat.getRangeOrNullObject
  summary: >-
    <span data-ttu-id="ea79a-142">Devuelve el intervalo que se aplica el formato de conditonal a, o un objeto nulo si se aplica el formato condicional a varios rangos.</span><span class="sxs-lookup"><span data-stu-id="ea79a-142">Returns the range the conditonal format is applied to, or a null object if the conditional format is applied to multiple ranges.</span></span> <span data-ttu-id="ea79a-143">Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="ea79a-143">Read-only.</span></span>


    <span data-ttu-id="ea79a-144">\[[Conjunto de API: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="ea79a-144">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getRangeOrNullObject()
  fullName: getRangeOrNullObject
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getRangeOrNullObject(): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: ''
- uid: excel.Excel.ConditionalFormat.iconSet
  summary: >-
    <span data-ttu-id="ea79a-p112">Devuelve las propiedades del formato condicional IconSet si el formato condicional actual es un tipo IconSet. Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="ea79a-p112">Returns the IconSet conditional format properties if the current conditional format is an IconSet type. Read-only.</span></span>


    <span data-ttu-id="ea79a-147">\[[Conjunto de API: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="ea79a-147">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: iconSet
  fullName: iconSet
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly iconSet: Excel.IconSetConditionalFormat;'
    return:
      type:
      - excel.Excel.IconSetConditionalFormat
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"ea79a-148\">Ejemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"ea79a-148\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const range = sheet.getRange(\"B8:E13\");\n    const conditionalFormat = range.conditionalFormats\n        .add(Excel.ConditionalFormatType.iconSet);\n    const iconSetCF = conditionalFormat.iconSet;\n    iconSetCF.style = Excel.IconSet.threeTriangles;\n\n    /*\n        The iconSetCF.criteria array is automatically prepopulated with\n        criterion elements whose properties have been given default settings.\n        You can't write to each property of a criterion directly. Instead,\n        replace the whole criteria object.\n\n        With a \"three*\" icon set style, such as \"threeTriangles\", the third\n        element in the criteria array (criteria[2]) defines the \"top\" icon;\n        e.g., a green triangle. The second (criteria[1]) defines the \"middle\"\n        icon, The first (criteria[0]) defines the \"low\" icon, but it\n        can often be left empty as this method does below, because every\n        cell that does not match the other two criteria always gets the low\n        icon.            \n    */\n    iconSetCF.criteria = [\n        {} as any,\n        {\n            type: Excel.ConditionalFormatIconRuleType.number,\n            operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,\n            formula: \"=700\"\n        },\n        {\n            type: Excel.ConditionalFormatIconRuleType.number,\n            operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,\n            formula: \"=1000\",\n        }\n    ];\n\n    await context.sync();\n});\n```"
- uid: excel.Excel.ConditionalFormat.iconSetOrNullObject
  summary: >-
    <span data-ttu-id="ea79a-p113">Devuelve las propiedades del formato condicional IconSet si el formato condicional actual es un tipo IconSet. Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="ea79a-p113">Returns the IconSet conditional format properties if the current conditional format is an IconSet type. Read-only.</span></span>


    <span data-ttu-id="ea79a-151">\[[Conjunto de API: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="ea79a-151">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: iconSetOrNullObject
  fullName: iconSetOrNullObject
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly iconSetOrNullObject: Excel.IconSetConditionalFormat;'
    return:
      type:
      - excel.Excel.IconSetConditionalFormat
- uid: excel.Excel.ConditionalFormat.id
  summary: >-
    <span data-ttu-id="ea79a-152">La prioridad del formato condicional dentro de la ConditionalFormatCollection actual.</span><span class="sxs-lookup"><span data-stu-id="ea79a-152">The Priority of the Conditional Format within the current ConditionalFormatCollection.</span></span> <span data-ttu-id="ea79a-153">Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="ea79a-153">Read-only.</span></span>


    <span data-ttu-id="ea79a-154">\[[Conjunto de API: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="ea79a-154">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: id
  fullName: id
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly id: string;'
    return:
      type:
      - string
- uid: excel.Excel.ConditionalFormat.load
  summary: <span data-ttu-id="ea79a-155">Colas de seguridad de un comando que se va a cargar las propiedades del objeto especificadas.</span><span class="sxs-lookup"><span data-stu-id="ea79a-155">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="ea79a-156">Se debe llamar a "context.sync()" antes de leer las propiedades.</span><span class="sxs-lookup"><span data-stu-id="ea79a-156">You must call "context.sync()" before reading the properties.</span></span>
  remarks: >-
    <span data-ttu-id="ea79a-157">Adem√°s de esta firma, este m√©todo no tiene las siguientes firmas:</span><span class="sxs-lookup"><span data-stu-id="ea79a-157">In addition to this signature, this method has the following signatures:</span></span>


    <span data-ttu-id="ea79a-158">`load(option?: { select?: string; expand?: string; }): Excel.ConditionalFormat`-Donde option.select es una cadena delimitada por comas que especifica las propiedades para cargar y options.expand es una cadena delimitada por comas que especifica las propiedades de navegaci√≥n para cargar.</span><span class="sxs-lookup"><span data-stu-id="ea79a-158">`load(option?: { select?: string; expand?: string; }): Excel.ConditionalFormat` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>


    <span data-ttu-id="ea79a-159">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.ConditionalFormat`-S√≥lo est√° disponible en los tipos de colecci√≥n.</span><span class="sxs-lookup"><span data-stu-id="ea79a-159">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.ConditionalFormat` - Only available on collection types.</span></span> <span data-ttu-id="ea79a-160">Es similar a la firma precedente.</span><span class="sxs-lookup"><span data-stu-id="ea79a-160">It is similar to the preceding signature.</span></span> <span data-ttu-id="ea79a-161">Option.Top especifica el n√∫mero m√°ximo de elementos de la colecci√≥n que se puede incluir en el resultado.</span><span class="sxs-lookup"><span data-stu-id="ea79a-161">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="ea79a-162">Option.Skip especifica el n√∫mero de elementos que se pasan por alto y no se incluyen en el resultado.</span><span class="sxs-lookup"><span data-stu-id="ea79a-162">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="ea79a-163">Si se especifica option.top, se iniciar√° el conjunto de resultados despu√©s de omitir el n√∫mero especificado de elementos.</span><span class="sxs-lookup"><span data-stu-id="ea79a-163">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
  name: load(option)
  fullName: load
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: string | string[]): Excel.ConditionalFormat;'
    return:
      type:
      - excel.Excel.ConditionalFormat
      description: ''
    parameters:
    - id: option
      description: <span data-ttu-id="ea79a-164">Una cadena delimitada por comas o una matriz de cadenas que especifican las propiedades de carga.</span><span class="sxs-lookup"><span data-stu-id="ea79a-164">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
      type:
      - string | string[]
- uid: excel.Excel.ConditionalFormat.preset
  summary: >-
    <span data-ttu-id="ea79a-165">Devuelve el formato condicional de criterios preestablecido.</span><span class="sxs-lookup"><span data-stu-id="ea79a-165">Returns the preset criteria conditional format.</span></span> <span data-ttu-id="ea79a-166">Para obtener m√°s informaci√≥n, vea Excel.PresetCriteriaConditionalFormat.</span><span class="sxs-lookup"><span data-stu-id="ea79a-166">See Excel.PresetCriteriaConditionalFormat for more details.</span></span>


    <span data-ttu-id="ea79a-167">\[[Conjunto de API: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="ea79a-167">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: preset
  fullName: preset
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly preset: Excel.PresetCriteriaConditionalFormat;'
    return:
      type:
      - excel.Excel.PresetCriteriaConditionalFormat
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"ea79a-168\">Ejemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"ea79a-168\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const range = sheet.getRange(\"B2:M5\");\n    const conditionalFormat = range.conditionalFormats\n        .add(Excel.ConditionalFormatType.presetCriteria);\n    conditionalFormat.preset.format.font.color = \"white\";\n    conditionalFormat.preset.rule = { criterion: Excel.ConditionalFormatPresetCriterion.oneStdDevAboveAverage };\n\n    await context.sync();\n});\n```"
- uid: excel.Excel.ConditionalFormat.presetOrNullObject
  summary: >-
    <span data-ttu-id="ea79a-169">Devuelve el formato condicional de criterios preestablecido.</span><span class="sxs-lookup"><span data-stu-id="ea79a-169">Returns the preset criteria conditional format.</span></span> <span data-ttu-id="ea79a-170">Para obtener m√°s informaci√≥n, vea Excel.PresetCriteriaConditionalFormat.</span><span class="sxs-lookup"><span data-stu-id="ea79a-170">See Excel.PresetCriteriaConditionalFormat for more details.</span></span>


    <span data-ttu-id="ea79a-171">\[[Conjunto de API: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="ea79a-171">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: presetOrNullObject
  fullName: presetOrNullObject
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly presetOrNullObject: Excel.PresetCriteriaConditionalFormat;'
    return:
      type:
      - excel.Excel.PresetCriteriaConditionalFormat
- uid: excel.Excel.ConditionalFormat.priority
  summary: >-
    <span data-ttu-id="ea79a-172">La prioridad (o √≠ndice) dentro de la colecci√≥n de formato condicional que este condicional formato actualmente existe en.</span><span class="sxs-lookup"><span data-stu-id="ea79a-172">The priority (or index) within the conditional format collection that this conditional format currently exists in.</span></span> <span data-ttu-id="ea79a-173">Esto tambi√©n los cambios las prioridades de otros formatos condicionales, para permitir un orden de prioridad contiguos.</span><span class="sxs-lookup"><span data-stu-id="ea79a-173">Changing this also changes other conditional formats' priorities, to allow for a contiguous priority order.</span></span> <span data-ttu-id="ea79a-174">Use una prioridad negativa para iniciar desde la parte posterior.</span><span class="sxs-lookup"><span data-stu-id="ea79a-174">Use a negative priority to begin from the back.</span></span> <span data-ttu-id="ea79a-175">Las prioridades mayores que l√≠mites va a obtener y establecer la prioridad m√°xima (o m√≠nimo si es negativo).</span><span class="sxs-lookup"><span data-stu-id="ea79a-175">Priorities greater than than bounds will get and set to the maximum (or minimum if negative) priority.</span></span> <span data-ttu-id="ea79a-176">Tambi√©n tenga en cuenta que si cambia la prioridad, tendr√° que volver a capturar una nueva copia del objeto en esa nueva ubicaci√≥n de prioridad si desea realizar otras cambia a ella.</span><span class="sxs-lookup"><span data-stu-id="ea79a-176">Also note that if you change the priority, you have to re-fetch a new copy of the object at that new priority location if you want to make further changes to it.</span></span> <span data-ttu-id="ea79a-177">Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="ea79a-177">Read-only.</span></span>


    <span data-ttu-id="ea79a-178">\[[Conjunto de API: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="ea79a-178">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: priority
  fullName: priority
  langs:
  - typeScript
  type: property
  syntax:
    content: 'priority: number;'
    return:
      type:
      - number
- uid: excel.Excel.ConditionalFormat.stopIfTrue
  summary: >-
    <span data-ttu-id="ea79a-179">Si se cumplen las condiciones de este formato condicional, los formatos de menor prioridad no surtir√°n efecto en esa celda.</span><span class="sxs-lookup"><span data-stu-id="ea79a-179">If the conditions of this conditional format are met, no lower-priority formats shall take effect on that cell.</span></span> <span data-ttu-id="ea79a-180">NULL en databars, conjuntos de iconos y colorscales como no hay ning√∫n concepto de StopIfTrue para estos</span><span class="sxs-lookup"><span data-stu-id="ea79a-180">Null on databars, icon sets, and colorscales as there's no concept of StopIfTrue for these</span></span>


    <span data-ttu-id="ea79a-181">\[[Conjunto de API: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="ea79a-181">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: stopIfTrue
  fullName: stopIfTrue
  langs:
  - typeScript
  type: property
  syntax:
    content: 'stopIfTrue: boolean;'
    return:
      type:
      - boolean
- uid: excel.Excel.ConditionalFormat.textComparison
  summary: >-
    <span data-ttu-id="ea79a-182">Devuelve el texto espec√≠fico en las propiedades de formato condicional si el formato condicional actual es un tipo de texto.</span><span class="sxs-lookup"><span data-stu-id="ea79a-182">Returns the specific text conditional format properties if the current conditional format is a text type.</span></span> <span data-ttu-id="ea79a-183">Por ejemplo, para dar formato a las celdas que coinciden con la palabra "Text".</span><span class="sxs-lookup"><span data-stu-id="ea79a-183">For example to format cells matching the word "Text".</span></span> <span data-ttu-id="ea79a-184">Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="ea79a-184">Read-only.</span></span>


    <span data-ttu-id="ea79a-185">\[[Conjunto de API: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="ea79a-185">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: textComparison
  fullName: textComparison
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly textComparison: Excel.TextConditionalFormat;'
    return:
      type:
      - excel.Excel.TextConditionalFormat
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"ea79a-186\">Ejemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"ea79a-186\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const range = sheet.getRange(\"B16:D18\");\n    const conditionalFormat = range.conditionalFormats\n        .add(Excel.ConditionalFormatType.containsText);\n    conditionalFormat.textComparison.format.font.color = \"red\";\n    conditionalFormat.textComparison.rule = { operator: Excel.ConditionalTextOperator.contains, text: \"Delayed\" };\n\n    await context.sync();\n});\n```"
- uid: excel.Excel.ConditionalFormat.textComparisonOrNullObject
  summary: >-
    <span data-ttu-id="ea79a-187">Devuelve el texto espec√≠fico en las propiedades de formato condicional si el formato condicional actual es un tipo de texto.</span><span class="sxs-lookup"><span data-stu-id="ea79a-187">Returns the specific text conditional format properties if the current conditional format is a text type.</span></span> <span data-ttu-id="ea79a-188">Por ejemplo, para dar formato a las celdas que coinciden con la palabra "Text".</span><span class="sxs-lookup"><span data-stu-id="ea79a-188">For example to format cells matching the word "Text".</span></span> <span data-ttu-id="ea79a-189">Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="ea79a-189">Read-only.</span></span>


    <span data-ttu-id="ea79a-190">\[[Conjunto de API: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="ea79a-190">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: textComparisonOrNullObject
  fullName: textComparisonOrNullObject
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly textComparisonOrNullObject: Excel.TextConditionalFormat;'
    return:
      type:
      - excel.Excel.TextConditionalFormat
- uid: excel.Excel.ConditionalFormat.toJSON
  summary: <span data-ttu-id="ea79a-191">Invalida el JavaScript `toJSON()` m√©todo con el fin de proporcionar resultados m√°s √∫tiles cuando se pasa un objeto de la API a `JSON.stringify()` <!-- -->.</span><span class="sxs-lookup"><span data-stu-id="ea79a-191">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`<!-- -->.</span></span> <span data-ttu-id="ea79a-192">(`JSON.stringify`<!-- -->, a su vez, llama a la `toJSON` m√©todo del objeto que se pasa a ella.) Mientras que el objeto original de Excel.ConditionalFormat es un objeto de la API, el `toJSON` m√©todo devuelve un objeto de JavaScript sin formato (escrito como `Excel.Interfaces.ConditionalFormatData` <!-- -->) que contiene copias superficiales de todas las propiedades del objeto original secundario cargado.</span><span class="sxs-lookup"><span data-stu-id="ea79a-192">(`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original Excel.ConditionalFormat object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ConditionalFormatData`<!-- -->) that contains shallow copies of any loaded child properties from the original object.</span></span>
  name: toJSON()
  fullName: toJSON
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON(): Excel.Interfaces.ConditionalFormatData;'
    return:
      type:
      - excel.Excel.Interfaces.ConditionalFormatData
      description: ''
- uid: excel.Excel.ConditionalFormat.topBottom
  summary: >-
    <span data-ttu-id="ea79a-193">Devuelve las propiedades de formato condicional de la parte superior o inferior si el formato condicional actual es un tipo de arriba o abajo.</span><span class="sxs-lookup"><span data-stu-id="ea79a-193">Returns the Top/Bottom conditional format properties if the current conditional format is an TopBottom type.</span></span> <span data-ttu-id="ea79a-194">Por ejemplo dar formato el 10% superior o elementos de la parte inferior a 10.</span><span class="sxs-lookup"><span data-stu-id="ea79a-194">For example to format the top 10% or bottom 10 items.</span></span> <span data-ttu-id="ea79a-195">Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="ea79a-195">Read-only.</span></span>


    <span data-ttu-id="ea79a-196">\[[Conjunto de API: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="ea79a-196">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: topBottom
  fullName: topBottom
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly topBottom: Excel.TopBottomConditionalFormat;'
    return:
      type:
      - excel.Excel.TopBottomConditionalFormat
- uid: excel.Excel.ConditionalFormat.topBottomOrNullObject
  summary: >-
    <span data-ttu-id="ea79a-197">Devuelve las propiedades de formato condicional de la parte superior o inferior si el formato condicional actual es un tipo de arriba o abajo.</span><span class="sxs-lookup"><span data-stu-id="ea79a-197">Returns the Top/Bottom conditional format properties if the current conditional format is an TopBottom type.</span></span> <span data-ttu-id="ea79a-198">Por ejemplo dar formato el 10% superior o elementos de la parte inferior a 10.</span><span class="sxs-lookup"><span data-stu-id="ea79a-198">For example to format the top 10% or bottom 10 items.</span></span> <span data-ttu-id="ea79a-199">Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="ea79a-199">Read-only.</span></span>


    <span data-ttu-id="ea79a-200">\[[Conjunto de API: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="ea79a-200">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: topBottomOrNullObject
  fullName: topBottomOrNullObject
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly topBottomOrNullObject: Excel.TopBottomConditionalFormat;'
    return:
      type:
      - excel.Excel.TopBottomConditionalFormat
- uid: excel.Excel.ConditionalFormat.type
  summary: >-
    <span data-ttu-id="ea79a-201">Un tipo de formato condicional.</span><span class="sxs-lookup"><span data-stu-id="ea79a-201">A type of conditional format.</span></span> <span data-ttu-id="ea79a-202">S√≥lo se puede establecer a la vez.</span><span class="sxs-lookup"><span data-stu-id="ea79a-202">Only one can be set at a time.</span></span> <span data-ttu-id="ea79a-203">Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="ea79a-203">Read-only.</span></span>


    <span data-ttu-id="ea79a-204">\[[Conjunto de API: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="ea79a-204">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: type
  fullName: type
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly type: Excel.ConditionalFormatType | "Custom" | "DataBar" | "ColorScale" | "IconSet" | "TopBottom" | "PresetCriteria" | "ContainsText" | "CellValue";'
    return:
      type:
      - Excel.ConditionalFormatType | "Custom" | "DataBar" | "ColorScale" | "IconSet" | "TopBottom" | "PresetCriteria" | "ContainsText" | "CellValue"
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"ea79a-205\">Ejemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"ea79a-205\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const worksheetRange = sheet.getRange();\n    worksheetRange.conditionalFormats.load(\"type\");\n\n    await context.sync();\n\n    let cfRangePairs: { cf: Excel.ConditionalFormat, range: Excel.Range }[] = [];\n    worksheetRange.conditionalFormats.items.forEach(item => {\n        cfRangePairs.push({\n            cf: item,\n            range: item.getRange().load(\"address\")\n        });\n    });\n\n    await context.sync();\n\n    if (cfRangePairs.length > 0) {\n        cfRangePairs.forEach(item => {\n            console.log(item.cf.type);\n        });\n    } else {\n        console.log(\"No conditional formats applied.\");\n    }\n});\n```"
