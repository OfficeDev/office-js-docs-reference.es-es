### YamlMime:UniversalReference
items:
  - uid: excel.Excel.ConditionalFormat
    summary: |-
      Un objeto que encapsula el intervalo, el formato, la regla y otras propiedades del formato condicional.

      \[[Conjunto de API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: Excel.ConditionalFormat
    fullName: Excel.ConditionalFormat
    langs:
      - typeScript
    type: class
    extends:
      - office.OfficeExtension.ClientObject
    package: excel
    children:
      - excel.Excel.ConditionalFormat.cellValue
      - excel.Excel.ConditionalFormat.cellValueOrNullObject
      - excel.Excel.ConditionalFormat.colorScale
      - excel.Excel.ConditionalFormat.colorScaleOrNullObject
      - excel.Excel.ConditionalFormat.context
      - excel.Excel.ConditionalFormat.custom
      - excel.Excel.ConditionalFormat.customOrNullObject
      - excel.Excel.ConditionalFormat.dataBar
      - excel.Excel.ConditionalFormat.dataBarOrNullObject
      - excel.Excel.ConditionalFormat.delete
      - excel.Excel.ConditionalFormat.getRange
      - excel.Excel.ConditionalFormat.getRangeOrNullObject
      - excel.Excel.ConditionalFormat.getRanges
      - excel.Excel.ConditionalFormat.iconSet
      - excel.Excel.ConditionalFormat.iconSetOrNullObject
      - excel.Excel.ConditionalFormat.id
      - excel.Excel.ConditionalFormat.load
      - excel.Excel.ConditionalFormat.load_1
      - excel.Excel.ConditionalFormat.load_2
      - excel.Excel.ConditionalFormat.preset
      - excel.Excel.ConditionalFormat.presetOrNullObject
      - excel.Excel.ConditionalFormat.priority
      - excel.Excel.ConditionalFormat.set
      - excel.Excel.ConditionalFormat.set_1
      - excel.Excel.ConditionalFormat.stopIfTrue
      - excel.Excel.ConditionalFormat.textComparison
      - excel.Excel.ConditionalFormat.textComparisonOrNullObject
      - excel.Excel.ConditionalFormat.toJSON
      - excel.Excel.ConditionalFormat.topBottom
      - excel.Excel.ConditionalFormat.topBottomOrNullObject
      - excel.Excel.ConditionalFormat.type
  - uid: excel.Excel.ConditionalFormat.cellValue
    summary: |-
      Devuelve las propiedades de formato condicional del valor de celda si el formato condicional actual es un tipo CellValue. Por ejemplo, para dar formato a todas las celdas comprendidas entre 5 y 10. Solo lectura.

      \[[Conjunto de API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: cellValue
    fullName: cellValue
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly cellValue: Excel.CellValueConditionalFormat;'
      return:
        type:
          - excel.Excel.CellValueConditionalFormat
        description: |-


          #### <a name="examples"></a>Ejemplos

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const range = sheet.getRange("B21:E23");
              const conditionalFormat = range.conditionalFormats
                  .add(Excel.ConditionalFormatType.cellValue);
              conditionalFormat.cellValue.format.font.color = "red";
              conditionalFormat.cellValue.rule = { formula1: "=0", operator: "LessThan" };

              await context.sync();
          });
          ```
  - uid: excel.Excel.ConditionalFormat.cellValueOrNullObject
    summary: |-
      Devuelve las propiedades de formato condicional del valor de celda si el formato condicional actual es un tipo CellValue. Por ejemplo, para dar formato a todas las celdas comprendidas entre 5 y 10. Solo lectura.

      \[[Conjunto de API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: cellValueOrNullObject
    fullName: cellValueOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly cellValueOrNullObject: Excel.CellValueConditionalFormat;'
      return:
        type:
          - excel.Excel.CellValueConditionalFormat
  - uid: excel.Excel.ConditionalFormat.colorScale
    summary: |-
      Devuelve las propiedades del formato condicional de ColorScale si el formato condicional actual es un tipo ColorScale. Solo lectura.

      \[[Conjunto de API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: colorScale
    fullName: colorScale
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly colorScale: Excel.ColorScaleConditionalFormat;'
      return:
        type:
          - excel.Excel.ColorScaleConditionalFormat
        description: |-


          #### <a name="examples"></a>Ejemplos

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const range = sheet.getRange("B2:M5");
              const conditionalFormat = range.conditionalFormats
                  .add(Excel.ConditionalFormatType.colorScale);
              const criteria = {
                  minimum: { formula: null, type: Excel.ConditionalFormatColorCriterionType.lowestValue, color: "blue" },
                  midpoint: { formula: "50", type: Excel.ConditionalFormatColorCriterionType.percent, color: "yellow" },
                  maximum: { formula: null, type: Excel.ConditionalFormatColorCriterionType.highestValue, color: "red" }
              };
              conditionalFormat.colorScale.criteria = criteria;

              await context.sync();
          });
          ```
  - uid: excel.Excel.ConditionalFormat.colorScaleOrNullObject
    summary: |-
      Devuelve las propiedades del formato condicional de ColorScale si el formato condicional actual es un tipo ColorScale. Solo lectura.

      \[[Conjunto de API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: colorScaleOrNullObject
    fullName: colorScaleOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly colorScaleOrNullObject: Excel.ColorScaleConditionalFormat;'
      return:
        type:
          - excel.Excel.ColorScaleConditionalFormat
  - uid: excel.Excel.ConditionalFormat.context
    summary: Contexto de la solicitud asociado al objeto. Esto conecta el proceso del complemento con el proceso de la aplicaci√≥n host de Office.
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - RequestContext
  - uid: excel.Excel.ConditionalFormat.custom
    summary: |-
      Devuelve las propiedades de formato condicional personalizado si el formato condicional actual es un tipo personalizado. Solo lectura.

      \[[Conjunto de API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: custom
    fullName: custom
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly custom: Excel.CustomConditionalFormat;'
      return:
        type:
          - excel.Excel.CustomConditionalFormat
        description: |-


          #### <a name="examples"></a>Ejemplos

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const range = sheet.getRange("B8:E13");
              const conditionalFormat = range.conditionalFormats.add(Excel.ConditionalFormatType.custom);
              conditionalFormat.custom.rule.formula = '=IF(B8>INDIRECT("RC[-1]",0),TRUE)';
              conditionalFormat.custom.format.font.color = "green";

              await context.sync();
          });
          ```
  - uid: excel.Excel.ConditionalFormat.customOrNullObject
    summary: |-
      Devuelve las propiedades de formato condicional personalizado si el formato condicional actual es un tipo personalizado. Solo lectura.

      \[[Conjunto de API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: customOrNullObject
    fullName: customOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly customOrNullObject: Excel.CustomConditionalFormat;'
      return:
        type:
          - excel.Excel.CustomConditionalFormat
  - uid: excel.Excel.ConditionalFormat.dataBar
    summary: |-
      Devuelve las propiedades de la barra de datos si el formato condicional actual es una barra de datos. Solo lectura.

      \[[Conjunto de API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: dataBar
    fullName: dataBar
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly dataBar: Excel.DataBarConditionalFormat;'
      return:
        type:
          - excel.Excel.DataBarConditionalFormat
        description: |-


          #### <a name="examples"></a>Ejemplos

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const range = sheet.getRange("B8:E13");
              const conditionalFormat = range.conditionalFormats
                  .add(Excel.ConditionalFormatType.dataBar);
              conditionalFormat.dataBar.barDirection = Excel.ConditionalDataBarDirection.leftToRight;

              await context.sync();
          });
          ```
  - uid: excel.Excel.ConditionalFormat.dataBarOrNullObject
    summary: |-
      Devuelve las propiedades de la barra de datos si el formato condicional actual es una barra de datos. Solo lectura.

      \[[Conjunto de API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: dataBarOrNullObject
    fullName: dataBarOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly dataBarOrNullObject: Excel.DataBarConditionalFormat;'
      return:
        type:
          - excel.Excel.DataBarConditionalFormat
  - uid: excel.Excel.ConditionalFormat.delete
    summary: |-
      Elimina este formato condicional.

      \[[Conjunto de API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: delete()
    fullName: delete()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'delete(): void;'
      return:
        type:
          - void
        description: ''
  - uid: excel.Excel.ConditionalFormat.getRange
    summary: |-
      Devuelve el intervalo en el que se aplica el formato condicional. Produce un error si el formato condicional se aplica a varios rangos. Solo lectura.

      \[[Conjunto de API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getRange()
    fullName: getRange()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRange(): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a>Ejemplos

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const worksheetRange = sheet.getRange();
              worksheetRange.conditionalFormats.load("type");

              await context.sync();

              let cfRangePairs: { cf: Excel.ConditionalFormat, range: Excel.Range }[] = [];
              worksheetRange.conditionalFormats.items.forEach(item => {
                  cfRangePairs.push({
                      cf: item,
                      range: item.getRange().load("address")
                  });
              });

              await context.sync();

              if (cfRangePairs.length > 0) {
                  cfRangePairs.forEach(item => {
                      console.log(item.cf.type);
                  });
              } else {
                  console.log("No conditional formats applied.");
              }
          });
          ```
  - uid: excel.Excel.ConditionalFormat.getRangeOrNullObject
    summary: |-
      Devuelve el intervalo al que se aplica el formato condicional o un objeto NULL si el formato condicional se aplica a varios rangos. Solo lectura.

      \[[Conjunto de API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getRangeOrNullObject()
    fullName: getRangeOrNullObject()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRangeOrNullObject(): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: ''
  - uid: excel.Excel.ConditionalFormat.getRanges
    summary: |-
      Devuelve el objeto RangeAreas, que incluye uno o m√°s intervalos rectangulares, al que se aplica el formato condicional. Solo lectura.

      \[[Conjunto de API: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: getRanges()
    fullName: getRanges()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRanges(): Excel.RangeAreas;'
      return:
        type:
          - excel.Excel.RangeAreas
        description: ''
  - uid: excel.Excel.ConditionalFormat.iconSet
    summary: |-
      Devuelve las propiedades del formato condicional IconSet si el formato condicional actual es un tipo IconSet. Solo lectura.

      \[[Conjunto de API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: iconSet
    fullName: iconSet
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly iconSet: Excel.IconSetConditionalFormat;'
      return:
        type:
          - excel.Excel.IconSetConditionalFormat
        description: |-


          #### <a name="examples"></a>Ejemplos

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const range = sheet.getRange("B8:E13");
              const conditionalFormat = range.conditionalFormats
                  .add(Excel.ConditionalFormatType.iconSet);
              const iconSetCF = conditionalFormat.iconSet;
              iconSetCF.style = Excel.IconSet.threeTriangles;

              /*
                  The iconSetCF.criteria array is automatically prepopulated with
                  criterion elements whose properties have been given default settings.
                  You can't write to each property of a criterion directly. Instead,
                  replace the whole criteria object.

                  With a "three*" icon set style, such as "threeTriangles", the third
                  element in the criteria array (criteria[2]) defines the "top" icon;
                  e.g., a green triangle. The second (criteria[1]) defines the "middle"
                  icon, The first (criteria[0]) defines the "low" icon, but it
                  can often be left empty as this method does below, because every
                  cell that does not match the other two criteria always gets the low
                  icon.            
              */
              iconSetCF.criteria = [
                  {} as any,
                  {
                      type: Excel.ConditionalFormatIconRuleType.number,
                      operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                      formula: "=700"
                  },
                  {
                      type: Excel.ConditionalFormatIconRuleType.number,
                      operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                      formula: "=1000",
                  }
              ];

              await context.sync();
          });
          ```
  - uid: excel.Excel.ConditionalFormat.iconSetOrNullObject
    summary: |-
      Devuelve las propiedades del formato condicional IconSet si el formato condicional actual es un tipo IconSet. Solo lectura.

      \[[Conjunto de API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: iconSetOrNullObject
    fullName: iconSetOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly iconSetOrNullObject: Excel.IconSetConditionalFormat;'
      return:
        type:
          - excel.Excel.IconSetConditionalFormat
  - uid: excel.Excel.ConditionalFormat.id
    summary: |-
      La prioridad del formato condicional dentro de la ConditionalFormatCollection actual. Solo lectura.

      \[[Conjunto de API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: id
    fullName: id
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly id: string;'
      return:
        type:
          - string
  - uid: excel.Excel.ConditionalFormat.load
    summary: 'Pone en cola un comando para cargar las propiedades especificadas del objeto. Antes de leer las propiedades, debe llamar a "context.sync()".'
    remarks: |-
      Adem√°s de esta firma, este m√©todo tiene las siguientes firmas:

      `load(option?: string | string[]): Excel.ConditionalFormat`-Donde opci√≥n es una cadena delimitada por comas o una matriz de cadenas que especifican las propiedades que se van a cargar.

      `load(option?: { select?: string; expand?: string; }): Excel.ConditionalFormat`-Where opci√≥n. Select es una cadena delimitada por comas que especifica las propiedades que se van a cargar y Options. Expand es una cadena delimitada por comas que especifica las propiedades de navegaci√≥n que se deben cargar.

      `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.ConditionalFormat`-Solo disponible en tipos de colecci√≥n. Es similar a la firma anterior. Option. Top especifica el n√∫mero m√°ximo de elementos de colecci√≥n que se pueden incluir en el resultado. La opci√≥n. SKIP especifica el n√∫mero de elementos que se deben omitir y que no se incluyen en el resultado. Si se especifica Option. Top, el conjunto de resultados se iniciar√° despu√©s de omitir el n√∫mero especificado de elementos.
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: Excel.Interfaces.ConditionalFormatLoadOptions): Excel.ConditionalFormat;'
      return:
        type:
          - excel.Excel.ConditionalFormat
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - excel.Excel.Interfaces.ConditionalFormatLoadOptions
  - uid: excel.Excel.ConditionalFormat.load_1
    summary: Pone en cola un comando para cargar las propiedades especificadas del objeto. Debe llamar `context.sync()` antes de leer las propiedades.
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.ConditionalFormat;'
      return:
        type:
          - excel.Excel.ConditionalFormat
        description: ''
      parameters:
        - id: propertyNames
          description: Una cadena delimitada por comas o una matriz de cadenas que especifican las propiedades que se van a cargar.
          type:
            - 'string | string[]'
  - uid: excel.Excel.ConditionalFormat.load_2
    summary: Pone en cola un comando para cargar las propiedades especificadas del objeto. Debe llamar `context.sync()` antes de leer las propiedades.
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): Excel.ConditionalFormat;'
      return:
        type:
          - excel.Excel.ConditionalFormat
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: Donde propertyNamesAndPaths. Select es una cadena delimitada por comas que especifica las propiedades que se van a cargar y propertyNamesAndPaths. Expand es una cadena delimitada por comas que especifica las propiedades de navegaci√≥n que se deben cargar.
          type:
            - '{ select?: string; expand?: string; }'
  - uid: excel.Excel.ConditionalFormat.preset
    summary: |-
      Devuelve el formato condicional de criterios preestablecidos. Consulte Excel. PresetCriteriaConditionalFormat para obtener m√°s informaci√≥n.

      \[[Conjunto de API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: preset
    fullName: preset
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly preset: Excel.PresetCriteriaConditionalFormat;'
      return:
        type:
          - excel.Excel.PresetCriteriaConditionalFormat
        description: |-


          #### <a name="examples"></a>Ejemplos

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const range = sheet.getRange("B2:M5");
              const conditionalFormat = range.conditionalFormats
                  .add(Excel.ConditionalFormatType.presetCriteria);
              conditionalFormat.preset.format.font.color = "white";
              conditionalFormat.preset.rule = { criterion: Excel.ConditionalFormatPresetCriterion.oneStdDevAboveAverage };

              await context.sync();
          });
          ```
  - uid: excel.Excel.ConditionalFormat.presetOrNullObject
    summary: |-
      Devuelve el formato condicional de criterios preestablecidos. Consulte Excel. PresetCriteriaConditionalFormat para obtener m√°s informaci√≥n.

      \[[Conjunto de API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: presetOrNullObject
    fullName: presetOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly presetOrNullObject: Excel.PresetCriteriaConditionalFormat;'
      return:
        type:
          - excel.Excel.PresetCriteriaConditionalFormat
  - uid: excel.Excel.ConditionalFormat.priority
    summary: |-
      Prioridad (o √≠ndice) dentro de la colecci√≥n de formato condicional en la que este formato condicional existe actualmente. Al cambiar esto tambi√©n cambian las prioridades de otros formatos condicionales, para permitir un orden de prioridad contiguo. Use una prioridad negativa para empezar desde la parte posterior. Las prioridades mayores que los l√≠mites se obtienen y se establecen en la prioridad m√°xima (o m√≠nima si es negativa). Adem√°s, tenga en cuenta que si cambia la prioridad, tendr√° que volver a capturar una nueva copia del objeto en esa nueva ubicaci√≥n de prioridad si desea realizar m√°s cambios en ella. Solo lectura.

      \[[Conjunto de API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: priority
    fullName: priority
    langs:
      - typeScript
    type: property
    syntax:
      content: 'priority: number;'
      return:
        type:
          - number
  - uid: excel.Excel.ConditionalFormat.set
    summary: Establece varias propiedades de un objeto al mismo tiempo. Puede pasar un objeto sin formato con las propiedades apropiadas o cualquier otro objeto de la API del mismo tipo.
    remarks: |-
      Este m√©todo tiene la siguiente firma adicional:

      `set(properties: Excel.ConditionalFormat): void`
    name: 'set(properties, options)'
    fullName: 'set(properties, options)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Interfaces.ConditionalFormatUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: Objeto de JavaScript con propiedades que se estructuran de forma isom√≥rfico a las propiedades del objeto en el que se llama al m√©todo.
          type:
            - Interfaces.ConditionalFormatUpdateData
        - id: options
          description: Proporciona una opci√≥n para suprimir errores si el objeto Properties intenta establecer propiedades de solo lectura.
          type:
            - office.OfficeExtension.UpdateOptions
  - uid: excel.Excel.ConditionalFormat.set_1
    summary: 'Establece varias propiedades en el objeto al mismo tiempo, bas√°ndose en un objeto cargado existente.'
    name: set(properties)
    fullName: set(properties)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Excel.ConditionalFormat): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - excel.Excel.ConditionalFormat
  - uid: excel.Excel.ConditionalFormat.stopIfTrue
    summary: |-
      Si se cumplen las condiciones de este formato condicional, los formatos de menor prioridad no surtir√°n efecto en esa celda. Null en barras de colorscales, conjuntos de iconos y como no hay ning√∫n concepto de StopIfTrue para estos

      \[[Conjunto de API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: stopIfTrue
    fullName: stopIfTrue
    langs:
      - typeScript
    type: property
    syntax:
      content: 'stopIfTrue: boolean;'
      return:
        type:
          - boolean
  - uid: excel.Excel.ConditionalFormat.textComparison
    summary: |-
      Devuelve las propiedades de formato condicional de texto espec√≠fico si el formato condicional actual es un tipo de texto. Por ejemplo, para dar formato a celdas que coincidan con la palabra "texto". Solo lectura.

      \[[Conjunto de API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: textComparison
    fullName: textComparison
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly textComparison: Excel.TextConditionalFormat;'
      return:
        type:
          - excel.Excel.TextConditionalFormat
        description: |-


          #### <a name="examples"></a>Ejemplos

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const range = sheet.getRange("B16:D18");
              const conditionalFormat = range.conditionalFormats
                  .add(Excel.ConditionalFormatType.containsText);
              conditionalFormat.textComparison.format.font.color = "red";
              conditionalFormat.textComparison.rule = { operator: Excel.ConditionalTextOperator.contains, text: "Delayed" };

              await context.sync();
          });
          ```
  - uid: excel.Excel.ConditionalFormat.textComparisonOrNullObject
    summary: |-
      Devuelve las propiedades de formato condicional de texto espec√≠fico si el formato condicional actual es un tipo de texto. Por ejemplo, para dar formato a celdas que coincidan con la palabra "texto". Solo lectura.

      \[[Conjunto de API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: textComparisonOrNullObject
    fullName: textComparisonOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly textComparisonOrNullObject: Excel.TextConditionalFormat;'
      return:
        type:
          - excel.Excel.TextConditionalFormat
  - uid: excel.Excel.ConditionalFormat.toJSON
    summary: 'Reemplaza el m√©todo JavaScript `toJSON()` para proporcionar un resultado m√°s √∫til cuando se pasa un objeto API a`JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, a su vez, llama `toJSON` al m√©todo del objeto que se le pasa.) Mientras que el objeto Excel. ConditionalFormat original es un objeto API, `toJSON` el m√©todo devuelve un objeto JavaScript sin formato (escrito como`Excel.Interfaces.ConditionalFormatData`<!-- -->) que contiene copias rasas de las propiedades secundarias cargadas del objeto original.'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.ConditionalFormatData;'
      return:
        type:
          - excel.Excel.Interfaces.ConditionalFormatData
        description: ''
  - uid: excel.Excel.ConditionalFormat.topBottom
    summary: |-
      Devuelve las propiedades de formato condicional superior o inferior si el formato condicional actual es un tipo de parte inferior. Por ejemplo, para dar formato al 10% superior o a los 10 elementos inferiores. Solo lectura.

      \[[Conjunto de API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: topBottom
    fullName: topBottom
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly topBottom: Excel.TopBottomConditionalFormat;'
      return:
        type:
          - excel.Excel.TopBottomConditionalFormat
  - uid: excel.Excel.ConditionalFormat.topBottomOrNullObject
    summary: |-
      Devuelve las propiedades de formato condicional superior o inferior si el formato condicional actual es un tipo de parte inferior. Por ejemplo, para dar formato al 10% superior o a los 10 elementos inferiores. Solo lectura.

      \[[Conjunto de API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: topBottomOrNullObject
    fullName: topBottomOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly topBottomOrNullObject: Excel.TopBottomConditionalFormat;'
      return:
        type:
          - excel.Excel.TopBottomConditionalFormat
  - uid: excel.Excel.ConditionalFormat.type
    summary: |-
      Un tipo de formato condicional. Solo se puede establecer una a la vez. Solo lectura.

      \[[Conjunto de API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
    name: type
    fullName: type
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly type: Excel.ConditionalFormatType | "Custom" | "DataBar" | "ColorScale" | "IconSet" | "TopBottom" | "PresetCriteria" | "ContainsText" | "CellValue";'
      return:
        type:
          - Excel.ConditionalFormatType | "Custom" | "DataBar" | "ColorScale" | "IconSet" | "TopBottom" | "PresetCriteria" | "ContainsText" | "CellValue"
        description: |-


          #### <a name="examples"></a>Ejemplos

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const worksheetRange = sheet.getRange();
              worksheetRange.conditionalFormats.load("type");

              await context.sync();

              let cfRangePairs: { cf: Excel.ConditionalFormat, range: Excel.Range }[] = [];
              worksheetRange.conditionalFormats.items.forEach(item => {
                  cfRangePairs.push({
                      cf: item,
                      range: item.getRange().load("address")
                  });
              });

              await context.sync();

              if (cfRangePairs.length > 0) {
                  cfRangePairs.forEach(item => {
                      console.log(item.cf.type);
                  });
              } else {
                  console.log("No conditional formats applied.");
              }
          });
          ```