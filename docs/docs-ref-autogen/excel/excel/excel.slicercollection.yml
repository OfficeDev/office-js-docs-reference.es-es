### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.SlicerCollection:class'
    summary: |-
      <span data-ttu-id="e3472-101">Representa una colección de todos los objetos Slicer en el libro o en una hoja de cálculo.</span><span class="sxs-lookup"><span data-stu-id="e3472-101">Represents a collection of all the slicer objects on the workbook or a worksheet.</span></span>

      <span data-ttu-id="e3472-102">\[[Conjunto de API: EXCELAPI beta (solo vista previa)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e3472-102">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: Excel.SlicerCollection
    fullName: Excel.SlicerCollection
    langs:
      - typeScript
    type: class
    extends:
      - 'excel!OfficeExtension.ClientObject:class'
    package: excel!
    children:
      - 'excel!Excel.SlicerCollection#add:member(1)'
      - 'excel!Excel.SlicerCollection#context:member'
      - 'excel!Excel.SlicerCollection#getCount:member(1)'
      - 'excel!Excel.SlicerCollection#getItem:member(1)'
      - 'excel!Excel.SlicerCollection#getItemAt:member(1)'
      - 'excel!Excel.SlicerCollection#getItemOrNullObject:member(1)'
      - 'excel!Excel.SlicerCollection#items:member'
      - 'excel!Excel.SlicerCollection#load:member(1)'
      - 'excel!Excel.SlicerCollection#load:member(2)'
      - 'excel!Excel.SlicerCollection#load:member(3)'
      - 'excel!Excel.SlicerCollection#toJSON:member(1)'
  - uid: 'excel!Excel.SlicerCollection#add:member(1)'
    summary: |-
      <span data-ttu-id="e3472-103">Agrega una nueva segmentación al libro.</span><span class="sxs-lookup"><span data-stu-id="e3472-103">Adds a new slicer to the workbook.</span></span>

      <span data-ttu-id="e3472-104">\[[Conjunto de API: EXCELAPI beta (solo vista previa)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e3472-104">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: 'add(slicerSource, sourceField, slicerDestination)'
    fullName: 'add(slicerSource, sourceField, slicerDestination)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'add(slicerSource: string | PivotTable | Table, sourceField: string | PivotField | number | TableColumn, slicerDestination?: string | Worksheet): Excel.Slicer;'
      return:
        type:
          - 'excel!Excel.Slicer:class'
        description: |-
          <span data-ttu-id="e3472-105">Nueva segmentación de los segmentos.</span><span class="sxs-lookup"><span data-stu-id="e3472-105">The new slicer.</span></span>

          #### <a name="examples"></a><span data-ttu-id="e3472-106">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="e3472-106">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Pivot");
              const slicer = sheet.slicers.add(
                  "Farm Sales", /* The slicer data source. For PivotTables, this can be the PivotTable object reference or name. */
                  "Type" /* The field in the data source to filter by. For PivotTables, this can be a PivotField object reference or ID. */
              );
              slicer.name = "Fruit Slicer";
              await context.sync();
          });
          ```
      parameters:
        - id: slicerSource
          description: '<span data-ttu-id="e3472-107">El origen de datos en el que se basará la nueva segmentación de datos.</span><span class="sxs-lookup"><span data-stu-id="e3472-107">The data source that the new slicer will be based on.</span></span> <span data-ttu-id="e3472-108">Puede ser un objeto de tabla dinámica, un objeto Table o una cadena.</span><span class="sxs-lookup"><span data-stu-id="e3472-108">It can be a PivotTable object, a Table object or a string.</span></span> <span data-ttu-id="e3472-109">Cuando se pasa un objeto PivotTable, el origen de datos es el origen del objeto PivotTable.</span><span class="sxs-lookup"><span data-stu-id="e3472-109">When a PivotTable object is passed, the data source is the source of the PivotTable object.</span></span> <span data-ttu-id="e3472-110">Cuando se pasa un objeto Table, el origen de datos es el objeto Table.</span><span class="sxs-lookup"><span data-stu-id="e3472-110">When a Table object is passed, the data source is the Table object.</span></span> <span data-ttu-id="e3472-111">Cuando se pasa una cadena, se interpreta como el nombre o el identificador de una tabla dinámica o tabla.</span><span class="sxs-lookup"><span data-stu-id="e3472-111">When a string is passed, it is interpreted as the name/id of a PivotTable/Table.</span></span>'
          type:
            - 'excel!Excel.SlicerCollection#add~0:complex'
        - id: sourceField
          description: '<span data-ttu-id="e3472-112">Campo del origen de datos por el que se va a filtrar.</span><span class="sxs-lookup"><span data-stu-id="e3472-112">The field in the data source to filter by.</span></span> <span data-ttu-id="e3472-113">Puede ser un objeto PivotField, un objeto TableColumn, el identificador de un campo dinámico o el identificador o nombre de TableColumn.</span><span class="sxs-lookup"><span data-stu-id="e3472-113">It can be a PivotField object, a TableColumn object, the id of a PivotField or the id/name of TableColumn.</span></span>'
          type:
            - 'excel!Excel.SlicerCollection#add~1:complex'
        - id: slicerDestination
          description: <span data-ttu-id="e3472-114">Opcional.</span><span class="sxs-lookup"><span data-stu-id="e3472-114">Optional.</span></span> <span data-ttu-id="e3472-115">La hoja de cálculo en la que se creará la nueva segmentación de trabajo.</span><span class="sxs-lookup"><span data-stu-id="e3472-115">The worksheet where the new slicer will be created in.</span></span> <span data-ttu-id="e3472-116">Puede ser un objeto Worksheet o el nombre/identificador de una hoja de cálculo.</span><span class="sxs-lookup"><span data-stu-id="e3472-116">It can be a Worksheet object or the name/id of a worksheet.</span></span> <span data-ttu-id="e3472-117">Este parámetro se puede omitir si la colección Slicer se recupera de Worksheet.</span><span class="sxs-lookup"><span data-stu-id="e3472-117">This parameter can be omitted if the slicer collection is retrieved from worksheet.</span></span>
          type:
            - 'excel!Excel.SlicerCollection#add~2:complex'
  - uid: 'excel!Excel.SlicerCollection#context:member'
    summary: <span data-ttu-id="e3472-118">Contexto de la solicitud asociado al objeto.</span><span class="sxs-lookup"><span data-stu-id="e3472-118">The request context associated with the object.</span></span> <span data-ttu-id="e3472-119">Esto conecta el proceso del complemento con el proceso de la aplicación host de Office.</span><span class="sxs-lookup"><span data-stu-id="e3472-119">This connects the add-in's process to the Office host application's process.</span></span>
    isPreview: true
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'excel!Excel.RequestContext:class'
  - uid: 'excel!Excel.SlicerCollection#getCount:member(1)'
    summary: |-
      <span data-ttu-id="e3472-120">Devuelve el número de segmentaciones incluidas en la colección.</span><span class="sxs-lookup"><span data-stu-id="e3472-120">Returns the number of slicers in the collection.</span></span>

      <span data-ttu-id="e3472-121">\[[Conjunto de API: EXCELAPI beta (solo vista previa)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e3472-121">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: getCount()
    fullName: getCount()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCount(): OfficeExtension.ClientResult<number>;'
      return:
        type:
          - 'excel!Excel.SlicerCollection#getCount~0:complex'
        description: ''
  - uid: 'excel!Excel.SlicerCollection#getItem:member(1)'
    summary: |-
      <span data-ttu-id="e3472-122">Obtiene un objeto de segmentación mediante su nombre o identificador.</span><span class="sxs-lookup"><span data-stu-id="e3472-122">Gets a slicer object using its name or id.</span></span>

      <span data-ttu-id="e3472-123">\[[Conjunto de API: EXCELAPI beta (solo vista previa)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e3472-123">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: getItem(key)
    fullName: getItem(key)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItem(key: string): Excel.Slicer;'
      return:
        type:
          - 'excel!Excel.Slicer:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="e3472-124">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="e3472-124">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const slicer = context.workbook.slicers.getItem("Fruit Slicer");
              slicer.caption = "Fruit Types";
              slicer.left = 395;
              slicer.top = 15;
              slicer.height = 135;
              slicer.width = 150;
              await context.sync();
          });
          ```
      parameters:
        - id: key
          description: <span data-ttu-id="e3472-125">El nombre o el identificador de la segmentación de la segmentación.</span><span class="sxs-lookup"><span data-stu-id="e3472-125">The name or id of the slicer.</span></span>
          type:
            - string
  - uid: 'excel!Excel.SlicerCollection#getItemAt:member(1)'
    summary: |-
      <span data-ttu-id="e3472-126">Obtiene una segmentación basándose en su posición en la colección.</span><span class="sxs-lookup"><span data-stu-id="e3472-126">Gets a slicer based on its position in the collection.</span></span>

      <span data-ttu-id="e3472-127">\[[Conjunto de API: EXCELAPI beta (solo vista previa)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e3472-127">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: getItemAt(index)
    fullName: getItemAt(index)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemAt(index: number): Excel.Slicer;'
      return:
        type:
          - 'excel!Excel.Slicer:class'
        description: ''
      parameters:
        - id: index
          description: <span data-ttu-id="e3472-128">Valor de índice del objeto que se va a recuperar.</span><span class="sxs-lookup"><span data-stu-id="e3472-128">Index value of the object to be retrieved.</span></span> <span data-ttu-id="e3472-129">Indizado con cero.</span><span class="sxs-lookup"><span data-stu-id="e3472-129">Zero-indexed.</span></span>
          type:
            - number
  - uid: 'excel!Excel.SlicerCollection#getItemOrNullObject:member(1)'
    summary: |-
      <span data-ttu-id="e3472-130">Obtiene una segmentación mediante su nombre o identificador. Si la segmentación no existe, devolverá un objeto null.</span><span class="sxs-lookup"><span data-stu-id="e3472-130">Gets a slicer using its name or id. If the slicer does not exist, will return a null object.</span></span>

      <span data-ttu-id="e3472-131">\[[Conjunto de API: EXCELAPI beta (solo vista previa)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="e3472-131">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: getItemOrNullObject(key)
    fullName: getItemOrNullObject(key)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemOrNullObject(key: string): Excel.Slicer;'
      return:
        type:
          - 'excel!Excel.Slicer:class'
        description: ''
      parameters:
        - id: key
          description: <span data-ttu-id="e3472-132">Nombre o identificador de la segmentación de la segmentación de la que se va a recuperar.</span><span class="sxs-lookup"><span data-stu-id="e3472-132">Name or Id of the slicer to be retrieved.</span></span>
          type:
            - string
  - uid: 'excel!Excel.SlicerCollection#items:member'
    summary: <span data-ttu-id="e3472-133">Obtiene los elementos secundarios cargados en esta colección.</span><span class="sxs-lookup"><span data-stu-id="e3472-133">Gets the loaded child items in this collection.</span></span>
    isPreview: true
    name: items
    fullName: items
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly items: Excel.Slicer[];'
      return:
        type:
          - 'excel!Excel.SlicerCollection#items~0:complex'
  - uid: 'excel!Excel.SlicerCollection#load:member(1)'
    summary: <span data-ttu-id="e3472-134">Pone en cola un comando para cargar las propiedades especificadas del objeto.</span><span class="sxs-lookup"><span data-stu-id="e3472-134">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="e3472-135">Debe llamar `context.sync()` antes de leer las propiedades.</span><span class="sxs-lookup"><span data-stu-id="e3472-135">You must call `context.sync()` before reading the properties.</span></span>
    isPreview: true
    name: load(options)
    fullName: load(options)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(options?: Excel.Interfaces.SlicerCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions): Excel.SlicerCollection;'
      return:
        type:
          - 'excel!Excel.SlicerCollection:class'
        description: ''
      parameters:
        - id: options
          description: <span data-ttu-id="e3472-136">Proporciona opciones para las propiedades del objeto que se va a cargar.</span><span class="sxs-lookup"><span data-stu-id="e3472-136">Provides options for which properties of the object to load.</span></span>
          type:
            - 'excel!Excel.SlicerCollection#load~0:complex'
  - uid: 'excel!Excel.SlicerCollection#load:member(2)'
    summary: <span data-ttu-id="e3472-137">Pone en cola un comando para cargar las propiedades especificadas del objeto.</span><span class="sxs-lookup"><span data-stu-id="e3472-137">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="e3472-138">Debe llamar `context.sync()` antes de leer las propiedades.</span><span class="sxs-lookup"><span data-stu-id="e3472-138">You must call `context.sync()` before reading the properties.</span></span>
    isPreview: true
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.SlicerCollection;'
      return:
        type:
          - 'excel!Excel.SlicerCollection:class'
        description: ''
      parameters:
        - id: propertyNames
          description: <span data-ttu-id="e3472-139">Una cadena delimitada por comas o una matriz de cadenas que especifican las propiedades que se van a cargar.</span><span class="sxs-lookup"><span data-stu-id="e3472-139">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
          type:
            - 'string | string[]'
  - uid: 'excel!Excel.SlicerCollection#load:member(3)'
    summary: <span data-ttu-id="e3472-140">Pone en cola un comando para cargar las propiedades especificadas del objeto.</span><span class="sxs-lookup"><span data-stu-id="e3472-140">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="e3472-141">Debe llamar `context.sync()` antes de leer las propiedades.</span><span class="sxs-lookup"><span data-stu-id="e3472-141">You must call `context.sync()` before reading the properties.</span></span>
    isPreview: true
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Excel.SlicerCollection;'
      return:
        type:
          - 'excel!Excel.SlicerCollection:class'
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '<span data-ttu-id="e3472-142">`propertyNamesAndPaths.select`es una cadena delimitada por comas que especifica las propiedades que se van `propertyNamesAndPaths.expand` a cargar y es una cadena delimitada por comas que especifica las propiedades de navegación que se deben cargar.</span><span class="sxs-lookup"><span data-stu-id="e3472-142">`propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.</span></span>'
          type:
            - 'excel!OfficeExtension.LoadOption:interface'
  - uid: 'excel!Excel.SlicerCollection#toJSON:member(1)'
    summary: '<span data-ttu-id="e3472-143">Reemplaza el método JavaScript `toJSON()` para proporcionar un resultado más útil cuando se pasa un objeto API a`JSON.stringify()`</span><span class="sxs-lookup"><span data-stu-id="e3472-143">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id="e3472-144">.</span><span class="sxs-lookup"><span data-stu-id="e3472-144"></span></span> <span data-ttu-id="e3472-145">(`JSON.stringify`</span><span class="sxs-lookup"><span data-stu-id="e3472-145"></span></span><!-- --><span data-ttu-id="e3472-146">, a su vez, llama `toJSON` al método del objeto que se le pasa.) Mientras que el `Excel.SlicerCollection` objeto original es un objeto API, `toJSON` el método devuelve un objeto JavaScript sin formato (escrito como`Excel.Interfaces.SlicerCollectionData`</span><span class="sxs-lookup"><span data-stu-id="e3472-146">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original `Excel.SlicerCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.SlicerCollectionData`</span></span><!-- --><span data-ttu-id="e3472-147">) que contiene una matriz "items" con copias rasas de las propiedades cargadas de los elementos de la colección.</span><span class="sxs-lookup"><span data-stu-id="e3472-147">) that contains an "items" array with shallow copies of any loaded properties from the collection''s items.</span></span>'
    isPreview: true
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.SlicerCollectionData;'
      return:
        type:
          - 'excel!Excel.Interfaces.SlicerCollectionData:interface'
        description: ''
references:
  - uid: 'excel!OfficeExtension.ClientObject:class'
    name: OfficeExtension.ClientObject
  - uid: 'excel!Excel.Slicer:class'
    name: Excel.Slicer
  - uid: 'excel!Excel.SlicerCollection#add~0:complex'
    name: string | PivotTable | Table
    fullName: string | Excel.PivotTable | Excel.Table
    spec.typeScript:
      - name: 'string | '
        fullName: 'string | '
      - uid: 'excel!Excel.PivotTable:class'
        name: PivotTable
        fullName: Excel.PivotTable
      - name: ' | '
        fullName: ' | '
      - uid: 'excel!Excel.Table:class'
        name: Table
        fullName: Excel.Table
  - uid: 'excel!Excel.SlicerCollection#add~1:complex'
    name: string | PivotField | number | TableColumn
    fullName: string | Excel.PivotField | number | Excel.TableColumn
    spec.typeScript:
      - name: 'string | '
        fullName: 'string | '
      - uid: 'excel!Excel.PivotField:class'
        name: PivotField
        fullName: Excel.PivotField
      - name: ' | number | '
        fullName: ' | number | '
      - uid: 'excel!Excel.TableColumn:class'
        name: TableColumn
        fullName: Excel.TableColumn
  - uid: 'excel!Excel.SlicerCollection#add~2:complex'
    name: string | Worksheet
    fullName: string | Excel.Worksheet
    spec.typeScript:
      - name: 'string | '
        fullName: 'string | '
      - uid: 'excel!Excel.Worksheet:class'
        name: Worksheet
        fullName: Excel.Worksheet
  - uid: 'excel!Excel.RequestContext:class'
    name: RequestContext
  - uid: 'excel!Excel.SlicerCollection#getCount~0:complex'
    name: OfficeExtension.ClientResult<number>
    fullName: OfficeExtension.ClientResult<number>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.ClientResult:class'
        name: OfficeExtension.ClientResult
        fullName: OfficeExtension.ClientResult
      - name: <number>
        fullName: <number>
  - uid: 'excel!Excel.SlicerCollection#items~0:complex'
    name: 'Excel.Slicer[]'
    fullName: 'Excel.Slicer[]'
    spec.typeScript:
      - uid: 'excel!Excel.Slicer:class'
        name: Excel.Slicer
        fullName: Excel.Slicer
      - name: '[]'
        fullName: '[]'
  - uid: 'excel!Excel.SlicerCollection:class'
    name: Excel.SlicerCollection
  - uid: 'excel!Excel.SlicerCollection#load~0:complex'
    name: Excel.Interfaces.SlicerCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions
    fullName: Excel.Interfaces.SlicerCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions
    spec.typeScript:
      - uid: 'excel!Excel.Interfaces.SlicerCollectionLoadOptions:interface'
        name: Excel.Interfaces.SlicerCollectionLoadOptions
        fullName: Excel.Interfaces.SlicerCollectionLoadOptions
      - name: ' & '
        fullName: ' & '
      - uid: 'excel!Excel.Interfaces.CollectionLoadOptions:interface'
        name: Excel.Interfaces.CollectionLoadOptions
        fullName: Excel.Interfaces.CollectionLoadOptions
  - uid: 'excel!OfficeExtension.LoadOption:interface'
    name: OfficeExtension.LoadOption
  - uid: 'excel!Excel.Interfaces.SlicerCollectionData:interface'
    name: Excel.Interfaces.SlicerCollectionData