### YamlMime:TSType
name: Excel.Range
uid: excel!Excel.Range:class
package: excel!
fullName: Excel.Range
summary: >-
  Range representa un conjunto de una o más celdas contiguas, como una celda, una fila, una columna, un bloque de celdas, etc. Para obtener más información sobre cómo se usan los intervalos en toda la API, empiece por [Ranges en la](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-core-concepts#ranges) API Excel JavaScript<!-- -->.


  \[[Conjunto de API: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
remarks: ''
isPreview: false
isDeprecated: false
type: class
properties:
- name: address
  uid: excel!Excel.Range#address:member
  package: excel!
  fullName: address
  summary: >-
    Especifica la referencia de intervalo en estilo A1. El valor de dirección contiene la referencia de hoja (por ejemplo, "Sheet1! A1:B4").


    \[[Conjunto de API: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly address: string;'
    return:
      type: string
- name: addressLocal
  uid: excel!Excel.Range#addressLocal:member
  package: excel!
  fullName: addressLocal
  summary: >-
    Representa la referencia de intervalo para el intervalo especificado en el idioma del usuario.


    \[[Conjunto de API: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly addressLocal: string;'
    return:
      type: string
- name: cellCount
  uid: excel!Excel.Range#cellCount:member
  package: excel!
  fullName: cellCount
  summary: >-
    Especifica el número de celdas del rango. Esta API devolverá -1 si el recuento de celdas supera 2^31-1 (2 147 483 647).


    \[[Conjunto de API: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly cellCount: number;'
    return:
      type: number
- name: columnCount
  uid: excel!Excel.Range#columnCount:member
  package: excel!
  fullName: columnCount
  summary: >-
    Especifica el número total de columnas del intervalo.


    \[[Conjunto de API: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly columnCount: number;'
    return:
      type: number
- name: columnHidden
  uid: excel!Excel.Range#columnHidden:member
  package: excel!
  fullName: columnHidden
  summary: >-
    Representa si todas las columnas del intervalo actual están ocultas. El valor `true` es cuando todas las columnas de un rango están ocultas. El valor `false` es cuando no se oculta ninguna columna del rango. El valor es cuando algunas columnas de un rango están ocultas y otras `null` columnas del mismo intervalo no están ocultas.


    \[[Conjunto de API: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'columnHidden: boolean;'
    return:
      type: boolean
- name: columnIndex
  uid: excel!Excel.Range#columnIndex:member
  package: excel!
  fullName: columnIndex
  summary: >-
    Especifica el número de columna de la primera celda del rango. Indizado con cero.


    \[[Conjunto de API: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly columnIndex: number;'
    return:
      type: number
- name: conditionalFormats
  uid: excel!Excel.Range#conditionalFormats:member
  package: excel!
  fullName: conditionalFormats
  summary: >-
    La colección de `ConditionalFormats` esa intersección del intervalo.


    \[[Conjunto de API: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly conditionalFormats: Excel.ConditionalFormatCollection;'
    return:
      type: <xref uid="excel!Excel.ConditionalFormatCollection:class" />
- name: context
  uid: excel!Excel.Range#context:member
  package: excel!
  fullName: context
  summary: Contexto de solicitud asociado al objeto. Esto conecta el proceso del complemento con el Office proceso de la aplicación host.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'context: RequestContext;'
    return:
      type: <xref uid="excel!Excel.RequestContext:class" />
- name: dataValidation
  uid: excel!Excel.Range#dataValidation:member
  package: excel!
  fullName: dataValidation
  summary: >-
    Devuelve un objeto de validación de datos.


    \[[Conjunto de API: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly dataValidation: Excel.DataValidation;'
    return:
      type: <xref uid="excel!Excel.DataValidation:class" />
- name: format
  uid: excel!Excel.Range#format:member
  package: excel!
  fullName: format
  summary: >-
    Devuelve un objeto de formato que encapsula la fuente, el relleno, los bordes, la alineación y otras propiedades del rango.


    \[[Conjunto de API: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly format: Excel.RangeFormat;'
    return:
      type: <xref uid="excel!Excel.RangeFormat:class" />
- name: formulas
  uid: excel!Excel.Range#formulas:member
  package: excel!
  fullName: formulas
  summary: >-
    Representa la fórmula en notación de estilo A1. Si una celda no tiene ninguna fórmula, su valor se devuelve en su lugar.


    \[[Conjunto de API: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'formulas: any[][];'
    return:
      type: any[][]
- name: formulasLocal
  uid: excel!Excel.Range#formulasLocal:member
  package: excel!
  fullName: formulasLocal
  summary: >-
    Representa la fórmula en notación de estilo A1, en el idioma del usuario y en la configuración regional del formato numérico. Por ejemplo, la fórmula "=SUM(A1, 1.5)" en inglés se convertiría en "=SUMME(A1; 1,5)" en alemán. Si una celda no tiene ninguna fórmula, su valor se devuelve en su lugar.


    \[[Conjunto de API: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'formulasLocal: any[][];'
    return:
      type: any[][]
- name: formulasR1C1
  uid: excel!Excel.Range#formulasR1C1:member
  package: excel!
  fullName: formulasR1C1
  summary: >-
    Representa la fórmula en notación de estilo R1C1. Si una celda no tiene ninguna fórmula, su valor se devuelve en su lugar.


    \[[Conjunto de API: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'formulasR1C1: any[][];'
    return:
      type: any[][]
- name: hasSpill
  uid: excel!Excel.Range#hasSpill:member
  package: excel!
  fullName: hasSpill
  summary: >-
    Indica si todas las celdas tienen un borde de desbordamiento. Devuelve si todas las celdas tienen un borde de desbordamiento o si todas las celdas `true` no tienen un borde de `false` desbordamiento. Devuelve si hay celdas con y `null` sin bordes de desbordamiento dentro del rango.


    \[[Conjunto de API: ExcelApi 1.12](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly hasSpill: boolean;'
    return:
      type: boolean
- name: height
  uid: excel!Excel.Range#height:member
  package: excel!
  fullName: height
  summary: >-
    Devuelve la distancia en puntos, para el zoom 100%, desde el borde superior del rango hasta el borde inferior del intervalo.


    \[[Conjunto de API: ExcelApi 1.10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly height: number;'
    return:
      type: number
- name: hidden
  uid: excel!Excel.Range#hidden:member
  package: excel!
  fullName: hidden
  summary: >-
    Representa si todas las celdas del rango actual están ocultas. El valor `true` es cuando todas las celdas de un rango están ocultas. El valor `false` es cuando no hay celdas en el rango ocultas. El valor `null` es cuando algunas celdas de un rango están ocultas y otras celdas del mismo rango no están ocultas.


    \[[Conjunto de API: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly hidden: boolean;'
    return:
      type: boolean
- name: hyperlink
  uid: excel!Excel.Range#hyperlink:member
  package: excel!
  fullName: hyperlink
  summary: >-
    Representa el hipervínculo del intervalo actual.


    \[[Conjunto de API: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'hyperlink: Excel.RangeHyperlink;'
    return:
      type: <xref uid="excel!Excel.RangeHyperlink:interface" />
      description: "\n\n#### <a name=\"examples\"></a>Ejemplos\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/range-hyperlink.yaml\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Orders\");\n\n    let productsRange = sheet.getRange(\"A3:A5\");\n    productsRange.load(\"values\");\n\n    await context.sync();\n\n    // Create a hyperlink to a URL \n    // for each product name in the first table.\n    for (let i = 0; i < productsRange.values.length; i++) {\n        let cellRange = productsRange.getCell(i, 0);\n        let cellText = productsRange.values[i][0];\n\n        let hyperlink = {\n            textToDisplay: cellText,\n            screenTip: \"Search Bing for '\" + cellText + \"'\",\n            address: \"https://www.bing.com?q=\" + cellText\n        }\n        cellRange.hyperlink = hyperlink;\n    }\n\n    await context.sync();\n});\n```"
- name: isEntireColumn
  uid: excel!Excel.Range#isEntireColumn:member
  package: excel!
  fullName: isEntireColumn
  summary: >-
    Representa si el intervalo actual es una columna completa.


    \[[Conjunto de API: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly isEntireColumn: boolean;'
    return:
      type: boolean
- name: isEntireRow
  uid: excel!Excel.Range#isEntireRow:member
  package: excel!
  fullName: isEntireRow
  summary: >-
    Representa si el intervalo actual es una fila completa.


    \[[Conjunto de API: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly isEntireRow: boolean;'
    return:
      type: boolean
- name: left
  uid: excel!Excel.Range#left:member
  package: excel!
  fullName: left
  summary: >-
    Devuelve la distancia en puntos, para el zoom 100%, desde el borde izquierdo de la hoja de cálculo hasta el borde izquierdo del rango.


    \[[Conjunto de API: ExcelApi 1.10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly left: number;'
    return:
      type: number
- name: linkedDataTypeState
  uid: excel!Excel.Range#linkedDataTypeState:member
  package: excel!
  fullName: linkedDataTypeState
  summary: >-
    Indica el estado del tipo de datos de cada celda.


    \[[Conjunto de API: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly linkedDataTypeState: Excel.LinkedDataTypeState[][];'
    return:
      type: <xref uid="excel!Excel.LinkedDataTypeState:enum" />[][]
- name: numberFormat
  uid: excel!Excel.Range#numberFormat:member
  package: excel!
  fullName: numberFormat
  summary: >-
    Representa Excel código de formato de número del intervalo especificado.


    \[[Conjunto de API: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'numberFormat: any[][];'
    return:
      type: any[][]
      description: "\n\n#### <a name=\"examples\"></a>Ejemplos\n\n```javascript\n// The example below sets number-format, values and formulas on a grid that contains 2x3 grid.\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"F5:G7\";\n    var numberFormat = [[null, \"d-mmm\"], [null, \"d-mmm\"], [null, null]]\n    var values = [[\"Today\", 42147], [\"Tomorrow\", \"5/24\"], [\"Difference in days\", null]];\n    var formulas = [[null,null], [null,null], [null,\"=G6-G5\"]];\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    range.numberFormat = numberFormat;\n    range.values = values;\n    range.formulas= formulas;\n    range.load('text');\n    return ctx.sync().then(function() {\n        console.log(range.text);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: numberFormatCategories
  uid: excel!Excel.Range#numberFormatCategories:member
  package: excel!
  fullName: numberFormatCategories
  summary: >-
    Representa la categoría del formato de número de cada celda.


    \[[Conjunto de API: ExcelApi 1.12](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly numberFormatCategories: Excel.NumberFormatCategory[][];'
    return:
      type: <xref uid="excel!Excel.NumberFormatCategory:enum" />[][]
- name: numberFormatLocal
  uid: excel!Excel.Range#numberFormatLocal:member
  package: excel!
  fullName: numberFormatLocal
  summary: >-
    Representa Excel código de formato de número del intervalo especificado, en función de la configuración de idioma del usuario. Excel no realiza ninguna coerción de idioma o formato al obtener o establecer la `numberFormatLocal` propiedad. Cualquier texto devuelto usa las cadenas con formato local según el idioma especificado en la configuración del sistema.


    \[[Conjunto de API: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'numberFormatLocal: any[][];'
    return:
      type: any[][]
- name: rowCount
  uid: excel!Excel.Range#rowCount:member
  package: excel!
  fullName: rowCount
  summary: >-
    Devuelve el número total de filas del intervalo.


    \[[Conjunto de API: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly rowCount: number;'
    return:
      type: number
- name: rowHidden
  uid: excel!Excel.Range#rowHidden:member
  package: excel!
  fullName: rowHidden
  summary: >-
    Representa si todas las filas del intervalo actual están ocultas. El valor `true` es cuando todas las filas de un rango están ocultas. El valor `false` es cuando no se oculta ninguna fila del rango. El valor es cuando algunas filas de un rango están ocultas y otras `null` filas del mismo rango no están ocultas.


    \[[Conjunto de API: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'rowHidden: boolean;'
    return:
      type: boolean
- name: rowIndex
  uid: excel!Excel.Range#rowIndex:member
  package: excel!
  fullName: rowIndex
  summary: >-
    Devuelve el número de fila de la primera celda del intervalo. Indizado con cero.


    \[[Conjunto de API: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly rowIndex: number;'
    return:
      type: number
- name: savedAsArray
  uid: excel!Excel.Range#savedAsArray:member
  package: excel!
  fullName: savedAsArray
  summary: >-
    Representa si todas las celdas se guardarían como una fórmula de matriz. Devuelve si todas las celdas se guardarían como una fórmula de matriz o si todas las celdas no se guardarían `true` `false` como fórmula de matriz. Devuelve `null` si algunas celdas se guardarían como una fórmula de matriz y otras no lo serían.


    \[[Conjunto de API: ExcelApi 1.12](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly savedAsArray: boolean;'
    return:
      type: boolean
- name: sort
  uid: excel!Excel.Range#sort:member
  package: excel!
  fullName: sort
  summary: >-
    Representa la ordenación del intervalo del intervalo actual.


    \[[Conjunto de API: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly sort: Excel.RangeSort;'
    return:
      type: <xref uid="excel!Excel.RangeSort:class" />
      description: "\n\n#### <a name=\"examples\"></a>Ejemplos\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/event-column-and-row-sort.yaml\nasync function sortTopToBottom(criteria: string) {\n    await Excel.run(async (context) => {\n        const sheet = context.workbook.worksheets.getActiveWorksheet();\n        const range = sheet.getRange(\"A1:E5\");\n\n        // Find the column header that provides the sort criteria.\n        const header = range.find(criteria, {});\n        header.load(\"columnIndex\");\n        await context.sync();\n\n        range.sort.apply(\n            [\n                {\n                    key: header.columnIndex,\n                    sortOn: Excel.SortOn.value\n                }\n            ],\n            false /*matchCase*/,\n            true /*hasHeaders*/,\n            Excel.SortOrientation.rows\n        );\n        await context.sync();\n    });\n}\n```"
- name: style
  uid: excel!Excel.Range#style:member
  package: excel!
  fullName: style
  summary: >-
    Representa el estilo del rango actual. Si los estilos de las celdas son incoherentes, `null` se devolverán. Para los estilos personalizados, se devolverá el nombre del estilo. Para los estilos integrados, se devolverá una cadena que representa un valor `BuiltInStyle` de la enumeración.


    \[[Conjunto de API: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'style: string;'
    return:
      type: string
      description: "\n\n#### <a name=\"examples\"></a>Ejemplos\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/style.yaml\nawait Excel.run(async (context) => {\n    let worksheet = context.workbook.worksheets.getItem(\"Sample\");\n    let range = worksheet.getRange(\"A1:E1\");\n\n    // Apply built-in style. \n    // Styles are in the Home tab ribbon.\n    range.style = Excel.BuiltInStyle.neutral;\n    range.format.horizontalAlignment = \"Right\";\n\n    await context.sync();\n});\n```"
- name: text
  uid: excel!Excel.Range#text:member
  package: excel!
  fullName: text
  summary: >-
    Valores de texto del intervalo especificado. El valor Text no dependerá del ancho de la celda. La sustitución de signo de número ( ) que se produce en la interfaz Excel no afectará al \# valor de texto devuelto por la API.


    \[[Conjunto de API: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly text: string[][];'
    return:
      type: string[][]
- name: top
  uid: excel!Excel.Range#top:member
  package: excel!
  fullName: top
  summary: >-
    Devuelve la distancia en puntos, para el zoom 100%, desde el borde superior de la hoja de cálculo hasta el borde superior del rango.


    \[[Conjunto de API: ExcelApi 1.10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly top: number;'
    return:
      type: number
- name: values
  uid: excel!Excel.Range#values:member
  package: excel!
  fullName: values
  summary: >-
    Representa los valores sin formato del rango especificado. Los datos devueltos pueden ser una cadena, un número o un valor booleano. Las celdas que contienen un error devolverán la cadena de error. Si el valor devuelto comienza con un signo más ("+"), menos ("-") o igual ("="), Excel interpreta este valor como una fórmula.


    \[[Conjunto de API: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'values: any[][];'
    return:
      type: any[][]
- name: valueTypes
  uid: excel!Excel.Range#valueTypes:member
  package: excel!
  fullName: valueTypes
  summary: >-
    Especifica el tipo de datos de cada celda.


    \[[Conjunto de API: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly valueTypes: Excel.RangeValueType[][];'
    return:
      type: <xref uid="excel!Excel.RangeValueType:enum" />[][]
- name: width
  uid: excel!Excel.Range#width:member
  package: excel!
  fullName: width
  summary: >-
    Devuelve la distancia en puntos, para el zoom 100%, desde el borde izquierdo del rango hasta el borde derecho del intervalo.


    \[[Conjunto de API: ExcelApi 1.10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly width: number;'
    return:
      type: number
- name: worksheet
  uid: excel!Excel.Range#worksheet:member
  package: excel!
  fullName: worksheet
  summary: >-
    Hoja de cálculo que contiene el rango actual.


    \[[Conjunto de API: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly worksheet: Excel.Worksheet;'
    return:
      type: <xref uid="excel!Excel.Worksheet:class" />
methods:
- name: autoFill(destinationRange, autoFillType)
  uid: excel!Excel.Range#autoFill:member(1)
  package: excel!
  fullName: autoFill(destinationRange, autoFillType)
  summary: >-
    Rellena el intervalo desde el intervalo actual hasta el intervalo de destino mediante la lógica de autorrelleno especificada. El intervalo de destino puede ser `null`<!-- -->, o puede extender el origen horizontal o verticalmente. No se admiten intervalos desconcertados.


    Para obtener más información, lea [Usar autorrelleno y relleno flash](https://support.office.com/article/video-use-autofill-and-flash-fill-2e79a709-c814-4b27-8bc2-c4dc84d49464)<!-- -->.


    \[[Conjunto de API: ExcelApi 1.9, `destinationRange` <!-- --> ExcelApi Preview para null](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'autoFill(destinationRange?: Range | string, autoFillType?: Excel.AutoFillType): void;'
    parameters:
    - id: destinationRange
      description: El intervalo de destino a Autofill. Si el intervalo de destino es `null`<!-- -->, los datos se rellenan en función de las celdas circundantes (que es el comportamiento al hacer doble clic en el controlador de relleno de intervalo de la interfaz de usuario).
      type: <xref uid="excel!Excel.Range:class" /> | string
    - id: autoFillType
      description: Tipo de Autofill. Especifica cómo se va a rellenar el intervalo de destino, en función del contenido del intervalo actual. El valor predeterminado es "FillDefault".
      type: <xref uid="excel!Excel.AutoFillType:enum" />
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Ejemplos\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/range-auto-fill.yaml\nawait Excel.run(async (context) => {\n  const sheet = context.workbook.worksheets.getActiveWorksheet();\n  const sumCell = sheet.getRange(\"P4\");\n  \n  // Copy everything. The formulas will be contextually updated based on their new locations.\n  sumCell.autoFill(\"P4:P7\", Excel.AutoFillType.fillCopy);\n  sumCell.format.autofitColumns();\n  await context.sync();\n});\n```"
- name: autoFill(destinationRange, autoFillTypeString)
  uid: excel!Excel.Range#autoFill:member(2)
  package: excel!
  fullName: autoFill(destinationRange, autoFillTypeString)
  summary: >-
    Rellena el intervalo desde el intervalo actual hasta el intervalo de destino mediante la lógica de autorrelleno especificada. El intervalo de destino puede ser `null`<!-- -->, o puede extender el origen horizontal o verticalmente. No se admiten intervalos desconcertados.


    Para obtener más información, lea [Usar autorrelleno y relleno flash](https://support.office.com/article/video-use-autofill-and-flash-fill-2e79a709-c814-4b27-8bc2-c4dc84d49464)<!-- -->.


    \[[Conjunto de API: ExcelApi 1.9, `destinationRange` <!-- --> ExcelApi Preview para null](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'autoFill(destinationRange?: Range | string, autoFillTypeString?: "FillDefault" | "FillCopy" | "FillSeries" | "FillFormats" | "FillValues" | "FillDays" | "FillWeekdays" | "FillMonths" | "FillYears" | "LinearTrend" | "GrowthTrend" | "FlashFill"): void;'
    parameters:
    - id: destinationRange
      description: El intervalo de destino a Autofill. Si el intervalo de destino es `null`<!-- -->, los datos se rellenan en función de las celdas circundantes (que es el comportamiento al hacer doble clic en el controlador de relleno de intervalo de la interfaz de usuario).
      type: <xref uid="excel!Excel.Range:class" /> | string
    - id: autoFillTypeString
      description: Tipo de Autofill. Especifica cómo se va a rellenar el intervalo de destino, en función del contenido del intervalo actual. El valor predeterminado es "FillDefault".
      type: "\"FillDefault\" | \"FillCopy\" | \"FillSeries\" | \"FillFormats\" | \"FillValues\" | \"FillDays\" | \"FillWeekdays\" | \"FillMonths\" | \"FillYears\" | \"LinearTrend\" | \"GrowthTrend\" | \"FlashFill\""
    return:
      type: void
      description: ''
- name: calculate()
  uid: excel!Excel.Range#calculate:member(1)
  package: excel!
  fullName: calculate()
  summary: >-
    Calcula un rango de celdas en una hoja de cálculo.


    \[[Conjunto de API: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'calculate(): void;'
    return:
      type: void
      description: ''
- name: clear(applyTo)
  uid: excel!Excel.Range#clear:member(1)
  package: excel!
  fullName: clear(applyTo)
  summary: >-
    Borra valores de rango, formato, relleno, borde, etc.


    \[[Conjunto de API: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'clear(applyTo?: Excel.ClearApplyTo): void;'
    parameters:
    - id: applyTo
      description: Opcional. Determina el tipo de acción de borrado. Vea `Excel.ClearApplyTo` para más información.
      type: <xref uid="excel!Excel.ClearApplyTo:enum" />
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Ejemplos\n\n```javascript\n// Below example clears format and contents of the range. \nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"D:F\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    range.clear();\n    return ctx.sync(); \n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: clear(applyToString)
  uid: excel!Excel.Range#clear:member(2)
  package: excel!
  fullName: clear(applyToString)
  summary: >-
    Borra valores de rango, formato, relleno, borde, etc.


    \[[Conjunto de API: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'clear(applyToString?: "All" | "Formats" | "Contents" | "Hyperlinks" | "RemoveHyperlinks"): void;'
    parameters:
    - id: applyToString
      description: Opcional. Determina el tipo de acción de borrado. Vea `Excel.ClearApplyTo` para más información.
      type: "\"All\" | \"Formats\" | \"Contents\" | \"Hyperlinks\" | \"RemoveHyperlinks\""
    return:
      type: void
      description: ''
- name: convertDataTypeToText()
  uid: excel!Excel.Range#convertDataTypeToText:member(1)
  package: excel!
  fullName: convertDataTypeToText()
  summary: >-
    Convierte las celdas de rango con tipos de datos en texto.


    \[[Conjunto de API: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'convertDataTypeToText(): void;'
    return:
      type: void
      description: ''
- name: convertToLinkedDataType(serviceID, languageCulture)
  uid: excel!Excel.Range#convertToLinkedDataType:member(1)
  package: excel!
  fullName: convertToLinkedDataType(serviceID, languageCulture)
  summary: >-
    Convierte las celdas de rango en tipos de datos vinculados de la hoja de cálculo.


    \[[Conjunto de API: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'convertToLinkedDataType(serviceID: number, languageCulture: string): void;'
    parameters:
    - id: serviceID
      description: El identificador de servicio que se usará para consultar los datos.
      type: number
    - id: languageCulture
      description: Referencia cultural de idioma para consultar el servicio.
      type: string
    return:
      type: void
      description: ''
- name: copyFrom(sourceRange, copyType, skipBlanks, transpose)
  uid: excel!Excel.Range#copyFrom:member(1)
  package: excel!
  fullName: copyFrom(sourceRange, copyType, skipBlanks, transpose)
  summary: >-
    Copia los datos de celda o el formato del intervalo de origen o `RangeAreas` del intervalo actual. El intervalo de destino puede tener un tamaño diferente al intervalo de origen o `RangeAreas`<!-- -->. El destino se expandirá automáticamente si es menor que el origen.


    \[[Conjunto de API: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'copyFrom(sourceRange: Range | RangeAreas | string, copyType?: Excel.RangeCopyType, skipBlanks?: boolean, transpose?: boolean): void;'
    parameters:
    - id: sourceRange
      description: Intervalo de origen o `RangeAreas` desde el que se va a copiar. Cuando el origen tiene varios intervalos, su formulario debe poder crearse quitando filas o columnas completas `RangeAreas` de un intervalo rectangular.
      type: <xref uid="excel!Excel.Range:class" /> | <xref uid="excel!Excel.RangeAreas:class" /> | string
    - id: copyType
      description: Tipo de datos de celda o formato sobre los que copiar. El valor predeterminado es "All".
      type: <xref uid="excel!Excel.RangeCopyType:enum" />
    - id: skipBlanks
      description: True si se omiten las celdas en blanco en el rango de origen. El valor predeterminado es false.
      type: boolean
    - id: transpose
      description: True si se transponen las celdas en el intervalo de destino. El valor predeterminado es false.
      type: boolean
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Ejemplos\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/range-copyfrom.yaml\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    // Place a label in front of the copied data.\n    sheet.getRange(\"F2\").values = [[\"Copied Formula\"]];\n\n    // Copy a range preserving the formulas.\n    // Note: non-formula values are copied over as is.\n    sheet.getRange(\"G2\").copyFrom(\"A1:E1\", Excel.RangeCopyType.formulas);\n    await context.sync();\n});\n```"
- name: copyFrom(sourceRange, copyTypeString, skipBlanks, transpose)
  uid: excel!Excel.Range#copyFrom:member(2)
  package: excel!
  fullName: copyFrom(sourceRange, copyTypeString, skipBlanks, transpose)
  summary: >-
    Copia los datos de celda o el formato del intervalo de origen o `RangeAreas` del intervalo actual. El intervalo de destino puede tener un tamaño diferente al intervalo de origen o `RangeAreas`<!-- -->. El destino se expandirá automáticamente si es menor que el origen.


    \[[Conjunto de API: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'copyFrom(sourceRange: Range | RangeAreas | string, copyTypeString?: "All" | "Formulas" | "Values" | "Formats", skipBlanks?: boolean, transpose?: boolean): void;'
    parameters:
    - id: sourceRange
      description: Intervalo de origen o `RangeAreas` desde el que se va a copiar. Cuando el origen tiene varios intervalos, su formulario debe poder crearse quitando filas o columnas completas `RangeAreas` de un intervalo rectangular.
      type: <xref uid="excel!Excel.Range:class" /> | <xref uid="excel!Excel.RangeAreas:class" /> | string
    - id: copyTypeString
      description: Tipo de datos de celda o formato sobre los que copiar. El valor predeterminado es "All".
      type: "\"All\" | \"Formulas\" | \"Values\" | \"Formats\""
    - id: skipBlanks
      description: True si se omiten las celdas en blanco en el rango de origen. El valor predeterminado es false.
      type: boolean
    - id: transpose
      description: True si se transponen las celdas en el intervalo de destino. El valor predeterminado es false.
      type: boolean
    return:
      type: void
      description: ''
- name: delete(shift)
  uid: excel!Excel.Range#delete:member(1)
  package: excel!
  fullName: delete(shift)
  summary: >-
    Elimina las celdas asociadas al rango.


    \[[Conjunto de API: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'delete(shift: Excel.DeleteShiftDirection): void;'
    parameters:
    - id: shift
      description: Especifica hacia dónde se desplazarán las celdas. Vea `Excel.DeleteShiftDirection` para más información.
      type: <xref uid="excel!Excel.DeleteShiftDirection:enum" />
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Ejemplos\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"D:F\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    range.delete(\"Left\");\n    return ctx.sync(); \n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: delete(shiftString)
  uid: excel!Excel.Range#delete:member(2)
  package: excel!
  fullName: delete(shiftString)
  summary: >-
    Elimina las celdas asociadas al rango.


    \[[Conjunto de API: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'delete(shiftString: "Up" | "Left"): void;'
    parameters:
    - id: shiftString
      description: Especifica hacia dónde se desplazarán las celdas. Vea `Excel.DeleteShiftDirection` para más información.
      type: "\"Up\" | \"Left\""
    return:
      type: void
      description: ''
- name: find(text, criteria)
  uid: excel!Excel.Range#find:member(1)
  package: excel!
  fullName: find(text, criteria)
  summary: >-
    Busca la cadena especificada, según los criterios especificados. Si el intervalo actual es mayor que una sola celda, la búsqueda se limitará a ese intervalo, de lo contrario, la búsqueda cubrirá toda la hoja a partir de esa celda.


    \[[Conjunto de API: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'find(text: string, criteria: Excel.SearchCriteria): Excel.Range;'
    parameters:
    - id: text
      description: La cadena que se busca.
      type: string
    - id: criteria
      description: Criterios de búsqueda adicionales, incluida la dirección de búsqueda y si la búsqueda debe coincidir con toda la celda o distingue mayúsculas de minúsculas.
      type: <xref uid="excel!Excel.SearchCriteria:interface" />
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "El objeto que representa la primera celda que contiene un valor que coincide con el texto y los criterios `Range` de búsqueda.\n\n#### <a name=\"examples\"></a>Ejemplos\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/range-find.yaml\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const table = sheet.tables.getItem(\"ExpensesTable\");\n    const searchRange = table.getRange();\n\n    // NOTE: If no match is found, an ItemNotFound error\n    // is thrown when Range.find is evaluated.\n    const foundRange = searchRange.find($(\"#searchText\").text(), {\n        completeMatch: isCompleteMatchToggle,\n        matchCase: isMatchCaseToggle,\n        searchDirection: searchDirectionToggle\n    });\n    \n    foundRange.load(\"address\");\n    await context.sync();\n\n\n    console.log(foundRange.address);\n});\n```"
- name: findOrNullObject(text, criteria)
  uid: excel!Excel.Range#findOrNullObject:member(1)
  package: excel!
  fullName: findOrNullObject(text, criteria)
  summary: >-
    Busca la cadena especificada, según los criterios especificados. Si el intervalo actual es mayor que una sola celda, la búsqueda se limitará a ese intervalo, de lo contrario, la búsqueda cubrirá toda la hoja a partir de esa celda. Si no hay coincidencias, esta función devolverá un objeto con su `isNullObject` propiedad establecida en `true`<!-- -->. Para obtener más información, [vea *OrNullObject methods and properties](https://docs.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties)<!-- -->.


    \[[Conjunto de API: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'findOrNullObject(text: string, criteria: Excel.SearchCriteria): Excel.Range;'
    parameters:
    - id: text
      description: La cadena que se busca.
      type: string
    - id: criteria
      description: Criterios de búsqueda adicionales, incluida la dirección de búsqueda y si la búsqueda debe coincidir con toda la celda o distingue mayúsculas de minúsculas.
      type: <xref uid="excel!Excel.SearchCriteria:interface" />
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "El `Range` que coincide con los criterios de búsqueda.\n\n#### <a name=\"examples\"></a>Ejemplos\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/range-find.yaml\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const table = sheet.tables.getItem(\"ExpensesTable\");\n    const searchRange = table.getRange();\n    const foundRange = searchRange.findOrNullObject($(\"#searchText\").text(), {\n        completeMatch: isCompleteMatchToggle,\n        matchCase: isMatchCaseToggle,\n        searchDirection: searchDirectionToggle\n    });\n    \n    foundRange.load(\"address\");\n    await context.sync();\n\n    if (foundRange.isNullObject) {\n        console.log(\"Text not found\");\n    } else {\n        console.log(foundRange.address);\n    }\n});\n```"
- name: flashFill()
  uid: excel!Excel.Range#flashFill:member(1)
  package: excel!
  fullName: flashFill()
  summary: >-
    Realiza un relleno de flash en el intervalo actual. Relleno de flash rellena automáticamente los datos cuando detecta un patrón, por lo que el intervalo debe ser un intervalo de una sola columna y tener datos a su alrededor para encontrar un patrón.


    \[[Conjunto de API: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'flashFill(): void;'
    return:
      type: void
      description: ''
- name: getAbsoluteResizedRange(numRows, numColumns)
  uid: excel!Excel.Range#getAbsoluteResizedRange:member(1)
  package: excel!
  fullName: getAbsoluteResizedRange(numRows, numColumns)
  summary: >-
    Obtiene un objeto con la misma celda superior izquierda que el objeto actual, pero con los números especificados `Range` `Range` de filas y columnas.


    \[[Conjunto de API: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getAbsoluteResizedRange(numRows: number, numColumns: number): Excel.Range;'
    parameters:
    - id: numRows
      description: El número de filas del nuevo tamaño de intervalo.
      type: number
    - id: numColumns
      description: El número de columnas del nuevo tamaño del intervalo.
      type: number
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: ''
- name: getBoundingRect(anotherRange)
  uid: excel!Excel.Range#getBoundingRect:member(1)
  package: excel!
  fullName: getBoundingRect(anotherRange)
  summary: >-
    Obtiene el objeto de intervalo más pequeño que abarca los intervalos especificados. Por ejemplo, `GetBoundingRect` el de "B2:C5" y "D10:E15" es "B2:E15".


    \[[Conjunto de API: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getBoundingRect(anotherRange: Range | string): Excel.Range;'
    parameters:
    - id: anotherRange
      description: El objeto de intervalo, la dirección o el nombre del intervalo.
      type: <xref uid="excel!Excel.Range:class" /> | string
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>Ejemplos\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"D4:G6\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    var range = range.getBoundingRect(\"G4:H8\");\n    range.load('address');\n    return ctx.sync().then(function() {\n        console.log(range.address); // Prints Sheet1!D4:H8\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getCell(row, column)
  uid: excel!Excel.Range#getCell:member(1)
  package: excel!
  fullName: getCell(row, column)
  summary: >-
    Obtiene el objeto de intervalo que contiene la celda en función de los números de fila y columna. La celda puede estar fuera de los límites de su intervalo primario, siempre que permanezca dentro de la cuadrícula de la hoja de cálculo. La celda devuelta se ubica con respecto a la celda superior izquierda del intervalo.


    \[[Conjunto de API: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getCell(row: number, column: number): Excel.Range;'
    parameters:
    - id: row
      description: Número de fila de la celda que se va a recuperar. Indizado con cero.
      type: number
    - id: column
      description: Número de columna de la celda que se va a recuperar. Indizado con cero.
      type: number
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>Ejemplos\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:F8\";\n    var worksheet = ctx.workbook.worksheets.getItem(sheetName);\n    var range = worksheet.getRange(rangeAddress);\n    var cell = range.getCell(0,0);\n    cell.load('address');\n    return ctx.sync().then(function() {\n        console.log(cell.address);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getCellProperties(cellPropertiesLoadOptions)
  uid: excel!Excel.Range#getCellProperties:member(1)
  package: excel!
  fullName: getCellProperties(cellPropertiesLoadOptions)
  summary: >-
    Devuelve una matriz 2D que encapsula los datos para la fuente, el relleno, los bordes, la alineación y otras propiedades de la celda.


    \[[Conjunto de API: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getCellProperties(cellPropertiesLoadOptions: CellPropertiesLoadOptions): OfficeExtension.ClientResult<CellProperties[][]>;'
    parameters:
    - id: cellPropertiesLoadOptions
      description: Objeto que representa las propiedades de celda que se cargarán.
      type: <xref uid="excel!Excel.CellPropertiesLoadOptions:interface" />
    return:
      type: <xref uid="office!OfficeExtension.ClientResult:class" />&lt;<xref uid="excel!Excel.CellProperties:interface" />[][]&gt;
      description: >-
        Una matriz 2D donde cada elemento representa las propiedades solicitadas de la celda correspondiente.


        #### <a name="examples"></a>Ejemplos


        ```typescript

        // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/cell-properties.yaml

        await Excel.run(async (context) => {
            const cell = context.workbook.getActiveCell();

            // Define the cell properties to get by setting the matching LoadOptions to true.
            const propertiesToGet = cell.getCellProperties({
                address: true,
                format: {
                    fill: {
                        color: true
                    },
                    font: {
                        color: true
                    }
                },
                style: true
            });

            // Sync to get the data from the workbook.
            await context.sync();
            const cellProperties = propertiesToGet.value[0][0];
            console.log(
                `Address: ${cellProperties.address}\nStyle: ${cellProperties.style}\nFill Color: ${cellProperties.format.fill.color}\nFont Color: ${cellProperties.format.font.color}`);
        });

        ```
- name: getColumn(column)
  uid: excel!Excel.Range#getColumn:member(1)
  package: excel!
  fullName: getColumn(column)
  summary: >-
    Obtiene una columna contenida en el intervalo.


    \[[Conjunto de API: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getColumn(column: number): Excel.Range;'
    parameters:
    - id: column
      description: Número de columna del intervalo que se va a recuperar. Indizado con cero.
      type: number
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>Ejemplos\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet19\";\n    var rangeAddress = \"A1:F8\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getColumn(1);\n    range.load('address');\n    return ctx.sync().then(function() {\n        console.log(range.address); // prints Sheet1!B1:B8\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getColumnProperties(columnPropertiesLoadOptions)
  uid: excel!Excel.Range#getColumnProperties:member(1)
  package: excel!
  fullName: getColumnProperties(columnPropertiesLoadOptions)
  summary: >-
    Devuelve una matriz de una sola dimensión que encapsula los datos para la fuente, el relleno, los bordes, la alineación y otras propiedades de la columna. Se devolverá null para las propiedades que no son coherentes en cada celda de una columna determinada.


    \[[Conjunto de API: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getColumnProperties(columnPropertiesLoadOptions: ColumnPropertiesLoadOptions): OfficeExtension.ClientResult<ColumnProperties[]>;'
    parameters:
    - id: columnPropertiesLoadOptions
      description: Objeto que representa las propiedades de columna que se cargarán.
      type: <xref uid="excel!Excel.ColumnPropertiesLoadOptions:interface" />
    return:
      type: <xref uid="office!OfficeExtension.ClientResult:class" />&lt;<xref uid="excel!Excel.ColumnProperties:interface" />[]&gt;
      description: Matriz en la que cada elemento representa las propiedades solicitadas de la columna correspondiente.
- name: getColumnsAfter(count)
  uid: excel!Excel.Range#getColumnsAfter:member(1)
  package: excel!
  fullName: getColumnsAfter(count)
  summary: >-
    Obtiene un número determinado de columnas a la derecha del objeto `Range` actual.


    \[[Conjunto de API: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getColumnsAfter(count?: number): Excel.Range;'
    parameters:
    - id: count
      description: Opcional. El número de columnas que se va a incluir en el rango resultante. En general, use un número positivo para crear un intervalo fuera del intervalo actual. También puede usar un número negativo para crear un intervalo dentro del intervalo actual. El valor predeterminado es 1.
      type: number
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: ''
- name: getColumnsBefore(count)
  uid: excel!Excel.Range#getColumnsBefore:member(1)
  package: excel!
  fullName: getColumnsBefore(count)
  summary: >-
    Obtiene un número determinado de columnas a la izquierda del objeto `Range` actual.


    \[[Conjunto de API: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getColumnsBefore(count?: number): Excel.Range;'
    parameters:
    - id: count
      description: Opcional. El número de columnas que se va a incluir en el rango resultante. En general, use un número positivo para crear un intervalo fuera del intervalo actual. También puede usar un número negativo para crear un intervalo dentro del intervalo actual. El valor predeterminado es 1.
      type: number
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: ''
- name: getDependents()
  uid: excel!Excel.Range#getDependents:member(1)
  package: excel!
  fullName: getDependents()
  summary: >-
    Devuelve un objeto que representa el rango que contiene todos los dependientes de una celda en la misma hoja de cálculo `WorkbookRangeAreas` o en varias hojas de cálculo.


    \[[Conjunto de API: ExcelApi BETA (SOLO VISTA PREVIA)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: true
  isDeprecated: false
  syntax:
    content: 'getDependents(): Excel.WorkbookRangeAreas;'
    return:
      type: <xref uid="excel!Excel.WorkbookRangeAreas:class" />
      description: ''
- name: getDirectDependents()
  uid: excel!Excel.Range#getDirectDependents:member(1)
  package: excel!
  fullName: getDirectDependents()
  summary: >-
    Devuelve un objeto que representa el rango que contiene todos los dependientes directos de una celda en la misma hoja de cálculo `WorkbookRangeAreas` o en varias hojas de cálculo.


    \[[Conjunto de API: ExcelApi 1.13](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getDirectDependents(): Excel.WorkbookRangeAreas;'
    return:
      type: <xref uid="excel!Excel.WorkbookRangeAreas:class" />
      description: "\n\n#### <a name=\"examples\"></a>Ejemplos\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/range-direct-dependents.yaml\nawait Excel.run(async (context) => {\n  // Direct dependents are cells that contain formulas that refer to other cells.\n  let range = context.workbook.getActiveCell();\n  let directDependents = range.getDirectDependents();\n  range.load(\"address\");\n  directDependents.areas.load(\"address\");\n  await context.sync();\n  \n  console.log(`Direct dependent cells of ${range.address}:`);\n  \n  // Use the direct dependents API to loop through direct dependents of the active cell.\n  for (let i = 0; i < directDependents.areas.items.length; i++) {\n    // Highlight and print the address of each dependent cell.\n    directDependents.areas.items[i].format.fill.color = \"Yellow\";\n    console.log(`  ${directDependents.areas.items[i].address}`);\n  }\n  await context.sync();\n});\n```"
- name: getDirectPrecedents()
  uid: excel!Excel.Range#getDirectPrecedents:member(1)
  package: excel!
  fullName: getDirectPrecedents()
  summary: >-
    Devuelve un objeto que representa el rango que contiene todos los precedentes directos de una celda en la misma hoja de cálculo o `WorkbookRangeAreas` en varias hojas de cálculo.


    \[[Conjunto de API: ExcelApi 1.12](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getDirectPrecedents(): Excel.WorkbookRangeAreas;'
    return:
      type: <xref uid="excel!Excel.WorkbookRangeAreas:class" />
      description: "\n\n#### <a name=\"examples\"></a>Ejemplos\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/direct-precedents.yaml\nawait Excel.run(async (context) => {\n  // Precedents are cells referenced by the formula in a cell.\n  let range = context.workbook.getActiveCell();\n  let directPrecedents = range.getDirectPrecedents();\n  range.load(\"address\");\n  directPrecedents.areas.load(\"address\");\n  await context.sync();\n\n  console.log(`Direct precedent cells of ${range.address}:`);\n\n  // Use the direct precedents API to loop through precedents of the active cell. \n  for (var i = 0; i < directPrecedents.areas.items.length; i++) {\n    // Highlight and console the address of each precedent cell.\n    directPrecedents.areas.items[i].format.fill.color = \"Yellow\";\n    console.log(`  ${directPrecedents.areas.items[i].address}`);\n  }\n  await context.sync();\n});\n```"
- name: getEntireColumn()
  uid: excel!Excel.Range#getEntireColumn:member(1)
  package: excel!
  fullName: getEntireColumn()
  summary: >-
    Obtiene un objeto que representa toda la columna del rango (por ejemplo, si el rango actual representa celdas "B4:E11", es un rango que representa las columnas `getEntireColumn` "B:E").


    \[[Conjunto de API: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getEntireColumn(): Excel.Range;'
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>Ejemplos\n\n```javascript\n// Note: the grid properties of the Range (values, numberFormat, formulas) \n// contains null since the Range in question is unbounded.\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"D:F\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    var rangeEC = range.getEntireColumn();\n    rangeEC.load('address');\n    return ctx.sync().then(function() {\n        console.log(rangeEC.address);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getEntireRow()
  uid: excel!Excel.Range#getEntireRow:member(1)
  package: excel!
  fullName: getEntireRow()
  summary: >-
    Obtiene un objeto que representa toda la fila del rango (por ejemplo, si el rango actual representa celdas "B4:E11", es un rango que representa las filas `GetEntireRow` "4:11").


    \[[Conjunto de API: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getEntireRow(): Excel.Range;'
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>Ejemplos\n\n```javascript\n// Gets an object that represents the entire row of the range \n// (for example, if the current range represents cells \"B4:E11\", \n// its GetEntireRow is a range that represents rows \"4:11\").\nExcel.run(function (ctx) {\n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"D:F\"; \n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    var rangeER = range.getEntireRow();\n    rangeER.load('address');\n    return ctx.sync().then(function() {\n        console.log(rangeER.address);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getExtendedRange(direction, activeCell)
  uid: excel!Excel.Range#getExtendedRange:member(1)
  package: excel!
  fullName: getExtendedRange(direction, activeCell)
  summary: >-
    Devuelve un objeto range que incluye el intervalo actual y hasta el borde del intervalo, en función de la dirección proporcionada. Esto coincide con el comportamiento de la tecla Ctrl+Mayús+Flecha en el Excel en Windows interfaz de usuario.


    \[[Conjunto de API: ExcelApi 1.13](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getExtendedRange(direction: Excel.KeyboardDirection, activeCell?: Range | string): Excel.Range;'
    parameters:
    - id: direction
      description: La dirección de la celda activa.
      type: <xref uid="excel!Excel.KeyboardDirection:enum" />
    - id: activeCell
      description: La celda activa de este rango. De forma predeterminada, la celda activa es la celda superior izquierda del rango. Se produce un error si la celda activa no está en este rango.
      type: <xref uid="excel!Excel.Range:class" /> | string
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>Ejemplos\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/range-get-range-edge.yaml\nawait Excel.run(async (context) => {\n  // Get the selected range.\n  const range = context.workbook.getSelectedRange();\n\n  // Specify the direction with the `KeyboardDirection` enum.\n  const direction = Excel.KeyboardDirection.down;\n\n  // Get the active cell in the workbook.\n  const activeCell = context.workbook.getActiveCell();\n\n  // Get all the cells from the currently selected range to the bottom-most edge of the used range.\n  // This method acts like the Ctrl+Shift+Arrow key keyboard shortcut while a range is selected.\n  const extendedRange = range.getExtendedRange(\n    direction,\n    activeCell // If the selected range contains more than one cell, the active cell must be defined.\n  );\n  extendedRange.select();\n\n  await context.sync();\n});\n```"
- name: getExtendedRange(directionString, activeCell)
  uid: excel!Excel.Range#getExtendedRange:member(2)
  package: excel!
  fullName: getExtendedRange(directionString, activeCell)
  summary: >-
    Devuelve un objeto range que incluye el intervalo actual y hasta el borde del intervalo, en función de la dirección proporcionada. Esto coincide con el comportamiento de la tecla Ctrl+Mayús+Flecha en el Excel en Windows interfaz de usuario.


    \[[Conjunto de API: ExcelApi 1.13](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getExtendedRange(directionString: "Left" | "Right" | "Up" | "Down", activeCell?: Range | string): Excel.Range;'
    parameters:
    - id: directionString
      description: La dirección de la celda activa.
      type: "\"Left\" | \"Right\" | \"Up\" | \"Down\""
    - id: activeCell
      description: La celda activa de este rango. De forma predeterminada, la celda activa es la celda superior izquierda del rango. Se produce un error si la celda activa no está en este rango.
      type: <xref uid="excel!Excel.Range:class" /> | string
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: ''
- name: getImage()
  uid: excel!Excel.Range#getImage:member(1)
  package: excel!
  fullName: getImage()
  summary: >-
    Representa el intervalo como una imagen png codificada en base64. *Importante**: Esta API actualmente no es compatible con Excel para Mac. Visite [OfficeDev/office-js Issue \# 235](https://github.com/OfficeDev/office-js/issues/235) para obtener el estado actual.


    \[[Conjunto de API: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getImage(): OfficeExtension.ClientResult<string>;'
    return:
      type: <xref uid="office!OfficeExtension.ClientResult:class" />&lt;string&gt;
      description: ''
- name: getIntersection(anotherRange)
  uid: excel!Excel.Range#getIntersection:member(1)
  package: excel!
  fullName: getIntersection(anotherRange)
  summary: >-
    Obtiene el objeto de rango que representa la intersección rectangular de los rangos especificados.


    \[[Conjunto de API: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getIntersection(anotherRange: Range | string): Excel.Range;'
    parameters:
    - id: anotherRange
      description: Objeto de intervalo o dirección de intervalo que se usará para determinar la intersección de los intervalos.
      type: <xref uid="excel!Excel.Range:class" /> | string
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>Ejemplos\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:F8\";\n    var range = \n        ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getIntersection(\"D4:G6\");\n    range.load('address');\n    return ctx.sync().then(function() {\n        console.log(range.address); // prints Sheet1!D4:F6\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getIntersectionOrNullObject(anotherRange)
  uid: excel!Excel.Range#getIntersectionOrNullObject:member(1)
  package: excel!
  fullName: getIntersectionOrNullObject(anotherRange)
  summary: >-
    Obtiene el objeto de rango que representa la intersección rectangular de los rangos especificados. Si no se encuentra ninguna intersección, esta función devolverá un objeto con su `isNullObject` propiedad establecida en `true`<!-- -->. Para obtener más información, [vea *OrNullObject methods and properties](https://docs.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties)<!-- -->.


    \[[Conjunto de API: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getIntersectionOrNullObject(anotherRange: Range | string): Excel.Range;'
    parameters:
    - id: anotherRange
      description: Objeto de intervalo o dirección de intervalo que se usará para determinar la intersección de los intervalos.
      type: <xref uid="excel!Excel.Range:class" /> | string
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>Ejemplos\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/range-relationships.yaml\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const salesTable = sheet.tables.getItem(\"SalesTable\");\n    const dataRange = salesTable.getDataBodyRange();\n\n    // We want the most recent quarter that has data, so\n    // exclude quarters without data and get the last of\n    // the remaining columns.\n    const usedDataRange = dataRange.getUsedRange(true /* valuesOnly */);\n    const currentQuarterRange = usedDataRange.getLastColumn();\n\n    // Asian and European teams have separate contests.\n    const asianSalesRange = sheet.getRange(\"A2:E4\");\n    const europeanSalesRange = sheet.getRange(\"A5:E7\");\n\n    // The data for each chart is the intersection of the\n    // current quarter column and the rows for the continent.\n    const asianContestRange = asianSalesRange.getIntersectionOrNullObject(currentQuarterRange);\n    const europeanContestRange = europeanSalesRange.getIntersectionOrNullObject(currentQuarterRange);\n\n    // Must sync before you can test the output of *OrNullObject\n    // method/property.\n    await context.sync();\n\n    if (asianContestRange.isNullObject) {\n        // See the declaration of this method for how to\n        // test this code path.\n        reportMissingData(\"Asian\");\n    } else {\n        createContinentChart(\n            sheet,\n            \"Asian\",\n            asianContestRange,\n            \"A9\",\n            \"F24\"\n        );\n    }\n\n    if (europeanContestRange.isNullObject) {\n        // See the declaration of this method for how to\n        // test this code path.\n        reportMissingData(\"European\");\n    } else {\n        createContinentChart(\n            sheet,\n            \"European\",\n            europeanContestRange,\n            \"A25\",\n            \"F40\"\n        );\n    }\n\n    await context.sync();\n});\n```"
- name: getLastCell()
  uid: excel!Excel.Range#getLastCell:member(1)
  package: excel!
  fullName: getLastCell()
  summary: >-
    Obtiene la última celda del intervalo. Por ejemplo, la última celda de "B2:D5" es "D5".


    \[[Conjunto de API: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getLastCell(): Excel.Range;'
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>Ejemplos\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:F8\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getLastCell();\n    range.load('address');\n    return ctx.sync().then(function() {\n        console.log(range.address); // prints Sheet1!F8\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getLastColumn()
  uid: excel!Excel.Range#getLastColumn:member(1)
  package: excel!
  fullName: getLastColumn()
  summary: >-
    Obtiene la última columna del intervalo. Por ejemplo, la última columna de "B2:D5" es "D2:D5".


    \[[Conjunto de API: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getLastColumn(): Excel.Range;'
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>Ejemplos\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:F8\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getLastColumn();\n    range.load('address');\n    return ctx.sync().then(function() {\n        console.log(range.address); // prints Sheet1!F1:F8\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getLastRow()
  uid: excel!Excel.Range#getLastRow:member(1)
  package: excel!
  fullName: getLastRow()
  summary: >-
    Obtiene la última fila del intervalo. Por ejemplo, la última fila de "B2:D5" es "B5:D5".


    \[[Conjunto de API: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getLastRow(): Excel.Range;'
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>Ejemplos\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:F8\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getLastRow();\n    range.load('address');\n    return ctx.sync().then(function() {\n        console.log(range.address); // prints Sheet1!A8:F8\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getMergedAreasOrNullObject()
  uid: excel!Excel.Range#getMergedAreasOrNullObject:member(1)
  package: excel!
  fullName: getMergedAreasOrNullObject()
  summary: >-
    Devuelve un objeto RangeAreas que representa las áreas combinadas de este rango. Tenga en cuenta que si las áreas combinadas cuentan en este intervalo es más de 512, la API no devolverá el resultado. Si rangeAreas no existe, devolverá un objeto null.


    \[[Conjunto de API: ExcelApi 1.13](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getMergedAreasOrNullObject(): Excel.RangeAreas;'
    return:
      type: <xref uid="excel!Excel.RangeAreas:class" />
      description: "\n\n#### <a name=\"examples\"></a>Ejemplos\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/range-merged-ranges.yaml\nawait Excel.run(async (context) => {\n  // Retrieve the worksheet and the table in that worksheet.\n  const sheet = context.workbook.worksheets.getActiveWorksheet();\n  const tableRange = sheet.getRange(\"B2:E6\");\n\n  // Retrieve the merged range within the table and load its details.\n  const mergedAreas = tableRange.getMergedAreasOrNullObject();\n  mergedAreas.load(\"address\");\n  mergedAreas.load(\"cellCount\");\n\n  // Select the merged range.\n  const range = mergedAreas.areas.getItemAt(0);\n  range.select();\n  await context.sync();\n\n  // Print out the details of the `mergedAreas` range object.\n  console.log(`Address of the merged range: ${mergedAreas.address}`);\n  console.log(`Number of cells in the merged range: ${mergedAreas.cellCount}`);\n\n  await context.sync();\n});\n```"
- name: getOffsetRange(rowOffset, columnOffset)
  uid: excel!Excel.Range#getOffsetRange:member(1)
  package: excel!
  fullName: getOffsetRange(rowOffset, columnOffset)
  summary: >-
    Obtiene un objeto que representa un intervalo desplazado con respecto al intervalo especificado. La dimensión del rango devuelto coincidirá con este rango. Si el rango resultante se fuerza más allá de los límites de la cuadrícula de la hoja de cálculo, se producirá un error.


    \[[Conjunto de API: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getOffsetRange(rowOffset: number, columnOffset: number): Excel.Range;'
    parameters:
    - id: rowOffset
      description: Número de filas (número positivo, negativo o 0) que debe desplazarse el intervalo. Los valores positivos desplazan hacia abajo, mientras que los negativos lo hacen hacia arriba.
      type: number
    - id: columnOffset
      description: Número de columnas (número positivo, negativo o 0) que debe desplazarse el intervalo. Los valores positivos desplazan hacia la derecha, mientras que los negativos lo hacen hacia la izquierda.
      type: number
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>Ejemplos\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"D4:F6\";\n    var range = \n        ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getOffsetRange(-1,4);\n    range.load('address');\n    return ctx.sync().then(function() {\n        console.log(range.address); // prints Sheet1!H3:J5\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getPivotTables(fullyContained)
  uid: excel!Excel.Range#getPivotTables:member(1)
  package: excel!
  fullName: getPivotTables(fullyContained)
  summary: >-
    Obtiene una colección con ámbito de tablas dinámicas que se superponen con el intervalo.


    \[[Conjunto de API: ExcelApi 1.12](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getPivotTables(fullyContained?: boolean): Excel.PivotTableScopedCollection;'
    parameters:
    - id: fullyContained
      description: If `true`<!-- -->, devuelve solo tablas dinámicas que están totalmente contenidas dentro de los límites del intervalo. El valor predeterminado es `false`<!-- -->.
      type: boolean
    return:
      type: <xref uid="excel!Excel.PivotTableScopedCollection:class" />
      description: "\n\n#### <a name=\"examples\"></a>Ejemplos\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-get-pivottables.yaml\nawait Excel.run(async (context) => {\n  const activeRange = context.workbook.getSelectedRange();\n\n  // Get all the PivotTables that intersect with this range.\n  const partiallyContainedPivotTables = activeRange.getPivotTables();\n  // Get all the PivotTables that are completely contained within this range.\n  const fullyContainedPivotTables = activeRange.getPivotTables(true);\n\n  partiallyContainedPivotTables.load(\"name\");\n  fullyContainedPivotTables.load(\"name\");\n  await context.sync();\n\n  // Display the names in the console.\n  console.log(\"PivotTables in the current range:\")\n  partiallyContainedPivotTables.items.forEach((pivotTable) => {\n    console.log(`\\t${pivotTable.name}`);\n  });\n  console.log(\"PivotTables completely contained in the current range:\")\n  fullyContainedPivotTables.items.forEach((pivotTable) => {\n    console.log(`\\t${pivotTable.name}`);\n  });\n});\n```"
- name: getPrecedents()
  uid: excel!Excel.Range#getPrecedents:member(1)
  package: excel!
  fullName: getPrecedents()
  summary: >-
    Devuelve un objeto que representa el rango que contiene todos los precedentes de una celda en la misma hoja de cálculo `WorkbookRangeAreas` o en varias hojas de cálculo.


    \[[Conjunto de API: ExcelApi BETA (SOLO VISTA PREVIA)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: true
  isDeprecated: false
  syntax:
    content: 'getPrecedents(): Excel.WorkbookRangeAreas;'
    return:
      type: <xref uid="excel!Excel.WorkbookRangeAreas:class" />
      description: ''
- name: getRangeEdge(direction, activeCell)
  uid: excel!Excel.Range#getRangeEdge:member(1)
  package: excel!
  fullName: getRangeEdge(direction, activeCell)
  summary: >-
    Devuelve un objeto range que es la celda perimetral de la región de datos que corresponde a la dirección proporcionada. Esto coincide con el comportamiento de la tecla Ctrl+Flecha en el Excel en Windows interfaz de usuario.


    \[[Conjunto de API: ExcelApi 1.13](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getRangeEdge(direction: Excel.KeyboardDirection, activeCell?: Range | string): Excel.Range;'
    parameters:
    - id: direction
      description: La dirección de la celda activa.
      type: <xref uid="excel!Excel.KeyboardDirection:enum" />
    - id: activeCell
      description: La celda activa de este rango. De forma predeterminada, la celda activa es la celda superior izquierda del rango. Se produce un error si la celda activa no está en este rango.
      type: <xref uid="excel!Excel.Range:class" /> | string
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>Ejemplos\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/range-get-range-edge.yaml\nawait Excel.run(async (context) => {\n  // Get the selected range.\n  const range = context.workbook.getSelectedRange();\n\n  // Specify the direction with the `KeyboardDirection` enum.\n  const direction = Excel.KeyboardDirection.up;\n\n  // Get the active cell in the workbook.\n  const activeCell = context.workbook.getActiveCell();\n\n  // Get the top-most cell of the current used range.\n  // This method acts like the Ctrl+Arrow key keyboard shortcut while a range is selected.\n  const rangeEdge = range.getRangeEdge(\n    direction,\n    activeCell // If the selected range contains more than one cell, the active cell must be defined.\n  );\n  rangeEdge.select();\n\n  await context.sync();\n});\n```"
- name: getRangeEdge(directionString, activeCell)
  uid: excel!Excel.Range#getRangeEdge:member(2)
  package: excel!
  fullName: getRangeEdge(directionString, activeCell)
  summary: >-
    Devuelve un objeto range que es la celda perimetral de la región de datos que corresponde a la dirección proporcionada. Esto coincide con el comportamiento de la tecla Ctrl+Flecha en el Excel en Windows interfaz de usuario.


    \[[Conjunto de API: ExcelApi 1.13](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getRangeEdge(directionString: "Left" | "Right" | "Up" | "Down", activeCell?: Range | string): Excel.Range;'
    parameters:
    - id: directionString
      description: La dirección de la celda activa.
      type: "\"Left\" | \"Right\" | \"Up\" | \"Down\""
    - id: activeCell
      description: La celda activa de este rango. De forma predeterminada, la celda activa es la celda superior izquierda del rango. Se produce un error si la celda activa no está en este rango.
      type: <xref uid="excel!Excel.Range:class" /> | string
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: ''
- name: getResizedRange(deltaRows, deltaColumns)
  uid: excel!Excel.Range#getResizedRange:member(1)
  package: excel!
  fullName: getResizedRange(deltaRows, deltaColumns)
  summary: >-
    Obtiene un objeto similar al objeto actual, pero con su esquina inferior derecha expandida (o contratada) por un número de `Range` `Range` filas y columnas.


    \[[Conjunto de API: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getResizedRange(deltaRows: number, deltaColumns: number): Excel.Range;'
    parameters:
    - id: deltaRows
      description: El número de filas en el que se va a expandir la esquina inferior derecha, con respecto al intervalo actual. Use un número positivo para expandir el intervalo, o un número negativo para reducirlo.
      type: number
    - id: deltaColumns
      description: Número de columnas por las que expandir la esquina inferior derecha, en relación con el intervalo actual. Use un número positivo para expandir el intervalo, o un número negativo para reducirlo.
      type: number
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: ''
- name: getRow(row)
  uid: excel!Excel.Range#getRow:member(1)
  package: excel!
  fullName: getRow(row)
  summary: >-
    Obtiene una fila contenida en el intervalo.


    \[[Conjunto de API: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getRow(row: number): Excel.Range;'
    parameters:
    - id: row
      description: Número de fila del intervalo que se va a recuperar. Indizado con cero.
      type: number
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>Ejemplos\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:F8\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getRow(1);\n    range.load('address');\n    return ctx.sync().then(function() {\n        console.log(range.address); // prints Sheet1!A2:F2\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getRowProperties(rowPropertiesLoadOptions)
  uid: excel!Excel.Range#getRowProperties:member(1)
  package: excel!
  fullName: getRowProperties(rowPropertiesLoadOptions)
  summary: >-
    Devuelve una matriz de una sola dimensión que encapsula los datos para la fuente, el relleno, los bordes, la alineación y otras propiedades de la fila. Para las propiedades que no son coherentes en cada celda dentro de una fila determinada, `null` se devolverá.


    \[[Conjunto de API: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getRowProperties(rowPropertiesLoadOptions: RowPropertiesLoadOptions): OfficeExtension.ClientResult<RowProperties[]>;'
    parameters:
    - id: rowPropertiesLoadOptions
      description: Objeto que representa las propiedades de fila que se cargarán.
      type: <xref uid="excel!Excel.RowPropertiesLoadOptions:interface" />
    return:
      type: <xref uid="office!OfficeExtension.ClientResult:class" />&lt;<xref uid="excel!Excel.RowProperties:interface" />[]&gt;
      description: Matriz en la que cada elemento representa las propiedades solicitadas de la fila correspondiente.
- name: getRowsAbove(count)
  uid: excel!Excel.Range#getRowsAbove:member(1)
  package: excel!
  fullName: getRowsAbove(count)
  summary: >-
    Obtiene un número determinado de filas por encima del objeto `Range` actual.


    \[[Conjunto de API: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getRowsAbove(count?: number): Excel.Range;'
    parameters:
    - id: count
      description: Opcional. El número de filas que se va a incluir en el intervalo resultante. En general, use un número positivo para crear un intervalo fuera del intervalo actual. También puede usar un número negativo para crear un intervalo dentro del intervalo actual. El valor predeterminado es 1.
      type: number
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: ''
- name: getRowsBelow(count)
  uid: excel!Excel.Range#getRowsBelow:member(1)
  package: excel!
  fullName: getRowsBelow(count)
  summary: >-
    Obtiene un número determinado de filas por debajo del objeto `Range` actual.


    \[[Conjunto de API: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getRowsBelow(count?: number): Excel.Range;'
    parameters:
    - id: count
      description: Opcional. El número de filas que se va a incluir en el intervalo resultante. En general, use un número positivo para crear un intervalo fuera del intervalo actual. También puede usar un número negativo para crear un intervalo dentro del intervalo actual. El valor predeterminado es 1.
      type: number
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: ''
- name: getSpecialCells(cellType, cellValueType)
  uid: excel!Excel.Range#getSpecialCells:member(1)
  package: excel!
  fullName: getSpecialCells(cellType, cellValueType)
  summary: >-
    Obtiene el objeto, que comprende uno o varios intervalos rectangulares, que representa todas las celdas que `RangeAreas` coinciden con el tipo y el valor especificados. Si no se encuentra ninguna celda especial, `ItemNotFound` se producirá un error.


    \[[Conjunto de API: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSpecialCells(cellType: Excel.SpecialCellType, cellValueType?: Excel.SpecialCellValueType): Excel.RangeAreas;'
    parameters:
    - id: cellType
      description: Tipo de celdas que se incluirán.
      type: <xref uid="excel!Excel.SpecialCellType:enum" />
    - id: cellValueType
      description: Si `cellType` es o `constants``formulas`<!-- -->, este argumento se usa para determinar qué tipos de celdas incluir en el resultado. Estos valores se pueden combinar para devolver más de un tipo. El valor predeterminado es seleccionar todas las constantes o fórmulas, sea cual sea el tipo.
      type: <xref uid="excel!Excel.SpecialCellValueType:enum" />
    return:
      type: <xref uid="excel!Excel.RangeAreas:class" />
      description: "\n\n#### <a name=\"examples\"></a>Ejemplos\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/range-areas.yaml\nawait Excel.run(async (context) => {\n\n    const sheet = context.workbook.worksheets.getActiveWorksheet();\n    const usedRange = sheet.getUsedRange();\n\n    // Find the ranges with either text or logical (boolean) values.\n    const formulaRanges = usedRange.getSpecialCells(\"Constants\", \"LogicalText\");\n    formulaRanges.format.fill.color = \"orange\";\n\n    return context.sync();\n});\n```"
- name: getSpecialCells(cellTypeString, cellValueType)
  uid: excel!Excel.Range#getSpecialCells:member(2)
  package: excel!
  fullName: getSpecialCells(cellTypeString, cellValueType)
  summary: >-
    Obtiene el objeto, que comprende uno o varios intervalos rectangulares, que representa todas las celdas que `RangeAreas` coinciden con el tipo y el valor especificados. Si no se encuentra ninguna celda especial, `ItemNotFound` se producirá un error.


    \[[Conjunto de API: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSpecialCells(cellTypeString: "ConditionalFormats" | "DataValidations" | "Blanks" | "Constants" | "Formulas" | "SameConditionalFormat" | "SameDataValidation" | "Visible", cellValueType?: "All" | "Errors" | "ErrorsLogical" | "ErrorsNumbers" | "ErrorsText" | "ErrorsLogicalNumber" | "ErrorsLogicalText" | "ErrorsNumberText" | "Logical" | "LogicalNumbers" | "LogicalText" | "LogicalNumbersText" | "Numbers" | "NumbersText" | "Text"): Excel.RangeAreas;'
    parameters:
    - id: cellTypeString
      description: Tipo de celdas que se incluirán.
      type: "\"ConditionalFormats\" | \"DataValidations\" | \"Blanks\" | \"Constants\" | \"Formulas\" | \"SameConditionalFormat\" | \"SameDataValidation\" | \"Visible\""
    - id: cellValueType
      description: Si `cellType` es o `constants``formulas`<!-- -->, este argumento se usa para determinar qué tipos de celdas incluir en el resultado. Estos valores se pueden combinar para devolver más de un tipo. El valor predeterminado es seleccionar todas las constantes o fórmulas, sea cual sea el tipo.
      type: "\"All\" | \"Errors\" | \"ErrorsLogical\" | \"ErrorsNumbers\" | \"ErrorsText\" | \"ErrorsLogicalNumber\" | \"ErrorsLogicalText\" | \"ErrorsNumberText\" | \"Logical\" | \"LogicalNumbers\" | \"LogicalText\" | \"LogicalNumbersText\" | \"Numbers\" | \"NumbersText\" | \"Text\""
    return:
      type: <xref uid="excel!Excel.RangeAreas:class" />
      description: ''
- name: getSpecialCellsOrNullObject(cellType, cellValueType)
  uid: excel!Excel.Range#getSpecialCellsOrNullObject:member(1)
  package: excel!
  fullName: getSpecialCellsOrNullObject(cellType, cellValueType)
  summary: >-
    Obtiene el objeto, que comprende uno o varios intervalos, que representa todas las celdas que `RangeAreas` coinciden con el tipo y el valor especificados. Si no se encuentran celdas especiales, esta función devolverá un objeto con su `isNullObject` propiedad establecida en `true`<!-- -->. Para obtener más información, [vea *OrNullObject methods and properties](https://docs.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties)<!-- -->.


    \[[Conjunto de API: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSpecialCellsOrNullObject(cellType: Excel.SpecialCellType, cellValueType?: Excel.SpecialCellValueType): Excel.RangeAreas;'
    parameters:
    - id: cellType
      description: Tipo de celdas que se incluirán.
      type: <xref uid="excel!Excel.SpecialCellType:enum" />
    - id: cellValueType
      description: Si `cellType` es o `constants``formulas`<!-- -->, este argumento se usa para determinar qué tipos de celdas incluir en el resultado. Estos valores se pueden combinar para devolver más de un tipo. El valor predeterminado es seleccionar todas las constantes o fórmulas, sea cual sea el tipo.
      type: <xref uid="excel!Excel.SpecialCellValueType:enum" />
    return:
      type: <xref uid="excel!Excel.RangeAreas:class" />
      description: ''
- name: getSpecialCellsOrNullObject(cellTypeString, cellValueType)
  uid: excel!Excel.Range#getSpecialCellsOrNullObject:member(2)
  package: excel!
  fullName: getSpecialCellsOrNullObject(cellTypeString, cellValueType)
  summary: >-
    Obtiene el objeto, que comprende uno o varios intervalos, que representa todas las celdas que `RangeAreas` coinciden con el tipo y el valor especificados. Si no se encuentran celdas especiales, esta función devolverá un objeto con su `isNullObject` propiedad establecida en `true`<!-- -->. Para obtener más información, [vea *OrNullObject methods and properties](https://docs.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties)<!-- -->.


    \[[Conjunto de API: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSpecialCellsOrNullObject(cellTypeString: "ConditionalFormats" | "DataValidations" | "Blanks" | "Constants" | "Formulas" | "SameConditionalFormat" | "SameDataValidation" | "Visible", cellValueType?: "All" | "Errors" | "ErrorsLogical" | "ErrorsNumbers" | "ErrorsText" | "ErrorsLogicalNumber" | "ErrorsLogicalText" | "ErrorsNumberText" | "Logical" | "LogicalNumbers" | "LogicalText" | "LogicalNumbersText" | "Numbers" | "NumbersText" | "Text"): Excel.RangeAreas;'
    parameters:
    - id: cellTypeString
      description: Tipo de celdas que se incluirán.
      type: "\"ConditionalFormats\" | \"DataValidations\" | \"Blanks\" | \"Constants\" | \"Formulas\" | \"SameConditionalFormat\" | \"SameDataValidation\" | \"Visible\""
    - id: cellValueType
      description: Si `cellType` es o `constants``formulas`<!-- -->, este argumento se usa para determinar qué tipos de celdas incluir en el resultado. Estos valores se pueden combinar para devolver más de un tipo. El valor predeterminado es seleccionar todas las constantes o fórmulas, sea cual sea el tipo.
      type: "\"All\" | \"Errors\" | \"ErrorsLogical\" | \"ErrorsNumbers\" | \"ErrorsText\" | \"ErrorsLogicalNumber\" | \"ErrorsLogicalText\" | \"ErrorsNumberText\" | \"Logical\" | \"LogicalNumbers\" | \"LogicalText\" | \"LogicalNumbersText\" | \"Numbers\" | \"NumbersText\" | \"Text\""
    return:
      type: <xref uid="excel!Excel.RangeAreas:class" />
      description: ''
- name: getSpillingToRange()
  uid: excel!Excel.Range#getSpillingToRange:member(1)
  package: excel!
  fullName: getSpillingToRange()
  summary: >-
    Obtiene el objeto de intervalo que contiene el intervalo de desbordamiento al llamar en una celda de delimitador. Se produce un error si se aplica a un intervalo con más de una celda.


    \[[Conjunto de API: ExcelApi 1.12](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSpillingToRange(): Excel.Range;'
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>Ejemplos\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/dynamic-arrays.yaml\nawait Excel.run(async (context) => {\n  const sheet = context.workbook.worksheets.getItem(\"Sample\");\n\n  // Set G4 to a formula that returns a dynamic array.\n  const targetCell = sheet.getRange(\"G4\");\n  targetCell.formulas = [[\"=A4:D4\"]];\n\n  // Get the address of the cells that the dynamic array spilled into.\n  const spillRange = targetCell.getSpillingToRange();\n  spillRange.load(\"address\");\n\n  // Fit the columns for readability.\n  sheet.getUsedRange().format.autofitColumns();\n  await context.sync();\n\n  console.log(`Copying the table headers spilled into ${spillRange.address}.`);\n});\n```"
- name: getSpillingToRangeOrNullObject()
  uid: excel!Excel.Range#getSpillingToRangeOrNullObject:member(1)
  package: excel!
  fullName: getSpillingToRangeOrNullObject()
  summary: >-
    Obtiene el objeto de intervalo que contiene el intervalo de desbordamiento al llamar en una celda de delimitador. Si el intervalo no es una celda delimitadora o no se encuentra el intervalo de distribución, esta función devolverá un objeto con su `isNullObject` propiedad establecida en `true`<!-- -->. Para obtener más información, [vea *OrNullObject methods and properties](https://docs.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties)<!-- -->.


    \[[Conjunto de API: ExcelApi 1.12](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSpillingToRangeOrNullObject(): Excel.Range;'
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: ''
- name: getSpillParent()
  uid: excel!Excel.Range#getSpillParent:member(1)
  package: excel!
  fullName: getSpillParent()
  summary: >-
    Obtiene el intervalo que contiene la celda de delimitador de una celda en la que se derrama. Se produce un error si se aplica a un intervalo con más de una celda.


    \[[Conjunto de API: ExcelApi 1.12](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSpillParent(): Excel.Range;'
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: ''
- name: getSpillParentOrNullObject()
  uid: excel!Excel.Range#getSpillParentOrNullObject:member(1)
  package: excel!
  fullName: getSpillParentOrNullObject()
  summary: >-
    Obtiene el objeto de intervalo que contiene la celda delimitadora de la celda en la que se va a desbordar. Si no es una celda desbordada o se proporciona más de una celda, esta función devolverá un objeto con su `isNullObject` propiedad establecida en `true`<!-- -->. Para obtener más información, [vea *OrNullObject methods and properties](https://docs.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties)<!-- -->.


    \[[Conjunto de API: ExcelApi 1.12](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSpillParentOrNullObject(): Excel.Range;'
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: ''
- name: getSurroundingRegion()
  uid: excel!Excel.Range#getSurroundingRegion:member(1)
  package: excel!
  fullName: getSurroundingRegion()
  summary: >-
    Devuelve un `Range` objeto que representa la región circundante de la celda superior izquierda de este rango. Una región circundante es un intervalo limitado por cualquier combinación de filas y columnas en blanco en relación a este intervalo.


    \[[Conjunto de API: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSurroundingRegion(): Excel.Range;'
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: ''
- name: getTables(fullyContained)
  uid: excel!Excel.Range#getTables:member(1)
  package: excel!
  fullName: getTables(fullyContained)
  summary: >-
    Obtiene una colección con ámbito de tablas que se superpone con el intervalo.


    \[[Conjunto de API: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getTables(fullyContained?: boolean): Excel.TableScopedCollection;'
    parameters:
    - id: fullyContained
      description: If `true`<!-- -->, devuelve solo tablas que están totalmente contenidas dentro de los límites del intervalo. El valor predeterminado es `false`<!-- -->.
      type: boolean
    return:
      type: <xref uid="excel!Excel.TableScopedCollection:class" />
      description: ''
- name: getUsedRange(valuesOnly)
  uid: excel!Excel.Range#getUsedRange:member(1)
  package: excel!
  fullName: getUsedRange(valuesOnly)
  summary: >-
    Devuelve el intervalo usado del objeto de rango especificado. Si no hay celdas usadas dentro del rango, esta función producirá un `ItemNotFound` error.


    \[[Conjunto de API: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getUsedRange(valuesOnly?: boolean): Excel.Range;'
    parameters:
    - id: valuesOnly
      description: 'Solo tiene en cuenta las celdas con valores como celdas usadas. \[Conjunto de api: ExcelApi 1.2\]'
      type: boolean
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>Ejemplos\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/range-relationships.yaml\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const salesTable = sheet.tables.getItem(\"SalesTable\");\n    const dataRange = salesTable.getDataBodyRange();\n\n    // We want the most recent quarter that has data, so\n    // exclude quarters without data and get the last of\n    // the remaining columns.\n    const usedDataRange = dataRange.getUsedRange(true /* valuesOnly */);\n    const currentQuarterRange = usedDataRange.getLastColumn();\n\n    // Asian and European teams have separate contests.\n    const asianSalesRange = sheet.getRange(\"A2:E4\");\n    const europeanSalesRange = sheet.getRange(\"A5:E7\");\n\n    // The data for each chart is the intersection of the\n    // current quarter column and the rows for the continent.\n    const asianContestRange = asianSalesRange.getIntersectionOrNullObject(currentQuarterRange);\n    const europeanContestRange = europeanSalesRange.getIntersectionOrNullObject(currentQuarterRange);\n\n    // Must sync before you can test the output of *OrNullObject\n    // method/property.\n    await context.sync();\n\n    if (asianContestRange.isNullObject) {\n        // See the declaration of this method for how to\n        // test this code path.\n        reportMissingData(\"Asian\");\n    } else {\n        createContinentChart(\n            sheet,\n            \"Asian\",\n            asianContestRange,\n            \"A9\",\n            \"F24\"\n        );\n    }\n\n    if (europeanContestRange.isNullObject) {\n        // See the declaration of this method for how to\n        // test this code path.\n        reportMissingData(\"European\");\n    } else {\n        createContinentChart(\n            sheet,\n            \"European\",\n            europeanContestRange,\n            \"A25\",\n            \"F40\"\n        );\n    }\n\n    await context.sync();\n});\n```"
- name: getUsedRangeOrNullObject(valuesOnly)
  uid: excel!Excel.Range#getUsedRangeOrNullObject:member(1)
  package: excel!
  fullName: getUsedRangeOrNullObject(valuesOnly)
  summary: >-
    Devuelve el intervalo usado del objeto de rango especificado. Si no hay celdas usadas dentro del intervalo, esta función devolverá un objeto con su `isNullObject` propiedad establecida en `true`<!-- -->. Para obtener más información, [vea *OrNullObject methods and properties](https://docs.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties)<!-- -->.


    \[[Conjunto de API: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getUsedRangeOrNullObject(valuesOnly?: boolean): Excel.Range;'
    parameters:
    - id: valuesOnly
      description: Solo tiene en cuenta las celdas con valores como celdas usadas.
      type: boolean
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>Ejemplos\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/used-range.yaml\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const salesTable = sheet.tables.getItem(\"SalesTable\");\n    const dataRange = salesTable.getDataBodyRange();\n\n    // Pass true so only cells with values count as used\n    const usedDataRange = dataRange.getUsedRangeOrNullObject(\n        true /* valuesOnly */\n    );\n\n    //Must sync before reading value returned from *OrNullObject method/property.\n    await context.sync();\n\n    if (usedDataRange.isNullObject) {\n        console.log(\"Need Data to Make Chart\");\n        console.log(\"To create a meaningful chart, press 'Fill the table' (or add names to the Product column and numbers to some of the other cells). Then press 'Try to create chart' again.\");\n    } else {\n        const chart = sheet.charts.add(\n            Excel.ChartType.columnClustered,\n            dataRange,\n            \"Columns\"\n        );\n        chart.setPosition(\"A15\", \"F30\");\n        chart.title.text = \"Quarterly sales chart\";\n        chart.legend.position = \"Right\";\n        chart.legend.format.fill.setSolidColor(\"white\");\n        chart.dataLabels.format.font.size = 15;\n        chart.dataLabels.format.font.color = \"black\";\n    }\n\n    await context.sync();\n});\n```"
- name: getVisibleView()
  uid: excel!Excel.Range#getVisibleView:member(1)
  package: excel!
  fullName: getVisibleView()
  summary: >-
    Representa las filas visibles del intervalo actual.


    \[[Conjunto de API: ExcelApi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getVisibleView(): Excel.RangeView;'
    return:
      type: <xref uid="excel!Excel.RangeView:class" />
      description: ''
- name: group(groupOption)
  uid: excel!Excel.Range#group:member(1)
  package: excel!
  fullName: group(groupOption)
  summary: >-
    Agrupa columnas y filas para un esquema.


    \[[Conjunto de API: ExcelApi 1.10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'group(groupOption: Excel.GroupOption): void;'
    parameters:
    - id: groupOption
      description: Especifica cómo se puede agrupar el intervalo por filas o columnas. Se produce un error cuando la opción de grupo difiere de la propiedad o del intervalo (es decir, es true y es "ByColumns" o es true y `InvalidArgument` `isEntireRow` es `isEntireColumn` `range.isEntireRow` `groupOption` `range.isEntireColumn` `groupOption` "ByRows").
      type: <xref uid="excel!Excel.GroupOption:enum" />
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Ejemplos\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/outline.yaml\nExcel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getActiveWorksheet();\n    \n    // Group the larger, main level. Note that the outline controls\n    // will be on row 10, meaning 4-9 will collapse and expand.\n    sheet.getRange(\"4:9\").group(Excel.GroupOption.byRows);\n\n    // Group the smaller, sublevels. Note that the outline controls\n    // will be on rows 6 and 9, meaning 4-5 and 7-8 will collapse and expand.\n    sheet.getRange(\"4:5\").group(Excel.GroupOption.byRows);\n    sheet.getRange(\"7:8\").group(Excel.GroupOption.byRows);\n    await context.sync();\n});\n```"
- name: group(groupOptionString)
  uid: excel!Excel.Range#group:member(2)
  package: excel!
  fullName: group(groupOptionString)
  summary: >-
    Agrupa columnas y filas para un esquema.


    \[[Conjunto de API: ExcelApi 1.10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'group(groupOptionString: "ByRows" | "ByColumns"): void;'
    parameters:
    - id: groupOptionString
      description: Especifica cómo se puede agrupar el intervalo por filas o columnas. Se produce un error cuando la opción de grupo difiere de la propiedad o del intervalo (es decir, es true y es "ByColumns" o es true y `InvalidArgument` `isEntireRow` es `isEntireColumn` `range.isEntireRow` `groupOption` `range.isEntireColumn` `groupOption` "ByRows").
      type: "\"ByRows\" | \"ByColumns\""
    return:
      type: void
      description: ''
- name: hideGroupDetails(groupOption)
  uid: excel!Excel.Range#hideGroupDetails:member(1)
  package: excel!
  fullName: hideGroupDetails(groupOption)
  summary: >-
    Oculta los detalles del grupo de filas o columnas.


    \[[Conjunto de API: ExcelApi 1.10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'hideGroupDetails(groupOption: Excel.GroupOption): void;'
    parameters:
    - id: groupOption
      description: Especifica si se ocultan los detalles de las filas agrupadas o las columnas agrupadas.
      type: <xref uid="excel!Excel.GroupOption:enum" />
    return:
      type: void
      description: ''
- name: hideGroupDetails(groupOptionString)
  uid: excel!Excel.Range#hideGroupDetails:member(2)
  package: excel!
  fullName: hideGroupDetails(groupOptionString)
  summary: >-
    Oculta los detalles del grupo de filas o columnas.


    \[[Conjunto de API: ExcelApi 1.10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'hideGroupDetails(groupOptionString: "ByRows" | "ByColumns"): void;'
    parameters:
    - id: groupOptionString
      description: Especifica si se ocultan los detalles de las filas agrupadas o las columnas agrupadas.
      type: "\"ByRows\" | \"ByColumns\""
    return:
      type: void
      description: ''
- name: insert(shift)
  uid: excel!Excel.Range#insert:member(1)
  package: excel!
  fullName: insert(shift)
  summary: >-
    Inserta una celda o un intervalo de celdas en la hoja de cálculo en lugar de este intervalo y desplaza las demás celdas para crear espacio. Devuelve un nuevo `Range` objeto en el espacio en blanco ahora.


    \[[Conjunto de API: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'insert(shift: Excel.InsertShiftDirection): Excel.Range;'
    parameters:
    - id: shift
      description: Especifica hacia dónde se desplazarán las celdas. Vea `Excel.InsertShiftDirection` para más información.
      type: <xref uid="excel!Excel.InsertShiftDirection:enum" />
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>Ejemplos\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"F5:F10\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    range.insert();\n    return ctx.sync(); \n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: insert(shiftString)
  uid: excel!Excel.Range#insert:member(2)
  package: excel!
  fullName: insert(shiftString)
  summary: >-
    Inserta una celda o un intervalo de celdas en la hoja de cálculo en lugar de este intervalo y desplaza las demás celdas para crear espacio. Devuelve un nuevo `Range` objeto en el espacio en blanco ahora.


    \[[Conjunto de API: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'insert(shiftString: "Down" | "Right"): Excel.Range;'
    parameters:
    - id: shiftString
      description: Especifica hacia dónde se desplazarán las celdas. Vea `Excel.InsertShiftDirection` para más información.
      type: "\"Down\" | \"Right\""
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: ''
- name: load(options)
  uid: excel!Excel.Range#load:member(1)
  package: excel!
  fullName: load(options)
  summary: Pone en cola un comando para cargar las propiedades especificadas del objeto. Debe llamar a `context.sync()` antes de leer las propiedades.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(options?: Excel.Interfaces.RangeLoadOptions): Excel.Range;'
    parameters:
    - id: options
      description: Proporciona opciones para las propiedades del objeto que se cargarán.
      type: <xref uid="excel!Excel.Interfaces.RangeLoadOptions:interface" />
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: ''
- name: load(propertyNames)
  uid: excel!Excel.Range#load:member(2)
  package: excel!
  fullName: load(propertyNames)
  summary: Pone en cola un comando para cargar las propiedades especificadas del objeto. Debe llamar a `context.sync()` antes de leer las propiedades.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(propertyNames?: string | string[]): Excel.Range;'
    parameters:
    - id: propertyNames
      description: Una cadena delimitada por comas o una matriz de cadenas que especifican las propiedades que se cargarán.
      type: string | string[]
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>Ejemplos\n\n```javascript\n// Below example uses range address to get the range object.\nExcel.run(function (ctx) {\n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:F8\"; \n    var worksheet = ctx.workbook.worksheets.getItem(sheetName);\n    var range = worksheet.getRange(rangeAddress);\n    range.load('cellCount');\n    return ctx.sync().then(function() {\n        console.log(range.cellCount);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: load(propertyNamesAndPaths)
  uid: excel!Excel.Range#load:member(3)
  package: excel!
  fullName: load(propertyNamesAndPaths)
  summary: Pone en cola un comando para cargar las propiedades especificadas del objeto. Debe llamar a `context.sync()` antes de leer las propiedades.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      load(propertyNamesAndPaths?: {
                  select?: string;
                  expand?: string;
              }): Excel.Range;
    parameters:
    - id: propertyNamesAndPaths
      description: '`propertyNamesAndPaths.select` es una cadena delimitada por comas que especifica las propiedades que se cargarán y es una cadena delimitada por comas que especifica las propiedades de navegación que `propertyNamesAndPaths.expand` se cargarán.'
      type: >-
        {
                    select?: string;
                    expand?: string;
                }
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: ''
- name: merge(across)
  uid: excel!Excel.Range#merge:member(1)
  package: excel!
  fullName: merge(across)
  summary: >-
    Combina las celdas del intervalo en una región de la hoja de cálculo.


    \[[Conjunto de API: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'merge(across?: boolean): void;'
    parameters:
    - id: across
      description: Opcional. Se `true` establece para combinar celdas en cada fila del rango especificado como celdas combinadas independientes. El valor predeterminado es `false`<!-- -->.
      type: boolean
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Ejemplos\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:C3\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    range.merge(true);\n    return ctx.sync(); \n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/range-merged-ranges.yaml\nawait Excel.run(async (context) => {\n  // Retrieve the worksheet and the table in that worksheet.\n  const sheet = context.workbook.worksheets.getActiveWorksheet();\n  const tableRange = sheet.getRange(\"B2:E6\");\n\n  // Create a merged range in the first row of the table.\n  const chartTitle = tableRange.getRow(0);\n  chartTitle.merge(true);\n\n  // Format the merged range.\n  chartTitle.format.horizontalAlignment = \"Center\";\n\n  await context.sync();\n});\n```"
- name: moveTo(destinationRange)
  uid: excel!Excel.Range#moveTo:member(1)
  package: excel!
  fullName: moveTo(destinationRange)
  summary: >-
    Mueve los valores de celda, el formato y las fórmulas del rango actual al intervalo de destino, reemplazando la información antigua de dichas celdas. El intervalo de destino se expandirá automáticamente si es menor que el intervalo actual. No se modifican las celdas del rango de destino que estén fuera del área del rango original.


    \[[Conjunto de API: ExcelApi 1.11](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'moveTo(destinationRange: Range | string): void;'
    parameters:
    - id: destinationRange
      description: destinationRange Especifica el intervalo al que se desplazará la información de este intervalo.
      type: <xref uid="excel!Excel.Range:class" /> | string
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Ejemplos\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/range-copyfrom.yaml\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    // Place a label in front of the moved data.\n    sheet.getRange(\"F12\").values = [[\"Moved Range:\"]];\n\n    // Move the range from A1:E1 to G12:K12.\n    sheet.getRange(\"A1:E1\").moveTo(\"G12\");\n    await context.sync();\n});\n```"
- name: removeDuplicates(columns, includesHeader)
  uid: excel!Excel.Range#removeDuplicates:member(1)
  package: excel!
  fullName: removeDuplicates(columns, includesHeader)
  summary: >-
    Quita los valores duplicados del intervalo especificado por las columnas.


    \[[Conjunto de API: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'removeDuplicates(columns: number[], includesHeader: boolean): Excel.RemoveDuplicatesResult;'
    parameters:
    - id: columns
      description: Las columnas dentro del rango que pueden contener duplicados. Debe especificarse al menos una columna. Indizado con cero.
      type: number[]
    - id: includesHeader
      description: True si los datos de entrada contienen encabezado. El valor predeterminado es false.
      type: boolean
    return:
      type: <xref uid="excel!Excel.RemoveDuplicatesResult:class" />
      description: "El objeto resultante que contiene el número de filas eliminadas y el número de filas únicas restantes.\n\n#### <a name=\"examples\"></a>Ejemplos\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/range-remove-duplicates.yaml\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const range = sheet.getRange(\"B2:D11\");\n\n    const deleteResult = range.removeDuplicates([0],true);    \n    deleteResult.load();    \n    await context.sync();\n\n    console.log(deleteResult.removed + \" entries with duplicate names removed.\");\n    console.log(deleteResult.uniqueRemaining + \" entries with unique names remain in the range.\");\n});\n```"
- name: replaceAll(text, replacement, criteria)
  uid: excel!Excel.Range#replaceAll:member(1)
  package: excel!
  fullName: replaceAll(text, replacement, criteria)
  summary: >-
    Busca y reemplaza la cadena especificada, según los criterios especificados dentro del intervalo actual.


    \[[Conjunto de API: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'replaceAll(text: string, replacement: string, criteria: Excel.ReplaceCriteria): OfficeExtension.ClientResult<number>;'
    parameters:
    - id: text
      description: Cadena que se busca.
      type: string
    - id: replacement
      description: La cadena que reemplaza a la cadena original.
      type: string
    - id: criteria
      description: Criterios de reemplazo adicionales.
      type: <xref uid="excel!Excel.ReplaceCriteria:interface" />
    return:
      type: <xref uid="office!OfficeExtension.ClientResult:class" />&lt;number&gt;
      description: Número de reemplazos realizados.
- name: select()
  uid: excel!Excel.Range#select:member(1)
  package: excel!
  fullName: select()
  summary: >-
    Selecciona el intervalo especificado en la interfaz de usuario de Excel.


    \[[Conjunto de API: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'select(): void;'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Ejemplos\n\n```javascript\nExcel.run(function (ctx) {\n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"F5:F10\"; \n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    range.select();\n    return ctx.sync(); \n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: set(properties, options)
  uid: excel!Excel.Range#set:member(1)
  package: excel!
  fullName: set(properties, options)
  summary: Establece varias propiedades de un objeto al mismo tiempo. Puede pasar un objeto sin formato con las propiedades adecuadas u otro objeto API del mismo tipo.
  remarks: "Este método tiene la siguiente firma adicional:\n\n`set(properties: Excel.Range): void`\n\n#### <a name=\"examples\"></a>Ejemplos\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/90-scenarios/multiple-property-set.yaml\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n\n    const range = sheet.getRange(\"B2:E2\");\n    range.set({\n        format: {\n            fill: {\n                color: \"#4472C4\"\n            },\n            font: {\n                name: \"Verdana\",\n                color: \"white\"\n            }\n        }\n    })\n    range.format.autofitColumns();\n    await context.sync();\n});\n```\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/90-scenarios/multiple-property-set.yaml\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n\n    const sourceRange = sheet.getRange(\"B2:E2\");\n    sourceRange.load(\"format/fill/color, format/font/name, format/font/color\");\n    await context.sync();\n\n    // Set properties based on the loaded and synced \n    // source range.\n    const targetRange = sheet.getRange(\"B7:E7\");\n    targetRange.set(sourceRange); \n    targetRange.format.autofitColumns();\n    await context.sync();\n});\n```"
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'set(properties: Interfaces.RangeUpdateData, options?: OfficeExtension.UpdateOptions): void;'
    parameters:
    - id: properties
      description: Un objeto JavaScript con propiedades que se estructuran isomórficamente en las propiedades del objeto en el que se llama al método.
      type: <xref uid="excel!Excel.Interfaces.RangeUpdateData:interface" />
    - id: options
      description: Proporciona una opción para suprimir errores si el objeto properties intenta establecer propiedades de solo lectura.
      type: <xref uid="office!OfficeExtension.UpdateOptions:interface" />
    return:
      type: void
      description: ''
- name: set(properties)
  uid: excel!Excel.Range#set:member(2)
  package: excel!
  fullName: set(properties)
  summary: Establece varias propiedades en el objeto al mismo tiempo, en función de un objeto cargado existente.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'set(properties: Excel.Range): void;'
    parameters:
    - id: properties
      description: ''
      type: <xref uid="excel!Excel.Range:class" />
    return:
      type: void
      description: ''
- name: setCellProperties(cellPropertiesData)
  uid: excel!Excel.Range#setCellProperties:member(1)
  package: excel!
  fullName: setCellProperties(cellPropertiesData)
  summary: >-
    Actualiza el rango en función de una matriz 2D de propiedades de celda, encapsulando elementos como fuente, relleno, bordes y alineación.


    \[[Conjunto de API: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setCellProperties(cellPropertiesData: SettableCellProperties[][]): void;'
    parameters:
    - id: cellPropertiesData
      description: Una matriz 2D que representa las propiedades que se establecerán en cada celda.
      type: <xref uid="excel!Excel.SettableCellProperties:interface" />[][]
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Ejemplos\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/cell-properties.yaml\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getActiveWorksheet();\n\n    // Creating the SettableCellProperties objects to use for the range.\n    // In your add-in, these should be created once, outside the function.\n    const topHeaderProps: Excel.SettableCellProperties = {\n        // The style property takes a string matching the name of an Excel style.\n        // Built-in style names are listed in the `BuiltInStyle` enum.\n        // Note that a style will overwrite any formatting,\n        // so do not use the format property with the style property.\n        style: \"Heading1\"\n    };\n\n    const headerProps: Excel.SettableCellProperties = {\n        // Any subproperties of format that are not set will not be changed when these cell properties are set.\n        format: {\n            fill: {\n                color: \"Blue\"\n            },\n            font: {\n                color: \"White\",\n                bold: true\n            }\n        }\n    };\n\n    const nonApplicableProps: Excel.SettableCellProperties = {\n        format: {\n            fill: {\n                pattern: Excel.FillPattern.gray25\n            },\n            font: {\n                color: \"Gray\",\n                italic: true\n            }\n        }\n    };\n\n    const matchupScoreProps: Excel.SettableCellProperties = {\n        format: {\n            borders: {\n                bottom: {\n                    style: Excel.BorderLineStyle.continuous\n                },\n                left: {\n                    style: Excel.BorderLineStyle.continuous\n                },\n                right: {\n                    style: Excel.BorderLineStyle.continuous\n                },\n                top: {\n                    style: Excel.BorderLineStyle.continuous\n                }\n            }\n        }\n    };\n\n    const range = sheet.getRange(\"A1:E5\");\n\n    // You can use empty JSON objects to avoid changing a cell's properties.\n    range.setCellProperties([\n        [topHeaderProps, {}, {}, {}, {}],\n        [{}, {}, headerProps, headerProps, headerProps],\n        [{}, headerProps, nonApplicableProps, matchupScoreProps, matchupScoreProps],\n        [{}, headerProps, matchupScoreProps, nonApplicableProps, matchupScoreProps],\n        [{}, headerProps, matchupScoreProps, matchupScoreProps, nonApplicableProps]\n    ]);\n\n    sheet.getUsedRange().format.autofitColumns();\n    await context.sync();\n});\n```"
- name: setColumnProperties(columnPropertiesData)
  uid: excel!Excel.Range#setColumnProperties:member(1)
  package: excel!
  fullName: setColumnProperties(columnPropertiesData)
  summary: >-
    Actualiza el rango en función de una matriz unidimensional de propiedades de columna, encapsulando elementos como fuente, relleno, bordes y alineación.


    \[[Conjunto de API: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setColumnProperties(columnPropertiesData: SettableColumnProperties[]): void;'
    parameters:
    - id: columnPropertiesData
      description: Matriz que representa las propiedades que se establecerán en cada columna.
      type: <xref uid="excel!Excel.SettableColumnProperties:interface" />[]
    return:
      type: void
      description: ''
- name: setDirty()
  uid: excel!Excel.Range#setDirty:member(1)
  package: excel!
  fullName: setDirty()
  summary: >-
    Establece un intervalo que se deberá actualizar cuando se realice la próxima actualización.


    \[[Conjunto de API: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setDirty(): void;'
    return:
      type: void
      description: ''
- name: setRowProperties(rowPropertiesData)
  uid: excel!Excel.Range#setRowProperties:member(1)
  package: excel!
  fullName: setRowProperties(rowPropertiesData)
  summary: >-
    Actualiza el rango en función de una matriz unidimensional de propiedades de fila, encapsulando elementos como fuente, relleno, bordes y alineación.


    \[[Conjunto de API: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setRowProperties(rowPropertiesData: SettableRowProperties[]): void;'
    parameters:
    - id: rowPropertiesData
      description: Matriz que representa las propiedades que se establecerán en cada fila.
      type: <xref uid="excel!Excel.SettableRowProperties:interface" />[]
    return:
      type: void
      description: ''
- name: showCard()
  uid: excel!Excel.Range#showCard:member(1)
  package: excel!
  fullName: showCard()
  summary: >-
    Muestra la tarjeta de una celda activa si tiene contenido de valor enriquecido.


    \[[Conjunto de API: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'showCard(): void;'
    return:
      type: void
      description: ''
- name: showGroupDetails(groupOption)
  uid: excel!Excel.Range#showGroupDetails:member(1)
  package: excel!
  fullName: showGroupDetails(groupOption)
  summary: >-
    Muestra los detalles del grupo de filas o columnas.


    \[[Conjunto de API: ExcelApi 1.10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'showGroupDetails(groupOption: Excel.GroupOption): void;'
    parameters:
    - id: groupOption
      description: Especifica si se deben mostrar los detalles de las filas agrupadas o las columnas agrupadas.
      type: <xref uid="excel!Excel.GroupOption:enum" />
    return:
      type: void
      description: ''
- name: showGroupDetails(groupOptionString)
  uid: excel!Excel.Range#showGroupDetails:member(2)
  package: excel!
  fullName: showGroupDetails(groupOptionString)
  summary: >-
    Muestra los detalles del grupo de filas o columnas.


    \[[Conjunto de API: ExcelApi 1.10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'showGroupDetails(groupOptionString: "ByRows" | "ByColumns"): void;'
    parameters:
    - id: groupOptionString
      description: Especifica si se deben mostrar los detalles de las filas agrupadas o las columnas agrupadas.
      type: "\"ByRows\" | \"ByColumns\""
    return:
      type: void
      description: ''
- name: toJSON()
  uid: excel!Excel.Range#toJSON:member(1)
  package: excel!
  fullName: toJSON()
  summary: Invalida el método JavaScript para proporcionar resultados más útiles cuando se pasa un objeto API a `toJSON()``JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, a su vez, llama `toJSON` al método del objeto que se pasa a él). Mientras que la Excel. Range (objeto) es un objeto API, `toJSON` el método devuelve un objeto JavaScript sin formato (se escribe como`Excel.Interfaces.RangeData`<!-- -->) que contiene copias superficiales de las propiedades secundarias cargadas del objeto original.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'toJSON(): Excel.Interfaces.RangeData;'
    return:
      type: <xref uid="excel!Excel.Interfaces.RangeData:interface" />
      description: ''
- name: track()
  uid: excel!Excel.Range#track:member(1)
  package: excel!
  fullName: track()
  summary: Realiza un seguimiento del objeto de ajuste automático según cambios adyacentes en el documento. Esta llamada es una abreviada para `context.trackedObjects.add(thisObject)`<!-- -->. Si usa este objeto entre llamadas y fuera de la ejecución secuencial de un lote ".run" y obtiene un error "InvalidObjectPath" al establecer una propiedad o invocar un método en el objeto, debe haber agregado el objeto a la colección de objetos de seguimiento cuando se creó el objeto por primera `.sync` vez.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'track(): Excel.Range;'
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: ''
- name: ungroup(groupOption)
  uid: excel!Excel.Range#ungroup:member(1)
  package: excel!
  fullName: ungroup(groupOption)
  summary: >-
    Desagrupa columnas y filas para un esquema.


    \[[Conjunto de API: ExcelApi 1.10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'ungroup(groupOption: Excel.GroupOption): void;'
    parameters:
    - id: groupOption
      description: Especifica cómo se puede desagrupar el intervalo mediante filas o columnas.
      type: <xref uid="excel!Excel.GroupOption:enum" />
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Ejemplos\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/outline.yaml\nExcel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getActiveWorksheet();\n    \n    // This removes two levels of groups from the \"A1-R10\" range.\n    // Any groups at the same level on the same dimension will be removed by a single call.\n    sheet.getRange(\"A1:R10\").ungroup(Excel.GroupOption.byRows);\n    sheet.getRange(\"A1:R10\").ungroup(Excel.GroupOption.byRows);\n    sheet.getRange(\"A1:R10\").ungroup(Excel.GroupOption.byColumns);\n    sheet.getRange(\"A1:R10\").ungroup(Excel.GroupOption.byColumns);\n    await context.sync();\n});\n```"
- name: ungroup(groupOptionString)
  uid: excel!Excel.Range#ungroup:member(2)
  package: excel!
  fullName: ungroup(groupOptionString)
  summary: >-
    Desagrupa columnas y filas para un esquema.


    \[[Conjunto de API: ExcelApi 1.10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'ungroup(groupOptionString: "ByRows" | "ByColumns"): void;'
    parameters:
    - id: groupOptionString
      description: Especifica cómo se puede desagrupar el intervalo mediante filas o columnas.
      type: "\"ByRows\" | \"ByColumns\""
    return:
      type: void
      description: ''
- name: unmerge()
  uid: excel!Excel.Range#unmerge:member(1)
  package: excel!
  fullName: unmerge()
  summary: >-
    Separa las celdas del intervalo en celdas independientes.


    \[[Conjunto de API: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'unmerge(): void;'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Ejemplos\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:C3\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    range.unmerge();\n    return ctx.sync(); \n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: untrack()
  uid: excel!Excel.Range#untrack:member(1)
  package: excel!
  fullName: untrack()
  summary: Libere la memoria asociada a este objeto, si se ha realizado un seguimiento de él anteriormente. Esta llamada es abreviada para `context.trackedObjects.remove(thisObject)`<!-- -->. Tener muchos objetos marcados ralentiza la aplicación host, así que debe recordar liberar los objetos que agregue cuando haya terminado con ellos. Deberá llamar antes de que `context.sync()` la versión de memoria entre en vigor.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'untrack(): Excel.Range;'
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>Ejemplos\n\n```typescript\nExcel.run(async (context) => {\n    const largeRange = context.workbook.getSelectedRange();\n    largeRange.load([\"rowCount\", \"columnCount\"]);\n    await context.sync();\n\n    for (let i = 0; i < largeRange.rowCount; i++) {\n        for (let j = 0; j < largeRange.columnCount; j++) {\n            let cell = largeRange.getCell(i, j);\n            cell.values = [[i *j]];\n\n            // call untrack() to release the range from memory\n            cell.untrack();\n        }\n    }\n\n    await context.sync();\n});\n```"
extends: <xref uid="office!OfficeExtension.ClientObject:class" />
metadata:
  ms.openlocfilehash: fb9afb6d919328c65dc8e19b5d84b6bd75376112
  ms.sourcegitcommit: 418408d346cc899183d6d6a74161ba2ad58bd39d
  ms.translationtype: MT
  ms.contentlocale: es-ES
  ms.lasthandoff: 07/02/2021
  ms.locfileid: "53278373"
