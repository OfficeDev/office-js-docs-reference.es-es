### YamlMime:UniversalReference
ms.openlocfilehash: 2220a0893c04b047b24d6abac12b96ffb44e0a04
ms.sourcegitcommit: 3771b97cffd6e0510fd4e9c6288db696cd0c0ca9
ms.translationtype: MT
ms.contentlocale: es-ES
ms.lasthandoff: 11/30/2018
ms.locfileid: "26995483"
items:
- uid: excel.Excel.TableCollection
  summary: >-
    <span data-ttu-id="2fbd7-101">Representa una colección de todas las tablas que forman parte del libro o la hoja de cálculo, dependiendo de cómo se haya alcanzado.</span><span class="sxs-lookup"><span data-stu-id="2fbd7-101">Represents a collection of all the tables that are part of the workbook or worksheet, depending on how it was reached.</span></span>


    <span data-ttu-id="2fbd7-102">\[[Conjunto de API: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="2fbd7-102">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: Excel.TableCollection
  fullName: Excel.TableCollection
  langs:
  - typeScript
  type: class
  extends:
  - office.OfficeExtension.ClientObject
  package: excel
  children:
  - excel.Excel.TableCollection.add
  - excel.Excel.TableCollection.count
  - excel.Excel.TableCollection.getCount
  - excel.Excel.TableCollection.getItem
  - excel.Excel.TableCollection.getItemAt
  - excel.Excel.TableCollection.getItemOrNullObject
  - excel.Excel.TableCollection.items
  - excel.Excel.TableCollection.load
  - excel.Excel.TableCollection.onChanged
  - excel.Excel.TableCollection.toJSON
- uid: excel.Excel.TableCollection.add
  summary: >-
    <span data-ttu-id="2fbd7-p101">Crea una tabla nueva. El objeto de rango o la dirección de origen determinan la hoja de cálculo a la que se agregará la tabla. Si no se puede agregar la tabla (por ejemplo, porque la dirección no es válida o porque la tabla se superpondría con otra tabla), se producirá un error.</span><span class="sxs-lookup"><span data-stu-id="2fbd7-p101">Create a new table. The range object or source address determines the worksheet under which the table will be added. If the table cannot be added (e.g., because the address is invalid, or the table would overlap with another table), an error will be thrown.</span></span>


    <span data-ttu-id="2fbd7-106">\[[Conjunto de API: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="2fbd7-106">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: add(address, hasHeaders)
  fullName: add
  langs:
  - typeScript
  type: method
  syntax:
    content: 'add(address: Range | string, hasHeaders: boolean): Excel.Table;'
    return:
      type:
      - excel.Excel.Table
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"2fbd7-107\">Ejemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"2fbd7-107\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var table = ctx.workbook.tables.add('Sheet1!A1:E7', true);\n    table.load('name');\n    return ctx.sync().then(function() {\n        console.log(table.name);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: address
      description: '<span data-ttu-id="2fbd7-108">Un objeto Range, o una dirección de cadena o nombre del rango que representa el origen de datos.</span><span class="sxs-lookup"><span data-stu-id="2fbd7-108">A Range object, or a string address or name of the range representing the data source.</span></span> <span data-ttu-id="2fbd7-109">Si la dirección no contiene un nombre de hoja, se usa la hoja activo en ese momento.</span><span class="sxs-lookup"><span data-stu-id="2fbd7-109">If the address does not contain a sheet name, the currently-active sheet is used.</span></span> <span data-ttu-id="2fbd7-110">\[Conjunto de API: ExcelApi 1.1 / 1,3.</span><span class="sxs-lookup"><span data-stu-id="2fbd7-110">\[Api set: ExcelApi 1.1 / 1.3.</span></span> <span data-ttu-id="2fbd7-111">Antes de ExcelApi 1.3, este parámetro debe ser una cadena.</span><span class="sxs-lookup"><span data-stu-id="2fbd7-111">Prior to ExcelApi 1.3, this parameter must be a string.</span></span> <span data-ttu-id="2fbd7-112">A partir de Excel Api 1.3, este parámetro puede ser un objeto Range o una cadena.\]</span><span class="sxs-lookup"><span data-stu-id="2fbd7-112">Starting with Excel Api 1.3, this parameter may be a Range object or a string.\]</span></span>'
      type:
      - Range | string
    - id: hasHeaders
      description: <span data-ttu-id="2fbd7-p103">Valor booleano que indica si los datos que se están importando tienen etiquetas de columna. Si el origen no contiene encabezados (es decir, cuando esta propiedad se establece en false), Excel generará automáticamente el encabezado desplazando los datos una fila hacia abajo.</span><span class="sxs-lookup"><span data-stu-id="2fbd7-p103">Boolean value that indicates whether the data being imported has column labels. If the source does not contain headers (i.e,. when this property set to false), Excel will automatically generate header shifting the data down by one row.</span></span>
      type:
      - boolean
- uid: excel.Excel.TableCollection.count
  summary: >-
    <span data-ttu-id="2fbd7-p104">Devuelve el número de tablas del libro. Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="2fbd7-p104">Returns the number of tables in the workbook. Read-only.</span></span>


    <span data-ttu-id="2fbd7-118">\[[Conjunto de API: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="2fbd7-118">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: count
  fullName: count
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly count: number;'
    return:
      type:
      - number
- uid: excel.Excel.TableCollection.getCount
  summary: >-
    <span data-ttu-id="2fbd7-119">Obtiene el número de tablas de la colección.</span><span class="sxs-lookup"><span data-stu-id="2fbd7-119">Gets the number of tables in the collection.</span></span>


    <span data-ttu-id="2fbd7-120">\[[Conjunto de API: ExcelApi 1,4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="2fbd7-120">\[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getCount()
  fullName: getCount
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getCount(): OfficeExtension.ClientResult<number>;'
    return:
      type:
      - OfficeExtension.ClientResult<number>
      description: ''
- uid: excel.Excel.TableCollection.getItem
  summary: >-
    <span data-ttu-id="2fbd7-121">Obtener una tabla por nombre o identificador.</span><span class="sxs-lookup"><span data-stu-id="2fbd7-121">Gets a table by Name or ID.</span></span>


    <span data-ttu-id="2fbd7-122">\[[Conjunto de API: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="2fbd7-122">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getItem(key)
  fullName: getItem
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getItem(key: string): Excel.Table;'
    return:
      type:
      - excel.Excel.Table
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"2fbd7-123\">Ejemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"2fbd7-123\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var tableName = 'Table1';\n    var table = ctx.workbook.tables.getItem(tableName);\n    table.load('name');\n    return ctx.sync().then(function() {\n            console.log(table.name);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```javascript\nExcel.run(function (ctx) { \n    var table = ctx.workbook.tables.getItemAt(0);\n    table.load('name');\n    return ctx.sync().then(function() {\n            console.log(table.name);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: key
      description: <span data-ttu-id="2fbd7-124">Nombre o identificador de la tabla que se va a recuperar.</span><span class="sxs-lookup"><span data-stu-id="2fbd7-124">Name or ID of the table to be retrieved.</span></span>
      type:
      - string
- uid: excel.Excel.TableCollection.getItemAt
  summary: >-
    <span data-ttu-id="2fbd7-125">Obtiene una tabla basada en su posición en la colección.</span><span class="sxs-lookup"><span data-stu-id="2fbd7-125">Gets a table based on its position in the collection.</span></span>


    <span data-ttu-id="2fbd7-126">\[[Conjunto de API: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="2fbd7-126">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getItemAt(index)
  fullName: getItemAt
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getItemAt(index: number): Excel.Table;'
    return:
      type:
      - excel.Excel.Table
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"2fbd7-127\">Ejemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"2fbd7-127\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var table = ctx.workbook.tables.getItemAt(0);\n    table.load('name');\n    return ctx.sync().then(function() {\n            console.log(table.name);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: index
      description: <span data-ttu-id="2fbd7-p105">Valor de índice del objeto que se va a recuperar. Indizado con cero.</span><span class="sxs-lookup"><span data-stu-id="2fbd7-p105">Index value of the object to be retrieved. Zero-indexed.</span></span>
      type:
      - number
- uid: excel.Excel.TableCollection.getItemOrNullObject
  summary: >-
    <span data-ttu-id="2fbd7-p106">Obtiene una tabla por nombre o identificador. Si la tabla no existe, devolverá un objeto NULL.</span><span class="sxs-lookup"><span data-stu-id="2fbd7-p106">Gets a table by Name or ID. If the table does not exist, will return a null object.</span></span>


    <span data-ttu-id="2fbd7-132">\[[Conjunto de API: ExcelApi 1,4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="2fbd7-132">\[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getItemOrNullObject(key)
  fullName: getItemOrNullObject
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getItemOrNullObject(key: string): Excel.Table;'
    return:
      type:
      - excel.Excel.Table
      description: ''
    parameters:
    - id: key
      description: <span data-ttu-id="2fbd7-133">Nombre o identificador de la tabla que se va a recuperar.</span><span class="sxs-lookup"><span data-stu-id="2fbd7-133">Name or ID of the table to be retrieved.</span></span>
      type:
      - string
- uid: excel.Excel.TableCollection.items
  summary: <span data-ttu-id="2fbd7-134">Obtiene al secundario cargado los elementos de esta colección.</span><span class="sxs-lookup"><span data-stu-id="2fbd7-134">Gets the loaded child items in this collection.</span></span>
  name: items
  fullName: items
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly items: Excel.Table[];'
    return:
      type:
      - Excel.Table[]
- uid: excel.Excel.TableCollection.load
  summary: <span data-ttu-id="2fbd7-135">Colas de seguridad de un comando que se va a cargar las propiedades del objeto especificadas.</span><span class="sxs-lookup"><span data-stu-id="2fbd7-135">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="2fbd7-136">Se debe llamar a "context.sync()" antes de leer las propiedades.</span><span class="sxs-lookup"><span data-stu-id="2fbd7-136">You must call "context.sync()" before reading the properties.</span></span>
  remarks: "<span data-ttu-id=\"2fbd7-137\">Además de esta firma, este método no tiene las siguientes firmas:</span><span class=\"sxs-lookup\"><span data-stu-id=\"2fbd7-137\">In addition to this signature, this method has the following signatures:</span></span>\n\n<span data-ttu-id=\"2fbd7-138\">`load(option?: { select?: string; expand?: string; }): Excel.TableCollection`-Donde option.select es una cadena delimitada por comas que especifica las propiedades para cargar y options.expand es una cadena delimitada por comas que especifica las propiedades de navegación para cargar.</span><span class=\"sxs-lookup\"><span data-stu-id=\"2fbd7-138\">`load(option?: { select?: string; expand?: string; }): Excel.TableCollection` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>\n\n<span data-ttu-id=\"2fbd7-139\">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.TableCollection`-Sólo está disponible en los tipos de colección.</span><span class=\"sxs-lookup\"><span data-stu-id=\"2fbd7-139\">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.TableCollection` - Only available on collection types.</span></span> <span data-ttu-id=\"2fbd7-140\">Es similar a la firma precedente.</span><span class=\"sxs-lookup\"><span data-stu-id=\"2fbd7-140\">It is similar to the preceding signature.</span></span> <span data-ttu-id=\"2fbd7-141\">Option.Top especifica el número máximo de elementos de la colección que se puede incluir en el resultado.</span><span class=\"sxs-lookup\"><span data-stu-id=\"2fbd7-141\">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id=\"2fbd7-142\">Option.Skip especifica el número de elementos que se pasan por alto y no se incluyen en el resultado.</span><span class=\"sxs-lookup\"><span data-stu-id=\"2fbd7-142\">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id=\"2fbd7-143\">Si se especifica option.top, se iniciará el conjunto de resultados después de omitir el número especificado de elementos.</span><span class=\"sxs-lookup\"><span data-stu-id=\"2fbd7-143\">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>\n#### <a name=\"examples\"></a><span data-ttu-id=\"2fbd7-144\">Ejemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"2fbd7-144\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var tables = ctx.workbook.tables;\n    tables.load();\n    return ctx.sync().then(function() {\n        console.log(\"tables Count: \" + tables.count);\n        for (var i = 0; i < tables.items.length; i++)\n        {\n            console.log(tables.items[i].name);\n        }\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```javascript\n// Get the number of tables\nExcel.run(function (ctx) { \n    var tables = ctx.workbook.tables;\n    tables.load('count');\n    return ctx.sync().then(function() {\n        console.log(tables.count);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
  name: load(option)
  fullName: load
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: string | string[]): Excel.TableCollection;'
    return:
      type:
      - excel.Excel.TableCollection
      description: ''
    parameters:
    - id: option
      description: <span data-ttu-id="2fbd7-145">Una cadena delimitada por comas o una matriz de cadenas que especifican las propiedades de carga.</span><span class="sxs-lookup"><span data-stu-id="2fbd7-145">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
      type:
      - string | string[]
- uid: excel.Excel.TableCollection.onChanged
  summary: >-
    <span data-ttu-id="2fbd7-146">Se produce cuando los datos cambian en cualquier tabla en un libro o una hoja de cálculo.</span><span class="sxs-lookup"><span data-stu-id="2fbd7-146">Occurs when data changes on any table in a workbook, or a worksheet.</span></span>


    <span data-ttu-id="2fbd7-147">\[[Conjunto de API: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="2fbd7-147">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: onChanged
  fullName: onChanged
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onChanged: OfficeExtension.EventHandlers<Excel.TableChangedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.TableChangedEventArgs>
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"2fbd7-148\">Ejemplos</span><span class=\"sxs-lookup\"><span data-stu-id=\"2fbd7-148\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    let tables = context.workbook.tables;\n    tables.onChanged.add(onChange);\n\n    await context.sync();\n    console.log(\"A handler has been registered for the table collection onChanged event\");\n});\n```"
- uid: excel.Excel.TableCollection.toJSON
  name: toJSON()
  fullName: toJSON
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON(): Excel.Interfaces.TableCollectionData;'
    return:
      type:
      - excel.Excel.Interfaces.TableCollectionData
      description: ''
