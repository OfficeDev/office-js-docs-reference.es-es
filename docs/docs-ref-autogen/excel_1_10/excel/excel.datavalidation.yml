### YamlMime:TSType
name: Excel.DataValidation
uid: excel!Excel.DataValidation:class
package: excel!
fullName: Excel.DataValidation
summary: >-
  Representa la validación de datos aplicada al intervalo actual. Para obtener más información sobre el modelo de objetos de validación de datos, lea [Agregar validación de datos a intervalos de Excel](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-data-validation)<!-- -->.


  \[[Conjunto de API: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
remarks: ''
isPreview: false
isDeprecated: false
type: class
properties:
- name: context
  uid: excel!Excel.DataValidation#context:member
  package: excel!
  fullName: context
  summary: Contexto de solicitud asociado al objeto. Esto conecta el proceso del complemento con el proceso de la aplicación host de Office.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'context: RequestContext;'
    return:
      type: <xref uid="excel!Excel.RequestContext:class" />
- name: errorAlert
  uid: excel!Excel.DataValidation#errorAlert:member
  package: excel!
  fullName: errorAlert
  summary: >-
    Mensaje de error cuando el usuario escribe datos no válidos.


    \[[Conjunto de API: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'errorAlert: Excel.DataValidationErrorAlert;'
    return:
      type: <xref uid="excel!Excel.DataValidationErrorAlert:interface" />
      description: "\n\n#### <a name=\"examples\"></a>Ejemplos\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/22-data-validation/data-validation.yaml\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Decision\");\n    const commentsRange = \n        sheet.tables.getItem(\"NameOptionsTable\").columns.getItem(\"Comments\").getDataBodyRange();\n\n    // When you are developing, it is a good practice to\n    // clear the dataValidation object with each run of your code.\n    commentsRange.dataValidation.clear();   \n\n    // If the value of A2 is contained in the value of C2, then \n    // SEARCH(A2,C2) returns the number where it begins. Otherwise,\n    // it does not return a number.\n    let redundantStringRule = {\n        custom: {\n            formula: \"=NOT(ISNUMBER(SEARCH(A2,C2)))\"\n        }\n    };\n    commentsRange.dataValidation.rule = redundantStringRule;\n    commentsRange.dataValidation.errorAlert = {\n        message: \"It is redundant to include the baby name in the comment.\",\n        showAlert: true,\n        style: \"Information\",\n        title: \"Baby Name in Comment\"\n    };\n\n    await context.sync();\n});\n```"
- name: ignoreBlanks
  uid: excel!Excel.DataValidation#ignoreBlanks:member
  package: excel!
  fullName: ignoreBlanks
  summary: >-
    Especifica si la validación de datos se realizará en celdas en blanco, el valor predeterminado es true.


    \[[Conjunto de API: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'ignoreBlanks: boolean;'
    return:
      type: boolean
- name: prompt
  uid: excel!Excel.DataValidation#prompt:member
  package: excel!
  fullName: prompt
  summary: >-
    Preguntar cuando los usuarios seleccionan una celda.


    \[[Conjunto de API: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'prompt: Excel.DataValidationPrompt;'
    return:
      type: <xref uid="excel!Excel.DataValidationPrompt:interface" />
      description: "\n\n#### <a name=\"examples\"></a>Ejemplos\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/22-data-validation/data-validation.yaml\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Decision\");\n    const rankingRange = sheet.tables.getItem(\"NameOptionsTable\").columns.getItem(\"Ranking\").getDataBodyRange();\n\n    // When you are developing, it is a good practice to\n    // clear the dataValidation object with each run of your code.\n    rankingRange.dataValidation.clear();\n\n    let greaterThanZeroRule = {\n        wholeNumber: {\n            formula1: 0,\n            operator: Excel.DataValidationOperator.greaterThan\n        }\n    };\n    rankingRange.dataValidation.rule = greaterThanZeroRule;\n\n    rankingRange.dataValidation.prompt = {\n        message: \"Please enter a positive number.\",\n        showPrompt: true,\n        title: \"Positive numbers only.\"\n    };\n\n    rankingRange.dataValidation.errorAlert = {\n        message: \"Sorry, only positive numbers are allowed\",\n        showAlert: true,\n        style: \"Stop\",\n        title: \"Negative Number Entered\"\n    };\n\n    await context.sync();\n});\n```"
- name: rule
  uid: excel!Excel.DataValidation#rule:member
  package: excel!
  fullName: rule
  summary: >-
    Regla de validación de datos que contiene diferentes tipos de criterios de validación de datos.


    \[[Conjunto de API: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'rule: Excel.DataValidationRule;'
    return:
      type: <xref uid="excel!Excel.DataValidationRule:interface" />
      description: "\n\n#### <a name=\"examples\"></a>Ejemplos\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/22-data-validation/data-validation.yaml\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Decision\");\n    const nameRange = \n        sheet.tables.getItem(\"NameOptionsTable\").columns.getItem(\"Baby Name\").getDataBodyRange();\n\n    // When you are developing, it is a good practice to\n    // clear the dataValidation object with each run of your code.\n    nameRange.dataValidation.clear();\n\n    const nameSourceRange = context.workbook.worksheets.getItem(\"Names\").getRange(\"A1:A3\");\n\n    let approvedListRule = {\n        list: {\n            inCellDropDown: true,\n            source: nameSourceRange\n        }\n    };\n    nameRange.dataValidation.rule = approvedListRule;\n\n    await context.sync();\n});\n```"
- name: type
  uid: excel!Excel.DataValidation#type:member
  package: excel!
  fullName: type
  summary: >-
    Tipo de la validación de datos, vea Excel.DataValidationType para obtener más información.


    \[[Conjunto de API: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly type: Excel.DataValidationType | "None" | "WholeNumber" | "Decimal" | "List" | "Date" | "Time" | "TextLength" | "Custom" | "Inconsistent" | "MixedCriteria";'
    return:
      type: <xref uid="excel!Excel.DataValidationType:enum" /> | "None" | "WholeNumber" | "Decimal" | "List" | "Date" | "Time" | "TextLength" | "Custom" | "Inconsistent" | "MixedCriteria"
- name: valid
  uid: excel!Excel.DataValidation#valid:member
  package: excel!
  fullName: valid
  summary: >-
    Representa si todos los valores de celda son válidos de acuerdo con las reglas de validación de datos. Devuelve true si todos los valores de celda son válidos o false si todos los valores de celda no son válidos. Devuelve null si hay valores de celda válidos e no válidos dentro del intervalo.


    \[[Conjunto de API: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly valid: boolean;'
    return:
      type: boolean
methods:
- name: clear()
  uid: excel!Excel.DataValidation#clear:member(1)
  package: excel!
  fullName: clear()
  summary: >-
    Borra la validación de datos del rango actual.


    \[[Conjunto de API: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'clear(): void;'
    return:
      type: void
      description: ''
- name: getInvalidCells()
  uid: excel!Excel.DataValidation#getInvalidCells:member(1)
  package: excel!
  fullName: getInvalidCells()
  summary: >-
    Devuelve un objeto RangeAreas, que incluye uno o más intervalos rectangulares, con valores de celda no válidos. Si todos los valores de celda son válidos, esta función mostrará un error ItemNotFound.


    \[[Conjunto de API: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getInvalidCells(): Excel.RangeAreas;'
    return:
      type: <xref uid="excel!Excel.RangeAreas:class" />
      description: ''
- name: getInvalidCellsOrNullObject()
  uid: excel!Excel.DataValidation#getInvalidCellsOrNullObject:member(1)
  package: excel!
  fullName: getInvalidCellsOrNullObject()
  summary: >-
    Devuelve un objeto RangeAreas, que incluye uno o más intervalos rectangulares, con valores de celda no válidos. Si todos los valores de celda son válidos, esta función devuelve null.


    \[[Conjunto de API: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getInvalidCellsOrNullObject(): Excel.RangeAreas;'
    return:
      type: <xref uid="excel!Excel.RangeAreas:class" />
      description: ''
- name: load(options)
  uid: excel!Excel.DataValidation#load:member(1)
  package: excel!
  fullName: load(options)
  summary: Pone en cola un comando para cargar las propiedades especificadas del objeto. Debe llamar a `context.sync()` antes de leer las propiedades.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(options?: Excel.Interfaces.DataValidationLoadOptions): Excel.DataValidation;'
    parameters:
    - id: options
      description: Proporciona opciones para las propiedades del objeto que se cargarán.
      type: <xref uid="excel!Excel.Interfaces.DataValidationLoadOptions:interface" />
    return:
      type: <xref uid="excel!Excel.DataValidation:class" />
      description: ''
- name: load(propertyNames)
  uid: excel!Excel.DataValidation#load:member(2)
  package: excel!
  fullName: load(propertyNames)
  summary: Pone en cola un comando para cargar las propiedades especificadas del objeto. Debe llamar a `context.sync()` antes de leer las propiedades.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(propertyNames?: string | string[]): Excel.DataValidation;'
    parameters:
    - id: propertyNames
      description: Una cadena delimitada por comas o una matriz de cadenas que especifican las propiedades que se cargarán.
      type: string | string[]
    return:
      type: <xref uid="excel!Excel.DataValidation:class" />
      description: ''
- name: load(propertyNamesAndPaths)
  uid: excel!Excel.DataValidation#load:member(3)
  package: excel!
  fullName: load(propertyNamesAndPaths)
  summary: Pone en cola un comando para cargar las propiedades especificadas del objeto. Debe llamar a `context.sync()` antes de leer las propiedades.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      load(propertyNamesAndPaths?: {
                  select?: string;
                  expand?: string;
              }): Excel.DataValidation;
    parameters:
    - id: propertyNamesAndPaths
      description: '`propertyNamesAndPaths.select` es una cadena delimitada por comas que especifica las propiedades que se cargarán y es una cadena delimitada por comas que especifica las propiedades de navegación que `propertyNamesAndPaths.expand` se cargarán.'
      type: >-
        {
                    select?: string;
                    expand?: string;
                }
    return:
      type: <xref uid="excel!Excel.DataValidation:class" />
      description: ''
- name: set(properties, options)
  uid: excel!Excel.DataValidation#set:member(1)
  package: excel!
  fullName: set(properties, options)
  summary: Establece varias propiedades de un objeto al mismo tiempo. Puede pasar un objeto sin formato con las propiedades adecuadas u otro objeto API del mismo tipo.
  remarks: >-
    Este método tiene la siguiente firma adicional:


    `set(properties: Excel.DataValidation): void`
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'set(properties: Interfaces.DataValidationUpdateData, options?: OfficeExtension.UpdateOptions): void;'
    parameters:
    - id: properties
      description: Un objeto JavaScript con propiedades que se estructuran isomórficamente en las propiedades del objeto en el que se llama al método.
      type: <xref uid="excel!Excel.Interfaces.DataValidationUpdateData:interface" />
    - id: options
      description: Proporciona una opción para suprimir errores si el objeto properties intenta establecer propiedades de solo lectura.
      type: <xref uid="office!OfficeExtension.UpdateOptions:interface" />
    return:
      type: void
      description: ''
- name: set(properties)
  uid: excel!Excel.DataValidation#set:member(2)
  package: excel!
  fullName: set(properties)
  summary: Establece varias propiedades en el objeto al mismo tiempo, en función de un objeto cargado existente.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'set(properties: Excel.DataValidation): void;'
    parameters:
    - id: properties
      description: ''
      type: <xref uid="excel!Excel.DataValidation:class" />
    return:
      type: void
      description: ''
- name: toJSON()
  uid: excel!Excel.DataValidation#toJSON:member(1)
  package: excel!
  fullName: toJSON()
  summary: Invalida el método JavaScript para proporcionar resultados más útiles cuando se pasa un objeto API a `toJSON()``JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, a su vez, llama `toJSON` al método del objeto que se pasa a él). Mientras que el objeto Excel.DataValidation original es un objeto API, el método devuelve un objeto JavaScript sin formato `toJSON` (con el tipo como `Excel.Interfaces.DataValidationData`<!-- -->) que contiene copias superficiales de las propiedades secundarias cargadas del objeto original.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'toJSON(): Excel.Interfaces.DataValidationData;'
    return:
      type: <xref uid="excel!Excel.Interfaces.DataValidationData:interface" />
      description: ''
extends: <xref uid="office!OfficeExtension.ClientObject:class" />
metadata:
  ms.openlocfilehash: 8f67d024ac9984560c8e44a28d80bf0dff08f535
  ms.sourcegitcommit: a8a86cfcaff5ad7dacc653d63502c76b1fedbebe
  ms.translationtype: MT
  ms.contentlocale: es-ES
  ms.lasthandoff: 03/26/2021
  ms.locfileid: "51318007"
