### YamlMime:UniversalReference
items:
  - uid: excel.Excel.Binding
    summary: |-
      <span data-ttu-id="a4975-101">Representa un enlace de Office.js que se define en el libro.</span><span class="sxs-lookup"><span data-stu-id="a4975-101">Represents an Office.js binding that is defined in the workbook.</span></span>

      <span data-ttu-id="a4975-102">\[[Conjunto de API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a4975-102">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: Excel.Binding
    fullName: Excel.Binding
    langs:
      - typeScript
    type: class
    extends:
      - 'OfficeExtension.ClientObject '
    package: excel
    children:
      - excel.Excel.Binding.context
      - excel.Excel.Binding.delete
      - excel.Excel.Binding.getRange
      - excel.Excel.Binding.getTable
      - excel.Excel.Binding.getText
      - excel.Excel.Binding.id
      - excel.Excel.Binding.load
      - excel.Excel.Binding.load_1
      - excel.Excel.Binding.load_2
      - excel.Excel.Binding.onDataChanged
      - excel.Excel.Binding.onSelectionChanged
      - excel.Excel.Binding.toJSON
      - excel.Excel.Binding.type
  - uid: excel.Excel.Binding.context
    summary: <span data-ttu-id="a4975-103">Contexto de la solicitud asociado al objeto.</span><span class="sxs-lookup"><span data-stu-id="a4975-103">The request context associated with the object.</span></span> <span data-ttu-id="a4975-104">Esto conecta el proceso del complemento con el proceso de la aplicación host de Office.</span><span class="sxs-lookup"><span data-stu-id="a4975-104">This connects the add-in's process to the Office host application's process.</span></span>
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - excel.Excel.RequestContext
  - uid: excel.Excel.Binding.delete
    summary: |-
      <span data-ttu-id="a4975-105">Elimina el enlace.</span><span class="sxs-lookup"><span data-stu-id="a4975-105">Deletes the binding.</span></span>

      <span data-ttu-id="a4975-106">\[[Conjunto de API: ExcelApi 1,3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a4975-106">\[ [API set: ExcelApi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: delete()
    fullName: delete()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'delete(): void;'
      return:
        type:
          - void
        description: ''
  - uid: excel.Excel.Binding.getRange
    summary: |-
      <span data-ttu-id="a4975-107">Devuelve el intervalo representado por el enlace.</span><span class="sxs-lookup"><span data-stu-id="a4975-107">Returns the range represented by the binding.</span></span> <span data-ttu-id="a4975-108">Se producirá un error si el enlace no es del tipo correcto.</span><span class="sxs-lookup"><span data-stu-id="a4975-108">Will throw an error if binding is not of the correct type.</span></span>

      <span data-ttu-id="a4975-109">\[[Conjunto de API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a4975-109">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getRange()
    fullName: getRange()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRange(): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="a4975-110">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="a4975-110">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var binding = ctx.workbook.bindings.getItemAt(0);
              var range = binding.getRange();
              range.load('cellCount');
              return ctx.sync().then(function() {
                  console.log(range.cellCount);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: excel.Excel.Binding.getTable
    summary: |-
      <span data-ttu-id="a4975-111">Devuelve la tabla representada por el enlace.</span><span class="sxs-lookup"><span data-stu-id="a4975-111">Returns the table represented by the binding.</span></span> <span data-ttu-id="a4975-112">Se producirá un error si el enlace no es del tipo correcto.</span><span class="sxs-lookup"><span data-stu-id="a4975-112">Will throw an error if binding is not of the correct type.</span></span>

      <span data-ttu-id="a4975-113">\[[Conjunto de API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a4975-113">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getTable()
    fullName: getTable()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTable(): Excel.Table;'
      return:
        type:
          - excel.Excel.Table
        description: |-


          #### <a name="examples"></a><span data-ttu-id="a4975-114">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="a4975-114">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var binding = ctx.workbook.bindings.getItemAt(0);
              var table = binding.getTable();
              table.load('name');
              return ctx.sync().then(function() {
                      console.log(table.name);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: excel.Excel.Binding.getText
    summary: |-
      <span data-ttu-id="a4975-115">Devuelve el texto representado por el enlace.</span><span class="sxs-lookup"><span data-stu-id="a4975-115">Returns the text represented by the binding.</span></span> <span data-ttu-id="a4975-116">Se producirá un error si el enlace no es del tipo correcto.</span><span class="sxs-lookup"><span data-stu-id="a4975-116">Will throw an error if binding is not of the correct type.</span></span>

      <span data-ttu-id="a4975-117">\[[Conjunto de API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a4975-117">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getText()
    fullName: getText()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getText(): OfficeExtension.ClientResult<string>;'
      return:
        type:
          - OfficeExtension.ClientResult<string>
        description: |-


          #### <a name="examples"></a><span data-ttu-id="a4975-118">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="a4975-118">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var binding = ctx.workbook.bindings.getItemAt(0);
              var text = binding.getText();
              binding.load('text');
              return ctx.sync().then(function() {
                  console.log(text);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: excel.Excel.Binding.id
    summary: |-
      <span data-ttu-id="a4975-119">Representa el identificador de enlace.</span><span class="sxs-lookup"><span data-stu-id="a4975-119">Represents binding identifier.</span></span> <span data-ttu-id="a4975-120">Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="a4975-120">Read-only.</span></span>

      <span data-ttu-id="a4975-121">\[[Conjunto de API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a4975-121">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: id
    fullName: id
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly id: string;'
      return:
        type:
          - string
  - uid: excel.Excel.Binding.load
    summary: '<span data-ttu-id="a4975-122">Pone en cola un comando para cargar las propiedades especificadas del objeto.</span><span class="sxs-lookup"><span data-stu-id="a4975-122">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="a4975-123">Antes de leer las propiedades, debe llamar a "context.sync()".</span><span class="sxs-lookup"><span data-stu-id="a4975-123">You must call "context.sync()" before reading the properties.</span></span>'
    remarks: |-
      <span data-ttu-id="a4975-124">Además de esta firma, este método tiene las siguientes firmas:</span><span class="sxs-lookup"><span data-stu-id="a4975-124">In addition to this signature, this method has the following signatures:</span></span>

      <span data-ttu-id="a4975-125">`load(option?: string | string[]): Excel.Binding`-Donde opción es una cadena delimitada por comas o una matriz de cadenas que especifican las propiedades que se van a cargar.</span><span class="sxs-lookup"><span data-stu-id="a4975-125">`load(option?: string | string[]): Excel.Binding` - Where option is a comma-delimited string or an array of strings that specify the properties to load.</span></span>

      <span data-ttu-id="a4975-126">`load(option?: { select?: string; expand?: string; }): Excel.Binding`-Where opción. Select es una cadena delimitada por comas que especifica las propiedades que se van a cargar y Options. Expand es una cadena delimitada por comas que especifica las propiedades de navegación que se deben cargar.</span><span class="sxs-lookup"><span data-stu-id="a4975-126">`load(option?: { select?: string; expand?: string; }): Excel.Binding` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>

      <span data-ttu-id="a4975-127">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.Binding`-Solo disponible en tipos de colección.</span><span class="sxs-lookup"><span data-stu-id="a4975-127">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.Binding` - Only available on collection types.</span></span> <span data-ttu-id="a4975-128">Es similar a la firma anterior.</span><span class="sxs-lookup"><span data-stu-id="a4975-128">It is similar to the preceding signature.</span></span> <span data-ttu-id="a4975-129">Option. Top especifica el número máximo de elementos de colección que se pueden incluir en el resultado.</span><span class="sxs-lookup"><span data-stu-id="a4975-129">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="a4975-130">La opción. SKIP especifica el número de elementos que se deben omitir y que no se incluyen en el resultado.</span><span class="sxs-lookup"><span data-stu-id="a4975-130">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="a4975-131">Si se especifica Option. Top, el conjunto de resultados se iniciará después de omitir el número especificado de elementos.</span><span class="sxs-lookup"><span data-stu-id="a4975-131">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: Excel.Interfaces.BindingLoadOptions): Excel.Binding;'
      return:
        type:
          - excel.Excel.Binding
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - excel.Excel.Interfaces.BindingLoadOptions
  - uid: excel.Excel.Binding.load_1
    summary: <span data-ttu-id="a4975-132">Pone en cola un comando para cargar las propiedades especificadas del objeto.</span><span class="sxs-lookup"><span data-stu-id="a4975-132">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="a4975-133">Debe llamar `context.sync()` antes de leer las propiedades.</span><span class="sxs-lookup"><span data-stu-id="a4975-133">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.Binding;'
      return:
        type:
          - excel.Excel.Binding
        description: |-


          #### <a name="examples"></a><span data-ttu-id="a4975-134">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="a4975-134">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var binding = ctx.workbook.bindings.getItemAt(0);
              binding.load('type');
              return ctx.sync().then(function() {
                  console.log(binding.type);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: propertyNames
          description: <span data-ttu-id="a4975-135">Una cadena delimitada por comas o una matriz de cadenas que especifican las propiedades que se van a cargar.</span><span class="sxs-lookup"><span data-stu-id="a4975-135">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
          type:
            - 'string | string[]'
  - uid: excel.Excel.Binding.load_2
    summary: <span data-ttu-id="a4975-136">Pone en cola un comando para cargar las propiedades especificadas del objeto.</span><span class="sxs-lookup"><span data-stu-id="a4975-136">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="a4975-137">Debe llamar `context.sync()` antes de leer las propiedades.</span><span class="sxs-lookup"><span data-stu-id="a4975-137">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): Excel.Binding;'
      return:
        type:
          - excel.Excel.Binding
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '<span data-ttu-id="a4975-138">Donde propertyNamesAndPaths. Select es una cadena delimitada por comas que especifica las propiedades que se van a cargar y propertyNamesAndPaths. Expand es una cadena delimitada por comas que especifica las propiedades de navegación que se deben cargar.</span><span class="sxs-lookup"><span data-stu-id="a4975-138">Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>'
          type:
            - '{ select?: string; expand?: string; }'
  - uid: excel.Excel.Binding.onDataChanged
    summary: |-
      <span data-ttu-id="a4975-139">Se produce al cambiar los datos del enlace o al darles formato.</span><span class="sxs-lookup"><span data-stu-id="a4975-139">Occurs when data or formatting within the binding is changed.</span></span>

      <span data-ttu-id="a4975-140">\[[Conjunto de API: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a4975-140">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: onDataChanged
    fullName: onDataChanged
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onDataChanged: OfficeExtension.EventHandlers<Excel.BindingDataChangedEventArgs>;'
      return:
        type:
          - OfficeExtension.EventHandlers<Excel.BindingDataChangedEventArgs>
        description: |-


          #### <a name="examples"></a><span data-ttu-id="a4975-141">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="a4975-141">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");    
              const salesTable = sheet.tables.getItem("SalesTable");
              const salesByQuarterBinding = context.workbook.bindings.add(salesTable.getRange(), "Table", "SalesByQuarter");
              salesByQuarterBinding.onDataChanged.add(onSalesDataChanged);

              console.log("The data changed handler is registered.");

              await context.sync();
          });
          ```
  - uid: excel.Excel.Binding.onSelectionChanged
    summary: |-
      <span data-ttu-id="a4975-142">Se produce cuando cambia el contenido seleccionado en el enlace.</span><span class="sxs-lookup"><span data-stu-id="a4975-142">Occurs when the selected content in the binding is changed.</span></span>

      <span data-ttu-id="a4975-143">\[[Conjunto de API: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a4975-143">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: onSelectionChanged
    fullName: onSelectionChanged
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onSelectionChanged: OfficeExtension.EventHandlers<Excel.BindingSelectionChangedEventArgs>;'
      return:
        type:
          - OfficeExtension.EventHandlers<Excel.BindingSelectionChangedEventArgs>
  - uid: excel.Excel.Binding.toJSON
    summary: '<span data-ttu-id="a4975-144">Reemplaza el método JavaScript `toJSON()` para proporcionar un resultado más útil cuando se pasa un objeto API a`JSON.stringify()`</span><span class="sxs-lookup"><span data-stu-id="a4975-144">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id="a4975-145">.</span><span class="sxs-lookup"><span data-stu-id="a4975-145"></span></span> <span data-ttu-id="a4975-146">(`JSON.stringify`</span><span class="sxs-lookup"><span data-stu-id="a4975-146"></span></span><!-- --><span data-ttu-id="a4975-147">, a su vez, llama `toJSON` al método del objeto que se le pasa.) Mientras que el objeto Excel. Binding original es un objeto API, `toJSON` el método devuelve un objeto JavaScript sin formato (escrito como`Excel.Interfaces.BindingData`</span><span class="sxs-lookup"><span data-stu-id="a4975-147">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original Excel.Binding object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.BindingData`</span></span><!-- --><span data-ttu-id="a4975-148">) que contiene copias rasas de las propiedades secundarias cargadas del objeto original.</span><span class="sxs-lookup"><span data-stu-id="a4975-148">) that contains shallow copies of any loaded child properties from the original object.</span></span>'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.BindingData;'
      return:
        type:
          - excel.Excel.Interfaces.BindingData
        description: ''
  - uid: excel.Excel.Binding.type
    summary: |-
      <span data-ttu-id="a4975-149">Devuelve el tipo de enlace.</span><span class="sxs-lookup"><span data-stu-id="a4975-149">Returns the type of the binding.</span></span> <span data-ttu-id="a4975-150">Consulte Excel. BindingType para obtener más información.</span><span class="sxs-lookup"><span data-stu-id="a4975-150">See Excel.BindingType for details.</span></span> <span data-ttu-id="a4975-151">Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="a4975-151">Read-only.</span></span>

      <span data-ttu-id="a4975-152">\[[Conjunto de API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a4975-152">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: type
    fullName: type
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly type: Excel.BindingType | "Range" | "Table" | "Text";'
      return:
        type:
          - Excel.BindingType | "Range" | "Table" | "Text"