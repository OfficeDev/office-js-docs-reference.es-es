### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.WorksheetCollection:class'
    summary: |-
      <span data-ttu-id="1eb36-101">Representa una colección de objetos de hoja de cálculo que forman parte del libro.</span><span class="sxs-lookup"><span data-stu-id="1eb36-101">Represents a collection of worksheet objects that are part of the workbook.</span></span>

      <span data-ttu-id="1eb36-102">\[[Conjunto de API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="1eb36-102">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: Excel.WorksheetCollection
    fullName: Excel.WorksheetCollection
    langs:
      - typeScript
    type: class
    extends:
      - 'excel!OfficeExtension.ClientObject:class'
    package: excel!
    children:
      - 'excel!Excel.WorksheetCollection#add:member(1)'
      - 'excel!Excel.WorksheetCollection#context:member'
      - 'excel!Excel.WorksheetCollection#getActiveWorksheet:member(1)'
      - 'excel!Excel.WorksheetCollection#getCount:member(1)'
      - 'excel!Excel.WorksheetCollection#getFirst:member(1)'
      - 'excel!Excel.WorksheetCollection#getItem:member(1)'
      - 'excel!Excel.WorksheetCollection#getItemOrNullObject:member(1)'
      - 'excel!Excel.WorksheetCollection#getLast:member(1)'
      - 'excel!Excel.WorksheetCollection#items:member'
      - 'excel!Excel.WorksheetCollection#load:member(1)'
      - 'excel!Excel.WorksheetCollection#load:member(2)'
      - 'excel!Excel.WorksheetCollection#load:member(3)'
      - 'excel!Excel.WorksheetCollection#toJSON:member(1)'
  - uid: 'excel!Excel.WorksheetCollection#add:member(1)'
    summary: |-
      <span data-ttu-id="1eb36-p101">Agrega una nueva hoja al libro. La hoja de cálculo se agregará al final de las hojas de cálculo existentes. Si desea activar la hoja de cálculo recién agregada, llame en ella a ".activate().</span><span class="sxs-lookup"><span data-stu-id="1eb36-p101">Adds a new worksheet to the workbook. The worksheet will be added at the end of existing worksheets. If you wish to activate the newly added worksheet, call ".activate() on it.</span></span>

      <span data-ttu-id="1eb36-106">\[[Conjunto de API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="1eb36-106">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: add(name)
    fullName: add(name)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'add(name?: string): Excel.Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="1eb36-107">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="1eb36-107">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var wSheetName = 'Sample Name';
              var worksheet = ctx.workbook.worksheets.add(wSheetName);
              worksheet.load('name');
              return ctx.sync().then(function() {
                  console.log(worksheet.name);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: name
          description: '<span data-ttu-id="1eb36-p102">Opcional. Nombre de la hoja de cálculo que se va a agregar. Si se especifica, el nombre debe ser único. Si no se especifica, Excel determina el nombre de la nueva hoja de cálculo.</span><span class="sxs-lookup"><span data-stu-id="1eb36-p102">Optional. The name of the worksheet to be added. If specified, name should be unqiue. If not specified, Excel determines the name of the new worksheet.</span></span>'
          type:
            - string
  - uid: 'excel!Excel.WorksheetCollection#context:member'
    summary: <span data-ttu-id="1eb36-112">Contexto de la solicitud asociado al objeto.</span><span class="sxs-lookup"><span data-stu-id="1eb36-112">The request context associated with the object.</span></span> <span data-ttu-id="1eb36-113">Esto conecta el proceso del complemento con el proceso de la aplicación host de Office.</span><span class="sxs-lookup"><span data-stu-id="1eb36-113">This connects the add-in's process to the Office host application's process.</span></span>
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'excel!Excel.RequestContext:class'
  - uid: 'excel!Excel.WorksheetCollection#getActiveWorksheet:member(1)'
    summary: |-
      <span data-ttu-id="1eb36-114">Obtiene la hoja de cálculo activa del libro.</span><span class="sxs-lookup"><span data-stu-id="1eb36-114">Gets the currently active worksheet in the workbook.</span></span>

      <span data-ttu-id="1eb36-115">\[[Conjunto de API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="1eb36-115">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getActiveWorksheet()
    fullName: getActiveWorksheet()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getActiveWorksheet(): Excel.Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="1eb36-116">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="1eb36-116">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) {  
              var activeWorksheet = ctx.workbook.worksheets.getActiveWorksheet();
              activeWorksheet.load('name');
              return ctx.sync().then(function() {
                      console.log(activeWorksheet.name);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'excel!Excel.WorksheetCollection#getCount:member(1)'
    summary: |-
      <span data-ttu-id="1eb36-117">Obtiene el número de hojas de cálculo de la colección.</span><span class="sxs-lookup"><span data-stu-id="1eb36-117">Gets the number of worksheets in the collection.</span></span>

      <span data-ttu-id="1eb36-118">\[[Conjunto de API: ExcelApi 1,4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="1eb36-118">\[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getCount(visibleOnly)
    fullName: getCount(visibleOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCount(visibleOnly?: boolean): OfficeExtension.ClientResult<number>;'
      return:
        type:
          - 'excel!Excel.WorksheetCollection#getCount~0:complex'
        description: ''
      parameters:
        - id: visibleOnly
          description: '<span data-ttu-id="1eb36-119">Opcional.</span><span class="sxs-lookup"><span data-stu-id="1eb36-119">Optional.</span></span> <span data-ttu-id="1eb36-120">Si es true, solo tiene en cuenta las hojas de cálculo visibles y se omite sobre las ocultas.</span><span class="sxs-lookup"><span data-stu-id="1eb36-120">If true, considers only visible worksheets, skipping over any hidden ones.</span></span>'
          type:
            - boolean
  - uid: 'excel!Excel.WorksheetCollection#getFirst:member(1)'
    summary: |-
      <span data-ttu-id="1eb36-121">Obtiene la primera hoja de cálculo de la colección.</span><span class="sxs-lookup"><span data-stu-id="1eb36-121">Gets the first worksheet in the collection.</span></span>

      <span data-ttu-id="1eb36-122">\[[Conjunto de API: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="1eb36-122">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getFirst(visibleOnly)
    fullName: getFirst(visibleOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getFirst(visibleOnly?: boolean): Excel.Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="1eb36-123">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="1eb36-123">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheets = context.workbook.worksheets;

              // We don't want to include the default worksheet that was created
              // when the workbook was created, so our "firstSheet" will be the one
              // after the literal first. Note chaining of navigation methods.
              const firstSheet = sheets.getFirst().getNext();
              const lastSheet = sheets.getLast();
              const firstTaxRateRange = firstSheet.getRange("B2");
              const lastTaxRateRange = lastSheet.getRange("B2");

              firstSheet.load("name");
              lastSheet.load("name");
              firstTaxRateRange.load("text");
              lastTaxRateRange.load("text");

              await context.sync();

              let firstYear = firstSheet.name.substr(5, 4);
              let lastYear = lastSheet.name.substr(5, 4);
              console.log(`Tax Rate change from ${firstYear} to ${lastYear}`, `Tax rate for ${firstYear}: ${firstTaxRateRange.text[0][0]}\nTax rate for ${lastYear}: ${lastTaxRateRange.text[0][0]}`)

              await context.sync();
          });
          ```
      parameters:
        - id: visibleOnly
          description: '<span data-ttu-id="1eb36-124">Opcional.</span><span class="sxs-lookup"><span data-stu-id="1eb36-124">Optional.</span></span> <span data-ttu-id="1eb36-125">Si es true, solo tiene en cuenta las hojas de cálculo visibles y se omite sobre las ocultas.</span><span class="sxs-lookup"><span data-stu-id="1eb36-125">If true, considers only visible worksheets, skipping over any hidden ones.</span></span>'
          type:
            - boolean
  - uid: 'excel!Excel.WorksheetCollection#getItem:member(1)'
    summary: |-
      <span data-ttu-id="1eb36-126">Obtiene un objeto de hoja de cálculo mediante su nombre o identificador.</span><span class="sxs-lookup"><span data-stu-id="1eb36-126">Gets a worksheet object using its Name or ID.</span></span>

      <span data-ttu-id="1eb36-127">\[[Conjunto de API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="1eb36-127">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getItem(key)
    fullName: getItem(key)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItem(key: string): Excel.Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:class'
        description: ''
      parameters:
        - id: key
          description: <span data-ttu-id="1eb36-128">Nombre o identificador de la hoja de cálculo.</span><span class="sxs-lookup"><span data-stu-id="1eb36-128">The Name or ID of the worksheet.</span></span>
          type:
            - string
  - uid: 'excel!Excel.WorksheetCollection#getItemOrNullObject:member(1)'
    summary: |-
      <span data-ttu-id="1eb36-129">Obtiene un objeto de hoja de cálculo mediante su nombre o identificador.</span><span class="sxs-lookup"><span data-stu-id="1eb36-129">Gets a worksheet object using its Name or ID.</span></span> <span data-ttu-id="1eb36-130">Si la hoja de cálculo no existe, devolverá un objeto NULL.</span><span class="sxs-lookup"><span data-stu-id="1eb36-130">If the worksheet does not exist, will return a null object.</span></span>

      <span data-ttu-id="1eb36-131">\[[Conjunto de API: ExcelApi 1,4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="1eb36-131">\[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getItemOrNullObject(key)
    fullName: getItemOrNullObject(key)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemOrNullObject(key: string): Excel.Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:class'
        description: ''
      parameters:
        - id: key
          description: <span data-ttu-id="1eb36-132">Nombre o identificador de la hoja de cálculo.</span><span class="sxs-lookup"><span data-stu-id="1eb36-132">The Name or ID of the worksheet.</span></span>
          type:
            - string
  - uid: 'excel!Excel.WorksheetCollection#getLast:member(1)'
    summary: |-
      <span data-ttu-id="1eb36-133">Obtiene la última hoja de cálculo de la colección.</span><span class="sxs-lookup"><span data-stu-id="1eb36-133">Gets the last worksheet in the collection.</span></span>

      <span data-ttu-id="1eb36-134">\[[Conjunto de API: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="1eb36-134">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getLast(visibleOnly)
    fullName: getLast(visibleOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getLast(visibleOnly?: boolean): Excel.Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="1eb36-135">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="1eb36-135">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheets = context.workbook.worksheets;

              // We don't want to include the default worksheet that was created
              // when the workbook was created, so our "firstSheet" will be the one
              // after the literal first. Note chaining of navigation methods.
              const firstSheet = sheets.getFirst().getNext();
              const lastSheet = sheets.getLast();
              const firstTaxRateRange = firstSheet.getRange("B2");
              const lastTaxRateRange = lastSheet.getRange("B2");

              firstSheet.load("name");
              lastSheet.load("name");
              firstTaxRateRange.load("text");
              lastTaxRateRange.load("text");

              await context.sync();

              let firstYear = firstSheet.name.substr(5, 4);
              let lastYear = lastSheet.name.substr(5, 4);
              console.log(`Tax Rate change from ${firstYear} to ${lastYear}`, `Tax rate for ${firstYear}: ${firstTaxRateRange.text[0][0]}\nTax rate for ${lastYear}: ${lastTaxRateRange.text[0][0]}`)

              await context.sync();
          });
          ```
      parameters:
        - id: visibleOnly
          description: '<span data-ttu-id="1eb36-136">Opcional.</span><span class="sxs-lookup"><span data-stu-id="1eb36-136">Optional.</span></span> <span data-ttu-id="1eb36-137">Si es true, solo tiene en cuenta las hojas de cálculo visibles y se omite sobre las ocultas.</span><span class="sxs-lookup"><span data-stu-id="1eb36-137">If true, considers only visible worksheets, skipping over any hidden ones.</span></span>'
          type:
            - boolean
  - uid: 'excel!Excel.WorksheetCollection#items:member'
    summary: <span data-ttu-id="1eb36-138">Obtiene los elementos secundarios cargados en esta colección.</span><span class="sxs-lookup"><span data-stu-id="1eb36-138">Gets the loaded child items in this collection.</span></span>
    name: items
    fullName: items
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly items: Excel.Worksheet[];'
      return:
        type:
          - 'excel!Excel.WorksheetCollection#items~0:complex'
  - uid: 'excel!Excel.WorksheetCollection#load:member(1)'
    summary: <span data-ttu-id="1eb36-139">Pone en cola un comando para cargar las propiedades especificadas del objeto.</span><span class="sxs-lookup"><span data-stu-id="1eb36-139">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="1eb36-140">Debe llamar `context.sync()` antes de leer las propiedades.</span><span class="sxs-lookup"><span data-stu-id="1eb36-140">You must call `context.sync()` before reading the properties.</span></span>
    name: load(options)
    fullName: load(options)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(options?: Excel.Interfaces.WorksheetCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions): Excel.WorksheetCollection;'
      return:
        type:
          - 'excel!Excel.WorksheetCollection:class'
        description: ''
      parameters:
        - id: options
          description: <span data-ttu-id="1eb36-141">Proporciona opciones para las propiedades del objeto que se va a cargar.</span><span class="sxs-lookup"><span data-stu-id="1eb36-141">Provides options for which properties of the object to load.</span></span>
          type:
            - 'excel!Excel.WorksheetCollection#load~0:complex'
  - uid: 'excel!Excel.WorksheetCollection#load:member(2)'
    summary: <span data-ttu-id="1eb36-142">Pone en cola un comando para cargar las propiedades especificadas del objeto.</span><span class="sxs-lookup"><span data-stu-id="1eb36-142">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="1eb36-143">Debe llamar `context.sync()` antes de leer las propiedades.</span><span class="sxs-lookup"><span data-stu-id="1eb36-143">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.WorksheetCollection;'
      return:
        type:
          - 'excel!Excel.WorksheetCollection:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="1eb36-144">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="1eb36-144">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var worksheets = ctx.workbook.worksheets;
              worksheets.load('items');
              return ctx.sync().then(function() {
                  for (var i = 0; i < worksheets.items.length; i++)
                  {
                      console.log(worksheets.items[i].name);
                      console.log(worksheets.items[i].index);
                  }
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: propertyNames
          description: <span data-ttu-id="1eb36-145">Una cadena delimitada por comas o una matriz de cadenas que especifican las propiedades que se van a cargar.</span><span class="sxs-lookup"><span data-stu-id="1eb36-145">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
          type:
            - 'string | string[]'
  - uid: 'excel!Excel.WorksheetCollection#load:member(3)'
    summary: <span data-ttu-id="1eb36-146">Pone en cola un comando para cargar las propiedades especificadas del objeto.</span><span class="sxs-lookup"><span data-stu-id="1eb36-146">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="1eb36-147">Debe llamar `context.sync()` antes de leer las propiedades.</span><span class="sxs-lookup"><span data-stu-id="1eb36-147">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Excel.WorksheetCollection;'
      return:
        type:
          - 'excel!Excel.WorksheetCollection:class'
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '<span data-ttu-id="1eb36-148">`propertyNamesAndPaths.select`es una cadena delimitada por comas que especifica las propiedades que se van `propertyNamesAndPaths.expand` a cargar y es una cadena delimitada por comas que especifica las propiedades de navegación que se deben cargar.</span><span class="sxs-lookup"><span data-stu-id="1eb36-148">`propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.</span></span>'
          type:
            - 'excel!OfficeExtension.LoadOption:interface'
  - uid: 'excel!Excel.WorksheetCollection#toJSON:member(1)'
    summary: '<span data-ttu-id="1eb36-149">Reemplaza el método JavaScript `toJSON()` para proporcionar un resultado más útil cuando se pasa un objeto API a`JSON.stringify()`</span><span class="sxs-lookup"><span data-stu-id="1eb36-149">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id="1eb36-150">.</span><span class="sxs-lookup"><span data-stu-id="1eb36-150"></span></span> <span data-ttu-id="1eb36-151">(`JSON.stringify`</span><span class="sxs-lookup"><span data-stu-id="1eb36-151"></span></span><!-- --><span data-ttu-id="1eb36-152">, a su vez, llama `toJSON` al método del objeto que se le pasa.) Mientras que el `Excel.WorksheetCollection` objeto original es un objeto API, `toJSON` el método devuelve un objeto JavaScript sin formato (escrito como`Excel.Interfaces.WorksheetCollectionData`</span><span class="sxs-lookup"><span data-stu-id="1eb36-152">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original `Excel.WorksheetCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.WorksheetCollectionData`</span></span><!-- --><span data-ttu-id="1eb36-153">) que contiene una matriz "items" con copias rasas de las propiedades cargadas de los elementos de la colección.</span><span class="sxs-lookup"><span data-stu-id="1eb36-153">) that contains an "items" array with shallow copies of any loaded properties from the collection''s items.</span></span>'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.WorksheetCollectionData;'
      return:
        type:
          - 'excel!Excel.Interfaces.WorksheetCollectionData:interface'
        description: ''
references:
  - uid: 'excel!OfficeExtension.ClientObject:class'
    name: OfficeExtension.ClientObject
  - uid: 'excel!Excel.Worksheet:class'
    name: Excel.Worksheet
  - uid: 'excel!Excel.RequestContext:class'
    name: RequestContext
  - uid: 'excel!Excel.WorksheetCollection#getCount~0:complex'
    name: OfficeExtension.ClientResult<number>
    fullName: OfficeExtension.ClientResult<number>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.ClientResult:class'
        name: OfficeExtension.ClientResult
        fullName: OfficeExtension.ClientResult
      - name: <number>
        fullName: <number>
  - uid: 'excel!Excel.WorksheetCollection#items~0:complex'
    name: 'Excel.Worksheet[]'
    fullName: 'Excel.Worksheet[]'
    spec.typeScript:
      - uid: 'excel!Excel.Worksheet:class'
        name: Excel.Worksheet
        fullName: Excel.Worksheet
      - name: '[]'
        fullName: '[]'
  - uid: 'excel!Excel.WorksheetCollection:class'
    name: Excel.WorksheetCollection
  - uid: 'excel!Excel.WorksheetCollection#load~0:complex'
    name: Excel.Interfaces.WorksheetCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions
    fullName: Excel.Interfaces.WorksheetCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions
    spec.typeScript:
      - uid: 'excel!Excel.Interfaces.WorksheetCollectionLoadOptions:interface'
        name: Excel.Interfaces.WorksheetCollectionLoadOptions
        fullName: Excel.Interfaces.WorksheetCollectionLoadOptions
      - name: ' & '
        fullName: ' & '
      - uid: 'excel!Excel.Interfaces.CollectionLoadOptions:interface'
        name: Excel.Interfaces.CollectionLoadOptions
        fullName: Excel.Interfaces.CollectionLoadOptions
  - uid: 'excel!OfficeExtension.LoadOption:interface'
    name: OfficeExtension.LoadOption
  - uid: 'excel!Excel.Interfaces.WorksheetCollectionData:interface'
    name: Excel.Interfaces.WorksheetCollectionData