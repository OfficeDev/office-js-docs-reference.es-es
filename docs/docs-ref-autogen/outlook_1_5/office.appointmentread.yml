### YamlMime:UniversalReference
ms.openlocfilehash: cf5474325c4009ca114c673205b64db8a3fe0392
ms.sourcegitcommit: d356f1545c328d4b59ce814fcab8191e4231f1dc
ms.translationtype: MT
ms.contentlocale: es-ES
ms.lasthandoff: 02/13/2019
ms.locfileid: "29982583"
items:
- uid: Outlook_1_5.Office.AppointmentRead
  summary: >-
    El modo de Asistente de cita de [Office.context.mailbox.item](xref:Outlook_1_5.Office.Item)<!-- -->.


    **Importante**: se trata de un objeto interno de Outlook, no expuesto directamente a través de las interfaces existentes. Esto se debe tratar como un modo de Office.context.mailbox.item. Hacer referencia a la página de [Modelo de objetos](https://docs.microsoft.com/office/dev/add-ins/reference/objectmodel/requirement-set-1.5/office.context.mailbox.item) para obtener más información.
  name: Office.AppointmentRead
  fullName: Office.AppointmentRead
  langs:
  - typeScript
  type: interface
  extends:
  - Appointment
  - 'ItemRead '
  package: Outlook_1_5
  children:
  - Outlook_1_5.Office.AppointmentRead.displayReplyAllForm
  - Outlook_1_5.Office.AppointmentRead.displayReplyForm
  - Outlook_1_5.Office.AppointmentRead.getEntities
  - Outlook_1_5.Office.AppointmentRead.getEntitiesByType
  - Outlook_1_5.Office.AppointmentRead.getFilteredEntitiesByName
  - Outlook_1_5.Office.AppointmentRead.getRegExMatches
  - Outlook_1_5.Office.AppointmentRead.getRegExMatchesByName
  - Outlook_1_5.Office.AppointmentRead.loadCustomPropertiesAsync
  - Outlook_1_5.Office.AppointmentRead.attachments
  - Outlook_1_5.Office.AppointmentRead.body
  - Outlook_1_5.Office.AppointmentRead.dateTimeCreated
  - Outlook_1_5.Office.AppointmentRead.dateTimeModified
  - Outlook_1_5.Office.AppointmentRead.end
  - Outlook_1_5.Office.AppointmentRead.itemClass
  - Outlook_1_5.Office.AppointmentRead.itemId
  - Outlook_1_5.Office.AppointmentRead.itemType
  - Outlook_1_5.Office.AppointmentRead.location
  - Outlook_1_5.Office.AppointmentRead.normalizedSubject
  - Outlook_1_5.Office.AppointmentRead.notificationMessages
  - Outlook_1_5.Office.AppointmentRead.optionalAttendees
  - Outlook_1_5.Office.AppointmentRead.organizer
  - Outlook_1_5.Office.AppointmentRead.requiredAttendees
  - Outlook_1_5.Office.AppointmentRead.start
  - Outlook_1_5.Office.AppointmentRead.subject
- uid: Outlook_1_5.Office.AppointmentRead.displayReplyAllForm
  summary: >-
    Muestra un formulario de respuesta que incluye el remitente y todos los destinatarios del mensaje seleccionado o el organizador y todos los asistentes de la cita seleccionada.


    En Outlook Web App, el formulario de respuestas aparece como formulario emergente en la vista de tres columnas y en la vista de una o de dos columnas.


    Si cualquiera de los parámetros de cadena supera sus límites, displayReplyAllForm produce una excepción.


    Cuando los datos adjuntos se especifican en el parámetro formData.attachments, Outlook y Outlook Web App intentan descargar todos los datos adjuntos y adjuntarlos al formulario de respuesta. Si no se pudo agregar algún dato adjunto, se muestra un error en la interfaz de usuario del formulario. Si esto no es posible, no se produce ningún mensaje de error.


    **Nota**: este método no se admite en Outlook para iOS o Outlook para Android.


    \[[Conjunto de API: buzón 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[Nivel de permisos mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


    <tr><td>[Modo de Outlook aplicable](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Asistente de cita</td></tr></table>

    ####Ejemplos


    ```javascript

    // The following code passes a string to the `displayReplyAllForm` function.

    Office.context.mailbox.item.displayReplyAllForm('hello there');

    Office.context.mailbox.item.displayReplyAllForm('<b>hello there</b>');


    // Reply with an empty body.

    Office.context.mailbox.item.displayReplyAllForm({});


    // Reply with just a body.

    Office.context.mailbox.item.displayReplyAllForm(

    {

    'htmlBody' : 'hi'

    });


    // Reply with a body and a file attachment.

    Office.context.mailbox.item.displayReplyAllForm(

    {
        'htmlBody' : 'hi',
        'attachments' :
        [
            {
            'type' : Office.MailboxEnums.AttachmentType.File,
            'name' : 'squirrel.png',
            'url' : 'http://i.imgur.com/sRgTlGR.jpg'
            }
        ]
    });


    // Reply with a body and an item attachment.

    Office.context.mailbox.item.displayReplyAllForm(

    {
        'htmlBody' : 'hi',
        'attachments' :
        [
            {
            'type' : 'item',
            'name' : 'rand',
            'itemId' : Office.context.mailbox.item.itemId
            }
        ]
    });


    // Reply with a body, file attachment, item attachment, and a callback.

    Office.context.mailbox.item.displayReplyAllForm(

    {
        'htmlBody' : 'hi',
        'attachments' :
        [
            {
                'type' : Office.MailboxEnums.AttachmentType.File,
                'name' : 'squirrel.png',
                'url' : 'http://i.imgur.com/sRgTlGR.jpg'
            },
            {
                'type' : 'item',
                'name' : 'rand',
                'itemId' : Office.context.mailbox.item.itemId
            }
        ],
        'callback' : function(asyncResult)
        {
            console.log(asyncResult.value);
        }
    });

    ```
  name: displayReplyAllForm(formData)
  fullName: displayReplyAllForm(formData)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'displayReplyAllForm(formData: string | ReplyFormData): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: formData
      description: Una cadena que contiene texto y HTML y que representa el cuerpo del formulario de respuestas. La cadena está limitada a 32 KB o un objeto [Office.ReplyFormData](xref:Outlook_1_5.Office.ReplyFormData) que contiene los datos de cuerpo o datos adjuntos y una función de devolución de llamada
      type:
      - string | ReplyFormData
- uid: Outlook_1_5.Office.AppointmentRead.displayReplyForm
  summary: >-
    Muestra un formulario de respuesta que incluye solo el remitente del mensaje seleccionado o el organizador de la cita seleccionada.


    En Outlook Web App, el formulario de respuestas aparece como formulario emergente en la vista de tres columnas y en la vista de una o de dos columnas.


    Si cualquiera de los parámetros de cadena supera sus límites, displayReplyForm produce una excepción.


    Cuando los datos adjuntos se especifican en el parámetro formData.attachments, Outlook y Outlook Web App intentan descargar todos los datos adjuntos y adjuntarlos al formulario de respuesta. Si no se pudo agregar algún dato adjunto, se muestra un error en la interfaz de usuario del formulario. Si esto no es posible, no se produce ningún mensaje de error.


    **Nota**: este método no se admite en Outlook para iOS o Outlook para Android.


    \[[Conjunto de API: buzón 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[Nivel de permisos mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


    <tr><td>[Modo de Outlook aplicable](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Asistente de cita</td></tr></table>

    ####Ejemplos


    ```javascript

    // The following code passes a string to the `displayReplyForm` function.

    Office.context.mailbox.item.displayReplyForm('hello there');

    Office.context.mailbox.item.displayReplyForm('<b>hello there</b>');


    // Reply with an empty body.

    Office.context.mailbox.item.displayReplyForm({});


    // Reply with just a body.

    Office.context.mailbox.item.displayReplyForm(

    {
        'htmlBody' : 'hi'
    });


    // Reply with a body and a file attachment.

    Office.context.mailbox.item.displayReplyForm(

    {
        'htmlBody' : 'hi',
        'attachments' :
        [
            {
                'type' : Office.MailboxEnums.AttachmentType.File,
                'name' : 'squirrel.png',
                'url' : 'http://i.imgur.com/sRgTlGR.jpg'
            }
        ]
    });


    // Reply with a body and an item attachment.

    Office.context.mailbox.item.displayReplyForm(

    {
        'htmlBody' : 'hi',
        'attachments' :
        [
            {
                'type' : 'item',
                'name' : 'rand',
                'itemId' : Office.context.mailbox.item.itemId
            }
        ]
    });


    // Reply with a body, file attachment, item attachment, and a callback.

    Office.context.mailbox.item.displayReplyForm(

    {
        'htmlBody' : 'hi',
        'attachments' :
        [
            {
                'type' : Office.MailboxEnums.AttachmentType.File,
                'name' : 'squirrel.png',
                'url' : 'http://i.imgur.com/sRgTlGR.jpg'
            },
            {
                'type' : 'item',
                'name' : 'rand',
                'itemId' : Office.context.mailbox.item.itemId
            }
        ],
        'callback' : function(asyncResult)
        {
            console.log(asyncResult.value);
        }
    });

    ```
  name: displayReplyForm(formData)
  fullName: displayReplyForm(formData)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'displayReplyForm(formData: string | ReplyFormData): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: formData
      description: Una cadena que contiene texto y HTML y que representa el cuerpo del formulario de respuestas. La cadena puede tener un máximo de 32 KB. O un objeto [Office.ReplyFormData](xref:Outlook_1_5.Office.ReplyFormData) que contiene los datos de cuerpo o datos adjuntos y una función de devolución de llamada.
      type:
      - string | ReplyFormData
- uid: Outlook_1_5.Office.AppointmentRead.getEntities
  summary: >-
    Obtiene las entidades que obtenidas en el cuerpo del elemento seleccionado.


    **Nota**: este método no se admite en Outlook para iOS o Outlook para Android.


    \[[Conjunto de API: buzón 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[Nivel de permisos mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


    <tr><td>[Modo de Outlook aplicable](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Asistente de cita</td></tr></table>
  name: getEntities()
  fullName: getEntities()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getEntities(): Entities;'
    return:
      type:
      - Entities
      description: ''
- uid: Outlook_1_5.Office.AppointmentRead.getEntitiesByType
  summary: >-
    Obtiene una matriz de todas las entidades del tipo de entidad especificado encontrado en el cuerpo del elemento seleccionado.


    **Nota**: este método no se admite en Outlook para iOS o Outlook para Android.


    \[[Conjunto de API: buzón 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[Nivel de permisos mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>Restringido</td></tr>


    <tr><td>[Modo de Outlook aplicable](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Asistente de cita</td></tr></table>


    Aunque el nivel de permiso mínimo para usar este método es Restricted, algunos tipos de entidad requieren ReadItem para tener acceso, como se especifica en la tabla siguiente.


    <table> <tr> <th>Valor de entityType</th> <th>Tipo de objetos de la matriz devuelta</th> <th>Redistribución de permiso necesario</th> </tr> <tr> <td>Address</td> <td>String</td> <td>Restringido</td> </tr> <tr> <td>Contact</td> <td>Contact</td> <td>ReadItem</td> </tr> <tr> <td>EmailAddress</td> <td>String</td> <td>ReadItem</td> </tr> <tr> <td>MeetingSuggestion</td> <td>MeetingSuggestion</td> <td>ReadItem</td> </tr> <tr> <td>PhoneNumber</td> <td>PhoneNumber</td> <td>Restringido</td> </tr> <tr> <td>TaskSuggestion</td> <td>TaskSuggestion</td> <td>ReadItem</td> </tr> <tr> <td>URL</td> <td>String</td> <td>Restringido</td> </tr> </table>

    #### Ejemplos


    ```javascript

    // The following example shows how to access an array of strings that represent postal addresses

    // in the current item's body.


    // The initialize function is required for all apps.

    Office.initialize = function () {
        // Checks for the DOM to load using the jQuery ready function.
        $(document).ready(function () {
            // After the DOM is loaded, app-specific code can run.
            var item = Office.context.mailbox.item;
            // Get an array of strings that represent postal addresses in the current item's body.
            var addresses = item.getEntitiesByType(Office.MailboxEnums.EntityType.Address);
            // Continue processing the array of addresses.
        });
    };

    ```
  name: getEntitiesByType(entityType)
  fullName: getEntitiesByType(entityType)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getEntitiesByType(entityType: MailboxEnums.EntityType): (string | Contact | MeetingSuggestion | PhoneNumber | TaskSuggestion)[];'
    return:
      type:
      - (string | Contact | MeetingSuggestion | PhoneNumber | TaskSuggestion)[]
      description: Si el valor que se pasó entityType no es un miembro válido de la enumeración de EntityType, el método devuelve null. Si no hay presente ninguna entidad del tipo especificado en el cuerpo del elemento, el método devuelve una matriz vacía. De lo contrario, el tipo de los objetos de la matriz devuelta depende del tipo de entidad solicitado en el parámetro entityType.
    parameters:
    - id: entityType
      description: Uno de los valores de enumeración de EntityType.
      type:
      - MailboxEnums.EntityType
- uid: Outlook_1_5.Office.AppointmentRead.getFilteredEntitiesByName
  summary: >-
    Devuelve entidades conocidas en el elemento seleccionado que pasan el filtro con nombre definido en el archivo XML de manifiesto.


    El método getFilteredEntitiesByName devuelve las entidades que coinciden con la expresión regular definida en el elemento de regla ItemHasKnownEntity del archivo XML de manifiesto con el valor de elemento FilterName especificado.


    **Nota**: este método no se admite en Outlook para iOS o Outlook para Android.


    \[[Conjunto de API: buzón 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[Nivel de permisos mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


    <tr><td>[Modo de Outlook aplicable](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Asistente de cita</td></tr></table>
  name: getFilteredEntitiesByName(name)
  fullName: getFilteredEntitiesByName(name)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getFilteredEntitiesByName(name: string): (string | Contact | MeetingSuggestion | PhoneNumber | TaskSuggestion)[];'
    return:
      type:
      - (string | Contact | MeetingSuggestion | PhoneNumber | TaskSuggestion)[]
      description: Si no existe ningún elemento ItemHasKnownEntity en el manifiesto con un valor de elemento FilterName que coincida con el parámetro name, el método devuelve null. Si el parámetro name no coincide con un elemento ItemHasKnownEntity del manifiesto, pero no existen entidades en el elemento actual que coincidan, el método devuelve una matriz vacía.
    parameters:
    - id: name
      description: El nombre del elemento de regla ItemHasKnownEntity que define el filtro para que coincidan.
      type:
      - string
- uid: Outlook_1_5.Office.AppointmentRead.getRegExMatches
  summary: >-
    Devuelve valores de cadena en el elemento seleccionado que coinciden con las expresiones regulares definidas en el archivo XML de manifiesto.


    El método getRegExMatches devuelve las cadenas que coinciden con la expresión regular definida en cada elemento de regla ItemHasRegularExpressionMatch o ItemHasKnownEntity del archivo XML de manifiesto. Para una regla ItemHasRegularExpressionMatch, debe haber una cadena coincidente en la propiedad del elemento especificado por esa regla. El tipo simple PropertyName define las propiedades admitidas.


    Si especifica una regla ItemHasRegularExpressionMatch en la propiedad de cuerpo de un elemento, la expresión regular debe filtrar aún más el cuerpo y no intentar devolver todo el cuerpo del elemento. El uso de una expresión regular como .* para obtener todo el cuerpo de un elemento no siempre devuelve los resultados esperados. En su lugar, use el método Body.getAsync para recuperar el cuerpo completo.


    **Nota**: este método no se admite en Outlook para iOS o Outlook para Android.


    \[[Conjunto de API: buzón 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[Nivel de permisos mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


    <tr><td>[Modo de Outlook aplicable](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Asistente de cita</td></tr></table>

    ####Ejemplos


    ```javascript

    // The following example shows how to access the array of

    // matches for the regular expression rule elements `fruits`

    // and `veggies`, which are specified in the manifest.

    var allMatches = Office.context.mailbox.item.getRegExMatches();

    var fruits = allMatches.fruits;

    var veges = allMatches.veggies;

    ```
  name: getRegExMatches()
  fullName: getRegExMatches()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getRegExMatches(): any;'
    return:
      type:
      - any
      description: Un objeto que contiene matrices de cadenas que coinciden con las expresiones regulares definidas en el archivo XML de manifiesto. El nombre de cada matriz es igual al valor correspondiente del atributo RegExName de la regla ItemHasRegularExpressionMatch coincidente o al atributo FilterName de la regla ItemHasKnownEntity coincidente.
- uid: Outlook_1_5.Office.AppointmentRead.getRegExMatchesByName
  summary: >-
    Devuelve valores de cadena en el elemento seleccionado que coinciden con la expresión regular de nombre definida en el archivo XML de manifiesto.


    El método getRegExMatchesByName devuelve las cadenas que coinciden con la expresión regular definida en el elemento de regla ItemHasRegularExpressionMatch del archivo XML de manifiesto con el valor de elemento RegExName especificado.


    Si especifica una regla ItemHasRegularExpressionMatch en la propiedad de cuerpo de un elemento, la expresión regular debe filtrar aún más el cuerpo y no intentar devolver todo el cuerpo del elemento. El uso de una expresión regular como .* para obtener todo el cuerpo de un elemento no siempre devuelve los resultados esperados.


    **Nota**: este método no se admite en Outlook para iOS o Outlook para Android.


    \[[Conjunto de API: buzón 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[Nivel de permisos mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


    <tr><td>[Modo de Outlook aplicable](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Asistente de cita</td></tr></table>

    ####Ejemplos


    ```javascript

    var fruits = Office.context.mailbox.item.getRegExMatchesByName("fruits");

    var veggies = Office.context.mailbox.item.getRegExMatchesByName("veggies");

    ```
  name: getRegExMatchesByName(name)
  fullName: getRegExMatchesByName(name)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getRegExMatchesByName(name: string): string[];'
    return:
      type:
      - string[]
      description: Una matriz que contiene las cadenas que coinciden con la expresión regular definida en el archivo XML de manifiesto.
    parameters:
    - id: name
      description: El nombre del elemento de regla ItemHasRegularExpressionMatch que define el filtro para que coincidan.
      type:
      - string
- uid: Outlook_1_5.Office.AppointmentRead.loadCustomPropertiesAsync
  summary: >-
    Carga de forma asincrónica las propiedades personalizadas de este complemento en el elemento seleccionado.


    Las propiedades personalizadas se almacenan como pares de clave/valor según la aplicación y el elemento. Este método devuelve un objeto CustomProperties en la devolución de llamada, que proporciona métodos para tener acceso a las propiedades personalizadas específicas del elemento y el complemento actual. Las propiedades personalizadas no están cifradas en el elemento, por lo que no debería usarse como almacenamiento seguro.


    Las propiedades personalizadas se proporcionan como un objeto CustomProperties en la propiedad asyncResult.value. Este objeto puede usarse para obtener, establecer y quitar las propiedades personalizadas del elemento, y guardar los cambios en la propiedad personalizada que se vuelve a establecer en el servidor.


    \[[Conjunto de API: buzón 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[Nivel de permisos mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


    <tr><td>[Modo de Outlook aplicable](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Asistente de cita</td></tr></table>
  name: loadCustomPropertiesAsync(callback, userContext)
  fullName: loadCustomPropertiesAsync(callback, userContext)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'loadCustomPropertiesAsync(callback: (result: Office.AsyncResult<CustomProperties>) => void, userContext?: any): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: callback
      description: Cuando finaliza el método, se llama a la función que se pasa en el parámetro de devolución de llamada con un parámetro único de tipo Office.AsyncResult.
      type:
      - '(result: Office.AsyncResult<CustomProperties>) => void'
    - id: userContext
      description: Opcional. Los desarrolladores pueden proporcionar cualquier objeto al que quieran obtener acceso en la función de devolución de llamada. La propiedad asyncResult.asyncContext en la función de devolución de llamada puede tener acceso a este objeto.
      type:
      - any
- uid: Outlook_1_5.Office.AppointmentRead.attachments
  summary: >-
    Obtiene los datos adjuntos del elemento como una matriz.


    \[[Conjunto de API: buzón 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[Nivel de permisos mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


    <tr><td>[Modo de Outlook aplicable](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Asistente de cita</td></tr></table>


    **Nota**: algunos tipos de archivos están bloqueados por Outlook debido a problemas de seguridad y, por tanto, no se devuelven. Para obtener más información, vea [datos adjuntos bloqueados en Outlook](https://support.office.com/article/Blocked-attachments-in-Outlook-434752E1-02D3-4E90-9124-8B81E49A8519)<!-- -->.

    #### <a name="examples"></a>Ejemplos


    ```javascript

    // The following code builds an HTML string with details of all attachments on the current item.

    var item = Office.context.mailbox.item;

    var outputString = "";


    if (item.attachments.length > 0) {
        for (i = 0 ; i < item.attachments.length ; i++) {
            var attachment = item.attachments[i];
            outputString += "<BR>" + i + ". Name: ";
            outputString += attachment.name;
            outputString += "<BR>ID: " + attachment.id;
            outputString += "<BR>contentType: " + attachment.contentType;
            outputString += "<BR>size: " + attachment.size;
            outputString += "<BR>attachmentType: " + attachment.attachmentType;
            outputString += "<BR>isInline: " + attachment.isInline;
        }
    }


    console.log(outputString);

    ```
  name: attachments
  fullName: attachments
  langs:
  - typeScript
  type: property
  syntax:
    content: 'attachments: AttachmentDetails[];'
    return:
      type:
      - AttachmentDetails[]
- uid: Outlook_1_5.Office.AppointmentRead.body
  summary: >-
    Obtiene un objeto que proporciona métodos para manipular el cuerpo de un elemento.


    \[[Conjunto de API: buzón 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[Nivel de permisos mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


    <tr><td>[Modo de Outlook aplicable](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Asistente de cita</td></tr></table>

    ####Ejemplos


    ```javascript

    // This example gets the body of the message in plain text.

    Office.context.mailbox.item.body.getAsync(
        "text",
        { asyncContext: "This is passed to the callback" },
        function callback(result) {
            // Do something with the result
        });

    // The following is an example of the result parameter passed to the callback function.

    {
        "value": "TEXT of whole body (including threads below)",
        "status": "succeeded",
        "asyncContext": "This is passed to the callback"
    }

    ```
  name: body
  fullName: body
  langs:
  - typeScript
  type: property
  syntax:
    content: 'body: Body;'
    return:
      type:
      - Body
- uid: Outlook_1_5.Office.AppointmentRead.dateTimeCreated
  summary: >-
    Obtiene la fecha y hora de creación de un elemento.


    \[[Conjunto de API: buzón 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[Nivel de permisos mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


    <tr><td>[Modo de Outlook aplicable](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Asistente de cita</td></tr></table>

    ####Ejemplos


    ```javascript

    var dateTimeCreated = Office.context.mailbox.item.dateTimeCreated;

    console.log("Date and time created: " + dateTimeCreated);

    ```
  name: dateTimeCreated
  fullName: dateTimeCreated
  langs:
  - typeScript
  type: property
  syntax:
    content: 'dateTimeCreated: Date;'
    return:
      type:
      - Date
- uid: Outlook_1_5.Office.AppointmentRead.dateTimeModified
  summary: >-
    Obtiene la fecha y hora en que se modificó por última vez un elemento.


    \[[Conjunto de API: buzón 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[Nivel de permisos mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


    <tr><td>[Modo de Outlook aplicable](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Asistente de cita</td></tr></table>


    **Nota**: este miembro no se admite en Outlook para iOS o Outlook para Android.

    #### <a name="examples"></a>Ejemplos


    ```javascript

    var dateTimeModified = Office.context.mailbox.item.dateTimeModified;

    console.log("Date and time modified: " + dateTimeModified);

    ```
  name: dateTimeModified
  fullName: dateTimeModified
  langs:
  - typeScript
  type: property
  syntax:
    content: 'dateTimeModified: Date;'
    return:
      type:
      - Date
- uid: Outlook_1_5.Office.AppointmentRead.end
  summary: >-
    Obtiene la fecha y hora en que finalizará la cita.


    La propiedad end es un objeto de fecha expresado como un valor de fecha y hora Universal coordinada (UTC). Puede usar el método convertToLocalClientTime para convertir el valor de la propiedad end en fecha del cliente y hora local.


    Si usa el método Time.setAsync para establecer la hora de finalización, use el método convertToUtcClientTime para convertir la hora local del cliente en un valor UTC para el servidor.


    \[[Conjunto de API: buzón 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[Nivel de permisos mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


    <tr><td>[Modo de Outlook aplicable](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Asistente de cita</td></tr></table>

    ####Ejemplos


    ```javascript

    var end = Office.context.mailbox.item.end;

    console.log("Appointment end: " + end);

    ```
  name: end
  fullName: end
  langs:
  - typeScript
  type: property
  syntax:
    content: 'end: Date;'
    return:
      type:
      - Date
- uid: Outlook_1_5.Office.AppointmentRead.itemClass
  summary: >-
    Obtiene la clase de elemento Servicios Web Exchange del elemento seleccionado.


    Puede crear clases de mensaje personalizadas para especificar aún más las clases de mensaje predeterminadas; por ejemplo, puede crear la clase de mensaje de cita personalizada IPM.Appointment.Contoso.


    \[[Conjunto de API: buzón 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[Nivel de permisos mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


    <tr><td>[Modo de Outlook aplicable](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Asistente de cita</td></tr></table>


    La propiedad itemClass especifica la clase de mensaje del elemento seleccionado. A continuación, se enumeran las clases de mensaje predeterminadas para el elemento de cita o mensaje.


    <table> <tr> <th>Tipo</th> <th>Descripción</th> <th>Clase de artículo</th> </tr> <tr> <td>Elementos de cita</td> <td>Estos son los elementos del calendario de la clase de elemento IPM. Cita o IPM. Appointment.Occurrence.</td> <td>IPM. Cita, IPM. Appointment.Occurrence</td> </tr> <tr> <td>Elementos de mensaje</td> <td>Entre estos se encuentran los correos electrónicos que tienen la clase de mensaje predeterminada IPM.Note y las convocatorias de reunión, respuestas y cancelaciones que usan IPM.Schedule.Meeting como clase de mensaje base.</td> <td>IPM. Nota, IPM. Schedule.Meeting.Request,IPM. Schedule.Meeting.Neg,IPM. Schedule.Meeting.Pos,IPM. Schedule.Meeting.Tent,IPM. Schedule.Meeting.Canceled</td> </tr> </table>

    #### Ejemplos


    ```javascript

    var itemClass = Office.context.mailbox.item.itemClass;

    console.log("Item class: " + itemClass);

    ```
  name: itemClass
  fullName: itemClass
  langs:
  - typeScript
  type: property
  syntax:
    content: 'itemClass: string;'
    return:
      type:
      - string
- uid: Outlook_1_5.Office.AppointmentRead.itemId
  summary: >-
    Obtiene el identificador de elemento de Servicios Web Exchange para el elemento actual.


    La propiedad itemId no está disponible en el modo de redacción. Si se requiere un identificador de elemento, el método saveAsync puede usarse para guardar el elemento en el almacén, que devolverá el identificador de elemento en el parámetro asyncResult.value en la función de devolución de llamada.


    **Nota**: el identificador devuelto por la propiedad itemId es el mismo que el identificador de elemento de servicios Web de Exchange. La propiedad itemId no es idéntica para el identificador de entrada de Outlook o el identificador de la API de REST de Outlook. Para realizar llamadas API de REST con este valor, hay que convertirlo con Office.context.mailbox.convertToRestId. Para obtener más información, vea [usar las API de REST de Outlook desde un complemento de Outlook](https://docs.microsoft.com/outlook/add-ins/use-rest-api#get-the-item-id)<!-- -->.


    \[[Conjunto de API: buzón 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[Nivel de permisos mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


    <tr><td>[Modo de Outlook aplicable](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Asistente de cita</td></tr></table>

    ####Ejemplos


    ```javascript

    // The following code checks for the presence of an item

    // identifier. If the `itemId` property returns `null` or

    // `undefined`, it saves the item to the store and gets the

    // item identifier from the asynchronous result.

    var itemId = Office.context.mailbox.item.itemId;

    if (itemId === null || itemId == undefined) {
        Office.context.mailbox.item.saveAsync(function(result) {
            itemId = result.value;
        });
    }

    ```
  name: itemId
  fullName: itemId
  langs:
  - typeScript
  type: property
  syntax:
    content: 'itemId: string;'
    return:
      type:
      - string
- uid: Outlook_1_5.Office.AppointmentRead.itemType
  summary: >-
    Obtiene el tipo de elemento que representa una instancia.


    La propiedad itemType devuelve uno de los valores de enumeración de ItemType, lo que indica si la instancia del objeto item es un mensaje o una cita.


    \[[Conjunto de API: buzón 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[Nivel de permisos mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


    <tr><td>[Modo de Outlook aplicable](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Asistente de cita</td></tr></table>

    ####Ejemplos


    ```javascript

    if (Office.context.mailbox.item.itemType === Office.MailboxEnums.ItemType.Appointment) {
        // do something
    } else {
        // do something else
    }

    ```
  name: itemType
  fullName: itemType
  langs:
  - typeScript
  type: property
  syntax:
    content: 'itemType: MailboxEnums.ItemType;'
    return:
      type:
      - MailboxEnums.ItemType
- uid: Outlook_1_5.Office.AppointmentRead.location
  summary: >-
    Obtiene la ubicación de una cita.


    La propiedad location devuelve una cadena que contiene la ubicación de la cita.


    \[[Conjunto de API: buzón 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[Nivel de permisos mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


    <tr><td>[Modo de Outlook aplicable](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Asistente de cita</td></tr></table>

    ####Ejemplos


    ```javascript

    var location = Office.context.mailbox.item.location;

    console.log("location: " + location);

    ```
  name: location
  fullName: location
  langs:
  - typeScript
  type: property
  syntax:
    content: 'location: string;'
    return:
      type:
      - string
- uid: Outlook_1_5.Office.AppointmentRead.normalizedSubject
  summary: >-
    Obtiene el asunto de un elemento, sin ningún prefijo (incluidos RE: y RV:).


    La propiedad normalizedSubject obtiene el asunto del elemento, con los prefijos estándar (como RE: y FW:) agregados por los programas de correo electrónico. Para obtener el asunto del elemento con los prefijos intactos, use la propiedad subject.


    \[[Conjunto de API: buzón 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[Nivel de permisos mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


    <tr><td>[Modo de Outlook aplicable](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Asistente de cita</td></tr></table>

    ####Ejemplos


    ```javascript

    var normalizedSubject = Office.context.mailbox.item.normalizedSubject;

    console.log("Normalized subject: " + normalizedSubject);

    ```
  name: normalizedSubject
  fullName: normalizedSubject
  langs:
  - typeScript
  type: property
  syntax:
    content: 'normalizedSubject: string;'
    return:
      type:
      - string
- uid: Outlook_1_5.Office.AppointmentRead.notificationMessages
  summary: >-
    Obtiene los mensajes de notificación de un elemento.


    \[[Conjunto de API: buzón 1.3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[Nivel de permisos mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


    <tr><td>[Modo de Outlook aplicable](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Asistente de cita</td></tr></table>

    ####Ejemplos


    ```javascript

    // Get all notifications

    Office.context.mailbox.item.notificationMessages.getAllAsync(
        function (asyncResult) {
            console.log(JSON.stringify(asyncResult));
        }
    );

    ```
  name: notificationMessages
  fullName: notificationMessages
  langs:
  - typeScript
  type: property
  syntax:
    content: 'notificationMessages: NotificationMessages;'
    return:
      type:
      - NotificationMessages
- uid: Outlook_1_5.Office.AppointmentRead.optionalAttendees
  summary: >-
    Proporciona acceso a los asistentes opcionales de un evento. El tipo de objeto y el nivel de acceso dependen del modo del elemento actual.


    La propiedad optionalAttendees devuelve una matriz que contiene un objeto [Office.EmailAddressDetails](xref:Outlook_1_5.Office.EmailAddressDetails) para cada asistente opcional para la reunión.


    \[[Conjunto de API: buzón 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[Nivel de permisos mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


    <tr><td>[Modo de Outlook aplicable](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Asistente de cita</td></tr></table>

    ####Ejemplos


    ```javascript

    var optionalAttendees = Office.context.mailbox.item.optionalAttendees;

    console.log("Optional attendees: " + JSON.stringify(optionalAttendees));

    ```
  name: optionalAttendees
  fullName: optionalAttendees
  langs:
  - typeScript
  type: property
  syntax:
    content: 'optionalAttendees: EmailAddressDetails[];'
    return:
      type:
      - EmailAddressDetails[]
- uid: Outlook_1_5.Office.AppointmentRead.organizer
  summary: >-
    Obtiene la dirección de correo electrónico del organizador de una reunión especificada.


    \[[Conjunto de API: buzón 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[Nivel de permisos mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


    <tr><td>[Modo de Outlook aplicable](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Asistente de cita</td></tr></table>

    ####Ejemplos


    ```javascript

    var organizerName = Office.context.mailbox.item.organizer.displayName;

    var organizerAddress = Office.context.mailbox.item.organizer.emailAddress;

    console.log("Organizer: " + organizerName + " (" + organizerAddress + ")");

    ```
  name: organizer
  fullName: organizer
  langs:
  - typeScript
  type: property
  syntax:
    content: 'organizer: EmailAddressDetails;'
    return:
      type:
      - EmailAddressDetails
- uid: Outlook_1_5.Office.AppointmentRead.requiredAttendees
  summary: >-
    Proporciona acceso a los asistentes necesarios de un evento. El tipo de objeto y el nivel de acceso dependen del modo del elemento actual.


    La propiedad requiredAttendees devuelve una matriz que contiene un objeto [Office.EmailAddressDetails](xref:Outlook_1_5.Office.EmailAddressDetails) para cada asistente necesario a la reunión.


    \[[Conjunto de API: buzón 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[Nivel de permisos mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


    <tr><td>[Modo de Outlook aplicable](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Asistente de cita</td></tr></table>

    ####Ejemplos


    ```javascript

    var requiredAttendees = Office.context.mailbox.item.requiredAttendees;

    console.log("Required attendees: " + JSON.stringify(requiredAttendees));

    ```
  name: requiredAttendees
  fullName: requiredAttendees
  langs:
  - typeScript
  type: property
  syntax:
    content: 'requiredAttendees: EmailAddressDetails[];'
    return:
      type:
      - EmailAddressDetails[]
- uid: Outlook_1_5.Office.AppointmentRead.start
  summary: >-
    Obtiene la fecha y hora en que empezará la cita.


    La propiedad start es un objeto de fecha expresado como un valor de fecha y hora Universal coordinada (UTC). Puede usar el método convertToLocalClientTime para convertir el valor en fecha del cliente y hora local.


    \[[Conjunto de API: buzón 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[Nivel de permisos mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


    <tr><td>[Modo de Outlook aplicable](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Asistente de cita</td></tr></table>

    ####Ejemplos


    ```javascript

    var start = Office.context.mailbox.item.start;

    console.log("Appointment start: " + JSON.stringify(start));

    ```
  name: start
  fullName: start
  langs:
  - typeScript
  type: property
  syntax:
    content: 'start: Date;'
    return:
      type:
      - Date
- uid: Outlook_1_5.Office.AppointmentRead.subject
  summary: >-
    Obtiene la descripción que aparece en el campo Asunto de un elemento.


    La propiedad subject obtiene o establece el asunto completo del elemento, como lo envió el servidor de correo electrónico.


    La propiedad subject devuelve una cadena. Use la propiedad normalizedSubject para obtener el asunto menos cualquier prefijo inicial como RE: y FW:.


    \[[Conjunto de API: buzón 1.0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    <table><tr><td>[Nivel de permisos mínimo](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>ReadItem</td></tr>


    <tr><td>[Modo de Outlook aplicable](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Asistente de cita</td></tr></table>

    ####Ejemplos


    ```javascript

    // The following JavaScript code example shows how to access the

    // `subject` property of the current item in Outlook.


    // The initialize function is required for all apps.

    Office.initialize = function () {
        // Checks for the DOM to load using the jQuery ready function.
        $(document).ready(function () {
            // After the DOM is loaded, app-specific code can run.
            var item = Office.context.mailbox.item;
            var subject = item.subject;
            // Continue with processing the subject of the current item,
            // which can be a message or appointment.
        });
    };

    ```
  name: subject
  fullName: subject
  langs:
  - typeScript
  type: property
  syntax:
    content: 'subject: string;'
    return:
      type:
      - string
