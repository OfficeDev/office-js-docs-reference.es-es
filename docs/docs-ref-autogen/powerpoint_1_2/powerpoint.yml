### YamlMime:TSPackage
uid: powerpoint!
name: powerpoint
type: package
summary: ''
classes:
- powerpoint!PowerPoint.Application:class
- powerpoint!PowerPoint.Presentation:class
- powerpoint!PowerPoint.RequestContext:class
- powerpoint!PowerPoint.Slide:class
- powerpoint!PowerPoint.SlideCollection:class
enums:
- powerpoint!PowerPoint.ErrorCodes:enum
- powerpoint!PowerPoint.InsertSlideFormatting:enum
interfaces:
- powerpoint!PowerPoint.InsertSlideOptions:interface
- powerpoint!PowerPoint.Interfaces.CollectionLoadOptions:interface
- powerpoint!PowerPoint.Interfaces.PresentationData:interface
- powerpoint!PowerPoint.Interfaces.PresentationLoadOptions:interface
- powerpoint!PowerPoint.Interfaces.SlideCollectionData:interface
- powerpoint!PowerPoint.Interfaces.SlideCollectionLoadOptions:interface
- powerpoint!PowerPoint.Interfaces.SlideCollectionUpdateData:interface
- powerpoint!PowerPoint.Interfaces.SlideData:interface
- powerpoint!PowerPoint.Interfaces.SlideLoadOptions:interface
functions:
- name: PowerPoint.createPresentation(base64File)
  uid: powerpoint!PowerPoint.createPresentation:function(1)
  package: powerpoint!
  summary: >-
    Crea y abre una nueva presentación. Opcionalmente, la presentación se puede rellenar previamente con un archivo .pptx codificado en base64.


    \[[Conjunto de API: PowerPointApi 1.1](/office/dev/add-ins/reference/javascript-api-for-office)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'export function createPresentation(base64File?: string): Promise<void>;'
    parameters:
    - id: base64File
      description: Opcional. Archivo .pptx codificado en base64. El valor predeterminado es null.
      type: string
    return:
      type: Promise&lt;void&gt;
      description: "\n\n#### <a name=\"examples\"></a>Ejemplos\n\n```javascript\nvar myFile = document.getElementById(\"file\");\nvar reader = new FileReader();\n\nreader.onload = function (event) {\n    // strip off the metadata before the base64-encoded string\n    var startIndex = event.target.result.indexOf(\"base64,\");\n    var copyBase64 = event.target.result.substr(startIndex + 7);\n\n    PowerPoint.createPresentation(copyBase64);        \n};\n\n// read in the file as a data URL so we can parse the base64-encoded string\nreader.readAsDataURL(myFile.files[0]);\n```"
- name: PowerPoint.run(batch)
  uid: powerpoint!PowerPoint.run:function(1)
  package: powerpoint!
  summary: Ejecuta un script por lotes que realiza acciones en el modelo de objetos de PowerPoint con un nuevo RequestContext. Cuando se resuelva la promesa, se liberarán los objetos de seguimiento que se asignaron automáticamente durante la ejecución.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'export function run<T>(batch: (context: PowerPoint.RequestContext) => Promise<T>): Promise<T>;'
    parameters:
    - id: batch
      description: Función que toma un RequestContext y devuelve una promesa (normalmente, solo el resultado de "context.sync()"). El parámetro context facilita las solicitudes a la aplicación de PowerPoint. Dado que el complemento de Office y la aplicación de PowerPoint se ejecutan en dos procesos diferentes, RequestContext es necesario para obtener acceso al modelo de objetos de PowerPoint desde el complemento.
      type: '(context: <xref uid="powerpoint!PowerPoint.RequestContext:class" />) =&gt; Promise&lt;T&gt;'
    return:
      type: Promise&lt;T&gt;
      description: ''
- name: PowerPoint.run(object, batch)
  uid: powerpoint!PowerPoint.run:function(2)
  package: powerpoint!
  summary: Ejecuta un script por lotes que realiza acciones en el modelo de objetos de PowerPoint, mediante el RequestContext de un objeto API creado anteriormente. Cuando se resuelva la promesa, se liberarán los objetos de seguimiento que se asignaron automáticamente durante la ejecución.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'export function run<T>(object: OfficeExtension.ClientObject, batch: (context: PowerPoint.RequestContext) => Promise<T>): Promise<T>;'
    parameters:
    - id: object
      description: Un objeto API creado anteriormente. El lote usará el mismo RequestContext que el objeto pasado, lo que significa que cualquier cambio que se aplique al objeto será recogido por "context.sync()".
      type: <xref uid="office!OfficeExtension.ClientObject:class" />
    - id: batch
      description: Función que toma un RequestContext y devuelve una promesa (normalmente, solo el resultado de "context.sync()"). El parámetro context facilita las solicitudes a la aplicación de PowerPoint. Dado que el complemento de Office y la aplicación de PowerPoint se ejecutan en dos procesos diferentes, RequestContext es necesario para obtener acceso al modelo de objetos de PowerPoint desde el complemento.
      type: '(context: <xref uid="powerpoint!PowerPoint.RequestContext:class" />) =&gt; Promise&lt;T&gt;'
    return:
      type: Promise&lt;T&gt;
      description: ''
- name: PowerPoint.run(objects, batch)
  uid: powerpoint!PowerPoint.run:function(3)
  package: powerpoint!
  summary: Ejecuta un script por lotes que realiza acciones en el modelo de objetos de PowerPoint, mediante el RequestContext de objetos api creados anteriormente.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'export function run<T>(objects: OfficeExtension.ClientObject[], batch: (context: PowerPoint.RequestContext) => Promise<T>): Promise<T>;'
    parameters:
    - id: objects
      description: Una matriz de objetos api creados anteriormente. La matriz se validará para asegurarse de que todos los objetos comparten el mismo contexto. El lote usará este RequestContext compartido, lo que significa que los cambios aplicados a estos objetos se recogerán mediante "context.sync()".
      type: <xref uid="office!OfficeExtension.ClientObject:class" />[]
    - id: batch
      description: Función que toma un RequestContext y devuelve una promesa (normalmente, solo el resultado de "context.sync()"). El parámetro context facilita las solicitudes a la aplicación de PowerPoint. Dado que el complemento de Office y la aplicación de PowerPoint se ejecutan en dos procesos diferentes, RequestContext es necesario para obtener acceso al modelo de objetos de PowerPoint desde el complemento.
      type: '(context: <xref uid="powerpoint!PowerPoint.RequestContext:class" />) =&gt; Promise&lt;T&gt;'
    return:
      type: Promise&lt;T&gt;
      description: ''
metadata:
  ms.openlocfilehash: 2e1385414eb2703006879f96c9a4c8b678fab1ac
  ms.sourcegitcommit: f7c5207ef96c4f6034fcb1b48e1b0036abf4fccc
  ms.translationtype: MT
  ms.contentlocale: es-ES
  ms.lasthandoff: 04/16/2021
  ms.locfileid: "51877230"
