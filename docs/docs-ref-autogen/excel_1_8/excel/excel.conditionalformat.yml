### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.ConditionalFormat:class'
    summary: |-
      <span data-ttu-id="7953e-101">Un objeto que encapsula el intervalo, el formato, la regla y otras propiedades del formato condicional.</span><span class="sxs-lookup"><span data-stu-id="7953e-101">An object encapsulating a conditional format's range, format, rule, and other properties.</span></span> <span data-ttu-id="7953e-102">Para obtener más información sobre el modelo de objetos de formato condicional, vea [aplicar formato condicional a los rangos de Excel](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-conditional-formatting)</span><span class="sxs-lookup"><span data-stu-id="7953e-102">To learn more about the conditional formatting object model, read [Apply conditional formatting to Excel ranges](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-conditional-formatting)</span></span><!-- --><span data-ttu-id="7953e-103">.</span><span class="sxs-lookup"><span data-stu-id="7953e-103"></span></span>

      <span data-ttu-id="7953e-104">\[[Conjunto de API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7953e-104">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: Excel.ConditionalFormat
    fullName: Excel.ConditionalFormat
    langs:
      - typeScript
    type: class
    extends:
      - 'excel!OfficeExtension.ClientObject:class'
    package: excel!
    children:
      - 'excel!Excel.ConditionalFormat#cellValue:member'
      - 'excel!Excel.ConditionalFormat#cellValueOrNullObject:member'
      - 'excel!Excel.ConditionalFormat#colorScale:member'
      - 'excel!Excel.ConditionalFormat#colorScaleOrNullObject:member'
      - 'excel!Excel.ConditionalFormat#context:member'
      - 'excel!Excel.ConditionalFormat#custom:member'
      - 'excel!Excel.ConditionalFormat#customOrNullObject:member'
      - 'excel!Excel.ConditionalFormat#dataBar:member'
      - 'excel!Excel.ConditionalFormat#dataBarOrNullObject:member'
      - 'excel!Excel.ConditionalFormat#delete:member(1)'
      - 'excel!Excel.ConditionalFormat#getRange:member(1)'
      - 'excel!Excel.ConditionalFormat#getRangeOrNullObject:member(1)'
      - 'excel!Excel.ConditionalFormat#iconSet:member'
      - 'excel!Excel.ConditionalFormat#iconSetOrNullObject:member'
      - 'excel!Excel.ConditionalFormat#id:member'
      - 'excel!Excel.ConditionalFormat#load:member(1)'
      - 'excel!Excel.ConditionalFormat#load:member(2)'
      - 'excel!Excel.ConditionalFormat#load:member(3)'
      - 'excel!Excel.ConditionalFormat#preset:member'
      - 'excel!Excel.ConditionalFormat#presetOrNullObject:member'
      - 'excel!Excel.ConditionalFormat#priority:member'
      - 'excel!Excel.ConditionalFormat#set:member(1)'
      - 'excel!Excel.ConditionalFormat#set:member(2)'
      - 'excel!Excel.ConditionalFormat#stopIfTrue:member'
      - 'excel!Excel.ConditionalFormat#textComparison:member'
      - 'excel!Excel.ConditionalFormat#textComparisonOrNullObject:member'
      - 'excel!Excel.ConditionalFormat#toJSON:member(1)'
      - 'excel!Excel.ConditionalFormat#topBottom:member'
      - 'excel!Excel.ConditionalFormat#topBottomOrNullObject:member'
      - 'excel!Excel.ConditionalFormat#type:member'
  - uid: 'excel!Excel.ConditionalFormat#cellValue:member'
    summary: |-
      <span data-ttu-id="7953e-105">Devuelve las propiedades de formato condicional del valor de celda si el formato condicional actual es un tipo CellValue.</span><span class="sxs-lookup"><span data-stu-id="7953e-105">Returns the cell value conditional format properties if the current conditional format is a CellValue type.</span></span> <span data-ttu-id="7953e-106">Por ejemplo, para dar formato a todas las celdas comprendidas entre 5 y 10.</span><span class="sxs-lookup"><span data-stu-id="7953e-106">For example to format all cells between 5 and 10.</span></span> <span data-ttu-id="7953e-107">Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="7953e-107">Read-only.</span></span>

      <span data-ttu-id="7953e-108">\[[Conjunto de API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7953e-108">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: cellValue
    fullName: cellValue
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly cellValue: Excel.CellValueConditionalFormat;'
      return:
        type:
          - 'excel!Excel.CellValueConditionalFormat:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="7953e-109">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="7953e-109">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const range = sheet.getRange("B21:E23");
              const conditionalFormat = range.conditionalFormats
                  .add(Excel.ConditionalFormatType.cellValue);
              conditionalFormat.cellValue.format.font.color = "red";
              conditionalFormat.cellValue.rule = { formula1: "=0", operator: "LessThan" };

              await context.sync();
          });
          ```
  - uid: 'excel!Excel.ConditionalFormat#cellValueOrNullObject:member'
    summary: |-
      <span data-ttu-id="7953e-110">Devuelve las propiedades de formato condicional del valor de celda si el formato condicional actual es un tipo CellValue.</span><span class="sxs-lookup"><span data-stu-id="7953e-110">Returns the cell value conditional format properties if the current conditional format is a CellValue type.</span></span> <span data-ttu-id="7953e-111">Por ejemplo, para dar formato a todas las celdas comprendidas entre 5 y 10.</span><span class="sxs-lookup"><span data-stu-id="7953e-111">For example to format all cells between 5 and 10.</span></span> <span data-ttu-id="7953e-112">Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="7953e-112">Read-only.</span></span>

      <span data-ttu-id="7953e-113">\[[Conjunto de API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7953e-113">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: cellValueOrNullObject
    fullName: cellValueOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly cellValueOrNullObject: Excel.CellValueConditionalFormat;'
      return:
        type:
          - 'excel!Excel.CellValueConditionalFormat:class'
  - uid: 'excel!Excel.ConditionalFormat#colorScale:member'
    summary: |-
      <span data-ttu-id="7953e-114">Devuelve las propiedades del formato condicional de ColorScale si el formato condicional actual es un tipo ColorScale.</span><span class="sxs-lookup"><span data-stu-id="7953e-114">Returns the ColorScale conditional format properties if the current conditional format is an ColorScale type.</span></span> <span data-ttu-id="7953e-115">Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="7953e-115">Read-only.</span></span>

      <span data-ttu-id="7953e-116">\[[Conjunto de API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7953e-116">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: colorScale
    fullName: colorScale
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly colorScale: Excel.ColorScaleConditionalFormat;'
      return:
        type:
          - 'excel!Excel.ColorScaleConditionalFormat:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="7953e-117">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="7953e-117">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const range = sheet.getRange("B2:M5");
              const conditionalFormat = range.conditionalFormats
                  .add(Excel.ConditionalFormatType.colorScale);
              const criteria = {
                  minimum: { formula: null, type: Excel.ConditionalFormatColorCriterionType.lowestValue, color: "blue" },
                  midpoint: { formula: "50", type: Excel.ConditionalFormatColorCriterionType.percent, color: "yellow" },
                  maximum: { formula: null, type: Excel.ConditionalFormatColorCriterionType.highestValue, color: "red" }
              };
              conditionalFormat.colorScale.criteria = criteria;

              await context.sync();
          });
          ```
  - uid: 'excel!Excel.ConditionalFormat#colorScaleOrNullObject:member'
    summary: |-
      <span data-ttu-id="7953e-118">Devuelve las propiedades del formato condicional de ColorScale si el formato condicional actual es un tipo ColorScale.</span><span class="sxs-lookup"><span data-stu-id="7953e-118">Returns the ColorScale conditional format properties if the current conditional format is an ColorScale type.</span></span> <span data-ttu-id="7953e-119">Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="7953e-119">Read-only.</span></span>

      <span data-ttu-id="7953e-120">\[[Conjunto de API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7953e-120">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: colorScaleOrNullObject
    fullName: colorScaleOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly colorScaleOrNullObject: Excel.ColorScaleConditionalFormat;'
      return:
        type:
          - 'excel!Excel.ColorScaleConditionalFormat:class'
  - uid: 'excel!Excel.ConditionalFormat#context:member'
    summary: <span data-ttu-id="7953e-121">Contexto de la solicitud asociado al objeto.</span><span class="sxs-lookup"><span data-stu-id="7953e-121">The request context associated with the object.</span></span> <span data-ttu-id="7953e-122">Esto conecta el proceso del complemento con el proceso de la aplicación host de Office.</span><span class="sxs-lookup"><span data-stu-id="7953e-122">This connects the add-in's process to the Office host application's process.</span></span>
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'excel!Excel.RequestContext:class'
  - uid: 'excel!Excel.ConditionalFormat#custom:member'
    summary: |-
      <span data-ttu-id="7953e-123">Devuelve las propiedades de formato condicional personalizado si el formato condicional actual es un tipo personalizado.</span><span class="sxs-lookup"><span data-stu-id="7953e-123">Returns the custom conditional format properties if the current conditional format is a custom type.</span></span> <span data-ttu-id="7953e-124">Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="7953e-124">Read-only.</span></span>

      <span data-ttu-id="7953e-125">\[[Conjunto de API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7953e-125">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: custom
    fullName: custom
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly custom: Excel.CustomConditionalFormat;'
      return:
        type:
          - 'excel!Excel.CustomConditionalFormat:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="7953e-126">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="7953e-126">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const range = sheet.getRange("B8:E13");
              const conditionalFormat = range.conditionalFormats.add(Excel.ConditionalFormatType.custom);
              conditionalFormat.custom.rule.formula = '=IF(B8>INDIRECT("RC[-1]",0),TRUE)';
              conditionalFormat.custom.format.font.color = "green";

              await context.sync();
          });
          ```
  - uid: 'excel!Excel.ConditionalFormat#customOrNullObject:member'
    summary: |-
      <span data-ttu-id="7953e-127">Devuelve las propiedades de formato condicional personalizado si el formato condicional actual es un tipo personalizado.</span><span class="sxs-lookup"><span data-stu-id="7953e-127">Returns the custom conditional format properties if the current conditional format is a custom type.</span></span> <span data-ttu-id="7953e-128">Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="7953e-128">Read-only.</span></span>

      <span data-ttu-id="7953e-129">\[[Conjunto de API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7953e-129">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: customOrNullObject
    fullName: customOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly customOrNullObject: Excel.CustomConditionalFormat;'
      return:
        type:
          - 'excel!Excel.CustomConditionalFormat:class'
  - uid: 'excel!Excel.ConditionalFormat#dataBar:member'
    summary: |-
      <span data-ttu-id="7953e-130">Devuelve las propiedades de la barra de datos si el formato condicional actual es una barra de datos.</span><span class="sxs-lookup"><span data-stu-id="7953e-130">Returns the data bar properties if the current conditional format is a data bar.</span></span> <span data-ttu-id="7953e-131">Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="7953e-131">Read-only.</span></span>

      <span data-ttu-id="7953e-132">\[[Conjunto de API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7953e-132">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: dataBar
    fullName: dataBar
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly dataBar: Excel.DataBarConditionalFormat;'
      return:
        type:
          - 'excel!Excel.DataBarConditionalFormat:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="7953e-133">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="7953e-133">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const range = sheet.getRange("B8:E13");
              const conditionalFormat = range.conditionalFormats
                  .add(Excel.ConditionalFormatType.dataBar);
              conditionalFormat.dataBar.barDirection = Excel.ConditionalDataBarDirection.leftToRight;

              await context.sync();
          });
          ```
  - uid: 'excel!Excel.ConditionalFormat#dataBarOrNullObject:member'
    summary: |-
      <span data-ttu-id="7953e-134">Devuelve las propiedades de la barra de datos si el formato condicional actual es una barra de datos.</span><span class="sxs-lookup"><span data-stu-id="7953e-134">Returns the data bar properties if the current conditional format is a data bar.</span></span> <span data-ttu-id="7953e-135">Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="7953e-135">Read-only.</span></span>

      <span data-ttu-id="7953e-136">\[[Conjunto de API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7953e-136">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: dataBarOrNullObject
    fullName: dataBarOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly dataBarOrNullObject: Excel.DataBarConditionalFormat;'
      return:
        type:
          - 'excel!Excel.DataBarConditionalFormat:class'
  - uid: 'excel!Excel.ConditionalFormat#delete:member(1)'
    summary: |-
      <span data-ttu-id="7953e-137">Elimina este formato condicional.</span><span class="sxs-lookup"><span data-stu-id="7953e-137">Deletes this conditional format.</span></span>

      <span data-ttu-id="7953e-138">\[[Conjunto de API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7953e-138">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: delete()
    fullName: delete()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'delete(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'excel!Excel.ConditionalFormat#getRange:member(1)'
    summary: |-
      <span data-ttu-id="7953e-139">Devuelve el intervalo en el que se aplica el formato condicional.</span><span class="sxs-lookup"><span data-stu-id="7953e-139">Returns the range the conditonal format is applied to.</span></span> <span data-ttu-id="7953e-140">Produce un error si el formato condicional se aplica a varios rangos.</span><span class="sxs-lookup"><span data-stu-id="7953e-140">Throws an error if the conditional format is applied to multiple ranges.</span></span> <span data-ttu-id="7953e-141">Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="7953e-141">Read-only.</span></span>

      <span data-ttu-id="7953e-142">\[[Conjunto de API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7953e-142">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getRange()
    fullName: getRange()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRange(): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="7953e-143">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="7953e-143">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const worksheetRange = sheet.getRange();
              worksheetRange.conditionalFormats.load("type");

              await context.sync();

              let cfRangePairs: { cf: Excel.ConditionalFormat, range: Excel.Range }[] = [];
              worksheetRange.conditionalFormats.items.forEach(item => {
                  cfRangePairs.push({
                      cf: item,
                      range: item.getRange().load("address")
                  });
              });

              await context.sync();

              if (cfRangePairs.length > 0) {
                  cfRangePairs.forEach(item => {
                      console.log(item.cf.type);
                  });
              } else {
                  console.log("No conditional formats applied.");
              }
          });
          ```
  - uid: 'excel!Excel.ConditionalFormat#getRangeOrNullObject:member(1)'
    summary: |-
      <span data-ttu-id="7953e-144">Devuelve el intervalo al que se aplica el formato condicional o un objeto NULL si el formato condicional se aplica a varios rangos.</span><span class="sxs-lookup"><span data-stu-id="7953e-144">Returns the range the conditonal format is applied to, or a null object if the conditional format is applied to multiple ranges.</span></span> <span data-ttu-id="7953e-145">Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="7953e-145">Read-only.</span></span>

      <span data-ttu-id="7953e-146">\[[Conjunto de API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7953e-146">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getRangeOrNullObject()
    fullName: getRangeOrNullObject()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRangeOrNullObject(): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
  - uid: 'excel!Excel.ConditionalFormat#iconSet:member'
    summary: |-
      <span data-ttu-id="7953e-147">Devuelve las propiedades del formato condicional IconSet si el formato condicional actual es un tipo IconSet.</span><span class="sxs-lookup"><span data-stu-id="7953e-147">Returns the IconSet conditional format properties if the current conditional format is an IconSet type.</span></span> <span data-ttu-id="7953e-148">Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="7953e-148">Read-only.</span></span>

      <span data-ttu-id="7953e-149">\[[Conjunto de API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7953e-149">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: iconSet
    fullName: iconSet
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly iconSet: Excel.IconSetConditionalFormat;'
      return:
        type:
          - 'excel!Excel.IconSetConditionalFormat:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="7953e-150">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="7953e-150">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const range = sheet.getRange("B8:E13");
              const conditionalFormat = range.conditionalFormats
                  .add(Excel.ConditionalFormatType.iconSet);
              const iconSetCF = conditionalFormat.iconSet;
              iconSetCF.style = Excel.IconSet.threeTriangles;

              /*
                  The iconSetCF.criteria array is automatically prepopulated with
                  criterion elements whose properties have been given default settings.
                  You can't write to each property of a criterion directly. Instead,
                  replace the whole criteria object.

                  With a "three*" icon set style, such as "threeTriangles", the third
                  element in the criteria array (criteria[2]) defines the "top" icon;
                  e.g., a green triangle. The second (criteria[1]) defines the "middle"
                  icon, The first (criteria[0]) defines the "low" icon, but it
                  can often be left empty as this method does below, because every
                  cell that does not match the other two criteria always gets the low
                  icon.            
              */
              iconSetCF.criteria = [
                  {} as any,
                  {
                      type: Excel.ConditionalFormatIconRuleType.number,
                      operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                      formula: "=700"
                  },
                  {
                      type: Excel.ConditionalFormatIconRuleType.number,
                      operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                      formula: "=1000",
                  }
              ];

              await context.sync();
          });
          ```
  - uid: 'excel!Excel.ConditionalFormat#iconSetOrNullObject:member'
    summary: |-
      <span data-ttu-id="7953e-151">Devuelve las propiedades del formato condicional IconSet si el formato condicional actual es un tipo IconSet.</span><span class="sxs-lookup"><span data-stu-id="7953e-151">Returns the IconSet conditional format properties if the current conditional format is an IconSet type.</span></span> <span data-ttu-id="7953e-152">Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="7953e-152">Read-only.</span></span>

      <span data-ttu-id="7953e-153">\[[Conjunto de API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7953e-153">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: iconSetOrNullObject
    fullName: iconSetOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly iconSetOrNullObject: Excel.IconSetConditionalFormat;'
      return:
        type:
          - 'excel!Excel.IconSetConditionalFormat:class'
  - uid: 'excel!Excel.ConditionalFormat#id:member'
    summary: |-
      <span data-ttu-id="7953e-154">La prioridad del formato condicional dentro de la ConditionalFormatCollection actual.</span><span class="sxs-lookup"><span data-stu-id="7953e-154">The Priority of the Conditional Format within the current ConditionalFormatCollection.</span></span> <span data-ttu-id="7953e-155">Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="7953e-155">Read-only.</span></span>

      <span data-ttu-id="7953e-156">\[[Conjunto de API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7953e-156">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: id
    fullName: id
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly id: string;'
      return:
        type:
          - string
  - uid: 'excel!Excel.ConditionalFormat#load:member(1)'
    summary: '<span data-ttu-id="7953e-157">Pone en cola un comando para cargar las propiedades especificadas del objeto.</span><span class="sxs-lookup"><span data-stu-id="7953e-157">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="7953e-158">Antes de leer las propiedades, debe llamar a "context.sync()".</span><span class="sxs-lookup"><span data-stu-id="7953e-158">You must call "context.sync()" before reading the properties.</span></span>'
    remarks: |-
      <span data-ttu-id="7953e-159">Además de esta firma, este método tiene las siguientes firmas:</span><span class="sxs-lookup"><span data-stu-id="7953e-159">In addition to this signature, this method has the following signatures:</span></span>

      <span data-ttu-id="7953e-160">`load(option?: string | string[]): Excel.ConditionalFormat`-Donde opción es una cadena delimitada por comas o una matriz de cadenas que especifican las propiedades que se van a cargar.</span><span class="sxs-lookup"><span data-stu-id="7953e-160">`load(option?: string | string[]): Excel.ConditionalFormat` - Where option is a comma-delimited string or an array of strings that specify the properties to load.</span></span>

      <span data-ttu-id="7953e-161">`load(option?: { select?: string; expand?: string; }): Excel.ConditionalFormat`-Where opción. Select es una cadena delimitada por comas que especifica las propiedades que se van a cargar y Options. Expand es una cadena delimitada por comas que especifica las propiedades de navegación que se deben cargar.</span><span class="sxs-lookup"><span data-stu-id="7953e-161">`load(option?: { select?: string; expand?: string; }): Excel.ConditionalFormat` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>

      <span data-ttu-id="7953e-162">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.ConditionalFormat`-Solo disponible en tipos de colección.</span><span class="sxs-lookup"><span data-stu-id="7953e-162">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.ConditionalFormat` - Only available on collection types.</span></span> <span data-ttu-id="7953e-163">Es similar a la firma anterior.</span><span class="sxs-lookup"><span data-stu-id="7953e-163">It is similar to the preceding signature.</span></span> <span data-ttu-id="7953e-164">Option. Top especifica el número máximo de elementos de colección que se pueden incluir en el resultado.</span><span class="sxs-lookup"><span data-stu-id="7953e-164">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="7953e-165">La opción. SKIP especifica el número de elementos que se deben omitir y que no se incluyen en el resultado.</span><span class="sxs-lookup"><span data-stu-id="7953e-165">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="7953e-166">Si se especifica Option. Top, el conjunto de resultados se iniciará después de omitir el número especificado de elementos.</span><span class="sxs-lookup"><span data-stu-id="7953e-166">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: Excel.Interfaces.ConditionalFormatLoadOptions): Excel.ConditionalFormat;'
      return:
        type:
          - 'excel!Excel.ConditionalFormat:class'
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - 'excel!Excel.Interfaces.ConditionalFormatLoadOptions:interface'
  - uid: 'excel!Excel.ConditionalFormat#load:member(2)'
    summary: <span data-ttu-id="7953e-167">Pone en cola un comando para cargar las propiedades especificadas del objeto.</span><span class="sxs-lookup"><span data-stu-id="7953e-167">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="7953e-168">Debe llamar `context.sync()` antes de leer las propiedades.</span><span class="sxs-lookup"><span data-stu-id="7953e-168">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.ConditionalFormat;'
      return:
        type:
          - 'excel!Excel.ConditionalFormat:class'
        description: ''
      parameters:
        - id: propertyNames
          description: <span data-ttu-id="7953e-169">Una cadena delimitada por comas o una matriz de cadenas que especifican las propiedades que se van a cargar.</span><span class="sxs-lookup"><span data-stu-id="7953e-169">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
          type:
            - 'string | string[]'
  - uid: 'excel!Excel.ConditionalFormat#load:member(3)'
    summary: <span data-ttu-id="7953e-170">Pone en cola un comando para cargar las propiedades especificadas del objeto.</span><span class="sxs-lookup"><span data-stu-id="7953e-170">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="7953e-171">Debe llamar `context.sync()` antes de leer las propiedades.</span><span class="sxs-lookup"><span data-stu-id="7953e-171">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): Excel.ConditionalFormat;'
      return:
        type:
          - 'excel!Excel.ConditionalFormat:class'
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '<span data-ttu-id="7953e-172">Donde propertyNamesAndPaths. Select es una cadena delimitada por comas que especifica las propiedades que se van a cargar y propertyNamesAndPaths. Expand es una cadena delimitada por comas que especifica las propiedades de navegación que se deben cargar.</span><span class="sxs-lookup"><span data-stu-id="7953e-172">Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>'
          type:
            - '{ select?: string; expand?: string; }'
  - uid: 'excel!Excel.ConditionalFormat#preset:member'
    summary: |-
      <span data-ttu-id="7953e-173">Devuelve el formato condicional de criterios preestablecidos.</span><span class="sxs-lookup"><span data-stu-id="7953e-173">Returns the preset criteria conditional format.</span></span> <span data-ttu-id="7953e-174">Consulte Excel. PresetCriteriaConditionalFormat para obtener más información.</span><span class="sxs-lookup"><span data-stu-id="7953e-174">See Excel.PresetCriteriaConditionalFormat for more details.</span></span>

      <span data-ttu-id="7953e-175">\[[Conjunto de API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7953e-175">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: preset
    fullName: preset
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly preset: Excel.PresetCriteriaConditionalFormat;'
      return:
        type:
          - 'excel!Excel.PresetCriteriaConditionalFormat:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="7953e-176">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="7953e-176">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const range = sheet.getRange("B2:M5");
              const conditionalFormat = range.conditionalFormats
                  .add(Excel.ConditionalFormatType.presetCriteria);
              conditionalFormat.preset.format.font.color = "white";
              conditionalFormat.preset.rule = { criterion: Excel.ConditionalFormatPresetCriterion.oneStdDevAboveAverage };

              await context.sync();
          });
          ```
  - uid: 'excel!Excel.ConditionalFormat#presetOrNullObject:member'
    summary: |-
      <span data-ttu-id="7953e-177">Devuelve el formato condicional de criterios preestablecidos.</span><span class="sxs-lookup"><span data-stu-id="7953e-177">Returns the preset criteria conditional format.</span></span> <span data-ttu-id="7953e-178">Consulte Excel. PresetCriteriaConditionalFormat para obtener más información.</span><span class="sxs-lookup"><span data-stu-id="7953e-178">See Excel.PresetCriteriaConditionalFormat for more details.</span></span>

      <span data-ttu-id="7953e-179">\[[Conjunto de API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7953e-179">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: presetOrNullObject
    fullName: presetOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly presetOrNullObject: Excel.PresetCriteriaConditionalFormat;'
      return:
        type:
          - 'excel!Excel.PresetCriteriaConditionalFormat:class'
  - uid: 'excel!Excel.ConditionalFormat#priority:member'
    summary: |-
      <span data-ttu-id="7953e-180">Prioridad (o índice) dentro de la colección de formato condicional en la que este formato condicional existe actualmente.</span><span class="sxs-lookup"><span data-stu-id="7953e-180">The priority (or index) within the conditional format collection that this conditional format currently exists in.</span></span> <span data-ttu-id="7953e-181">Al cambiar esto también cambian las prioridades de otros formatos condicionales, para permitir un orden de prioridad contiguo.</span><span class="sxs-lookup"><span data-stu-id="7953e-181">Changing this also changes other conditional formats' priorities, to allow for a contiguous priority order.</span></span> <span data-ttu-id="7953e-182">Use una prioridad negativa para empezar desde la parte posterior.</span><span class="sxs-lookup"><span data-stu-id="7953e-182">Use a negative priority to begin from the back.</span></span> <span data-ttu-id="7953e-183">Las prioridades mayores que los límites se obtienen y se establecen en la prioridad máxima (o mínima si es negativa).</span><span class="sxs-lookup"><span data-stu-id="7953e-183">Priorities greater than than bounds will get and set to the maximum (or minimum if negative) priority.</span></span> <span data-ttu-id="7953e-184">Además, tenga en cuenta que si cambia la prioridad, tendrá que volver a capturar una nueva copia del objeto en esa nueva ubicación de prioridad si desea realizar más cambios en ella.</span><span class="sxs-lookup"><span data-stu-id="7953e-184">Also note that if you change the priority, you have to re-fetch a new copy of the object at that new priority location if you want to make further changes to it.</span></span> <span data-ttu-id="7953e-185">Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="7953e-185">Read-only.</span></span>

      <span data-ttu-id="7953e-186">\[[Conjunto de API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7953e-186">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: priority
    fullName: priority
    langs:
      - typeScript
    type: property
    syntax:
      content: 'priority: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.ConditionalFormat#set:member(1)'
    summary: '<span data-ttu-id="7953e-187">Establece varias propiedades de un objeto al mismo tiempo.</span><span class="sxs-lookup"><span data-stu-id="7953e-187">Sets multiple properties of an object at the same time.</span></span> <span data-ttu-id="7953e-188">Puede pasar un objeto sin formato con las propiedades apropiadas o cualquier otro objeto de la API del mismo tipo.</span><span class="sxs-lookup"><span data-stu-id="7953e-188">You can pass either a plain object with the appropriate properties, or another API object of the same type.</span></span>'
    remarks: |-
      <span data-ttu-id="7953e-189">Este método tiene la siguiente firma adicional:</span><span class="sxs-lookup"><span data-stu-id="7953e-189">This method has the following additional signature:</span></span>

      `set(properties: Excel.ConditionalFormat): void`
    name: 'set(properties, options)'
    fullName: 'set(properties, options)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Interfaces.ConditionalFormatUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: <span data-ttu-id="7953e-190">Objeto de JavaScript con propiedades que se estructuran de forma isomórfico a las propiedades del objeto en el que se llama al método.</span><span class="sxs-lookup"><span data-stu-id="7953e-190">A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.</span></span>
          type:
            - 'excel!Excel.Interfaces.ConditionalFormatUpdateData:interface'
        - id: options
          description: <span data-ttu-id="7953e-191">Proporciona una opción para suprimir errores si el objeto Properties intenta establecer propiedades de solo lectura.</span><span class="sxs-lookup"><span data-stu-id="7953e-191">Provides an option to suppress errors if the properties object tries to set any read-only properties.</span></span>
          type:
            - 'excel!OfficeExtension.UpdateOptions:interface'
  - uid: 'excel!Excel.ConditionalFormat#set:member(2)'
    summary: '<span data-ttu-id="7953e-192">Establece varias propiedades en el objeto al mismo tiempo, basándose en un objeto cargado existente.</span><span class="sxs-lookup"><span data-stu-id="7953e-192">Sets multiple properties on the object at the same time, based on an existing loaded object.</span></span>'
    name: set(properties)
    fullName: set(properties)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Excel.ConditionalFormat): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - 'excel!Excel.ConditionalFormat:class'
  - uid: 'excel!Excel.ConditionalFormat#stopIfTrue:member'
    summary: |-
      <span data-ttu-id="7953e-193">Si se cumplen las condiciones de este formato condicional, los formatos de menor prioridad no surtirán efecto en esa celda.</span><span class="sxs-lookup"><span data-stu-id="7953e-193">If the conditions of this conditional format are met, no lower-priority formats shall take effect on that cell.</span></span> <span data-ttu-id="7953e-194">Null en barras de colorscales, conjuntos de iconos y como no hay ningún concepto de StopIfTrue para estos</span><span class="sxs-lookup"><span data-stu-id="7953e-194">Null on databars, icon sets, and colorscales as there's no concept of StopIfTrue for these</span></span>

      <span data-ttu-id="7953e-195">\[[Conjunto de API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7953e-195">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: stopIfTrue
    fullName: stopIfTrue
    langs:
      - typeScript
    type: property
    syntax:
      content: 'stopIfTrue: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.ConditionalFormat#textComparison:member'
    summary: |-
      <span data-ttu-id="7953e-196">Devuelve las propiedades de formato condicional de texto específico si el formato condicional actual es un tipo de texto.</span><span class="sxs-lookup"><span data-stu-id="7953e-196">Returns the specific text conditional format properties if the current conditional format is a text type.</span></span> <span data-ttu-id="7953e-197">Por ejemplo, para dar formato a celdas que coincidan con la palabra "texto".</span><span class="sxs-lookup"><span data-stu-id="7953e-197">For example to format cells matching the word "Text".</span></span> <span data-ttu-id="7953e-198">Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="7953e-198">Read-only.</span></span>

      <span data-ttu-id="7953e-199">\[[Conjunto de API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7953e-199">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: textComparison
    fullName: textComparison
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly textComparison: Excel.TextConditionalFormat;'
      return:
        type:
          - 'excel!Excel.TextConditionalFormat:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="7953e-200">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="7953e-200">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const range = sheet.getRange("B16:D18");
              const conditionalFormat = range.conditionalFormats
                  .add(Excel.ConditionalFormatType.containsText);
              conditionalFormat.textComparison.format.font.color = "red";
              conditionalFormat.textComparison.rule = { operator: Excel.ConditionalTextOperator.contains, text: "Delayed" };

              await context.sync();
          });
          ```
  - uid: 'excel!Excel.ConditionalFormat#textComparisonOrNullObject:member'
    summary: |-
      <span data-ttu-id="7953e-201">Devuelve las propiedades de formato condicional de texto específico si el formato condicional actual es un tipo de texto.</span><span class="sxs-lookup"><span data-stu-id="7953e-201">Returns the specific text conditional format properties if the current conditional format is a text type.</span></span> <span data-ttu-id="7953e-202">Por ejemplo, para dar formato a celdas que coincidan con la palabra "texto".</span><span class="sxs-lookup"><span data-stu-id="7953e-202">For example to format cells matching the word "Text".</span></span> <span data-ttu-id="7953e-203">Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="7953e-203">Read-only.</span></span>

      <span data-ttu-id="7953e-204">\[[Conjunto de API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7953e-204">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: textComparisonOrNullObject
    fullName: textComparisonOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly textComparisonOrNullObject: Excel.TextConditionalFormat;'
      return:
        type:
          - 'excel!Excel.TextConditionalFormat:class'
  - uid: 'excel!Excel.ConditionalFormat#toJSON:member(1)'
    summary: '<span data-ttu-id="7953e-205">Reemplaza el método JavaScript `toJSON()` para proporcionar un resultado más útil cuando se pasa un objeto API a`JSON.stringify()`</span><span class="sxs-lookup"><span data-stu-id="7953e-205">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id="7953e-206">.</span><span class="sxs-lookup"><span data-stu-id="7953e-206"></span></span> <span data-ttu-id="7953e-207">(`JSON.stringify`</span><span class="sxs-lookup"><span data-stu-id="7953e-207"></span></span><!-- --><span data-ttu-id="7953e-208">, a su vez, llama `toJSON` al método del objeto que se le pasa.) Mientras que el objeto Excel. ConditionalFormat original es un objeto API, `toJSON` el método devuelve un objeto JavaScript sin formato (escrito como`Excel.Interfaces.ConditionalFormatData`</span><span class="sxs-lookup"><span data-stu-id="7953e-208">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original Excel.ConditionalFormat object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ConditionalFormatData`</span></span><!-- --><span data-ttu-id="7953e-209">) que contiene copias rasas de las propiedades secundarias cargadas del objeto original.</span><span class="sxs-lookup"><span data-stu-id="7953e-209">) that contains shallow copies of any loaded child properties from the original object.</span></span>'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.ConditionalFormatData;'
      return:
        type:
          - 'excel!Excel.Interfaces.ConditionalFormatData:interface'
        description: ''
  - uid: 'excel!Excel.ConditionalFormat#topBottom:member'
    summary: |-
      <span data-ttu-id="7953e-210">Devuelve las propiedades de formato condicional superior o inferior si el formato condicional actual es un tipo de parte inferior.</span><span class="sxs-lookup"><span data-stu-id="7953e-210">Returns the Top/Bottom conditional format properties if the current conditional format is an TopBottom type.</span></span> <span data-ttu-id="7953e-211">Por ejemplo, para dar formato al 10% superior o a los 10 elementos inferiores.</span><span class="sxs-lookup"><span data-stu-id="7953e-211">For example to format the top 10% or bottom 10 items.</span></span> <span data-ttu-id="7953e-212">Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="7953e-212">Read-only.</span></span>

      <span data-ttu-id="7953e-213">\[[Conjunto de API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7953e-213">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: topBottom
    fullName: topBottom
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly topBottom: Excel.TopBottomConditionalFormat;'
      return:
        type:
          - 'excel!Excel.TopBottomConditionalFormat:class'
  - uid: 'excel!Excel.ConditionalFormat#topBottomOrNullObject:member'
    summary: |-
      <span data-ttu-id="7953e-214">Devuelve las propiedades de formato condicional superior o inferior si el formato condicional actual es un tipo de parte inferior.</span><span class="sxs-lookup"><span data-stu-id="7953e-214">Returns the Top/Bottom conditional format properties if the current conditional format is an TopBottom type.</span></span> <span data-ttu-id="7953e-215">Por ejemplo, para dar formato al 10% superior o a los 10 elementos inferiores.</span><span class="sxs-lookup"><span data-stu-id="7953e-215">For example to format the top 10% or bottom 10 items.</span></span> <span data-ttu-id="7953e-216">Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="7953e-216">Read-only.</span></span>

      <span data-ttu-id="7953e-217">\[[Conjunto de API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7953e-217">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: topBottomOrNullObject
    fullName: topBottomOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly topBottomOrNullObject: Excel.TopBottomConditionalFormat;'
      return:
        type:
          - 'excel!Excel.TopBottomConditionalFormat:class'
  - uid: 'excel!Excel.ConditionalFormat#type:member'
    summary: |-
      <span data-ttu-id="7953e-218">Un tipo de formato condicional.</span><span class="sxs-lookup"><span data-stu-id="7953e-218">A type of conditional format.</span></span> <span data-ttu-id="7953e-219">Solo se puede establecer una a la vez.</span><span class="sxs-lookup"><span data-stu-id="7953e-219">Only one can be set at a time.</span></span> <span data-ttu-id="7953e-220">Solo lectura.</span><span class="sxs-lookup"><span data-stu-id="7953e-220">Read-only.</span></span>

      <span data-ttu-id="7953e-221">\[[Conjunto de API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="7953e-221">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: type
    fullName: type
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly type: Excel.ConditionalFormatType | "Custom" | "DataBar" | "ColorScale" | "IconSet" | "TopBottom" | "PresetCriteria" | "ContainsText" | "CellValue";'
      return:
        type:
          - 'excel!Excel.ConditionalFormat#type~0:complex'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="7953e-222">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="7953e-222">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const worksheetRange = sheet.getRange();
              worksheetRange.conditionalFormats.load("type");

              await context.sync();

              let cfRangePairs: { cf: Excel.ConditionalFormat, range: Excel.Range }[] = [];
              worksheetRange.conditionalFormats.items.forEach(item => {
                  cfRangePairs.push({
                      cf: item,
                      range: item.getRange().load("address")
                  });
              });

              await context.sync();

              if (cfRangePairs.length > 0) {
                  cfRangePairs.forEach(item => {
                      console.log(item.cf.type);
                  });
              } else {
                  console.log("No conditional formats applied.");
              }
          });
          ```
references:
  - uid: 'excel!OfficeExtension.ClientObject:class'
    name: OfficeExtension.ClientObject
  - uid: 'excel!Excel.CellValueConditionalFormat:class'
    name: Excel.CellValueConditionalFormat
  - uid: 'excel!Excel.ColorScaleConditionalFormat:class'
    name: Excel.ColorScaleConditionalFormat
  - uid: 'excel!Excel.RequestContext:class'
    name: RequestContext
  - uid: 'excel!Excel.CustomConditionalFormat:class'
    name: Excel.CustomConditionalFormat
  - uid: 'excel!Excel.DataBarConditionalFormat:class'
    name: Excel.DataBarConditionalFormat
  - uid: 'excel!Excel.Range:class'
    name: Excel.Range
  - uid: 'excel!Excel.IconSetConditionalFormat:class'
    name: Excel.IconSetConditionalFormat
  - uid: 'excel!Excel.ConditionalFormat:class'
    name: Excel.ConditionalFormat
  - uid: 'excel!Excel.Interfaces.ConditionalFormatLoadOptions:interface'
    name: Excel.Interfaces.ConditionalFormatLoadOptions
  - uid: 'excel!Excel.PresetCriteriaConditionalFormat:class'
    name: Excel.PresetCriteriaConditionalFormat
  - uid: 'excel!Excel.Interfaces.ConditionalFormatUpdateData:interface'
    name: Interfaces.ConditionalFormatUpdateData
  - uid: 'excel!OfficeExtension.UpdateOptions:interface'
    name: OfficeExtension.UpdateOptions
  - uid: 'excel!Excel.TextConditionalFormat:class'
    name: Excel.TextConditionalFormat
  - uid: 'excel!Excel.Interfaces.ConditionalFormatData:interface'
    name: Excel.Interfaces.ConditionalFormatData
  - uid: 'excel!Excel.TopBottomConditionalFormat:class'
    name: Excel.TopBottomConditionalFormat
  - uid: 'excel!Excel.ConditionalFormat#type~0:complex'
    name: Excel.ConditionalFormatType | "Custom" | "DataBar" | "ColorScale" | "IconSet" | "TopBottom" | "PresetCriteria" | "ContainsText" | "CellValue"
    fullName: Excel.ConditionalFormatType | "Custom" | "DataBar" | "ColorScale" | "IconSet" | "TopBottom" | "PresetCriteria" | "ContainsText" | "CellValue"
    spec.typeScript:
      - uid: 'excel!Excel.ConditionalFormatType:enum'
        name: Excel.ConditionalFormatType
        fullName: Excel.ConditionalFormatType
      - name: ' | "Custom" | "DataBar" | "ColorScale" | "IconSet" | "TopBottom" | "PresetCriteria" | "ContainsText" | "CellValue"'
        fullName: ' | "Custom" | "DataBar" | "ColorScale" | "IconSet" | "TopBottom" | "PresetCriteria" | "ContainsText" | "CellValue"'