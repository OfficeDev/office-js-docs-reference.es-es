### YamlMime:UniversalReference
items:
  - uid: excel.Excel.CustomXmlPartCollection
    summary: |-
      <span data-ttu-id="397c0-101">Una colección de elementos XML personalizados.</span><span class="sxs-lookup"><span data-stu-id="397c0-101">A collection of custom XML parts.</span></span>

      <span data-ttu-id="397c0-102">\[[Conjunto de API: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="397c0-102">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: Excel.CustomXmlPartCollection
    fullName: Excel.CustomXmlPartCollection
    langs:
      - typeScript
    type: class
    extends:
      - 'OfficeExtension.ClientObject '
    package: excel
    children:
      - excel.Excel.CustomXmlPartCollection.add
      - excel.Excel.CustomXmlPartCollection.context
      - excel.Excel.CustomXmlPartCollection.getByNamespace
      - excel.Excel.CustomXmlPartCollection.getCount
      - excel.Excel.CustomXmlPartCollection.getItem
      - excel.Excel.CustomXmlPartCollection.getItemOrNullObject
      - excel.Excel.CustomXmlPartCollection.items
      - excel.Excel.CustomXmlPartCollection.load
      - excel.Excel.CustomXmlPartCollection.load_1
      - excel.Excel.CustomXmlPartCollection.load_2
      - excel.Excel.CustomXmlPartCollection.toJSON
  - uid: excel.Excel.CustomXmlPartCollection.add
    summary: |-
      <span data-ttu-id="397c0-103">Se agrega un nuevo elemento XML personalizado al libro.</span><span class="sxs-lookup"><span data-stu-id="397c0-103">Adds a new custom XML part to the workbook.</span></span>

      <span data-ttu-id="397c0-104">\[[Conjunto de API: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="397c0-104">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: add(xml)
    fullName: add(xml)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'add(xml: string): Excel.CustomXmlPart;'
      return:
        type:
          - excel.Excel.CustomXmlPart
        description: |-


          #### <a name="examples"></a><span data-ttu-id="397c0-105">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="397c0-105">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              // You must have the xmlns attribute to populate the 
              // CustomXml.namespaceUri property.
              const originalXml = "<Reviewers xmlns='http://schemas.contoso.com/review/1.0'><Reviewer>Juan</Reviewer><Reviewer>Hong</Reviewer><Reviewer>Sally</Reviewer></Reviewers>";
              const customXmlPart = context.workbook.customXmlParts.add(originalXml);
              customXmlPart.load("id");
              const xmlBlob = customXmlPart.getXml();

              await context.sync();

              const readableXml = addLineBreaksToXML(xmlBlob.value);
              $("#display-xml").text(readableXml);

              // Store the XML part's ID in a setting.
              const settings = context.workbook.settings;
              settings.add("ContosoReviewXmlPartId", customXmlPart.id);

              await context.sync();
          });
          ```
      parameters:
        - id: xml
          description: <span data-ttu-id="397c0-106">Contenido XML.</span><span class="sxs-lookup"><span data-stu-id="397c0-106">XML content.</span></span> <span data-ttu-id="397c0-107">Debe ser un fragmento XML válido.</span><span class="sxs-lookup"><span data-stu-id="397c0-107">Must be a valid XML fragment.</span></span>
          type:
            - string
  - uid: excel.Excel.CustomXmlPartCollection.context
    summary: <span data-ttu-id="397c0-108">Contexto de la solicitud asociado al objeto.</span><span class="sxs-lookup"><span data-stu-id="397c0-108">The request context associated with the object.</span></span> <span data-ttu-id="397c0-109">Esto conecta el proceso del complemento con el proceso de la aplicación host de Office.</span><span class="sxs-lookup"><span data-stu-id="397c0-109">This connects the add-in's process to the Office host application's process.</span></span>
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - excel.Excel.RequestContext
  - uid: excel.Excel.CustomXmlPartCollection.getByNamespace
    summary: |-
      <span data-ttu-id="397c0-110">Obtiene una nueva colección con ámbito de elementos XML personalizados cuyos espacios de nombres coinciden con el espacio de nombres determinado.</span><span class="sxs-lookup"><span data-stu-id="397c0-110">Gets a new scoped collection of custom XML parts whose namespaces match the given namespace.</span></span>

      <span data-ttu-id="397c0-111">\[[Conjunto de API: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="397c0-111">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getByNamespace(namespaceUri)
    fullName: getByNamespace(namespaceUri)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getByNamespace(namespaceUri: string): Excel.CustomXmlPartScopedCollection;'
      return:
        type:
          - excel.Excel.CustomXmlPartScopedCollection
        description: |-


          #### <a name="examples"></a><span data-ttu-id="397c0-112">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="397c0-112">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              $("#display-xml").text("");
              const contosoNamespace = "http://schemas.contoso.com/review/1.0";
              const customXmlParts = context.workbook.customXmlParts;
              const filteredXmlParts = customXmlParts.getByNamespace(contosoNamespace);
              const numberOfPartsInNamespace = filteredXmlParts.getCount();

              await context.sync();

              if (numberOfPartsInNamespace.value == 1) {
                  const onlyXmlPartInNamespace = filteredXmlParts.getOnlyItem();
                  const xmlBlob = onlyXmlPartInNamespace.getXml();

                  await context.sync();

                  // Make it a bit more readable.
                  const readableXml = xmlBlob.value.replace(/></g, ">\n<");

                  $("#display-xml").text(`The only XML part in the namespace ${contosoNamespace} is:
                      ${readableXml}`);

              } else {
                  console.log(`There are ${numberOfPartsInNamespace.value} XML parts with namespace ${contosoNamespace}. There should be exactly 1.`);
              }        

              await context.sync();
          });
          ```
      parameters:
        - id: namespaceUri
          description: '<span data-ttu-id="397c0-113">Debe ser un URI de esquema completo; por ejemplo, "http://schemas.contoso.com/review/1.0".</span><span class="sxs-lookup"><span data-stu-id="397c0-113">This must be a fully qualified schema URI; for example, "http://schemas.contoso.com/review/1.0".</span></span>'
          type:
            - string
  - uid: excel.Excel.CustomXmlPartCollection.getCount
    summary: |-
      <span data-ttu-id="397c0-114">Obtiene el número de elementos CustomXml de la colección.</span><span class="sxs-lookup"><span data-stu-id="397c0-114">Gets the number of CustomXml parts in the collection.</span></span>

      <span data-ttu-id="397c0-115">\[[Conjunto de API: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="397c0-115">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getCount()
    fullName: getCount()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCount(): OfficeExtension.ClientResult<number>;'
      return:
        type:
          - OfficeExtension.ClientResult<number>
        description: ''
  - uid: excel.Excel.CustomXmlPartCollection.getItem
    summary: |-
      <span data-ttu-id="397c0-116">Obtiene un elemento XML personalizado a partir de su identificador.</span><span class="sxs-lookup"><span data-stu-id="397c0-116">Gets a custom XML part based on its ID.</span></span>

      <span data-ttu-id="397c0-117">\[[Conjunto de API: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="397c0-117">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getItem(id)
    fullName: getItem(id)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItem(id: string): Excel.CustomXmlPart;'
      return:
        type:
          - excel.Excel.CustomXmlPart
        description: |-


          #### <a name="examples"></a><span data-ttu-id="397c0-118">Ejemplos</span><span class="sxs-lookup"><span data-stu-id="397c0-118">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const settings = context.workbook.settings;
              const xmlPartIDSetting = settings.getItemOrNullObject("ContosoReviewXmlPartId").load("value");
              await context.sync();

              if (xmlPartIDSetting.value) {   
                  const customXmlPart = context.workbook.customXmlParts.getItem(xmlPartIDSetting.value);

                  // The setXml method does a whole-for-whole replacement 
                  // of the entire XML.
                  customXmlPart.setXml("<Reviewers xmlns='http://schemas.contoso.com/review/1.0'><Reviewer>John</Reviewer><Reviewer>Hitomi</Reviewer></Reviewers>");
                  const xmlBlob = customXmlPart.getXml();
                  await context.sync();

                  const readableXml = addLineBreaksToXML(xmlBlob.value);
                  $("#display-xml").text(readableXml);
                  await context.sync();
              }
          });
          ```
      parameters:
        - id: id
          description: <span data-ttu-id="397c0-119">IDENTIFICADOR del objeto que se va a recuperar.</span><span class="sxs-lookup"><span data-stu-id="397c0-119">ID of the object to be retrieved.</span></span>
          type:
            - string
  - uid: excel.Excel.CustomXmlPartCollection.getItemOrNullObject
    summary: |-
      <span data-ttu-id="397c0-120">Obtiene un elemento XML personalizado a partir de su identificador.</span><span class="sxs-lookup"><span data-stu-id="397c0-120">Gets a custom XML part based on its ID.</span></span> <span data-ttu-id="397c0-121">Si el objeto CustomXmlPart no existe, la propiedad isNull del objeto devuelto será true.</span><span class="sxs-lookup"><span data-stu-id="397c0-121">If the CustomXmlPart does not exist, the return object's isNull property will be true.</span></span>

      <span data-ttu-id="397c0-122">\[[Conjunto de API: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="397c0-122">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getItemOrNullObject(id)
    fullName: getItemOrNullObject(id)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemOrNullObject(id: string): Excel.CustomXmlPart;'
      return:
        type:
          - excel.Excel.CustomXmlPart
        description: ''
      parameters:
        - id: id
          description: <span data-ttu-id="397c0-123">IDENTIFICADOR del objeto que se va a recuperar.</span><span class="sxs-lookup"><span data-stu-id="397c0-123">ID of the object to be retrieved.</span></span>
          type:
            - string
  - uid: excel.Excel.CustomXmlPartCollection.items
    summary: <span data-ttu-id="397c0-124">Obtiene los elementos secundarios cargados en esta colección.</span><span class="sxs-lookup"><span data-stu-id="397c0-124">Gets the loaded child items in this collection.</span></span>
    name: items
    fullName: items
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly items: Excel.CustomXmlPart[];'
      return:
        type:
          - 'Excel.CustomXmlPart[]'
  - uid: excel.Excel.CustomXmlPartCollection.load
    summary: '<span data-ttu-id="397c0-125">Pone en cola un comando para cargar las propiedades especificadas del objeto.</span><span class="sxs-lookup"><span data-stu-id="397c0-125">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="397c0-126">Antes de leer las propiedades, debe llamar a "context.sync()".</span><span class="sxs-lookup"><span data-stu-id="397c0-126">You must call "context.sync()" before reading the properties.</span></span>'
    remarks: |-
      <span data-ttu-id="397c0-127">Además de esta firma, este método tiene las siguientes firmas:</span><span class="sxs-lookup"><span data-stu-id="397c0-127">In addition to this signature, this method has the following signatures:</span></span>

      <span data-ttu-id="397c0-128">`load(option?: string | string[]): Excel.CustomXmlPartCollection`-Donde opción es una cadena delimitada por comas o una matriz de cadenas que especifican las propiedades que se van a cargar.</span><span class="sxs-lookup"><span data-stu-id="397c0-128">`load(option?: string | string[]): Excel.CustomXmlPartCollection` - Where option is a comma-delimited string or an array of strings that specify the properties to load.</span></span>

      <span data-ttu-id="397c0-129">`load(option?: { select?: string; expand?: string; }): Excel.CustomXmlPartCollection`-Where opción. Select es una cadena delimitada por comas que especifica las propiedades que se van a cargar y Options. Expand es una cadena delimitada por comas que especifica las propiedades de navegación que se deben cargar.</span><span class="sxs-lookup"><span data-stu-id="397c0-129">`load(option?: { select?: string; expand?: string; }): Excel.CustomXmlPartCollection` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>

      <span data-ttu-id="397c0-130">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.CustomXmlPartCollection`-Solo disponible en tipos de colección.</span><span class="sxs-lookup"><span data-stu-id="397c0-130">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.CustomXmlPartCollection` - Only available on collection types.</span></span> <span data-ttu-id="397c0-131">Es similar a la firma anterior.</span><span class="sxs-lookup"><span data-stu-id="397c0-131">It is similar to the preceding signature.</span></span> <span data-ttu-id="397c0-132">Option. Top especifica el número máximo de elementos de colección que se pueden incluir en el resultado.</span><span class="sxs-lookup"><span data-stu-id="397c0-132">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="397c0-133">La opción. SKIP especifica el número de elementos que se deben omitir y que no se incluyen en el resultado.</span><span class="sxs-lookup"><span data-stu-id="397c0-133">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="397c0-134">Si se especifica Option. Top, el conjunto de resultados se iniciará después de omitir el número especificado de elementos.</span><span class="sxs-lookup"><span data-stu-id="397c0-134">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: Excel.Interfaces.CustomXmlPartCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions): Excel.CustomXmlPartCollection;'
      return:
        type:
          - excel.Excel.CustomXmlPartCollection
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - Excel.Interfaces.CustomXmlPartCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions
  - uid: excel.Excel.CustomXmlPartCollection.load_1
    summary: <span data-ttu-id="397c0-135">Pone en cola un comando para cargar las propiedades especificadas del objeto.</span><span class="sxs-lookup"><span data-stu-id="397c0-135">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="397c0-136">Debe llamar `context.sync()` antes de leer las propiedades.</span><span class="sxs-lookup"><span data-stu-id="397c0-136">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.CustomXmlPartCollection;'
      return:
        type:
          - excel.Excel.CustomXmlPartCollection
        description: ''
      parameters:
        - id: propertyNames
          description: <span data-ttu-id="397c0-137">Una cadena delimitada por comas o una matriz de cadenas que especifican las propiedades que se van a cargar.</span><span class="sxs-lookup"><span data-stu-id="397c0-137">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
          type:
            - 'string | string[]'
  - uid: excel.Excel.CustomXmlPartCollection.load_2
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: OfficeExtension.LoadOption): Excel.CustomXmlPartCollection;'
      return:
        type:
          - excel.Excel.CustomXmlPartCollection
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - OfficeExtension.LoadOption
  - uid: excel.Excel.CustomXmlPartCollection.toJSON
    summary: '<span data-ttu-id="397c0-138">Reemplaza el método JavaScript `toJSON()` para proporcionar un resultado más útil cuando se pasa un objeto API a`JSON.stringify()`</span><span class="sxs-lookup"><span data-stu-id="397c0-138">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id="397c0-139">.</span><span class="sxs-lookup"><span data-stu-id="397c0-139"></span></span> <span data-ttu-id="397c0-140">(`JSON.stringify`</span><span class="sxs-lookup"><span data-stu-id="397c0-140"></span></span><!-- --><span data-ttu-id="397c0-141">, a su vez, llama `toJSON` al método del objeto que se le pasa.) Mientras que el `Excel.CustomXmlPartCollection` objeto original es un objeto API, `toJSON` el método devuelve un objeto JavaScript sin formato (escrito como`Excel.Interfaces.CustomXmlPartCollectionData`</span><span class="sxs-lookup"><span data-stu-id="397c0-141">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original `Excel.CustomXmlPartCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.CustomXmlPartCollectionData`</span></span><!-- --><span data-ttu-id="397c0-142">) que contiene una matriz "items" con copias rasas de las propiedades cargadas de los elementos de la colección.</span><span class="sxs-lookup"><span data-stu-id="397c0-142">) that contains an "items" array with shallow copies of any loaded properties from the collection''s items.</span></span>'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.CustomXmlPartCollectionData;'
      return:
        type:
          - excel.Excel.Interfaces.CustomXmlPartCollectionData
        description: ''