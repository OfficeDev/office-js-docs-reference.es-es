### YamlMime:UniversalReference
items:
  - uid: 'outlook!Office.CustomProperties:interface'
    summary: |-
      El objeto `CustomProperties` representa las propiedades personalizadas que son específicas de un elemento determinado y de un complemento de correo de Outlook concreto. Por ejemplo, puede ser necesario que un complemento de correo guarde algunos datos que son específicos del mensaje de correo electrónico actual que ha activado el complemento. Si el usuario vuelve a visitar el mismo mensaje y activa el complemento de correo de nuevo, el complemento será capaz de recuperar los datos que se han guardado como propiedades personalizadas. **Importante**: la longitud máxima de un `CustomProperties` objeto JSON es de 2500 caracteres.

      Como Outlook en Mac no almacena las propiedades personalizadas en caché, si la red del usuario deja de funcionar, los complementos de correo no pueden tener acceso a sus propiedades personalizadas.
    remarks: |-
      ** <!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      ** <!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: redacción o lectura
    name: Office.CustomProperties
    fullName: Office.CustomProperties
    langs:
      - typeScript
    type: interface
    package: outlook!
    children:
      - 'outlook!Office.CustomProperties#get:member(1)'
      - 'outlook!Office.CustomProperties#getAll:member(1)'
      - 'outlook!Office.CustomProperties#remove:member(1)'
      - 'outlook!Office.CustomProperties#saveAsync:member(1)'
      - 'outlook!Office.CustomProperties#set:member(1)'
  - uid: 'outlook!Office.CustomProperties#get:member(1)'
    summary: Devuelve el valor de la propiedad personalizada especificada.
    remarks: |-
      ** <!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      ** <!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: redacción o lectura

      #### <a name="examples"></a>Ejemplos

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/15-item-custom-properties/load-set-get-save.yaml
      var propertyName = $("#propertyName").val();
      var propertyValue = customProps.get(propertyName);
      $("#propertyValue").val(propertyValue);
      console.log(`The value of custom property "${propertyName}" is "${propertyValue}".`);
      ```
    name: get(name)
    fullName: get(name)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'get(name: string): any;'
      return:
        type:
          - any
        description: Valor de la propiedad personalizada especificada.
      parameters:
        - id: name
          description: Nombre de la propiedad personalizada que se devolverá.
          type:
            - string
  - uid: 'outlook!Office.CustomProperties#getAll:member(1)'
    summary: |-
      Devuelve un objeto con todas las propiedades personalizadas en una colección de pares nombre-valor. Los siguientes son equivalentes.

      `customProps.get("name")`

      `var dictionary = customProps.getAll(); dictionary["name"]`

      Puede recorrer en iteración el objeto Dictionary para detectar todos `names` y`values`<!-- -->.

      \[[Conjunto de API: vista previa de buzón](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      ** <!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      ** <!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: redacción o lectura
    isPreview: true
    name: getAll()
    fullName: getAll()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getAll(): any;'
      return:
        type:
          - any
        description: Un objeto con todas las propiedades personalizadas en una colección de pares nombre-valor.
  - uid: 'outlook!Office.CustomProperties#remove:member(1)'
    summary: |-
      Elimina la propiedad especificada de la colección de propiedades personalizadas.

      Para que la eliminación de la propiedad sea permanente, debe llamar al método `saveAsync` del objeto `CustomProperties`.
    remarks: |-
      ** <!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      ** <!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: redacción o lectura

      #### <a name="examples"></a>Ejemplos

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/15-item-custom-properties/load-set-get-save.yaml
      var propertyName = $("#propertyName").val();
      customProps.remove(propertyName);
      console.log(`Custom property "${propertyName}" removed.`);
      ```
    name: remove(name)
    fullName: remove(name)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'remove(name: string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: name
          description: La `name` de la propiedad que se va a quitar.
          type:
            - string
  - uid: 'outlook!Office.CustomProperties#saveAsync:member(1)'
    summary: |-
      Guarda propiedades personalizadas específicas del elemento en el servidor.

      Debe llamar al método `saveAsync` para almacenar cualquier cambio realizado con el método `set` o el método `remove` del objeto `CustomProperties`. La acción de guardado es asincrónica.

      Es recomendable que la función de devolución de llamada Compruebe y controle los errores de`saveAsync`<!-- -->. En particular, un complemento de lectura puede activarse mientras el usuario está en un estado de conexión en un formulario de lectura y, posteriormente, se desconecta al usuario. Si el complemento llama a `saveAsync` en el estado desconectado, `saveAsync` devolverá un error. El método de devolución de llamada debe controlar este error de forma adecuada.
    remarks: |-
      ** <!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      ** <!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: redacción o lectura

      #### <a name="examples"></a>Ejemplos

      ```javascript
      // The following JavaScript code sample shows how to asynchronously use
      // the loadCustomPropertiesAsync method to load custom properties that
      // are specific to the current item, and the saveAsync method to save
      // these properties back to the server. After loading the custom properties,
      // the code sample uses the get method to read the custom property myProp,
      // the set method to write the custom property myProp, and then finally
      // calls the saveAsync method to save the custom properties.

      // The initialize function is required for all add-ins.
      Office.initialize = function () {
          // Checks for the DOM to load using the jQuery ready function.
          $(document).ready(function () {
              // After the DOM is loaded, add-in-specific code can run.
              var item = Office.context.mailbox.item;
              item.loadCustomPropertiesAsync(customPropsCallback);
          });
      };

      function customPropsCallback(asyncResult) {
          var customProps = asyncResult.value;
          var myProp = customProps.get("myProp");
          console.log("myProp: " + myProp); // First run on current item will return `undefined`.

          // Set myProp custom property.
          customProps.set("myProp", "value");
          customProps.saveAsync(saveCallback);
      }

      function saveCallback(asyncResult) {
          if (asyncResult.status === Office.AsyncResultStatus.Failed) {
              console.error(asyncResult.error.message);
          }
          else {
              // Async call to save custom properties completed.
              // Proceed to do the appropriate for your add-in.
          }
      }
      ```
    name: 'saveAsync(callback, asyncContext)'
    fullName: 'saveAsync(callback, asyncContext)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'saveAsync(callback?: (asyncResult: Office.AsyncResult<void>) => void, asyncContext?: any): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: 'Opcional. Cuando el método finaliza, la función que se pasa en el `callback` parámetro se llama con un único parámetro de tipo`Office.AsyncResult`<!-- -->.'
          type:
            - 'outlook!Office.CustomProperties#saveAsync~0:complex'
        - id: asyncContext
          description: Opcional. Cualquier dato de estado que se pasa al método de devolución de llamada.
          type:
            - any
  - uid: 'outlook!Office.CustomProperties#set:member(1)'
    summary: |-
      Configura la propiedad especificada al valor especificado.

      El método `set` configura la propiedad especificada al valor especificado. Debe usar el método `saveAsync` para guardar la propiedad en el servidor.

      The `set` method creates a new property if the specified property does not already exist; otherwise, the existing value is replaced with the new value. The `value` parameter can be of any type; however, it is always passed to the server as a string.
    remarks: |-
      ** <!-- --> [Nivel de permisos mínimo](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      ** <!-- --> [Modo de Outlook aplicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: redacción o lectura

      #### <a name="examples"></a>Ejemplos

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/15-item-custom-properties/load-set-get-save.yaml
      var propertyName = $("#propertyName").val();
      var propertyValue = $("#propertyValue").val();
      customProps.set(propertyName, propertyValue);
      console.log(`Custom property "${propertyName}" set to value "${propertyValue}".`);
      ```
    name: 'set(name, value)'
    fullName: 'set(name, value)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(name: string, value: string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: name
          description: Nombre de la propiedad que se va a configurar.
          type:
            - string
        - id: value
          description: Valor de la propiedad que se va a configurar.
          type:
            - string
references:
  - uid: 'outlook!Office.CustomProperties#saveAsync~0:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void