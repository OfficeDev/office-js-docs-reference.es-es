### YamlMime:TSType
name: Office.AppointmentCompose
uid: outlook!Office.AppointmentCompose:interface
package: outlook!
fullName: Office.AppointmentCompose
summary: >-
  El modo de organizador de citas [de Office.context.mailbox.item](xref:outlook!Office.Item:interface)<!-- -->.


  **Importante:** Se trata de un objeto interno de Outlook, que no se expone directamente a través de interfaces existentes. Debe tratar esto como un modo de `Office.context.mailbox.item`<!-- -->. Consulte la página [Modelo de](https://docs.microsoft.com/office/dev/add-ins/reference/objectmodel/preview-requirement-set/office.context.mailbox.item) objetos para obtener más información.


  Interfaces primarias:


  - [ItemCompose](xref:outlook!Office.ItemCompose:interface)


  - [Appointment](xref:outlook!Office.Appointment:interface)
remarks: ''
isPreview: false
isDeprecated: false
type: interface
properties:
- name: body
  uid: outlook!Office.AppointmentCompose#body:member
  package: outlook!
  fullName: body
  summary: >-
    Obtiene un objeto que proporciona métodos para manipular el cuerpo de un elemento.


    \[[Conjunto de API: Mailbox 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Nivel de permiso mínimo:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Modo de Outlook aplicable:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Organizador de citas


    #### <a name="examples"></a>Ejemplos


    ```javascript

    // This example gets the body of the item as plain text.

    Office.context.mailbox.item.body.getAsync(
        "text",
        { asyncContext: "This is passed to the callback" },
        function callback(result) {
            // Do something with the result.
        });

    // The following is an example of an object that is passed as the result parameter to the callback function.

    {
        "value": "TEXT of whole body (including threads below)",
        "status": "succeeded",
        "asyncContext": "This is passed to the callback"
    }

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'body: Body;'
    return:
      type: <xref uid="outlook!Office.Body:interface" />
- name: categories
  uid: outlook!Office.AppointmentCompose#categories:member
  package: outlook!
  fullName: categories
  summary: >-
    Obtiene un objeto que proporciona métodos para administrar las categorías del elemento.


    \[[Conjunto de API: Mailbox 1.8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Nivel de permiso mínimo:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Modo de Outlook aplicable:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Organizador de citas


    #### <a name="examples"></a>Ejemplos


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/45-categories/work-with-categories.yaml

    Office.context.mailbox.item.categories.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        var categories = asyncResult.value;
        if (categories && categories.length > 0) {
          console.log("Categories assigned to this item:");
          console.log(JSON.stringify(categories));
        } else {
          console.log("There are no categories assigned to this item.");
        }
      } else {
        console.error(asyncResult.error);
      }
    });

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/45-categories/work-with-categories.yaml

    // Note: In order for you to successfully add a category,

    // it must be in the mailbox categories master list.


    Office.context.mailbox.masterCategories.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        var masterCategories = asyncResult.value;
        if (masterCategories && masterCategories.length > 0) {
          // Grab the first category from the master list.
          var categoryToAdd = [masterCategories[0].displayName];
          Office.context.mailbox.item.categories.addAsync(categoryToAdd, function(asyncResult) {
            if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
              console.log(`Successfully assigned category '${categoryToAdd}' to item.`);
            } else {
              console.log("categories.addAsync call failed with error: " + asyncResult.error.message);
            }
          });
        } else {
          console.log("There are no categories in the master list on this mailbox. You can add categories using Office.context.mailbox.masterCategories.addAsync.");
        }
      } else {
        console.error(asyncResult.error);
      }
    });

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/45-categories/work-with-categories.yaml

    Office.context.mailbox.item.categories.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        var categories = asyncResult.value;
        if (categories && categories.length > 0) {
          // Grab the first category assigned to this item.
          var categoryToRemove = [categories[0].displayName];
          Office.context.mailbox.item.categories.removeAsync(categoryToRemove, function(asyncResult) {
            if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
              console.log(`Successfully unassigned category '${categoryToRemove}' from this item.`);
            } else {
              console.log("categories.removeAsync call failed with error: " + asyncResult.error.message);
            }
          });
        } else {
          console.log("There are no categories assigned to this item.");
        }
      } else {
        console.error(asyncResult.error);
      }
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'categories: Categories;'
    return:
      type: <xref uid="outlook!Office.Categories:interface" />
- name: end
  uid: outlook!Office.AppointmentCompose#end:member
  package: outlook!
  fullName: end
  summary: >-
    Obtiene o establece la fecha y la hora de finalización de la cita.


    La propiedad es un objeto Time expresado como un valor de fecha y hora utc `end` (Hora universal [](xref:outlook!Office.Time:interface) coordinada). Puede usar el método para convertir el valor de la propiedad en la fecha y hora `convertToLocalClientTime` `end` locales del cliente.


    Si usa el método `Time.setAsync` para establecer la hora de finalización, use el método `convertToUtcClientTime` para convertir la hora local del cliente en un valor UTC para el servidor.


    **Importante:** En el cliente de Windows, no puedes usar esta propiedad para actualizar el final de una periodicidad.
  remarks: >-
    **[Nivel de permiso mínimo:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Modo de Outlook aplicable:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Organizador de citas


    #### <a name="examples"></a>Ejemplos


    ```javascript

    // The following example sets the end time of an appointment in compose mode by

    // using the `setAsync` method of the `Time` object.

    var endTime = new Date("3/14/2015");

    var options = {
        // Pass information that can be used in the callback.
        asyncContext: {verb: "Set"}
    };

    Office.context.mailbox.item.end.setAsync(endTime, options, function(result) {
        if (result.error) {
            console.debug(result.error);
        } else {
            // Access the asyncContext that was passed to the setAsync function.
            console.debug("End Time " + result.asyncContext.verb);
        }
    });

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-set-end-appointment-organizer.yaml

    Office.context.mailbox.item.end.getAsync((result) => {
      if (result.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Action failed with message ${result.error.message}`);
        return;
      }
      console.log(`Appointment ends: ${result.value}`);
    });

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-set-end-appointment-organizer.yaml

    Office.context.mailbox.item.start.getAsync((result) => {
      if (result.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Get start date failed with message ${result.error.message}`);
        return;
      }

      var end = result.value; // Set end to current start date and time.
      end.setDate(end.getDate() + 1); // Set end as 1 day later than start date.
      Office.context.mailbox.item.end.setAsync(end, (result) => {
        if (result.status !== Office.AsyncResultStatus.Succeeded) {
          console.error(`Set end date failed with message ${result.error.message}`);
          return;
        }
        console.log(`Successfully set end date and time to ${end}`);
      });
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'end: Time;'
    return:
      type: <xref uid="outlook!Office.Time:interface" />
- name: enhancedLocation
  uid: outlook!Office.AppointmentCompose#enhancedLocation:member
  package: outlook!
  fullName: enhancedLocation
  summary: >-
    Obtiene o establece las ubicaciones de la cita. La `enhancedLocation` propiedad devuelve un objeto [EnhancedLocation](xref:outlook!Office.EnhancedLocation:interface) que proporciona métodos para obtener, quitar o agregar ubicaciones en un elemento.


    \[[Conjunto de API: Mailbox 1.8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Nivel de permiso mínimo:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Modo de Outlook aplicable:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Organizador de citas


    #### <a name="examples"></a>Ejemplos


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-add-remove-enhancedlocation-appointment.yaml

    Office.context.mailbox.item.enhancedLocation.getAsync((result) => {
      if (result.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Failed to get locations. Error message: ${result.error.message}`);
        return;
      }
      var places = result.value;
      if (places && places.length > 0) {
        result.value.forEach(function(place) {
          console.log(`Location: ${place.displayName} (type: ${place.locationIdentifier.type})`);
          if (place.locationIdentifier.type === Office.MailboxEnums.LocationType.Room) {
            console.log("Email address: " + place.emailAddress);
          }
        });
      } else {
        console.log("There are no locations.");
      }
    });

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-add-remove-enhancedlocation-appointment.yaml

    var locations = [
      {
        id: "Contoso",
        type: Office.MailboxEnums.LocationType.Custom
      },
      {
        id: "room500@test.com",
        type: Office.MailboxEnums.LocationType.Room
      }
    ];

    Office.context.mailbox.item.enhancedLocation.addAsync(locations, (result) => {
      if (result.status === Office.AsyncResultStatus.Succeeded) {
        console.log(`Successfully added locations ${JSON.stringify(locations)}`);
      } else {
        console.error(`Failed to add locations. Error message: ${result.error.message}`);
      }
    });

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-add-remove-enhancedlocation-appointment.yaml

    var locations = [
      {
        id: "Contoso",
        type: Office.MailboxEnums.LocationType.Custom
      },
      {
        id: "room500@test.com",
        type: Office.MailboxEnums.LocationType.Room
      }
    ];

    Office.context.mailbox.item.enhancedLocation.removeAsync(locations, (result) => {
      if (result.status === Office.AsyncResultStatus.Succeeded) {
        console.log(`Successfully removed locations ${JSON.stringify(locations)}`);
      } else {
        console.error(`Failed to remove locations. Error message: ${result.error.message}`);
      }
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'enhancedLocation: EnhancedLocation;'
    return:
      type: <xref uid="outlook!Office.EnhancedLocation:interface" />
- name: isAllDayEvent
  uid: outlook!Office.AppointmentCompose#isAllDayEvent:member
  package: outlook!
  fullName: isAllDayEvent
  summary: >-
    Obtiene o establece la [propiedad Office.IsAllDayEvent](xref:outlook!Office.IsAllDayEvent:interface) de una cita.


    \[[Conjunto de API: Vista previa de buzones](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Nivel de permiso mínimo:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Modo de Outlook aplicable:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Organizador de citas


    #### <a name="examples"></a>Ejemplos


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/99-preview-apis/calendar-properties-apis.yaml

    Office.context.mailbox.item.isAllDayEvent.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("Is this an all-day event? " + asyncResult.value);
      } else {
        console.log("Failed to get if this is an all-day event. Error: " + JSON.stringify(asyncResult.error));
      }
    });

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/99-preview-apis/calendar-properties-apis.yaml

    Office.context.mailbox.item.isAllDayEvent.setAsync(true, function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Failed) {
        console.log("Failed to set all-day event: " + JSON.stringify(asyncResult.error));
      } else {
        console.log("Appointment set to all-day event.");
      }
    });

    ```
  isPreview: true
  isDeprecated: false
  syntax:
    content: 'isAllDayEvent: IsAllDayEvent;'
    return:
      type: <xref uid="outlook!Office.IsAllDayEvent:interface" />
- name: itemType
  uid: outlook!Office.AppointmentCompose#itemType:member
  package: outlook!
  fullName: itemType
  summary: >-
    Obtiene el tipo de elemento que representa una instancia.


    La propiedad `itemType` devuelve uno de los valores de enumeración de `ItemType`, lo que indica si la instancia del objeto `item` es un mensaje o una cita.
  remarks: >-
    **[Nivel de permiso mínimo:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Modo de Outlook aplicable:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Organizador de citas


    #### <a name="examples"></a>Ejemplos


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-item-type.yaml

    console.log(`Item type: ${Office.context.mailbox.item.itemType}`);

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'itemType: MailboxEnums.ItemType | string;'
    return:
      type: <xref uid="outlook!Office.MailboxEnums.ItemType:enum" /> | string
- name: location
  uid: outlook!Office.AppointmentCompose#location:member
  package: outlook!
  fullName: location
  summary: Obtiene o establece la ubicación de una cita. La `location` propiedad devuelve un objeto [Location](xref:outlook!Office.Location:interface) que proporciona métodos que se usan para obtener y establecer la ubicación de la cita.
  remarks: >-
    **[Nivel de permiso mínimo:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Modo de Outlook aplicable:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Organizador de citas


    #### <a name="examples"></a>Ejemplos


    ```javascript

    var userContext = { value : 1 };

    Office.context.mailbox.item.location.getAsync( { context: userContext}, callback);


    function callback(asyncResult) {
        var context = asyncResult.context;
        var location = asyncResult.value;
    }

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-set-location-appointment-organizer.yaml

    Office.context.mailbox.item.location.getAsync((result) => {
      if (result.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Action failed with message ${result.error.message}`);
        return;
      }
      console.log(`Appointment location: ${result.value}`);
    });

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-set-location-appointment-organizer.yaml

    var location = "my office";

    Office.context.mailbox.item.location.setAsync(location, (result) => {
      if (result.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Action failed with message ${result.error.message}`);
        return;
      }
      console.log(`Successfully set location to ${location}`);
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'location: Location;'
    return:
      type: <xref uid="outlook!Office.Location:interface" />
- name: notificationMessages
  uid: outlook!Office.AppointmentCompose#notificationMessages:member
  package: outlook!
  fullName: notificationMessages
  summary: >-
    Obtiene los mensajes de notificación de un elemento.


    \[[Conjunto de API: Mailbox 1.3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: "**[Nivel de permisos mínimo:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`\n\n**[Modo de Outlook aplicable:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Organizador de citas\n\n#### <a name=\"examples\"></a>Ejemplos\n\n```javascript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/35-notifications/add-getall-remove.yaml\nvar id = $(\"#notificationId\").val();\nvar details =\n  {\n    type: \"progressIndicator\",\n    message: \"Progress indicator with id = \" + id\n  };\nOffice.context.mailbox.item.notificationMessages.addAsync(id, details, handleResult);\n```\n```javascript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/35-notifications/add-getall-remove.yaml\nvar id = $(\"#notificationId\").val();\nvar details =\n  {\n    type: \"informationalMessage\",\n    message: \"Non-persistent informational notification message with id = \" + id,\n    icon: \"icon1\",\n    persistent: false\n  };\nOffice.context.mailbox.item.notificationMessages.addAsync(id, details, handleResult);\n```\n```javascript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/35-notifications/add-getall-remove.yaml\nvar id = $(\"#notificationId\").val();\nvar details =\n  {\n    type: \"informationalMessage\",\n    message: \"Persistent informational notification message with id = \" + id,\n    icon: \"icon1\",\n    persistent: true\n  };\nOffice.context.mailbox.item.notificationMessages.addAsync(id, details, handleResult);\n```\n```javascript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/35-notifications/add-getall-remove.yaml\nOffice.context.mailbox.item.notificationMessages.getAllAsync(handleResult);          \n```\n```javascript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/35-notifications/add-getall-remove.yaml\nvar id = $(\"#notificationId\").val();\nOffice.context.mailbox.item.notificationMessages.replaceAsync(\n  id,\n  {\n    type: \"informationalMessage\",\n    message: \"Notification message with id = \" + id + \" has been replaced with an informational message.\",\n    icon: \"icon2\",\n    persistent: false\n  },\n  handleResult);\n```\n```javascript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/35-notifications/add-getall-remove.yaml\nvar id = $(\"#notificationId\").val();\nOffice.context.mailbox.item.notificationMessages.removeAsync(id, handleResult);\n```"
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'notificationMessages: NotificationMessages;'
    return:
      type: <xref uid="outlook!Office.NotificationMessages:interface" />
- name: optionalAttendees
  uid: outlook!Office.AppointmentCompose#optionalAttendees:member
  package: outlook!
  fullName: optionalAttendees
  summary: >-
    Proporciona acceso a los asistentes opcionales de un evento. El tipo de objeto y el nivel de acceso dependen del modo del elemento actual.


    La propiedad `optionalAttendees` devuelve un objeto `Recipients` que proporciona métodos para obtener o actualizar los asistentes opcionales a una reunión. Sin embargo, en función del cliente o la plataforma (es decir, Windows, Mac, etc.), pueden aplicarse límites en la cantidad de destinatarios que puedes obtener o actualizar. Vea el [objeto Recipients](xref:outlook!Office.Recipients:interface) para obtener más información.
  remarks: >-
    **[Nivel de permiso mínimo:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Modo de Outlook aplicable:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Organizador de citas


    #### <a name="examples"></a>Ejemplos


    ```javascript

    Office.context.mailbox.item.optionalAttendees.setAsync( ['alice@contoso.com', 'bob@contoso.com'] );

    Office.context.mailbox.item.optionalAttendees.addAsync( ['jason@contoso.com'] );

    Office.context.mailbox.item.optionalAttendees.getAsync(callback);


    function callback(asyncResult) {
        var arrayOfOptionalAttendeesRecipients = asyncResult.value;
    }

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/30-recipients-and-attendees/get-set-optional-attendees-appointment-organizer.yaml

    Office.context.mailbox.item.optionalAttendees.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        var apptOptionalAttendees = asyncResult.value;
        for (var i = 0; i < apptOptionalAttendees.length; i++) {
          console.log(
            "Optional attendees: " +
              apptOptionalAttendees[i].displayName +
              " (" +
              apptOptionalAttendees[i].emailAddress +
              ") - response: " +
              apptOptionalAttendees[i].appointmentResponse
          );
        }
      } else {
        console.error(asyncResult.error);
      }
    });

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/30-recipients-and-attendees/get-set-optional-attendees-appointment-organizer.yaml

    var email = $("#emailOptional")
      .val()
      .toString();
    var emailArray = [email];

    Office.context.mailbox.item.optionalAttendees.setAsync(emailArray, function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("Succeeded in setting optional attendees field.");
      } else {
        console.error(asyncResult.error);
      }
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'optionalAttendees: Recipients;'
    return:
      type: <xref uid="outlook!Office.Recipients:interface" />
- name: organizer
  uid: outlook!Office.AppointmentCompose#organizer:member
  package: outlook!
  fullName: organizer
  summary: >-
    Obtiene el organizador de la reunión especificada.


    La `organizer` propiedad devuelve un objeto [Organizer](xref:outlook!Office.Organizer:interface) que proporciona un método para obtener el valor del organizador.


    \[[Conjunto de API: Mailbox 1.7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Nivel de permiso mínimo:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadWriteItem`


    **[Modo de Outlook aplicable:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Organizador de citas


    #### <a name="examples"></a>Ejemplos


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/30-recipients-and-attendees/get-organizer-appointment-organizer.yaml

    Office.context.mailbox.item.organizer.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        var apptOrganizer = asyncResult.value;
        console.log("Organizer: " + apptOrganizer.displayName + " (" + apptOrganizer.emailAddress + ")");
      } else {
        console.error(asyncResult.error);
      }
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'organizer: Organizer;'
    return:
      type: <xref uid="outlook!Office.Organizer:interface" />
- name: recurrence
  uid: outlook!Office.AppointmentCompose#recurrence:member
  package: outlook!
  fullName: recurrence
  summary: >-
    Obtiene o establece el patrón de periodicidad de una cita.


    La propiedad devuelve un objeto de periodicidad para las citas periódicas o las solicitudes de reuniones si un elemento es una serie o `recurrence` una instancia de una serie. `null` se devuelve para citas únicas y solicitudes de reunión de citas únicas.


    **Nota:** las solicitudes de reunión tienen `itemClass` un valor de `IPM.Schedule.Meeting.Request`<!-- -->.


    **Nota:** Si el objeto de periodicidad es nulo, esto indica que el objeto es una sola cita o una solicitud de reunión de una sola cita y NO una parte de una serie.


    \[[Conjunto de API: Mailbox 1.7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Nivel de permiso mínimo:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Modo de Outlook aplicable:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Organizador de citas


    #### <a name="examples"></a>Ejemplos


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/50-recurrence/get-set-recurrence-appointment-organizer.yaml

    Office.context.mailbox.item.recurrence.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        var recurrence = asyncResult.value;
        if (recurrence === null) {
          console.log("This is a single appointment.");
        } else {
          console.log(`Recurrence pattern: ${JSON.stringify(recurrence)}`);
        }
      } else {
        console.error(asyncResult.error);
      }
    });

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/50-recurrence/get-set-recurrence-appointment-organizer.yaml

    // Important: Can only set the recurrence pattern of an appointment series.


    var currentDate = new Date();

    let seriesTimeObject : Office.SeriesTime;

    // Set series start date to tomorrow.

    seriesTimeObject.setStartDate(
      currentDate.getFullYear(),
      currentDate.getMonth(),
      currentDate.getDay() + 1
    );

    // Set series end date to 1 month from now.

    seriesTimeObject.setEndDate(
      currentDate.getFullYear(),
      currentDate.getMonth() + 1,
      currentDate.getDay()
    );

    // Set start time to 1:30 PM.

    seriesTimeObject.setStartTime(13, 30);

    // Set duration to 30 minutes.

    seriesTimeObject.setDuration(30);


    let pattern : Office.Recurrence = {
      seriesTime: seriesTimeObject,
      recurrenceType: "weekly",
      recurrenceProperties: { interval: 1, days: ["tue", "thu"], firstDayOfWeek: "sun" },
      recurrenceTimeZone: { name: "Pacific Standard Time" }
    };


    Office.context.mailbox.item.recurrence.setAsync(pattern, (asyncResult) => {
      if (asyncResult.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Failed to set recurrence. Error: ${asyncResult.error.message}`);
        return;
      }
      console.log(`Succeeded in setting recurrence pattern ${JSON.stringify(pattern)}`);
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'recurrence: Recurrence;'
    return:
      type: <xref uid="outlook!Office.Recurrence:interface" />
- name: requiredAttendees
  uid: outlook!Office.AppointmentCompose#requiredAttendees:member
  package: outlook!
  fullName: requiredAttendees
  summary: >-
    Proporciona acceso a los asistentes necesarios de un evento. El tipo de objeto y el nivel de acceso dependen del modo del elemento actual.


    La propiedad `requiredAttendees` devuelve un objeto `Recipients` que proporciona métodos para obtener o actualizar los asistentes obligatorios a una reunión. Sin embargo, en función del cliente o la plataforma (es decir, Windows, Mac, etc.), pueden aplicarse límites en la cantidad de destinatarios que puedes obtener o actualizar. Vea el [objeto Recipients](xref:outlook!Office.Recipients:interface) para obtener más información.
  remarks: >-
    **[Nivel de permisos mínimo:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Modo de Outlook aplicable:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Organizador de citas


    #### <a name="examples"></a>Ejemplos


    ```javascript

    Office.context.mailbox.item.requiredAttendees.setAsync( ['alice@contoso.com', 'bob@contoso.com'] );

    Office.context.mailbox.item.requiredAttendees.addAsync( ['jason@contoso.com'] );

    Office.context.mailbox.item.requiredAttendees.getAsync(callback);


    function callback(asyncResult) {
        var arrayOfRequiredAttendeesRecipients = asyncResult.value;
        console.log(JSON.stringify(arrayOfRequiredAttendeesRecipients));
    }

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/30-recipients-and-attendees/get-set-required-attendees-appointment-organizer.yaml

    Office.context.mailbox.item.requiredAttendees.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        var apptRequiredAttendees = asyncResult.value;
        for (var i = 0; i < apptRequiredAttendees.length; i++) {
          console.log(
            "Required attendees: " +
              apptRequiredAttendees[i].displayName +
              " (" +
              apptRequiredAttendees[i].emailAddress +
              ") - response: " +
              apptRequiredAttendees[i].appointmentResponse
          );
        }
      } else {
        console.error(asyncResult.error);
      }
    });

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/30-recipients-and-attendees/get-set-required-attendees-appointment-organizer.yaml

    var email = $("#emailRequired")
      .val()
      .toString();
    var emailArray = [email];

    Office.context.mailbox.item.requiredAttendees.setAsync(emailArray, function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("Succeeded in setting required attendees field.");
      } else {
        console.error(asyncResult.error);
      }
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'requiredAttendees: Recipients;'
    return:
      type: <xref uid="outlook!Office.Recipients:interface" />
- name: sensitivity
  uid: outlook!Office.AppointmentCompose#sensitivity:member
  package: outlook!
  fullName: sensitivity
  summary: >-
    Obtiene o establece la [confidencialidad](xref:outlook!Office.Sensitivity:interface) de una cita.


    \[[Conjunto de API: Vista previa de buzón](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Nivel de permiso mínimo:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Modo de Outlook aplicable:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Organizador de citas


    #### <a name="examples"></a>Ejemplos


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/99-preview-apis/calendar-properties-apis.yaml

    Office.context.mailbox.item.sensitivity.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("Sensitivity: " + asyncResult.value);
      } else {
        console.log("Failed to get sensitivity: " + JSON.stringify(asyncResult.error));
      }
    });

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/99-preview-apis/calendar-properties-apis.yaml

    Office.context.mailbox.item.sensitivity.setAsync(
      Office.MailboxEnums.AppointmentSensitivityType.Confidential,
      function callback(asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Failed) {
          console.log("Failed to set appointment sensitivity: " + JSON.stringify(asyncResult.error));
        } else {
          console.log("Successfully set appointment sensitivity.");
        }
      }
    );

    ```
  isPreview: true
  isDeprecated: false
  syntax:
    content: 'sensitivity: Sensitivity;'
    return:
      type: <xref uid="outlook!Office.Sensitivity:interface" />
- name: seriesId
  uid: outlook!Office.AppointmentCompose#seriesId:member
  package: outlook!
  fullName: seriesId
  summary: >-
    Obtiene el identificador de la serie a la que pertenece una instancia.


    En los clientes de Outlook en la Web y de escritorio, la propiedad devuelve el identificador de servicios Web Exchange (EWS) del elemento primario (serie) al que `seriesId` pertenece este elemento. Sin embargo, en iOS y Android, seriesId devuelve el id. de REST del elemento primario.


    **Nota:** El identificador devuelto por la propiedad es el mismo que el identificador de elemento de `seriesId` servicios Web Exchange. La `seriesId` propiedad no es idéntica a los id. de Outlook usados por la API de REST de Outlook. Antes de realizar llamadas a la API de REST con este valor, debe convertirse con `Office.context.mailbox.convertToRestId`<!-- -->. Para obtener más información, [vea Usar las API de REST de Outlook desde un complemento de Outlook](https://docs.microsoft.com/office/dev/add-ins/outlook/use-rest-api)<!-- -->.


    La propiedad devuelve los elementos que no tienen elementos primarios, como citas individuales, elementos de serie o solicitudes de reunión, y devuelve cualquier otro elemento que no sea una solicitud `seriesId` `null` de `undefined` reunión.


    \[[Conjunto de API: Mailbox 1.7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Nivel de permiso mínimo:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Modo de Outlook aplicable:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Organizador de citas


    #### <a name="examples"></a>Ejemplos


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/50-recurrence/get-series-id.yaml

    var seriesId = Office.context.mailbox.item.seriesId;


    if (seriesId === undefined) {
      console.log("This is a message that's not a meeting request.");
    } else if (seriesId === null) {
      console.log("This is a single appointment, a parent series, or a meeting request for a series or single meeting.");
    } else {
      console.log("This is an instance belonging to series with ID " + seriesId);
    }

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'seriesId: string;'
    return:
      type: string
- name: sessionData
  uid: outlook!Office.AppointmentCompose#sessionData:member
  package: outlook!
  fullName: sessionData
  summary: >-
    Administra los [SessionData de](xref:outlook!Office.SessionData:interface) un elemento en modo Redacción.


    \[[Conjunto de API: Vista previa de buzones](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Nivel de permiso mínimo:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Modo de Outlook aplicable:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Organizador de citas


    #### <a name="examples"></a>Ejemplos


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/99-preview-apis/session-data-apis.yaml

    Office.context.mailbox.item.sessionData.getAllAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("The sessionData is " + JSON.stringify(asyncResult.value));
      } else {
        console.log("Failed to get all sessionData. Error: " + JSON.stringify(asyncResult.error));
      }
    });

    ```
  isPreview: true
  isDeprecated: false
  syntax:
    content: 'sessionData: SessionData;'
    return:
      type: <xref uid="outlook!Office.SessionData:interface" />
- name: start
  uid: outlook!Office.AppointmentCompose#start:member
  package: outlook!
  fullName: start
  summary: >-
    Obtiene o establece la fecha y la hora de inicio de la cita.


    La propiedad es un objeto Time expresado como un valor de fecha y hora `start` utc (Hora universal coordinada). [](xref:outlook!Office.Time:interface) Puede usar el método para convertir el valor en la fecha y hora `convertToLocalClientTime` locales del cliente.


    Si usa el método `Time.setAsync` para establecer la hora de inicio, use el método `convertToUtcClientTime` para convertir la hora local del cliente en un valor UTC para el servidor.


    **Importante:** En el cliente de Windows, no puede usar esta propiedad para actualizar el inicio de una periodicidad.
  remarks: >-
    **[Nivel de permiso mínimo:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Modo de Outlook aplicable:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Organizador de citas


    #### <a name="examples"></a>Ejemplos


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-set-start-appointment-organizer.yaml

    Office.context.mailbox.item.start.getAsync((result) => {
      if (result.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Action failed with message ${result.error.message}`);
        return;
      }
      console.log(`Appointment starts: ${result.value}`);
    });

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-set-start-appointment-organizer.yaml

    var start = new Date(); // Represents current date and time.

    start.setDate(start.getDate() + 2); // Add 2 days to current date.

    Office.context.mailbox.item.start.setAsync(start, (result) => {
      if (result.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Action failed with message ${result.error.message}`);
        return;
      }
      console.log(`Successfully set start date and time to ${start}`);
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'start: Time;'
    return:
      type: <xref uid="outlook!Office.Time:interface" />
- name: subject
  uid: outlook!Office.AppointmentCompose#subject:member
  package: outlook!
  fullName: subject
  summary: >-
    Obtiene o establece la descripción que se muestra en el campo de asunto de un elemento.


    La propiedad `subject` obtiene o establece el asunto completo del elemento, como lo ha enviado el servidor de correo electrónico.


    La propiedad `subject` devuelve un objeto `Subject` que proporciona métodos para obtener y establecer el asunto.
  remarks: >-
    **[Nivel de permisos mínimo:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Modo de Outlook aplicable:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Organizador de citas


    #### <a name="examples"></a>Ejemplos


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-set-subject-compose.yaml

    Office.context.mailbox.item.subject.getAsync((result) => {
      if (result.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Action failed with message ${result.error.message}`);
        return;
      }
      console.log(`Subject: ${result.value}`);
    });

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-set-subject-compose.yaml

    let subject = "Hello World!";

    Office.context.mailbox.item.subject.setAsync(subject, (result) => {
      if (result.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Action failed with message ${result.error.message}`);
        return;
      }
      console.log(`Successfully set subject to ${subject}`);
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'subject: Subject;'
    return:
      type: <xref uid="outlook!Office.Subject:interface" />
methods:
- name: addFileAttachmentAsync(uri, attachmentName, options, callback)
  uid: outlook!Office.AppointmentCompose#addFileAttachmentAsync:member(1)
  package: outlook!
  fullName: addFileAttachmentAsync(uri, attachmentName, options, callback)
  summary: >-
    Agrega un archivo a un mensaje o cita como datos adjuntos.


    El método `addFileAttachmentAsync` carga el archivo en el URI especificado y lo asocia al elemento en el formulario de redacción.


    Después, puede usar el identificador con el método `removeAttachmentAsync` para quitar los datos adjuntos en la misma sesión.


    **Importante:** En las compilaciones recientes de Outlook en Windows, se introdujo un error que anexa incorrectamente un encabezado a esta acción (ya sea mediante esta API o la interfaz de usuario `Authorization: Bearer` de Outlook). Para evitar este problema, puede intentar usar la API introducida con el conjunto de `addFileAttachmentFromBase64` requisitos 1.8.


    \[[Conjunto de API: Mailbox 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Nivel de permiso mínimo:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadWriteItem`


    **[Modo de Outlook aplicable:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Organizador de citas


    **Errores:**


    - `AttachmentSizeExceeded`<!-- -->: los datos adjuntos son más grandes de lo permitido.


    - `FileTypeNotSupported`<!-- -->: los datos adjuntos tienen una extensión que no está permitida.


    - `NumberOfAttachmentsExceeded`<!-- -->: el mensaje o la cita tiene demasiados datos adjuntos.


    #### <a name="examples"></a>Ejemplos


    ```javascript

    function callback(result) {
        if (result.error) {
            console.log(result.error);
        } else {
            console.log("Attachment added");
        }
    }


    function addAttachment() {
        // The values in asyncContext can be accessed in the callback.
        var options = { 'asyncContext': { var1: 1, var2: 2 } };

        var attachmentURL = "https://contoso.com/rtm/icon.png";
        Office.context.mailbox.item.addFileAttachmentAsync(attachmentURL, attachmentURL, options, callback);
    }

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/40-attachments/attachments-compose.yaml

    var attachmentUrl = $("#attachmentUrl").val();

    Office.context.mailbox.item.addFileAttachmentAsync(
        attachmentUrl,
        getFileName(attachmentUrl),
        { "asyncContext" : { var1: 1, var2: true } },
        function(result) { console.log(result); });
    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addFileAttachmentAsync(uri: string, attachmentName: string, options?: Office.AsyncContextOptions & { isInline: boolean }, callback?: (asyncResult: Office.AsyncResult<string>) => void): void;'
    parameters:
    - id: uri
      description: El URI que proporciona la ubicación del archivo que se va a adjuntar al mensaje o a la cita. La longitud máxima es de 2048 caracteres.
      type: string
    - id: attachmentName
      description: El nombre de los datos adjuntos que se muestra mientras estos se cargan. La longitud máxima es de 255 caracteres.
      type: string
    - id: options
      description: 'Opcional. Un objeto literal que contiene una o más de las siguientes propiedades. `asyncContext`<!-- -->: los desarrolladores pueden proporcionar cualquier objeto al que deseen acceder en el método de devolución de llamada. `isInline`<!-- -->: si es true, indica que los datos adjuntos se mostrarán en línea en el cuerpo del mensaje y no deben mostrarse en la lista de datos adjuntos.'
      type: '<xref uid="office!Office.AsyncContextOptions:interface" /> & { isInline: boolean }'
    - id: callback
      description: Opcional. Cuando se completa el método, se llama a la función pasada en `callback` el parámetro con un único parámetro de tipo `Office.AsyncResult`<!-- -->. Si se realiza correctamente, se proporcionará el identificador de los datos adjuntos en la propiedad `asyncResult.value`. Si se produce un error en la carga de los datos adjuntos, el objeto `asyncResult` contendrá un objeto `Error` que proporciona una descripción del error.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: addFileAttachmentFromBase64Async(base64File, attachmentName, options, callback)
  uid: outlook!Office.AppointmentCompose#addFileAttachmentFromBase64Async:member(1)
  package: outlook!
  fullName: addFileAttachmentFromBase64Async(base64File, attachmentName, options, callback)
  summary: >-
    Agrega un archivo a un mensaje o cita como datos adjuntos.


    El método carga el archivo desde la codificación base64 y lo adjunta al `addFileAttachmentFromBase64Async` elemento del formulario de redacción. Este método devuelve el identificador de datos adjuntos del `asyncResult.value` objeto.


    Después, puede usar el identificador con el método `removeAttachmentAsync` para quitar los datos adjuntos en la misma sesión.


    **Nota:** Si usa una API de dirección URL de datos (por ejemplo, `readAsDataURL`<!-- -->), debes quitar el prefijo de la dirección URL de datos y luego enviar el resto de la cadena a esta API. Por ejemplo, si la cadena completa está representada por `data:image/svg+xml;base64,<rest of base64 string>`<!-- -->, remove `data:image/svg+xml;base64,`<!-- -->.


    \[[Conjunto de API: Mailbox 1.8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Nivel de permiso mínimo:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadWriteItem`


    **[Modo de Outlook aplicable:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Organizador de citas


    **Errores:**


    - `AttachmentSizeExceeded`<!-- -->: los datos adjuntos son más grandes de lo permitido.


    - `FileTypeNotSupported`<!-- -->: los datos adjuntos tienen una extensión que no está permitida.


    - `NumberOfAttachmentsExceeded`<!-- -->: el mensaje o la cita tiene demasiados datos adjuntos.


    #### <a name="examples"></a>Ejemplos


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/40-attachments/attachments-compose.yaml

    base64String = "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAACXBIWXMAAAsSAAALEgHS3X78AAACRUlEQVRYw82XzXHbMBCFP2F8tzsQc8Ixyh0zoiuIXIGdCsxUYKqC0B04FdiuwMoM7mGOOIXqQGoAymXhgSX+itJM9kIRFLAP+3YXD5Pdbscx5oxaAIW8Ztr6l2PWmQwF4IyaieP53qdfAqQ8CwBn1JU4vpWhrbxXQA5MZfynANmcDIAzKgcy4FKGXsVJFf3nLgKyBQptfT4KQMRz2N0fcbxqmRMDWXflx0VPnrdArq0vekQ1Dv0UeHZGNebHhwjU8AzwKM43RyZnbAf58Q6ghudeWd0Aus0+5EcMIIRi3beua0D3Nm39BEAx3i7HTK4DEBJn5YxKOnaRA5+ErpMBWMpzDvx1RuXCcxOISlufAjfC7zgAsqsvUvMAD0ApPaEtGi9AIlUzKgJo60tt/SyKRkzLrAXERluf7W1gOICWaMyB386oooOWsIHvXbSoHuUSFovtHqicUVnH3EJoeT0aQEf5/XBGlc6otIOWBXAtPeZkAIJ9Bt6cUU9tZautX2nrk3MACHYr1ZKProKRtDw4o8pzAPjWo+NtpXTTvoteDDg8noDAcwbcRedAkGdFXyk2GEDcegVAFp2gyVDHjRQ4o6q2smoqtR5Hd+qMqtoALCWUUymr1m43QMZfOaMK4C0SrMsDANJ2E5FNcbdbjHC+ENl+H0myJFbLtaq4Rt8dyPBYRQV1E40nMv9rl7xrOw3DGb+Whcqu3i/OM6CUOWvgRlufNmnLYy4m77uJI7AXtdNcTDrU71LEyv7v01/N/ovL6bmu5/8A1tNWZldH0W4AAAAASUVORK5CYII=";

    Office.context.mailbox.item.addFileAttachmentFromBase64Async(
        base64String,
        "logo.png",
        { isInline: false },
        function(result) { console.log(result); });
    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/99-preview-apis/work-with-client-signatures.yaml

    // Set the signature for the current item with inline image.

    var modIcon1Base64 = "iVBORw0KGgoAAAANSUhEUgAAABwAAAAcCAYAAAByDd+UAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAA2ZpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMC1jMDYxIDY0LjE0MDk0OSwgMjAxMC8xMi8wNy0xMDo1NzowMSAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wTU09Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9tbS8iIHhtbG5zOnN0UmVmPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VSZWYjIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtcE1NOk9yaWdpbmFsRG9jdW1lbnRJRD0ieG1wLmRpZDpDRDMxMDg1MjBCNDZFMTExODE2MkM1RUI2M0M4MDYxRCIgeG1wTU06RG9jdW1lbnRJRD0ieG1wLmRpZDpFMTUxQjgyRjQ2MEQxMUUxODlFMkQwNTYzQ0YwMTUxMiIgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDpFMTUxQjgyRTQ2MEQxMUUxODlFMkQwNTYzQ0YwMTUxMiIgeG1wOkNyZWF0b3JUb29sPSJBZG9iZSBQaG90b3Nob3AgQ1M1LjEgV2luZG93cyI+IDx4bXBNTTpEZXJpdmVkRnJvbSBzdFJlZjppbnN0YW5jZUlEPSJ4bXAuaWlkOkQxMzEwODUyMEI0NkUxMTE4MTYyQzVFQjYzQzgwNjFEIiBzdFJlZjpkb2N1bWVudElEPSJ4bXAuZGlkOkNEMzEwODUyMEI0NkUxMTE4MTYyQzVFQjYzQzgwNjFEIi8+IDwvcmRmOkRlc2NyaXB0aW9uPiA8L3JkZjpSREY+IDwveDp4bXBtZXRhPiA8P3hwYWNrZXQgZW5kPSJyIj8+uC/WfAAAAehJREFUeNpilCzfwEAEkAbiECA2A2J1IOaHin8E4ptAfBaIVwLxU0IGMRKw0B6IW4DYhoE4cASIK6E0VsCEQ1wUiNcB8QESLGOAqj0MxBuhZhBloS4QnwHiQAbygR/UDF1CFupCXSjHQDmQg5qli8tCUBBsQUoQ1AD8UDNFsVk4n0o+w+bT+egWglKjNymmeGhLkqLcG2oHAwtUoIuQDj5OVgZPLUmwRe5aEmAxqYqNpFgKssOcCeplM0KqdST5GfpDDRm0JfkYrj3/SE7QguyQY4ImYYLgCtAS10kHGMw6dzNsv/qC7OwCClJXYlR++v6b4er3j5QmIFcmaNlIL6AOslCIjhYKMTHQGTBBqxh6gXcgC6/R0cKbIAv30dHCfaAKGJTxHxJSqS3Fz9DkowNmywpyMcgA8fF7b8D8VWcfM6w8+4gYC+VB+RCk8hSh0gaUD4/dewvlvUWRe/z+GzGWgex4BGtiOAHxXhoHpzMoSGHZAhSPW2lo2VZYWkHOh4nEtLrIAE+hZmNUwK+B2BOIv1PRsu9QM1/jatNcBtVZ0IREKXgENesyoVYbzNIdFFi2A5tl+NqlL6BB4QBNzsSCU1A9nlAzMAALAQMOQl0qB23qWwKxIlIrDBQ394H4OBCvISYqAAIMACVibHDqsO7zAAAAAElFTkSuQmCC";

    Office.context.mailbox.item.addFileAttachmentFromBase64Async(
      modIcon1Base64,
      "myImage.png",
      { isInline: true },
      function(result) {
        if (result.status == Office.AsyncResultStatus.Succeeded) {
          var signature = $("#signature").val() + "<img src='cid:myImage.png'>";
          console.log(`Setting signature to "${signature}".`);
          // Important: setSignatureAsync is currently in preview.
          Office.context.mailbox.item.body.setSignatureAsync(
            signature,
            { coercionType: "html" },
            function(asyncResult) {
              console.log(`setSignatureAsync: ${asyncResult.status}`);
            }
          );
        } else {
          console.error(`addFileAttachmentFromBase64Async: ${result.error}`);
        }
      }
    );

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addFileAttachmentFromBase64Async(base64File: string, attachmentName: string, options?: Office.AsyncContextOptions &  { isInline: boolean }, callback?: (asyncResult: Office.AsyncResult<string>) => void): void;'
    parameters:
    - id: base64File
      description: El contenido codificado en base64 de una imagen o archivo que se agregará a un correo electrónico o evento.
      type: string
    - id: attachmentName
      description: El nombre de los datos adjuntos que se muestra mientras estos se cargan. La longitud máxima es de 255 caracteres.
      type: string
    - id: options
      description: 'Opcional. Un objeto literal que contiene una o más de las siguientes propiedades. `asyncContext`<!-- -->: los desarrolladores pueden proporcionar cualquier objeto al que deseen acceder en el método de devolución de llamada. `isInline`<!-- -->: si es true, indica que los datos adjuntos se mostrarán en línea en el cuerpo del mensaje y no deben mostrarse en la lista de datos adjuntos.'
      type: '<xref uid="office!Office.AsyncContextOptions:interface" /> &  { isInline: boolean }'
    - id: callback
      description: Opcional. Cuando se completa el método, se llama a la función pasada en `callback` el parámetro con un único parámetro de tipo `Office.AsyncResult`<!-- -->. Si se realiza correctamente, se proporcionará el identificador de los datos adjuntos en la propiedad `asyncResult.value`. Si se produce un error en la carga de los datos adjuntos, el objeto `asyncResult` contendrá un objeto `Error` que proporciona una descripción del error.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: addHandlerAsync(eventType, handler, options, callback)
  uid: outlook!Office.AppointmentCompose#addHandlerAsync:member(1)
  package: outlook!
  fullName: addHandlerAsync(eventType, handler, options, callback)
  summary: >-
    Agrega un controlador de eventos para un evento admitido. **Nota:** Los eventos solo están disponibles con el panel de tareas.


    Consulte la sección eventos del modelo [de objetos item](https://docs.microsoft.com/office/dev/add-ins/reference/objectmodel/preview-requirement-set/office.context.mailbox.item#events) para ver los eventos admitidos.


    \[[Conjunto de API: Mailbox 1.7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Nivel de permiso mínimo:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Modo de Outlook aplicable:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Organizador de citas


    #### <a name="examples"></a>Ejemplos


    ```javascript

    function myHandlerFunction(eventarg) {
        if (eventarg.attachmentStatus === Office.MailboxEnums.AttachmentStatus.Added) {
            var attachment = eventarg.attachmentDetails;
            console.log("Event Fired and Attachment Added!");
            getAttachmentContentAsync(attachment.id, options, callback);
        }
    }


    Office.context.mailbox.item.addHandlerAsync(Office.EventType.AttachmentsChanged, myHandlerFunction, myCallback);

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addHandlerAsync(eventType: Office.EventType | string, handler: any, options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
    parameters:
    - id: eventType
      description: El evento que debe invocar el controlador.
      type: <xref uid="office!Office.EventType:enum" /> | string
    - id: handler
      description: La función que va a controlar el evento. La función debe aceptar un único parámetro, que es un literal de objeto. La propiedad type del parámetro coincidirá con `eventType` el parámetro pasado a `addHandlerAsync`<!-- -->.
      type: any
    - id: options
      description: 'Opcional. Un objeto literal que contiene una o más de las siguientes propiedades. `asyncContext`<!-- -->: los desarrolladores pueden proporcionar cualquier objeto al que deseen acceder en el método de devolución de llamada.'
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Opcional. Cuando se completa el método, se llama a la función que se ha pasado en `callback` el parámetro con un único parámetro. `asyncResult`<!-- -->, que es un `Office.AsyncResult` objeto.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: addItemAttachmentAsync(itemId, attachmentName, options, callback)
  uid: outlook!Office.AppointmentCompose#addItemAttachmentAsync:member(1)
  package: outlook!
  fullName: addItemAttachmentAsync(itemId, attachmentName, options, callback)
  summary: >-
    Agrega un elemento de Exchange (por ejemplo, un mensaje) como datos adjuntos al mensaje o a la cita.


    El método `addItemAttachmentAsync` asocia el elemento con el identificador especificado de Exchange al elemento en el formulario de redacción. Si especifica un método de devolución de llamada, se llama al método con un parámetro, `asyncResult`<!-- -->, que contiene el identificador de datos adjuntos o un código que indica cualquier error que se produjo al adjuntar el elemento. Si es necesario, puede usar el parámetro `options` para pasar información de estado al método de devolución de llamada.


    Después, puede usar el identificador con el método `removeAttachmentAsync` para quitar los datos adjuntos en la misma sesión.


    Si el complemento de Office se ejecuta en Outlook en la Web, el método `addItemAttachmentAsync` puede adjuntar elementos a otros elementos distintos del que quiere editar. No obstante, esta acción no es compatible y no se recomienda.


    \[[Conjunto de API: Mailbox 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Nivel de permisos mínimo:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadWriteItem`


    **[Modo de Outlook aplicable:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Organizador de citas


    **Errores:**


    - `NumberOfAttachmentsExceeded`<!-- -->: el mensaje o la cita tiene demasiados datos adjuntos.


    #### <a name="examples"></a>Ejemplos


    ```javascript

    // The following example adds an existing Outlook item as an attachment

    // with the name `My Attachment`.

    function callback(result) {
        if (result.error) {
            console.log(result.error);
        } else {
            console.log("Attachment added");
        }
    }


    function addAttachment() {
        // EWS ID of item to attach (shortened for readability).
        var itemId = "AAMkADI1...AAA=";

        // The values in asyncContext can be accessed in the callback.
        var options = { 'asyncContext': { var1: 1, var2: 2 } };

        Office.context.mailbox.item.addItemAttachmentAsync(itemId, "My Attachment", options, callback);
    }

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/40-attachments/attachments-compose.yaml

    var attachmentItemId = $("#attachmentItemId").val();

    Office.context.mailbox.item.addItemAttachmentAsync(
        attachmentItemId,
        "My attachment",
        { "asyncContext" : { var3: 3, var4: false } },
        function(result) { console.log(result); });
    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addItemAttachmentAsync(itemId: any, attachmentName: string, options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<string>) => void): void;'
    parameters:
    - id: itemId
      description: El identificador de Exchange del elemento que debe adjuntarse. La longitud máxima es de 100 caracteres.
      type: any
    - id: attachmentName
      description: El nombre de los datos adjuntos que se muestra mientras estos se cargan. La longitud máxima es de 255 caracteres.
      type: string
    - id: options
      description: 'Opcional. Un objeto literal que contiene una o más de las siguientes propiedades. `asyncContext`<!-- -->: los desarrolladores pueden proporcionar cualquier objeto al que deseen acceder en el método de devolución de llamada.'
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Opcional. Cuando se completa el método, se llama a la función que se pasa en el parámetro de devolución de llamada con un único parámetro de tipo `Office.AsyncResult`<!-- -->. Si se realiza correctamente, se proporcionará el identificador de los datos adjuntos en la propiedad `asyncResult.value`. Si se produce un error al agregar los datos adjuntos, el objeto `asyncResult` contendrá un objeto `Error` que proporciona una descripción del error.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: close()
  uid: outlook!Office.AppointmentCompose#close:member(1)
  package: outlook!
  fullName: close()
  summary: >-
    Cierra el elemento actual que se está componenndo


    Los comportamientos del `close` método dependen del estado actual del elemento que se va a componer. Si el elemento tiene cambios sin guardar, el cliente solicita al usuario que guarde, descarte o cierre la acción.


    En el cliente de escritorio de Outlook, si el mensaje es una respuesta directa, el método `close` no tiene ningún efecto.


    **Nota:** En Outlook en la Web, si el elemento es una cita y se ha guardado previamente mediante `saveAsync`<!-- -->, se pide al usuario que guarde, descarte o cancele incluso si no se han producido cambios desde la última vez que se guardó el elemento.


    \[[Conjunto de API: Mailbox 1.3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Nivel de permiso mínimo:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`Restricted`


    **[Modo de Outlook aplicable:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Organizador de citas


    #### <a name="examples"></a>Ejemplos


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/25-item-save-and-close/close.yaml

    Office.context.mailbox.item.close();

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'close(): void;'
    return:
      type: void
      description: ''
- name: disableClientSignatureAsync(options, callback)
  uid: outlook!Office.AppointmentCompose#disableClientSignatureAsync:member(1)
  package: outlook!
  fullName: disableClientSignatureAsync(options, callback)
  summary: >-
    Deshabilita la firma de cliente de Outlook.


    Para los clientes enriquecidos de Windows y Mac, esta API establece la firma en las secciones "Nuevo mensaje" y "Respuestas/reenvíos" para la cuenta de envío en "(ninguno)", deshabilitando de hecho la firma. Para Outlook en la Web, la API debe deshabilitar la opción de firma para nuevos correos, respuestas y reenvíos. Si se selecciona la firma, esta llamada API debe deshabilitarla.


    \[[Conjunto de API: Vista previa de buzones](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Nivel de permiso mínimo:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadWriteItem`


    **[Modo de Outlook aplicable:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Organizador de citas


    #### <a name="examples"></a>Ejemplos


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/99-preview-apis/work-with-client-signatures.yaml

    // Disable the client signature.

    Office.context.mailbox.item.disableClientSignatureAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("disableClientSignatureAsync succeeded");
      } else {
        console.error(asyncResult.error);
      }
    });

    ```
  isPreview: true
  isDeprecated: false
  syntax:
    content: 'disableClientSignatureAsync(options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
    parameters:
    - id: options
      description: 'Opcional. Un objeto literal que contiene una o más de las siguientes propiedades. `asyncContext`<!-- -->: los desarrolladores pueden proporcionar cualquier objeto al que deseen acceder en el método de devolución de llamada.'
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Opcional. Cuando se completa el método, se llama a la función que se ha pasado en el parámetro de devolución de llamada con un solo parámetro. `asyncResult`<!-- -->, que es un `Office.AsyncResult` objeto.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getAttachmentContentAsync(attachmentId, options, callback)
  uid: outlook!Office.AppointmentCompose#getAttachmentContentAsync:member(1)
  package: outlook!
  fullName: getAttachmentContentAsync(attachmentId, options, callback)
  summary: >-
    Obtiene datos adjuntos de un mensaje o una cita y los devuelve como un `AttachmentContent` objeto.


    El `getAttachmentContentAsync` método obtiene los datos adjuntos con el identificador especificado del elemento. Como procedimiento recomendado, debe usar el identificador para recuperar datos adjuntos en la misma sesión en la que se recuperaron los attachmentIds con la `getAttachmentsAsync` `item.attachments` llamada. En Outlook en la Web y dispositivos móviles, el identificador de datos adjuntos solo es válido en la misma sesión. Una sesión se ha terminado cuando el usuario cierra la aplicación o si el usuario comienza a redactar un formulario en línea, a continuación, se abre el formulario para continuar en una ventana independiente.


    \[[Conjunto de API: Mailbox 1.8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Nivel de permiso mínimo:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Modo de Outlook aplicable:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Organizador de citas


    **Errores:**


    - `AttachmentTypeNotSupported`<!-- -->: no se admite el tipo de datos adjuntos. Los tipos no compatibles incluyen imágenes incrustadas en formato de texto enriquecido o tipos de datos adjuntos de elementos que no son elementos de calendario o correo electrónico (como un contacto o un elemento de tarea).


    - `InvalidAttachmentId`<!-- -->: el identificador de datos adjuntos no existe.


    #### <a name="examples"></a>Ejemplos


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/40-attachments/get-attachment-content.yaml

    var item = Office.context.mailbox.item;

    var options = {asyncContext: {currentItem: item}};

    item.getAttachmentsAsync(options, callback);


    function callback(result) {
        if (result.value.length > 0) {
            for (i = 0 ; i < result.value.length ; i++) {
                result.asyncContext.currentItem.getAttachmentContentAsync(result.value[i].id, handleAttachmentsCallback);
            }
        }
    }


    function handleAttachmentsCallback(result) {
        // Parse string to be a url, an .eml file, a base64-encoded string, or an .icalendar file.
        switch (result.value.format) {
            case Office.MailboxEnums.AttachmentContentFormat.Base64:
                // Handle file attachment.
                console.log(result.value.content);
                break;
            case Office.MailboxEnums.AttachmentContentFormat.Eml:
                // Handle email item attachment.
                console.log("Attachment is a message.");
                break;
            case Office.MailboxEnums.AttachmentContentFormat.ICalendar:
                // Handle .icalender attachment.
                console.log("Attachment is a calendar item.");
                break;
            case Office.MailboxEnums.AttachmentContentFormat.Url:
                // Handle cloud attachment.
                console.log("Attachment is a cloud attachment.");
                break;
            default:
                // Handle attachment formats that are not supported.
        }
    }

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getAttachmentContentAsync(attachmentId: string, options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<AttachmentContent>) => void): void;'
    parameters:
    - id: attachmentId
      description: Identificador de los datos adjuntos que desea obtener.
      type: string
    - id: options
      description: 'Opcional. Un objeto literal que contiene una o más de las siguientes propiedades. `asyncContext`<!-- -->: los desarrolladores pueden proporcionar cualquier objeto al que deseen acceder en el método de devolución de llamada.'
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Opcional. Cuando se completa el método, se llama a la función que se pasa en `callback` el parámetro con un único parámetro. `asyncResult`<!-- -->, que es un `Office.AsyncResult` objeto. Si se produce un error en la llamada, `asyncResult.error` la propiedad contendrá un código de error con el motivo del error.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;<xref uid="outlook!Office.AttachmentContent:interface" />&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getAttachmentsAsync(options, callback)
  uid: outlook!Office.AppointmentCompose#getAttachmentsAsync:member(1)
  package: outlook!
  fullName: getAttachmentsAsync(options, callback)
  summary: >-
    Obtiene los datos adjuntos del elemento como una matriz.


    \[[Conjunto de API: Mailbox 1.8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Nivel de permiso mínimo:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Modo de Outlook aplicable:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Organizador de citas


    #### <a name="examples"></a>Ejemplos


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/40-attachments/attachments-compose.yaml

    Office.context.mailbox.item.getAttachmentsAsync(function (result) {
        if (result.status !== Office.AsyncResultStatus.Succeeded) {
            console.error(result.error.message);
        } else {
            if (result.value.length > 0) {
                for (var i = 0; i < result.value.length; i++) {
                    var attachment = result.value[i];
                    console.log(`${attachment.id}. Name: ${attachment.name}, size: ${attachment.size}, isInline: ${attachment.isInline}`);
                }
            }
            else {
                console.log("No attachments on this message.");
            }
        }
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getAttachmentsAsync(options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<AttachmentDetailsCompose[]>) => void): void;'
    parameters:
    - id: options
      description: 'Opcional. Un objeto literal que contiene una o más de las siguientes propiedades. `asyncContext`<!-- -->: los desarrolladores pueden proporcionar cualquier objeto al que deseen acceder en el método de devolución de llamada.'
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Opcional. Cuando se completa el método, se llama a la función pasada en `callback` el parámetro con un único parámetro de tipo `Office.AsyncResult`<!-- -->. Si se produce un error en la llamada, `asyncResult.error` la propiedad contendrá un código de error con el motivo del error.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;<xref uid="outlook!Office.AttachmentDetailsCompose:interface" />[]&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getInitializationContextAsync(options, callback)
  uid: outlook!Office.AppointmentCompose#getInitializationContextAsync:member(1)
  package: outlook!
  fullName: getInitializationContextAsync(options, callback)
  summary: >-
    Obtiene los datos de inicialización pasados cuando un mensaje accionable activa el complemento.


    **Nota:** Este método solo es compatible con Outlook 2016 o versiones posteriores en Windows (versiones de Hacer clic y ejecutar superiores a 16.0.8413.1000) y Outlook en la Web para Microsoft 365.


    \[[Conjunto de API: Vista previa de buzones](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Nivel de permiso mínimo:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Modo de Outlook aplicable:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Organizador de citas


    Más información sobre [los mensajes que pueden actuar](https://docs.microsoft.com/outlook/actionable-messages/invoke-add-in-from-actionable-message)<!-- -->.


    #### <a name="examples"></a>Ejemplos


    ```javascript

    // Get the initialization context (if present).

    Office.context.mailbox.item.getInitializationContextAsync(
        function(asyncResult) {
            if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
                if (asyncResult.value != null && asyncResult.value.length > 0) {
                    // The value is a string, parse to an object.
                    var context = JSON.parse(asyncResult.value);
                    // Do something with context.
                } else {
                    // Empty context, treat as no context.
                }
            } else {
                if (asyncResult.error.code == 9020) {
                    // GenericResponseError returned when there is no context.
                    // Treat as no context.
                } else {
                    // Handle the error.
                }
            }
        }
    );

    ```
  isPreview: true
  isDeprecated: false
  syntax:
    content: 'getInitializationContextAsync(options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<string>) => void): void;'
    parameters:
    - id: options
      description: 'Opcional. Un objeto literal que contiene una o más de las siguientes propiedades. `asyncContext`<!-- -->: los desarrolladores pueden proporcionar cualquier objeto al que deseen acceder en el método de devolución de llamada.'
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Opcional. Cuando se completa el método, se llama a la función pasada en `callback` el parámetro con un único parámetro de tipo `Office.AsyncResult`<!-- -->. Si se realiza correctamente, los datos de contexto de inicialización se proporcionan en la `asyncResult.value` propiedad como una cadena. Si no hay ningún contexto de inicialización, el objeto contendrá un objeto con su propiedad establecida en `asyncResult` `Error` `code` 9020 y su `name` propiedad establecida en `GenericResponseError`<!-- -->.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getItemIdAsync(options, callback)
  uid: outlook!Office.AppointmentCompose#getItemIdAsync:member(1)
  package: outlook!
  fullName: getItemIdAsync(options, callback)
  summary: >-
    Obtiene de forma asincrónica el identificador de un elemento guardado.


    Cuando se invoca, este método devuelve el identificador de elemento mediante el método de devolución de llamada.


    **Nota:** si el complemento llama a un elemento en modo de redacción (por ejemplo, para obtener una para usar con EWS o la API de REST), tenga en cuenta que cuando Outlook está en modo en caché, puede tardar algún tiempo antes de que el elemento se sincronice con el `getItemIdAsync` `itemId` servidor. Hasta que se sincronice el elemento, `itemId` el elemento no se reconoce y su uso devuelve un error.


    \[[Conjunto de API: Mailbox 1.8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Nivel de permiso mínimo:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Modo de Outlook aplicable:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Organizador de citas


    **Errores:**


    - `ItemNotSaved`<!-- -->: el identificador no se puede recuperar hasta que se guarde el elemento.
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getItemIdAsync(options: Office.AsyncContextOptions, callback: (asyncResult: Office.AsyncResult<string>) => void): void;'
    parameters:
    - id: options
      description: 'Un objeto literal que contiene una o más de las siguientes propiedades. `asyncContext`<!-- -->: los desarrolladores pueden proporcionar cualquier objeto al que deseen acceder en el método de devolución de llamada.'
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Cuando se completa el método, se llama a la función pasada en `callback` el parámetro con un único parámetro de tipo `Office.AsyncResult`<!-- -->.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getItemIdAsync(callback)
  uid: outlook!Office.AppointmentCompose#getItemIdAsync:member(2)
  package: outlook!
  fullName: getItemIdAsync(callback)
  summary: >-
    Obtiene de forma asincrónica el identificador de un elemento guardado.


    Cuando se invoca, este método devuelve el identificador de elemento mediante el método de devolución de llamada.


    **Nota:** si el complemento llama a un elemento en modo de redacción (por ejemplo, para obtener una para usar con EWS o la API de REST), tenga en cuenta que cuando Outlook está en modo en caché, puede tardar algún tiempo antes de que el elemento se sincronice con el `getItemIdAsync` `itemId` servidor. Hasta que se sincronice el elemento, `itemId` el elemento no se reconoce y su uso devuelve un error.


    \[[Conjunto de API: Mailbox 1.8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Nivel de permiso mínimo:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Modo de Outlook aplicable:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Organizador de citas


    **Errores:**


    - `ItemNotSaved`<!-- -->: el identificador no se puede recuperar hasta que se guarde el elemento.


    #### <a name="examples"></a>Ejemplos


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/85-tokens-and-service-calls/item-id-compose.yaml

    Office.context.mailbox.item.getItemIdAsync(function (result) {
        if (result.status !== Office.AsyncResultStatus.Succeeded) {
            console.error(`getItemIdAsync failed with message: ${result.error.message}`);
        } else {
            console.log(result.value);
        }
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getItemIdAsync(callback: (asyncResult: Office.AsyncResult<string>) => void): void;'
    parameters:
    - id: callback
      description: Cuando se completa el método, se llama a la función pasada en `callback` el parámetro con un único parámetro de tipo `Office.AsyncResult`<!-- -->.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getSelectedDataAsync(coercionType, options, callback)
  uid: outlook!Office.AppointmentCompose#getSelectedDataAsync:member(1)
  package: outlook!
  fullName: getSelectedDataAsync(coercionType, options, callback)
  summary: >-
    Devuelve asincrónicamente datos seleccionados desde el asunto o el cuerpo de un mensaje.


    Si no hay ninguna selección, pero el cursor está en el cuerpo o el asunto, el método devuelve una cadena vacía para los datos seleccionados. Si se selecciona un campo que no sea el cuerpo o el asunto, el método devuelve el error `InvalidSelection`.


    Para obtener acceso a los datos seleccionados desde el método de devolución de llamada, llame `asyncResult.value.data`<!-- -->. Para obtener acceso `source` a la propiedad de la que proviene la selección, llame `asyncResult.value.sourceProperty`<!-- -->, que será `body` o `subject`<!-- -->.


    \[[Conjunto de API: Mailbox 1.2](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Nivel de permisos mínimo:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Modo de Outlook aplicable:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Organizador de citas


    #### <a name="examples"></a>Ejemplos


    ```javascript

    // Get selected data.

    Office.initialize = function () {
        Office.context.mailbox.item.getSelectedDataAsync(Office.CoercionType.Text, {}, getCallback);
    };


    function getCallback(asyncResult) {
        var text = asyncResult.value.data;
        var prop = asyncResult.value.sourceProperty;

        console.log("Selected text in " + prop + ": " + text);
    }

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSelectedDataAsync(coercionType: Office.CoercionType | string, options: Office.AsyncContextOptions, callback: (asyncResult: Office.AsyncResult<any>) => void): void;'
    parameters:
    - id: coercionType
      description: Solicita un formato para los datos. If `Text`<!-- -->, el método devuelve el texto sin formato como una cadena, quitando las etiquetas HTML presentes. If `HTML`<!-- -->, el método devuelve el texto seleccionado, ya sea texto sin formato o HTML.
      type: <xref uid="office!Office.CoercionType:enum" /> | string
    - id: options
      description: 'Un objeto literal que contiene una o más de las siguientes propiedades. `asyncContext`<!-- -->: los desarrolladores pueden proporcionar cualquier objeto al que deseen acceder en el método de devolución de llamada.'
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Cuando se completa el método, se llama a la función pasada en `callback` el parámetro con un único parámetro de tipo `Office.AsyncResult`<!-- -->.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;any&gt;) =&gt; void'
    return:
      type: void
      description: Los datos seleccionados como una cadena con formato determinado por `coercionType`<!-- -->.
- name: getSelectedDataAsync(coercionType, callback)
  uid: outlook!Office.AppointmentCompose#getSelectedDataAsync:member(2)
  package: outlook!
  fullName: getSelectedDataAsync(coercionType, callback)
  summary: >-
    Devuelve asincrónicamente datos seleccionados desde el asunto o el cuerpo de un mensaje.


    Si no hay ninguna selección, pero el cursor está en el cuerpo o el asunto, el método devuelve una cadena vacía para los datos seleccionados. Si se selecciona un campo que no sea el cuerpo o el asunto, el método devuelve el error `InvalidSelection`.


    Para obtener acceso a los datos seleccionados desde el método de devolución de llamada, llame `asyncResult.value.data`<!-- -->. Para obtener acceso `source` a la propiedad de la que proviene la selección, llame `asyncResult.value.sourceProperty`<!-- -->, que será `body` o `subject`<!-- -->.


    \[[Conjunto de API: Mailbox 1.2](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Nivel de permisos mínimo:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Modo de Outlook aplicable:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Organizador de citas


    #### <a name="examples"></a>Ejemplos


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/20-item-body/get-selected-data.yaml

    Office.context.mailbox.item.getSelectedDataAsync(Office.CoercionType.Text, function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        var text = asyncResult.value.data;
        var prop = asyncResult.value.sourceProperty;
        console.log("Selected text in " + prop + ": " + text);
      } else {
        console.error(asyncResult.error);
      }
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSelectedDataAsync(coercionType: Office.CoercionType | string, callback: (asyncResult: Office.AsyncResult<string>) => void): void;'
    parameters:
    - id: coercionType
      description: Solicita un formato para los datos. If `Text`<!-- -->, el método devuelve el texto sin formato como una cadena, quitando las etiquetas HTML presentes. If `HTML`<!-- -->, el método devuelve el texto seleccionado, ya sea texto sin formato o HTML.
      type: <xref uid="office!Office.CoercionType:enum" /> | string
    - id: callback
      description: Cuando se completa el método, se llama a la función pasada en `callback` el parámetro con un único parámetro de tipo `Office.AsyncResult`<!-- -->.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    return:
      type: void
      description: Los datos seleccionados como una cadena con formato determinado por `coercionType`<!-- -->.
- name: getSharedPropertiesAsync(options, callback)
  uid: outlook!Office.AppointmentCompose#getSharedPropertiesAsync:member(1)
  package: outlook!
  fullName: getSharedPropertiesAsync(options, callback)
  summary: >-
    Obtiene las propiedades de una cita o un mensaje en una carpeta compartida, un calendario o un buzón.


    Para obtener más información sobre el uso de esta API, vea el [artículo de acceso delegado.](https://docs.microsoft.com/office/dev/add-ins/outlook/delegate-access)


    **Nota:** Este método no es compatible con Outlook en iOS o Android.


    \[[Conjunto de API: Mailbox 1.8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Nivel de permiso mínimo:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Modo de Outlook aplicable:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Organizador de citas


    #### <a name="examples"></a>Ejemplos


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/65-delegates-and-shared-folders/get-shared-properties.yaml

    if (!Office.context.mailbox.item.getSharedPropertiesAsync) {
      console.error("Try this sample on an appointment from a shared folder.");
      return;
    }


    Office.context.mailbox.getCallbackTokenAsync({ isRest: true }, function(result) {
      if (result.status === Office.AsyncResultStatus.Succeeded && result.value !== "") {
        Office.context.mailbox.item.getSharedPropertiesAsync(
          {
            // Pass auth token along.
            asyncContext: result.value
          },
          function(result2) {
            let sharedProperties = result2.value;
            let delegatePermissions = sharedProperties.delegatePermissions;

            // Determine if user has the appropriate permission to do the operation.
            if ((delegatePermissions & Office.MailboxEnums.DelegatePermissions.Read) != 0) {
              var ewsId = Office.context.mailbox.item.itemId;
              var restId = Office.context.mailbox.convertToRestId(ewsId, Office.MailboxEnums.RestVersion.v2_0);
              let rest_url =
                sharedProperties.targetRestUrl + "/v2.0/users/" + sharedProperties.targetMailbox + "/events/" + restId;

              $.ajax({
                url: rest_url,
                dataType: "json",
                headers: { Authorization: "Bearer " + result2.asyncContext }
              })
                .done(function(response) {
                  console.log(response);
                })
                .fail(function(error) {
                  console.error(error);
                });
            }
          }
        );
      }
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSharedPropertiesAsync(options: Office.AsyncContextOptions, callback: (asyncResult: Office.AsyncResult<SharedProperties>) => void): void;'
    parameters:
    - id: options
      description: 'Un objeto literal que contiene una o más de las siguientes propiedades. `asyncContext`<!-- -->: los desarrolladores pueden proporcionar cualquier objeto al que deseen acceder en el método de devolución de llamada.'
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Cuando se completa el método, se llama a la función pasada en `callback` el parámetro con un único parámetro de tipo `Office.AsyncResult`<!-- -->. La `value` propiedad del resultado son las propiedades del elemento compartido.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;<xref uid="outlook!Office.SharedProperties:interface" />&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getSharedPropertiesAsync(callback)
  uid: outlook!Office.AppointmentCompose#getSharedPropertiesAsync:member(2)
  package: outlook!
  fullName: getSharedPropertiesAsync(callback)
  summary: >-
    Obtiene las propiedades de un mensaje o cita en una carpeta compartida, calendario o buzón de correo.


    Para obtener más información sobre el uso de esta API, vea el [artículo de acceso delegado.](https://docs.microsoft.com/office/dev/add-ins/outlook/delegate-access)


    **Nota:** Este método no es compatible con Outlook en iOS o Android.


    \[[Conjunto de API: Mailbox 1.8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Nivel de permiso mínimo:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Modo de Outlook aplicable:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Organizador de citas


    #### <a name="examples"></a>Ejemplos


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/65-delegates-and-shared-folders/get-shared-properties.yaml

    if (!Office.context.mailbox.item.getSharedPropertiesAsync) {
      console.error("Try this sample on an item from a shared folder.");
      return;
    }


    Office.context.mailbox.item.getSharedPropertiesAsync(function(result) {
      console.log(result.value);
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSharedPropertiesAsync(callback: (asyncResult: Office.AsyncResult<SharedProperties>) => void): void;'
    parameters:
    - id: callback
      description: Cuando se completa el método, se llama a la función que se pasa en el parámetro de devolución de llamada con un único parámetro de tipo `Office.AsyncResult`<!-- -->. La `value` propiedad del resultado son las propiedades del elemento compartido.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;<xref uid="outlook!Office.SharedProperties:interface" />&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: isClientSignatureEnabledAsync(options, callback)
  uid: outlook!Office.AppointmentCompose#isClientSignatureEnabledAsync:member(1)
  package: outlook!
  fullName: isClientSignatureEnabledAsync(options, callback)
  summary: >-
    Obtiene si la firma de cliente está habilitada.


    Para los clientes enriquecidos de Windows y Mac, la llamada API debe devolverse si la firma predeterminada para nuevos mensajes, respuestas o reenvíos está establecida en una plantilla para la cuenta de Outlook de `true` envío. Para Outlook en la Web, la llamada API debe `true` devolverse si la firma está habilitada para los tipos de redacción `newMail`<!-- -->, `reply`<!-- -->, o `forward`<!-- -->. Si la configuración se establece en "(ninguno)" en clientes enriquecidos de Mac o Windows o está deshabilitada en Outlook en la Web, la llamada API debe devolverse `false`<!-- -->.


    \[[Conjunto de API: Vista previa de buzón](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Nivel de permiso mínimo:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Modo de Outlook aplicable:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Organizador de citas


    #### <a name="examples"></a>Ejemplos


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/99-preview-apis/work-with-client-signatures.yaml

    // Check if the client signature is currently enabled.

    Office.context.mailbox.item.isClientSignatureEnabledAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("isClientSignatureEnabledAsync succeeded with result: " + asyncResult.value);
      } else {
        console.error(asyncResult.error);
      }
    });

    ```
  isPreview: true
  isDeprecated: false
  syntax:
    content: 'isClientSignatureEnabledAsync(options: Office.AsyncContextOptions, callback: (asyncResult: Office.AsyncResult<boolean>) => void): void;'
    parameters:
    - id: options
      description: 'Un objeto literal que contiene una o más de las siguientes propiedades. `asyncContext`<!-- -->: los desarrolladores pueden proporcionar cualquier objeto al que deseen acceder en el método de devolución de llamada.'
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Cuando se completa el método, se llama a la función pasada en `callback` el parámetro con un único parámetro de tipo `Office.AsyncResult`<!-- -->.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;boolean&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: isClientSignatureEnabledAsync(callback)
  uid: outlook!Office.AppointmentCompose#isClientSignatureEnabledAsync:member(2)
  package: outlook!
  fullName: isClientSignatureEnabledAsync(callback)
  summary: >-
    Obtiene si la firma de cliente está habilitada.


    Para los clientes enriquecidos de Windows y Mac, la llamada API debe devolverse si la firma predeterminada para nuevos mensajes, respuestas o reenvíos está establecida en una plantilla para la cuenta de Outlook de `true` envío. Para Outlook en la Web, la llamada API debe `true` devolverse si la firma está habilitada para los tipos de redacción `newMail`<!-- -->, `reply`<!-- -->, o `forward`<!-- -->. Si la configuración se establece en "(ninguno)" en clientes enriquecidos de Mac o Windows o está deshabilitada en Outlook en la Web, la llamada API debe devolverse `false`<!-- -->.


    \[[Conjunto de API: Vista previa de buzón](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Nivel de permisos mínimo:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Modo de Outlook aplicable:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Organizador de citas
  isPreview: true
  isDeprecated: false
  syntax:
    content: 'isClientSignatureEnabledAsync(callback: (asyncResult: Office.AsyncResult<boolean>) => void): void;'
    parameters:
    - id: callback
      description: Cuando se completa el método, se llama a la función pasada en `callback` el parámetro con un único parámetro de tipo `Office.AsyncResult`<!-- -->.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;boolean&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: loadCustomPropertiesAsync(callback, userContext)
  uid: outlook!Office.AppointmentCompose#loadCustomPropertiesAsync:member(1)
  package: outlook!
  fullName: loadCustomPropertiesAsync(callback, userContext)
  summary: >-
    Carga de forma asincrónica las propiedades personalizadas de este complemento en el elemento seleccionado.


    Las propiedades personalizadas se almacenan como pares de clave/valor según la aplicación y el elemento. Este método devuelve un objeto `CustomProperties` en la devolución de llamada, que proporciona métodos para tener acceso a las propiedades personalizadas específicas del elemento y el complemento actual. Las propiedades personalizadas no están cifradas en el elemento, por lo que no debería usarse como almacenamiento seguro.


    Las propiedades personalizadas se proporcionan como un objeto `CustomProperties` en la propiedad `asyncResult.value`. Este objeto puede usarse para obtener, establecer y quitar las propiedades personalizadas del elemento, así como para guardar los cambios en la propiedad personalizada que se vuelve a establecer en el servidor.
  remarks: "**[Nivel de permisos mínimo:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`\n\n**[Modo de Outlook aplicable:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Organizador de citas\n\n#### <a name=\"examples\"></a>Ejemplos\n\n```javascript\n// The following example shows how to use the loadCustomPropertiesAsync method\n// to asynchronously load custom properties that are specific to the current item.\n// The example also shows how to use the saveAsync method to save these properties\n// back to the server. After loading the custom properties, the example uses the\n// get method to read the custom property myProp, the set method to write the\n// custom property otherProp, and then finally calls the saveAsync method to save\n// the custom properties.\nOffice.initialize = function () {\n    // Checks for the DOM to load using the jQuery ready function.\n    $(document).ready(function () {\n        // After the DOM is loaded, add-in-specific code can run.\n        var mailbox = Office.context.mailbox;\n        mailbox.item.loadCustomPropertiesAsync(customPropsCallback);\n    });\n};\n\nfunction customPropsCallback(asyncResult) {\n    var customProps = asyncResult.value;\n    var myProp = customProps.get(\"myProp\");\n\n    customProps.set(\"otherProp\", \"value\");\n    customProps.saveAsync(saveCallback);\n}\n\nfunction saveCallback(asyncResult) {\n}\n```\n```javascript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/15-item-custom-properties/load-set-get-save.yaml\nOffice.context.mailbox.item.loadCustomPropertiesAsync(function (result) {\n  if (result.status === Office.AsyncResultStatus.Succeeded) {\n    console.log(\"Loaded following custom properties:\");\n    customProps = result.value;\n    var dataKey = Object.keys(customProps)[0];\n    var data = customProps[dataKey];\n    for (var propertyName in data)\n    {\n      var propertyValue = data[propertyName];\n      console.log(`${propertyName}: ${propertyValue}`);\n    }              \n  }\n  else {\n    console.error(`loadCustomPropertiesAsync failed with message ${result.error.message}`);\n  }\n});\n```"
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'loadCustomPropertiesAsync(callback: (asyncResult: Office.AsyncResult<CustomProperties>) => void, userContext?: any): void;'
    parameters:
    - id: callback
      description: Cuando se completa el método, se llama a la función pasada en `callback` el parámetro con un único parámetro de tipo `Office.AsyncResult`<!-- -->.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;<xref uid="outlook!Office.CustomProperties:interface" />&gt;) =&gt; void'
    - id: userContext
      description: Opcional. Los desarrolladores pueden proporcionar cualquier objeto al que quieran obtener acceso en la función de devolución de llamada. A este objeto se puede acceder mediante la propiedad `asyncResult.asyncContext` en la función de devolución de llamada.
      type: any
    return:
      type: void
      description: ''
- name: removeAttachmentAsync(attachmentId, options, callback)
  uid: outlook!Office.AppointmentCompose#removeAttachmentAsync:member(1)
  package: outlook!
  fullName: removeAttachmentAsync(attachmentId, options, callback)
  summary: >-
    Quita los datos adjuntos de un mensaje o cita.


    El método `removeAttachmentAsync` quita del elemento los datos adjuntos con el identificador especificado. Como práctica recomendada, debe usar el identificador de datos adjuntos para quitar datos adjuntos solo si la misma aplicación de correo ha agregado los datos adjuntos en la misma sesión. En Outlook en la Web y dispositivos móviles, el identificador de datos adjuntos solo es válido en la misma sesión. Una sesión se ha terminado cuando el usuario cierra la aplicación o si el usuario comienza a redactar un formulario en línea, a continuación, se abre el formulario para continuar en una ventana independiente.


    \[[Conjunto de API: Mailbox 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Nivel de permiso mínimo:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadWriteItem`


    **[Modo de Outlook aplicable:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Organizador de citas


    **Errores:**


    - `InvalidAttachmentId`<!-- -->: el identificador de datos adjuntos no existe.


    #### <a name="examples"></a>Ejemplos


    ```javascript

    // The following code removes an attachment with an identifier of '0'.

    Office.context.mailbox.item.removeAttachmentAsync(
        '0',
        { asyncContext : null },
        function (asyncResult)
        {
            console.log(asyncResult.status);
        }
    );

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/40-attachments/attachments-compose.yaml

    Office.context.mailbox.item.removeAttachmentAsync(
        $("#attachmentId").val(),
        { asyncContext : null },
        function(result)
        {
            if (result.status !== Office.AsyncResultStatus.Succeeded) {
                console.error(`${result.error.message}`);
            } else {
                console.log(`Attachment removed successfully.`);
            }
        }
    );

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'removeAttachmentAsync(attachmentId: string, options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
    parameters:
    - id: attachmentId
      description: El identificador de los datos adjuntos para quitar. La longitud máxima de la cadena `attachmentId` es de 200 caracteres en Outlook en la Web y en Windows.
      type: string
    - id: options
      description: 'Opcional. Un objeto literal que contiene una o más de las siguientes propiedades. `asyncContext`<!-- -->: los desarrolladores pueden proporcionar cualquier objeto al que deseen acceder en el método de devolución de llamada.'
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Opcional. Cuando se completa el método, se llama a la función pasada en `callback` el parámetro con un único parámetro de tipo `Office.AsyncResult`<!-- -->. Si se produce un error en la eliminación de los datos adjuntos, la propiedad `asyncResult.error` contendrá un código de error con el motivo del error.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: removeHandlerAsync(eventType, options, callback)
  uid: outlook!Office.AppointmentCompose#removeHandlerAsync:member(1)
  package: outlook!
  fullName: removeHandlerAsync(eventType, options, callback)
  summary: >-
    Elimina el controlador de eventos de un tpo de evento admitido. **Nota:** Los eventos solo están disponibles con el panel de tareas.


    Consulte la sección eventos del modelo [de objetos item](https://docs.microsoft.com/office/dev/add-ins/reference/objectmodel/preview-requirement-set/office.context.mailbox.item#events) para ver los eventos admitidos.


    \[[Conjunto de API: Mailbox 1.7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Nivel de permiso mínimo:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


    **[Modo de Outlook aplicable:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Organizador de citas
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'removeHandlerAsync(eventType: Office.EventType | string, options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
    parameters:
    - id: eventType
      description: El evento que debe revocar el controlador.
      type: <xref uid="office!Office.EventType:enum" /> | string
    - id: options
      description: 'Opcional. Un objeto literal que contiene una o más de las siguientes propiedades. `asyncContext`<!-- -->: los desarrolladores pueden proporcionar cualquier objeto al que deseen acceder en el método de devolución de llamada.'
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Opcional. Cuando se completa el método, se llama a la función que se pasa en `callback` el parámetro con un único parámetro. `asyncResult`<!-- -->, que es un `Office.AsyncResult` objeto.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: saveAsync(options, callback)
  uid: outlook!Office.AppointmentCompose#saveAsync:member(1)
  package: outlook!
  fullName: saveAsync(options, callback)
  summary: >-
    Guarda un elemento de forma asincrónica.


    Cuando se invoca, este método guarda el mensaje actual como borrador y devuelve el identificador de elemento a través del método de devolución de llamada. En el modo en línea de Outlook o en Outlook en la web, el elemento se guarda en el servidor. En modo en caché de Outlook, se guarda el elemento en la caché local.


    Dado que las citas no tienen ningún estado de borrador, si se llama a `saveAsync` en una cita en modo de redacción, el elemento se guardará como una cita normal en el calendario del usuario. Para las citas nuevas que todavía no se han guardado, no se enviará ninguna invitación. Si se guarda una cita existente, se enviará una actualización a los asistentes agregados o eliminados.


    **Nota:** Si el complemento llama a un elemento en modo de redacción para obtener un identificador de elemento para usarlo con EWS o la API de REST, tenga en cuenta que cuando Outlook está en modo en caché, puede tardar algún tiempo antes de que el elemento se sincronice realmente con el `saveAsync` servidor. Hasta que se sincronice el elemento, el uso del identificador de elemento devolverá un error.


    **Nota:** En Outlook para Mac, solo la compilación 16.35.308 o posterior admite guardar una reunión. De lo contrario, `saveAsync` se produce un error en el método cuando se llama desde una reunión en modo redacción. Para obtener una solución alternativa, vea No se puede guardar una reunión [como borrador en Outlook para Mac mediante la API de Office JS](https://support.microsoft.com/help/4505745)<!-- -->.


    \[[Conjunto de API: Mailbox 1.3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Nivel de permisos mínimo:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadWriteItem`


    **[Modo de Outlook aplicable:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Organizador de citas


    **Errores:**


    - `InvalidAttachmentId`<!-- -->: el identificador de datos adjuntos no existe.


    #### <a name="examples"></a>Ejemplos


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/25-item-save-and-close/save.yaml

    Office.context.mailbox.item.saveAsync(function (result) {
      if (result.status === Office.AsyncResultStatus.Succeeded) {
        console.log(`saveAsync succeeded, itemId is ${result.value}`);
      }
      else {
        console.error(`saveAsync failed with message ${result.error.message}`);
      }
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'saveAsync(options: Office.AsyncContextOptions, callback: (asyncResult: Office.AsyncResult<string>) => void): void;'
    parameters:
    - id: options
      description: 'Un objeto literal que contiene una o más de las siguientes propiedades. `asyncContext`<!-- -->: los desarrolladores pueden proporcionar cualquier objeto al que deseen acceder en el método de devolución de llamada.'
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Cuando se completa el método, se llama a la función pasada en `callback` el parámetro con un único parámetro de tipo `Office.AsyncResult`<!-- -->.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: saveAsync(callback)
  uid: outlook!Office.AppointmentCompose#saveAsync:member(2)
  package: outlook!
  fullName: saveAsync(callback)
  summary: >-
    Guarda un elemento de forma asincrónica.


    Cuando se invoca, este método guarda el mensaje actual como borrador y devuelve el identificador de elemento a través del método de devolución de llamada. En el modo en línea de Outlook o en Outlook en la web, el elemento se guarda en el servidor. En modo en caché de Outlook, se guarda el elemento en la caché local.


    Dado que las citas no tienen ningún estado de borrador, si se llama a `saveAsync` en una cita en modo de redacción, el elemento se guardará como una cita normal en el calendario del usuario. Para las citas nuevas que todavía no se han guardado, no se enviará ninguna invitación. Si se guarda una cita existente, se enviará una actualización a los asistentes agregados o eliminados.


    **Nota:** Si el complemento llama a un elemento en modo de redacción para obtener un identificador de elemento para usarlo con EWS o la API de REST, tenga en cuenta que cuando Outlook está en modo en caché, puede tardar algún tiempo antes de que el elemento se sincronice realmente con el `saveAsync` servidor. Hasta que se sincronice el elemento, el uso del identificador de elemento devolverá un error.


    **Nota:** En Outlook para Mac, solo la compilación 16.35.308 o posterior admite guardar una reunión. De lo contrario, `saveAsync` se produce un error en el método cuando se llama desde una reunión en modo redacción. Para obtener una solución alternativa, vea No se puede guardar una reunión [como borrador en Outlook para Mac mediante la API de Office JS](https://support.microsoft.com/help/4505745)<!-- -->.


    \[[Conjunto de API: Mailbox 1.3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Nivel de permiso mínimo:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadWriteItem`


    **[Modo de Outlook aplicable:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Organizador de citas


    **Errores:**


    - `InvalidAttachmentId`<!-- -->: el identificador de datos adjuntos no existe.


    #### <a name="examples"></a>Ejemplos


    ```javascript

    Office.context.mailbox.item.saveAsync(
        function callback(result) {
            // Process the result.
        });

    // The following is an example of the

    // `result` parameter passed to the

    // callback function. The `value`

    // property contains the item ID of

    // the item.

    {
        "value": "AAMkADI5...AAA=",
        "status": "succeeded"
    }

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'saveAsync(callback: (asyncResult: Office.AsyncResult<string>) => void): void;'
    parameters:
    - id: callback
      description: Cuando se completa el método, se llama a la función pasada en el parámetro de devolución de llamada con un único parámetro de tipo `Office.AsyncResult`<!-- -->.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: setSelectedDataAsync(data, options, callback)
  uid: outlook!Office.AppointmentCompose#setSelectedDataAsync:member(1)
  package: outlook!
  fullName: setSelectedDataAsync(data, options, callback)
  summary: >-
    Inserta asincrónicamente datos en el cuerpo o el asunto de un mensaje.


    El método `setSelectedDataAsync` inserta la cadena especificada en la posición del cursor en el asunto o el cuerpo del elemento, o si se selecciona texto en el editor, reemplaza el texto seleccionado. Si el cursor no está en el cuerpo o el campo del asunto, se devuelve un error. Después de la inserción, el cursor se coloca al final del contenido insertado.


    \[[Conjunto de API: Mailbox 1.2](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Nivel de permiso mínimo:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadWriteItem`


    **[Modo de Outlook aplicable:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Organizador de citas


    **Errores:**


    - `InvalidAttachmentId`<!-- -->: el identificador de datos adjuntos no existe.


    #### <a name="examples"></a>Ejemplos


    ```javascript

    Office.context.mailbox.item.setSelectedDataAsync("<b>Hello World!</b>", { coercionType : "html" });

    ```

    ```javascript

    Office.context.mailbox.item.setSelectedDataAsync("Hello World!");

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/20-item-body/set-selected-data.yaml

    Office.context.mailbox.item.setSelectedDataAsync("Replaced", function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        console.log("Selected text has been updated successfully.");
      } else {
        console.error(asyncResult.error);
      }
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setSelectedDataAsync(data: string, options?: Office.AsyncContextOptions & CoercionTypeOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
    parameters:
    - id: data
      description: Datos que se van a insertar. Los datos no deben superar 1.000.000 de caracteres. Si se pasan más de 1.000.000 de caracteres, se produce una excepción `ArgumentOutOfRange`.
      type: string
    - id: options
      description: 'Opcional. Un objeto literal que contiene una o más de las siguientes propiedades. `asyncContext`<!-- -->: los desarrolladores pueden proporcionar cualquier objeto al que deseen acceder en el método de devolución de llamada. `coercionType`<!-- -->: si el texto, el estilo actual se aplica en Outlook en la Web y Windows. Si el campo es un editor de HTML, se insertan solo los datos de texto, aunque los datos sean HTML. Si html y el campo admiten HTML (el asunto no), el estilo actual se aplica en Outlook en la Web y el estilo predeterminado se aplica en Outlook en clientes de escritorio. Si el campo es un campo de texto, se devuelve un error `InvalidDataFormat`. Si `coercionType` no está establecido, el resultado depende del campo: si el campo es HTML, se usa HTML; si el campo es texto, se usa texto sin formato.'
      type: <xref uid="office!Office.AsyncContextOptions:interface" /> & <xref uid="outlook!Office.CoercionTypeOptions:interface" />
    - id: callback
      description: Opcional. Cuando se completa el método, se llama a la función pasada en `callback` el parámetro con un único parámetro de tipo `Office.AsyncResult`<!-- -->.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
extends: <xref uid="outlook!Office.Appointment:interface" />
metadata:
  ms.openlocfilehash: a725f98a5338c3b84422909c091cb1d144cd673c
  ms.sourcegitcommit: 9dba9247601805ad821e7a7260ac418e566786b7
  ms.translationtype: MT
  ms.contentlocale: es-ES
  ms.lasthandoff: 02/10/2021
  ms.locfileid: "50173261"
