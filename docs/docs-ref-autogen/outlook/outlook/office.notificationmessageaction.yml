### YamlMime:TSType
name: Office.NotificationMessageAction
uid: outlook!Office.NotificationMessageAction:interface
package: outlook!
fullName: Office.NotificationMessageAction
summary: >-
  Definición de la acción de un mensaje de notificación.


  **Importante:** En la versión moderna de Outlook en la Web, el `NotificationMessageAction` objeto solo está disponible en modo redacción.


  \[[Conjunto de API: Vista previa de buzón](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
remarks: >-
  **[Nivel de permisos mínimo:](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**`ReadItem`


  **[Modo de Outlook aplicable:](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->** Redacción o lectura


  #### <a name="examples"></a>Ejemplos


  ```javascript

  // Define notification.

  const insightMessage = {
      type: Office.MailboxEnums.ItemNotificationMessageType.InsightMessage,
      message: "This is an insight notification",
      icon: "Icon.80x80",
      actions: [{
          actionText: "Open insight",
          actionType: Office.MailboxEnums.ActionType.ShowTaskPane,
          commandId: "msgComposeOpenPaneButton",
          contextData: JSON.stringify({a: "aValue", b: "bValue"})
      }]
  };


  // Show notification.

  Office.context.mailbox.item.notificationMessages.replaceAsync("messageKey", insightMessage, (result) => {
      console.log("Added notification:");
      console.log(result);
  });


  // Retrieve contextData.

  // IMPORTANT: At present, this only works in Outlook on Windows.

  Office.context.mailbox.item.getInitializationContextAsync(function (asyncResult) {
      console.log("Initialization context:");
      console.log(asyncResult);

      // Note: Use JSON.parse(asyncResult.value) to read the result. Example:
      var contextData = JSON.parse(asyncResult.value);
      console.log("a:")
      console.log(contextData.a);
  });

  ```
isPreview: true
isDeprecated: false
type: interface
properties:
- name: actionText
  uid: outlook!Office.NotificationMessageAction#actionText:member
  package: outlook!
  fullName: actionText
  summary: Texto del vínculo de acción.
  remarks: ''
  isPreview: true
  isDeprecated: false
  syntax:
    content: 'actionText: string;'
    return:
      type: string
- name: actionType
  uid: outlook!Office.NotificationMessageAction#actionType:member
  package: outlook!
  fullName: actionType
  summary: Tipo de acción que se va a realizar. `ActionType.ShowTaskPane` es la única acción admitida.
  remarks: ''
  isPreview: true
  isDeprecated: false
  syntax:
    content: 'actionType: string | MailboxEnums.ActionType;'
    return:
      type: string | <xref uid="outlook!Office.MailboxEnums.ActionType:enum" />
- name: commandId
  uid: outlook!Office.NotificationMessageAction#commandId:member
  package: outlook!
  fullName: commandId
  summary: Botón definido en el manifiesto basado en el tipo de elemento.
  remarks: ''
  isPreview: true
  isDeprecated: false
  syntax:
    content: 'commandId: string;'
    return:
      type: string
- name: contextData
  uid: outlook!Office.NotificationMessageAction#contextData:member
  package: outlook!
  fullName: contextData
  summary: >-
    Cualquier dato JSON que el botón necesite pasar. Estos datos se pueden recuperar llamando `item.getInitializationContextAsync`<!-- -->.


    **Importante:** En Outlook en la Web, la capacidad de recuperar `contextData` aún no está disponible.
  remarks: ''
  isPreview: true
  isDeprecated: false
  syntax:
    content: 'contextData: any;'
    return:
      type: any
metadata:
  ms.openlocfilehash: 6a2b532a355cd539ba93458717175b4f2904c3ea
  ms.sourcegitcommit: 8eb514f1a5760c86e970fb5a4c10eac1b0c06b93
  ms.translationtype: MT
  ms.contentlocale: es-ES
  ms.lasthandoff: 02/06/2021
  ms.locfileid: "50126653"
